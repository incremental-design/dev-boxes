(()=>{var t={657:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=["Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","BigInt64Array","BigUint64Array"],r=["Function","Generator","AsyncGenerator","GeneratorFunction","AsyncGeneratorFunction","AsyncFunction","Observable","Array","Buffer","Object","RegExp","Date","Error","Map","Set","WeakMap","WeakSet","ArrayBuffer","SharedArrayBuffer","DataView","Promise","URL","HTMLElement",...s],i=["null","undefined","string","number","bigint","boolean","symbol"];function o(t){return e=>typeof e===t}const{toString:n}=Object.prototype,a=t=>{const e=n.call(t).slice(8,-1);return/HTML\w+Element/.test(e)&&c.domElement(t)?"HTMLElement":(s=e,r.includes(s)?e:void 0);var s},h=t=>e=>a(e)===t;function c(t){if(null===t)return"null";switch(typeof t){case"undefined":return"undefined";case"string":return"string";case"number":return"number";case"boolean":return"boolean";case"function":return"Function";case"bigint":return"bigint";case"symbol":return"symbol"}if(c.observable(t))return"Observable";if(c.array(t))return"Array";if(c.buffer(t))return"Buffer";const e=a(t);if(e)return e;if(t instanceof String||t instanceof Boolean||t instanceof Number)throw new TypeError("Please don't use object wrappers for primitive types");return"Object"}c.undefined=o("undefined"),c.string=o("string");const u=o("number");c.number=t=>u(t)&&!c.nan(t),c.bigint=o("bigint"),c.function_=o("function"),c.null_=t=>null===t,c.class_=t=>c.function_(t)&&t.toString().startsWith("class "),c.boolean=t=>!0===t||!1===t,c.symbol=o("symbol"),c.numericString=t=>c.string(t)&&!c.emptyStringOrWhitespace(t)&&!Number.isNaN(Number(t)),c.array=(t,e)=>!!Array.isArray(t)&&(!c.function_(e)||t.every(e)),c.buffer=t=>{var e,s,r,i;return null!==(i=null===(r=null===(s=null===(e=t)||void 0===e?void 0:e.constructor)||void 0===s?void 0:s.isBuffer)||void 0===r?void 0:r.call(s,t))&&void 0!==i&&i},c.nullOrUndefined=t=>c.null_(t)||c.undefined(t),c.object=t=>!c.null_(t)&&("object"==typeof t||c.function_(t)),c.iterable=t=>{var e;return c.function_(null===(e=t)||void 0===e?void 0:e[Symbol.iterator])},c.asyncIterable=t=>{var e;return c.function_(null===(e=t)||void 0===e?void 0:e[Symbol.asyncIterator])},c.generator=t=>c.iterable(t)&&c.function_(t.next)&&c.function_(t.throw),c.asyncGenerator=t=>c.asyncIterable(t)&&c.function_(t.next)&&c.function_(t.throw),c.nativePromise=t=>h("Promise")(t),c.promise=t=>c.nativePromise(t)||(t=>{var e,s;return c.function_(null===(e=t)||void 0===e?void 0:e.then)&&c.function_(null===(s=t)||void 0===s?void 0:s.catch)})(t),c.generatorFunction=h("GeneratorFunction"),c.asyncGeneratorFunction=t=>"AsyncGeneratorFunction"===a(t),c.asyncFunction=t=>"AsyncFunction"===a(t),c.boundFunction=t=>c.function_(t)&&!t.hasOwnProperty("prototype"),c.regExp=h("RegExp"),c.date=h("Date"),c.error=h("Error"),c.map=t=>h("Map")(t),c.set=t=>h("Set")(t),c.weakMap=t=>h("WeakMap")(t),c.weakSet=t=>h("WeakSet")(t),c.int8Array=h("Int8Array"),c.uint8Array=h("Uint8Array"),c.uint8ClampedArray=h("Uint8ClampedArray"),c.int16Array=h("Int16Array"),c.uint16Array=h("Uint16Array"),c.int32Array=h("Int32Array"),c.uint32Array=h("Uint32Array"),c.float32Array=h("Float32Array"),c.float64Array=h("Float64Array"),c.bigInt64Array=h("BigInt64Array"),c.bigUint64Array=h("BigUint64Array"),c.arrayBuffer=h("ArrayBuffer"),c.sharedArrayBuffer=h("SharedArrayBuffer"),c.dataView=h("DataView"),c.directInstanceOf=(t,e)=>Object.getPrototypeOf(t)===e.prototype,c.urlInstance=t=>h("URL")(t),c.urlString=t=>{if(!c.string(t))return!1;try{return new URL(t),!0}catch(t){return!1}},c.truthy=t=>Boolean(t),c.falsy=t=>!t,c.nan=t=>Number.isNaN(t),c.primitive=t=>{return c.null_(t)||(e=typeof t,i.includes(e));var e},c.integer=t=>Number.isInteger(t),c.safeInteger=t=>Number.isSafeInteger(t),c.plainObject=t=>{if("[object Object]"!==n.call(t))return!1;const e=Object.getPrototypeOf(t);return null===e||e===Object.getPrototypeOf({})},c.typedArray=t=>{return e=a(t),s.includes(e);var e},c.arrayLike=t=>!c.nullOrUndefined(t)&&!c.function_(t)&&(t=>c.safeInteger(t)&&t>=0)(t.length),c.inRange=(t,e)=>{if(c.number(e))return t>=Math.min(0,e)&&t<=Math.max(e,0);if(c.array(e)&&2===e.length)return t>=Math.min(...e)&&t<=Math.max(...e);throw new TypeError(`Invalid range: ${JSON.stringify(e)}`)};const l=["innerHTML","ownerDocument","style","attributes","nodeValue"];c.domElement=t=>c.object(t)&&1===t.nodeType&&c.string(t.nodeName)&&!c.plainObject(t)&&l.every((e=>e in t)),c.observable=t=>{var e,s,r,i;return!!t&&(t===(null===(s=(e=t)[Symbol.observable])||void 0===s?void 0:s.call(e))||t===(null===(i=(r=t)["@@observable"])||void 0===i?void 0:i.call(r)))},c.nodeStream=t=>c.object(t)&&c.function_(t.pipe)&&!c.observable(t),c.infinite=t=>t===1/0||t===-1/0;const d=t=>e=>c.integer(e)&&Math.abs(e%2)===t;c.evenInteger=d(0),c.oddInteger=d(1),c.emptyArray=t=>c.array(t)&&0===t.length,c.nonEmptyArray=t=>c.array(t)&&t.length>0,c.emptyString=t=>c.string(t)&&0===t.length,c.nonEmptyString=t=>c.string(t)&&t.length>0,c.emptyStringOrWhitespace=t=>c.emptyString(t)||(t=>c.string(t)&&!/\S/.test(t))(t),c.emptyObject=t=>c.object(t)&&!c.map(t)&&!c.set(t)&&0===Object.keys(t).length,c.nonEmptyObject=t=>c.object(t)&&!c.map(t)&&!c.set(t)&&Object.keys(t).length>0,c.emptySet=t=>c.set(t)&&0===t.size,c.nonEmptySet=t=>c.set(t)&&t.size>0,c.emptyMap=t=>c.map(t)&&0===t.size,c.nonEmptyMap=t=>c.map(t)&&t.size>0;const p=(t,e,s)=>{if(!c.function_(e))throw new TypeError(`Invalid predicate: ${JSON.stringify(e)}`);if(0===s.length)throw new TypeError("Invalid number of values");return t.call(s,e)};c.any=(t,...e)=>(c.array(t)?t:[t]).some((t=>p(Array.prototype.some,t,e))),c.all=(t,...e)=>p(Array.prototype.every,t,e);const f=(t,e,s)=>{if(!t)throw new TypeError(`Expected value which is \`${e}\`, received value of type \`${c(s)}\`.`)};e.assert={undefined:t=>f(c.undefined(t),"undefined",t),string:t=>f(c.string(t),"string",t),number:t=>f(c.number(t),"number",t),bigint:t=>f(c.bigint(t),"bigint",t),function_:t=>f(c.function_(t),"Function",t),null_:t=>f(c.null_(t),"null",t),class_:t=>f(c.class_(t),"Class",t),boolean:t=>f(c.boolean(t),"boolean",t),symbol:t=>f(c.symbol(t),"symbol",t),numericString:t=>f(c.numericString(t),"string with a number",t),array:(t,e)=>{f(c.array(t),"Array",t),e&&t.forEach(e)},buffer:t=>f(c.buffer(t),"Buffer",t),nullOrUndefined:t=>f(c.nullOrUndefined(t),"null or undefined",t),object:t=>f(c.object(t),"Object",t),iterable:t=>f(c.iterable(t),"Iterable",t),asyncIterable:t=>f(c.asyncIterable(t),"AsyncIterable",t),generator:t=>f(c.generator(t),"Generator",t),asyncGenerator:t=>f(c.asyncGenerator(t),"AsyncGenerator",t),nativePromise:t=>f(c.nativePromise(t),"native Promise",t),promise:t=>f(c.promise(t),"Promise",t),generatorFunction:t=>f(c.generatorFunction(t),"GeneratorFunction",t),asyncGeneratorFunction:t=>f(c.asyncGeneratorFunction(t),"AsyncGeneratorFunction",t),asyncFunction:t=>f(c.asyncFunction(t),"AsyncFunction",t),boundFunction:t=>f(c.boundFunction(t),"Function",t),regExp:t=>f(c.regExp(t),"RegExp",t),date:t=>f(c.date(t),"Date",t),error:t=>f(c.error(t),"Error",t),map:t=>f(c.map(t),"Map",t),set:t=>f(c.set(t),"Set",t),weakMap:t=>f(c.weakMap(t),"WeakMap",t),weakSet:t=>f(c.weakSet(t),"WeakSet",t),int8Array:t=>f(c.int8Array(t),"Int8Array",t),uint8Array:t=>f(c.uint8Array(t),"Uint8Array",t),uint8ClampedArray:t=>f(c.uint8ClampedArray(t),"Uint8ClampedArray",t),int16Array:t=>f(c.int16Array(t),"Int16Array",t),uint16Array:t=>f(c.uint16Array(t),"Uint16Array",t),int32Array:t=>f(c.int32Array(t),"Int32Array",t),uint32Array:t=>f(c.uint32Array(t),"Uint32Array",t),float32Array:t=>f(c.float32Array(t),"Float32Array",t),float64Array:t=>f(c.float64Array(t),"Float64Array",t),bigInt64Array:t=>f(c.bigInt64Array(t),"BigInt64Array",t),bigUint64Array:t=>f(c.bigUint64Array(t),"BigUint64Array",t),arrayBuffer:t=>f(c.arrayBuffer(t),"ArrayBuffer",t),sharedArrayBuffer:t=>f(c.sharedArrayBuffer(t),"SharedArrayBuffer",t),dataView:t=>f(c.dataView(t),"DataView",t),urlInstance:t=>f(c.urlInstance(t),"URL",t),urlString:t=>f(c.urlString(t),"string with a URL",t),truthy:t=>f(c.truthy(t),"truthy",t),falsy:t=>f(c.falsy(t),"falsy",t),nan:t=>f(c.nan(t),"NaN",t),primitive:t=>f(c.primitive(t),"primitive",t),integer:t=>f(c.integer(t),"integer",t),safeInteger:t=>f(c.safeInteger(t),"integer",t),plainObject:t=>f(c.plainObject(t),"plain object",t),typedArray:t=>f(c.typedArray(t),"TypedArray",t),arrayLike:t=>f(c.arrayLike(t),"array-like",t),domElement:t=>f(c.domElement(t),"HTMLElement",t),observable:t=>f(c.observable(t),"Observable",t),nodeStream:t=>f(c.nodeStream(t),"Node.js Stream",t),infinite:t=>f(c.infinite(t),"infinite number",t),emptyArray:t=>f(c.emptyArray(t),"empty array",t),nonEmptyArray:t=>f(c.nonEmptyArray(t),"non-empty array",t),emptyString:t=>f(c.emptyString(t),"empty string",t),nonEmptyString:t=>f(c.nonEmptyString(t),"non-empty string",t),emptyStringOrWhitespace:t=>f(c.emptyStringOrWhitespace(t),"empty string or whitespace",t),emptyObject:t=>f(c.emptyObject(t),"empty object",t),nonEmptyObject:t=>f(c.nonEmptyObject(t),"non-empty object",t),emptySet:t=>f(c.emptySet(t),"empty set",t),nonEmptySet:t=>f(c.nonEmptySet(t),"non-empty set",t),emptyMap:t=>f(c.emptyMap(t),"empty map",t),nonEmptyMap:t=>f(c.nonEmptyMap(t),"non-empty map",t),evenInteger:t=>f(c.evenInteger(t),"even integer",t),oddInteger:t=>f(c.oddInteger(t),"odd integer",t),directInstanceOf:(t,e)=>f(c.directInstanceOf(t,e),"T",t),inRange:(t,e)=>f(c.inRange(t,e),"in range",t),any:(t,...e)=>f(c.any(t,...e),"predicate returns truthy for any value",e),all:(t,...e)=>f(c.all(t,...e),"predicate returns truthy for all values",e)},Object.defineProperties(c,{class:{value:c.class_},function:{value:c.function_},null:{value:c.null_}}),Object.defineProperties(e.assert,{class:{value:e.assert.class_},function:{value:e.assert.function_},null:{value:e.assert.null_}}),e.default=c,t.exports=c,t.exports.default=c,t.exports.assert=e.assert},81:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=s(1313),i=Number(process.versions.node.split(".")[0]),o=t=>{const e={start:Date.now(),socket:void 0,lookup:void 0,connect:void 0,secureConnect:void 0,upload:void 0,response:void 0,end:void 0,error:void 0,abort:void 0,phases:{wait:void 0,dns:void 0,tcp:void 0,tls:void 0,request:void 0,firstByte:void 0,download:void 0,total:void 0}};t.timings=e;const s=t=>{const s=t.emit.bind(t);t.emit=(r,...i)=>("error"===r&&(e.error=Date.now(),e.phases.total=e.error-e.start,t.emit=s),s(r,...i))};s(t),t.prependOnceListener("abort",(()=>{e.abort=Date.now(),(!e.response||i>=13)&&(e.phases.total=Date.now()-e.start)}));const o=t=>{e.socket=Date.now(),e.phases.wait=e.socket-e.start;const s=()=>{e.lookup=Date.now(),e.phases.dns=e.lookup-e.socket};t.prependOnceListener("lookup",s),r.default(t,{connect:()=>{e.connect=Date.now(),void 0===e.lookup&&(t.removeListener("lookup",s),e.lookup=e.connect,e.phases.dns=e.lookup-e.socket),e.phases.tcp=e.connect-e.lookup},secureConnect:()=>{e.secureConnect=Date.now(),e.phases.tls=e.secureConnect-e.connect}})};t.socket?o(t.socket):t.prependOnceListener("socket",o);const n=()=>{var t;e.upload=Date.now(),e.phases.request=e.upload-(null!=(t=e.secureConnect)?t:e.connect)};return("boolean"==typeof t.writableFinished?!t.writableFinished:!t.finished||0!==t.outputSize||t.socket&&0!==t.socket.writableLength)?t.prependOnceListener("finish",n):n(),t.prependOnceListener("response",(t=>{e.response=Date.now(),e.phases.firstByte=e.response-e.upload,t.timings=e,s(t),t.prependOnceListener("end",(()=>{e.end=Date.now(),e.phases.download=e.end-e.response,e.phases.total=e.end-e.start}))})),e};e.default=o,t.exports=o,t.exports.default=o},3266:(t,e,s)=>{"use strict";const{V4MAPPED:r,ADDRCONFIG:i,ALL:o,promises:{Resolver:n},lookup:a}=s(881),{promisify:h}=s(1669),c=s(2087),u=Symbol("cacheableLookupCreateConnection"),l=Symbol("cacheableLookupInstance"),d=Symbol("expires"),p="number"==typeof o,f=t=>{if(!t||"function"!=typeof t.createConnection)throw new Error("Expected an Agent instance as the first argument")},m=()=>{let t=!1,e=!1;for(const s of Object.values(c.networkInterfaces()))for(const r of s)if(!r.internal&&("IPv6"===r.family?e=!0:t=!0,t&&e))return{has4:t,has6:e};return{has4:t,has6:e}},g={ttl:!0},y={all:!0};class b{constructor({cache:t=new Map,maxTtl:e=1/0,fallbackDuration:s=3600,errorTtl:r=.15,resolver:i=new n,lookup:o=a}={}){if(this.maxTtl=e,this.errorTtl=r,this._cache=t,this._resolver=i,this._dnsLookup=h(o),this._resolver instanceof n?(this._resolve4=this._resolver.resolve4.bind(this._resolver),this._resolve6=this._resolver.resolve6.bind(this._resolver)):(this._resolve4=h(this._resolver.resolve4.bind(this._resolver)),this._resolve6=h(this._resolver.resolve6.bind(this._resolver))),this._iface=m(),this._pending={},this._nextRemovalTime=!1,this._hostnamesToFallback=new Set,s<1)this._fallback=!1;else{this._fallback=!0;const t=setInterval((()=>{this._hostnamesToFallback.clear()}),1e3*s);t.unref&&t.unref()}this.lookup=this.lookup.bind(this),this.lookupAsync=this.lookupAsync.bind(this)}set servers(t){this.clear(),this._resolver.setServers(t)}get servers(){return this._resolver.getServers()}lookup(t,e,s){if("function"==typeof e?(s=e,e={}):"number"==typeof e&&(e={family:e}),!s)throw new Error("Callback must be a function.");this.lookupAsync(t,e).then((t=>{e.all?s(null,t):s(null,t.address,t.family,t.expires,t.ttl)}),s)}async lookupAsync(t,e={}){"number"==typeof e&&(e={family:e});let s=await this.query(t);if(6===e.family){const t=s.filter((t=>6===t.family));e.hints&r&&(p&&e.hints&o||0===t.length)?(t=>{for(const e of t)6!==e.family&&(e.address=`::ffff:${e.address}`,e.family=6)})(s):s=t}else 4===e.family&&(s=s.filter((t=>4===t.family)));if(e.hints&i){const{_iface:t}=this;s=s.filter((e=>6===e.family?t.has6:t.has4))}if(0===s.length){const e=new Error(`cacheableLookup ENOTFOUND ${t}`);throw e.code="ENOTFOUND",e.hostname=t,e}return e.all?s:s[0]}async query(t){let e=await this._cache.get(t);if(!e){const s=this._pending[t];if(s)e=await s;else{const s=this.queryAndCache(t);this._pending[t]=s;try{e=await s}finally{delete this._pending[t]}}}return e=e.map((t=>({...t}))),e}async _resolve(t){const[e,s]=await Promise.all([this._resolve4(t,g),this._resolve6(t,g)].map((t=>(async t=>{try{return await t}catch(t){if("ENODATA"===t.code||"ENOTFOUND"===t.code)return[];throw t}})(t))));let r=0,i=0,o=0;const n=Date.now();for(const t of e)t.family=4,t.expires=n+1e3*t.ttl,r=Math.max(r,t.ttl);for(const t of s)t.family=6,t.expires=n+1e3*t.ttl,i=Math.max(i,t.ttl);return o=e.length>0?s.length>0?Math.min(r,i):r:i,{entries:[...e,...s],cacheTtl:o}}async _lookup(t){try{return{entries:await this._dnsLookup(t,{all:!0}),cacheTtl:0}}catch(t){return{entries:[],cacheTtl:0}}}async _set(t,e,s){if(this.maxTtl>0&&s>0){s=1e3*Math.min(s,this.maxTtl),e[d]=Date.now()+s;try{await this._cache.set(t,e,s)}catch(t){this.lookupAsync=async()=>{const e=new Error("Cache Error. Please recreate the CacheableLookup instance.");throw e.cause=t,e}}r=this._cache,Symbol.iterator in r&&this._tick(s)}var r}async queryAndCache(t){if(this._hostnamesToFallback.has(t))return this._dnsLookup(t,y);let e=await this._resolve(t);0===e.entries.length&&this._fallback&&(e=await this._lookup(t),0!==e.entries.length&&this._hostnamesToFallback.add(t));const s=0===e.entries.length?this.errorTtl:e.cacheTtl;return await this._set(t,e.entries,s),e.entries}_tick(t){const e=this._nextRemovalTime;(!e||t<e)&&(clearTimeout(this._removalTimeout),this._nextRemovalTime=t,this._removalTimeout=setTimeout((()=>{this._nextRemovalTime=!1;let t=1/0;const e=Date.now();for(const[s,r]of this._cache){const i=r[d];e>=i?this._cache.delete(s):i<t&&(t=i)}t!==1/0&&this._tick(t-e)}),t),this._removalTimeout.unref&&this._removalTimeout.unref())}install(t){if(f(t),u in t)throw new Error("CacheableLookup has been already installed");t[u]=t.createConnection,t[l]=this,t.createConnection=(e,s)=>("lookup"in e||(e.lookup=this.lookup),t[u](e,s))}uninstall(t){if(f(t),t[u]){if(t[l]!==this)throw new Error("The agent is not owned by this CacheableLookup instance");t.createConnection=t[u],delete t[u],delete t[l]}}updateInterfaceInfo(){const{_iface:t}=this;this._iface=m(),(t.has4&&!this._iface.has4||t.has6&&!this._iface.has6)&&this._cache.clear()}clear(t){t?this._cache.delete(t):this._cache.clear()}}t.exports=b,t.exports.default=b},490:(t,e,s)=>{"use strict";const{PassThrough:r}=s(2413);t.exports=t=>{t={...t};const{array:e}=t;let{encoding:s}=t;const i="buffer"===s;let o=!1;e?o=!(s||i):s=s||"utf8",i&&(s=null);const n=new r({objectMode:o});s&&n.setEncoding(s);let a=0;const h=[];return n.on("data",(t=>{h.push(t),o?a=h.length:a+=t.length})),n.getBufferedValue=()=>e?h:i?Buffer.concat(h,a):h.join(""),n.getBufferedLength=()=>a,n}},7769:(t,e,s)=>{"use strict";const{constants:r}=s(4293),i=s(4286),o=s(490);class n extends Error{constructor(){super("maxBuffer exceeded"),this.name="MaxBufferError"}}async function a(t,e){if(!t)return Promise.reject(new Error("Expected a stream"));e={maxBuffer:1/0,...e};const{maxBuffer:s}=e;let a;return await new Promise(((h,c)=>{const u=t=>{t&&a.getBufferedLength()<=r.MAX_LENGTH&&(t.bufferedData=a.getBufferedValue()),c(t)};a=i(t,o(e),(t=>{t?u(t):h()})),a.on("data",(()=>{a.getBufferedLength()>s&&u(new n)}))})),a.getBufferedValue()}t.exports=a,t.exports.default=a,t.exports.buffer=(t,e)=>a(t,{...e,encoding:"buffer"}),t.exports.array=(t,e)=>a(t,{...e,array:!0}),t.exports.MaxBufferError=n},3481:(t,e,s)=>{"use strict";const r=s(8614),i=s(8835),o=s(15),n=s(7769),a=s(6214),h=s(4259),c=s(5989),u=s(9715),l=s(4958);class d{constructor(t,e){if("function"!=typeof t)throw new TypeError("Parameter `request` must be a function");return this.cache=new l({uri:"string"==typeof e&&e,store:"string"!=typeof e&&e,namespace:"cacheable-request"}),this.createCacheableRequest(t)}createCacheableRequest(t){return(e,s)=>{let l;if("string"==typeof e)l=f(i.parse(e)),e={};else if(e instanceof i.URL)l=f(i.parse(e.toString())),e={};else{const[t,...s]=(e.path||"").split("?"),r=s.length>0?`?${s.join("?")}`:"";l=f({...e,pathname:t,search:r})}(e={headers:{},method:"GET",cache:!0,strictTtl:!1,automaticFailover:!1,...e,...p(l)}).headers=c(e.headers);const m=new r,g=o(i.format(l),{stripWWW:!1,removeTrailingSlash:!1,stripAuthentication:!1}),y=`${e.method}:${g}`;let b=!1,v=!1;const _=e=>{v=!0;let r,i=!1;const o=new Promise((t=>{r=()=>{i||(i=!0,t())}})),c=t=>{if(b&&!e.forceRefresh){t.status=t.statusCode;const s=a.fromObject(b.cachePolicy).revalidatedPolicy(e,t);if(!s.modified){const e=s.policy.responseHeaders();(t=new h(b.statusCode,e,b.body,b.url)).cachePolicy=s.policy,t.fromCache=!0}}let r;t.fromCache||(t.cachePolicy=new a(e,t,e),t.fromCache=!1),e.cache&&t.cachePolicy.storable()?(r=u(t),(async()=>{try{const s=n.buffer(t);if(await Promise.race([o,new Promise((e=>t.once("end",e)))]),i)return;const r=await s,a={cachePolicy:t.cachePolicy.toObject(),url:t.url,statusCode:t.fromCache?b.statusCode:t.statusCode,body:r};let h=e.strictTtl?t.cachePolicy.timeToLive():void 0;e.maxTtl&&(h=h?Math.min(h,e.maxTtl):e.maxTtl),await this.cache.set(y,a,h)}catch(t){m.emit("error",new d.CacheError(t))}})()):e.cache&&b&&(async()=>{try{await this.cache.delete(y)}catch(t){m.emit("error",new d.CacheError(t))}})(),m.emit("response",r||t),"function"==typeof s&&s(r||t)};try{const s=t(e,c);s.once("error",r),s.once("abort",r),m.emit("request",s)}catch(t){m.emit("error",new d.RequestError(t))}};return(async()=>{const t=async t=>{await Promise.resolve();const e=t.cache?await this.cache.get(y):void 0;if(void 0===e)return _(t);const r=a.fromObject(e.cachePolicy);if(r.satisfiesWithoutRevalidation(t)&&!t.forceRefresh){const t=r.responseHeaders(),i=new h(e.statusCode,t,e.body,e.url);i.cachePolicy=r,i.fromCache=!0,m.emit("response",i),"function"==typeof s&&s(i)}else b=e,t.headers=r.revalidationHeaders(t),_(t)},r=t=>m.emit("error",new d.CacheError(t));this.cache.once("error",r),m.on("response",(()=>this.cache.removeListener("error",r)));try{await t(e)}catch(t){e.automaticFailover&&!v&&_(e),m.emit("error",new d.CacheError(t))}})(),m}}}function p(t){const e={...t};return e.path=`${t.pathname||"/"}${t.search||""}`,delete e.pathname,delete e.search,e}function f(t){return{protocol:t.protocol,auth:t.auth,hostname:t.hostname||t.host||"localhost",port:t.port,pathname:t.pathname,search:t.search}}d.RequestError=class extends Error{constructor(t){super(t.message),this.name="RequestError",Object.assign(this,t)}},d.CacheError=class extends Error{constructor(t){super(t.message),this.name="CacheError",Object.assign(this,t)}},t.exports=d},260:t=>{"use strict";const e=["destroy","setTimeout","socket","headers","trailers","rawHeaders","statusCode","httpVersion","httpVersionMinor","httpVersionMajor","rawTrailers","statusMessage"];t.exports=(t,s)=>{const r=new Set(Object.keys(t).concat(e));for(const e of r)e in s||(s[e]="function"==typeof t[e]?t[e].bind(t):t[e])}},9715:(t,e,s)=>{"use strict";const r=s(2413).PassThrough,i=s(260);t.exports=t=>{if(!t||!t.pipe)throw new TypeError("Parameter `response` must be a response stream.");const e=new r;return i(t,e),t.pipe(e)}},346:(t,e,s)=>{"use strict";const{Transform:r,PassThrough:i}=s(2413),o=s(8761),n=s(6344);t.exports=t=>{const e=(t.headers["content-encoding"]||"").toLowerCase();if(!["gzip","deflate","br"].includes(e))return t;const s="br"===e;if(s&&"function"!=typeof o.createBrotliDecompress)return t.destroy(new Error("Brotli is not supported on Node.js < 12")),t;let a=!0;const h=new r({transform(t,e,s){a=!1,s(null,t)},flush(t){t()}}),c=new i({autoDestroy:!1,destroy(e,s){t.destroy(),s(e)}}),u=s?o.createBrotliDecompress():o.createUnzip();return u.once("error",(e=>{!a||t.readable?c.destroy(e):c.end()})),n(t,c),t.pipe(h).pipe(u).pipe(c),c}},1313:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=s(4016),i=(t,e)=>{let s;s="function"==typeof e?{connect:e}:e;const i="function"==typeof s.connect,o="function"==typeof s.secureConnect,n="function"==typeof s.close,a=()=>{i&&s.connect(),t instanceof r.TLSSocket&&o&&(t.authorized?s.secureConnect():t.authorizationError||t.once("secureConnect",s.secureConnect)),n&&t.once("close",s.close)};t.writable&&!t.connecting?a():t.connecting?t.once("connect",a):t.destroyed&&n&&s.close(t._hadError)};e.default=i,t.exports=i,t.exports.default=i},5710:(t,e)=>{"use strict";var s;Object.defineProperty(e,"__esModule",{value:!0}),e.HttpMethods=void 0,(s=e.HttpMethods||(e.HttpMethods={})).GET="GET",s.POST="POST",s.PUT="PUT",s.PATCH="PATCH",s.DELETE="DELETE"},2613:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(s(6610)),o=r(s(8330)),n=r(s(7300)),a=r(s(8150)),h=r(s(3401)),c=r(s(4224)),u=r(s(6647)),l=r(s(6708)),d=r(s(9766)),p=r(s(4358)),f=r(s(9752)),m=r(s(8292)),g=r(s(1084)),y=r(s(3989)),b=r(s(7612)),v=r(s(7762)),_=r(s(2034)),w=r(s(2114)),x=r(s(2260)),P=r(s(9450)),O=r(s(5957));e.default=function(t,e){void 0===e&&(e=10);var s=new i.default(t);this.account=new o.default(e,s),this.actions=new n.default(e,s),this.cdn=new a.default(e,s),this.certificates=new h.default(e,s),this.databases=new c.default(e,s),this.domains=new u.default(e,s),this.droplets=new l.default(e,s),this.firewalls=new d.default(e,s),this.floatingIPs=new p.default(e,s),this.images=new f.default(e,s),this.keys=new m.default(e,s),this.kubernetes=new g.default(e,s),this.loadBalancers=new y.default(e,s),this.projects=new b.default(e,s),this.regions=new v.default(e,s),this.reports=new _.default(e,s),this.sizes=new w.default(e,s),this.snapshots=new x.default(e,s),this.tags=new P.default(e,s),this.volumes=new O.default(e,s)}},8330:function(t,e,s){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s])})(t,e)},function(t,e){function s(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(s.prototype=e.prototype,new s)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(e,s){var r=t.call(this,e,s)||this;return r.baseOptions={actionPath:"account"},r}return i(e,t),e.prototype.get=function(){return this._execute(this.baseOptions)},e}(s(7693).BaseModule);e.default=o},7300:function(t,e,s){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s])})(t,e)},function(t,e){function s(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(s.prototype=e.prototype,new s)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(e,s){var r=t.call(this,e,s)||this;return r.basePath="actions",r}return i(e,t),e.prototype.get=function(t,e,s,r){void 0===e&&(e=!1),void 0===s&&(s=1),void 0===r&&(r=this.pageSize);var i=this._getBasePaginatedRequestOptions({actionPath:this.basePath,key:"actions",tagName:t,pageSize:r,page:s,includeAll:e});return this._execute(i)},e.prototype.getById=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)})},e}(s(7693).BaseModule);e.default=o},7693:function(t,e){"use strict";var s=this&&this.__assign||function(){return(s=Object.assign||function(t){for(var e,s=1,r=arguments.length;s<r;s++)for(var i in e=arguments[s])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0}),e.BaseModule=void 0;var r=function(){function t(t,e){this.pageSize=t,this.requestHelper=e}return t.prototype._getBasePaginatedRequestOptions=function(t){return{actionPath:t.actionPath,key:t.key,qs:s(s({},t.tagName&&{tag_name:t.tagName}),{per_page:t.pageSize||this.pageSize,page:t.page||1}),includeAll:t.includeAll||!1}},t.prototype._execute=function(t){return this.requestHelper.request(t)},t}();e.BaseModule=r},8150:function(t,e,s){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s])})(t,e)},function(t,e){function s(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(s.prototype=e.prototype,new s)});Object.defineProperty(e,"__esModule",{value:!0});var o=s(7693),n=s(5710),a=function(t){function e(e,s){var r=t.call(this,e,s)||this;return r.basePath="cdn/endpoints",r}return i(e,t),e.prototype.getAllEndpoints=function(t,e,s,r){void 0===e&&(e=!1),void 0===s&&(s=1),void 0===r&&(r=this.pageSize);var i=this._getBasePaginatedRequestOptions({actionPath:this.basePath,key:"endpoints",tagName:t,pageSize:r,page:s,includeAll:e});return this._execute(i)},e.prototype.getEndpointById=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)})},e.prototype.createEndpoint=function(t,e){return this._execute({actionPath:this.basePath,method:n.HttpMethods.POST,body:{origin:t,ttl:e}})},e.prototype.updateEndpointTtl=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t),method:n.HttpMethods.PUT,body:{ttl:e}})},e.prototype.deleteEndpoint=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t),method:n.HttpMethods.DELETE})},e.prototype.purgeEndpointCache=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/cache",method:n.HttpMethods.DELETE,body:{files:e}})},e}(o.BaseModule);e.default=a},3401:function(t,e,s){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s])})(t,e)},function(t,e){function s(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(s.prototype=e.prototype,new s)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,s=1,r=arguments.length;s<r;s++)for(var i in e=arguments[s])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var n=s(7693),a=s(5710),h=function(t){function e(e,s){var r=t.call(this,e,s)||this;return r.basePath="certificates",r.baseOptions={actionPath:r.basePath+"/"},r}return i(e,t),e.prototype.getAll=function(t,e,s,r){void 0===e&&(e=!1),void 0===s&&(s=1),void 0===r&&(r=this.pageSize);var i=this._getBasePaginatedRequestOptions({actionPath:this.basePath,key:"certificates",pageSize:r,tagName:t,page:s,includeAll:e});return this._execute(i)},e.prototype.create=function(t){return this._execute(o(o({},this.baseOptions),{method:a.HttpMethods.POST,body:t}))},e.prototype.getById=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)})},e.prototype.delete=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t),method:a.HttpMethods.DELETE})},e}(n.BaseModule);e.default=h},4224:function(t,e,s){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s])})(t,e)},function(t,e){function s(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(s.prototype=e.prototype,new s)});Object.defineProperty(e,"__esModule",{value:!0});var o=s(7693),n=s(5710),a=function(t){function e(e,s){var r=t.call(this,e,s)||this;return r.basePath="databases",r}return i(e,t),e.prototype.getAllClusters=function(t,e,s,r){void 0===e&&(e=!1),void 0===s&&(s=1),void 0===r&&(r=this.pageSize);var i=this._getBasePaginatedRequestOptions({actionPath:this.basePath,key:"databases",tagName:t,pageSize:r,page:s,includeAll:e});return this._execute(i)},e.prototype.createCluster=function(t){return this._execute({actionPath:this.basePath,method:n.HttpMethods.POST,body:t})},e.prototype.getClusterById=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)})},e.prototype.resizeCluster=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/resize",method:n.HttpMethods.PUT,body:e})},e.prototype.createUser=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/users",method:n.HttpMethods.POST,body:{name:e}})},e.prototype.deleteUser=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/users/"+encodeURIComponent(e),method:n.HttpMethods.DELETE})},e.prototype.getUser=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/users/"+encodeURIComponent(e)})},e.prototype.getAllUsers=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/users"})},e.prototype.addPool=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/pools",method:n.HttpMethods.POST,body:e})},e.prototype.getAllPools=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/pools"})},e.prototype.getPool=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/pools/"+encodeURIComponent(e)})},e.prototype.deletePool=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/pools/"+encodeURIComponent(e),method:n.HttpMethods.DELETE})},e}(o.BaseModule);e.default=a},6647:function(t,e,s){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s])})(t,e)},function(t,e){function s(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(s.prototype=e.prototype,new s)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,s=1,r=arguments.length;s<r;s++)for(var i in e=arguments[s])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var n=s(7693),a=s(5710),h=function(t){function e(e,s){var r=t.call(this,e,s)||this;return r.basePath="domains",r.baseOptions={actionPath:r.basePath+"/"},r}return i(e,t),e.prototype.getAll=function(t,e,s,r){void 0===e&&(e=!1),void 0===s&&(s=1),void 0===r&&(r=this.pageSize);var i=this._getBasePaginatedRequestOptions(o(o({},this.baseOptions),{key:"domains",tagName:t,pageSize:r,page:s,includeAll:e}));return this._execute(i)},e.prototype.create=function(t){return this._execute(o(o({},this.baseOptions),{method:a.HttpMethods.POST,body:t}))},e.prototype.getByName=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)})},e.prototype.delete=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t),method:a.HttpMethods.DELETE})},e.prototype.getAllRecords=function(t,e,s,r,i){void 0===s&&(s=!1),void 0===r&&(r=1),void 0===i&&(i=this.pageSize);var o=this._getBasePaginatedRequestOptions({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/records",key:"domain_records",tagName:e,pageSize:i,page:r,includeAll:s});return this._execute(o)},e.prototype.createRecord=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/records",method:a.HttpMethods.POST,body:e})},e.prototype.getRecord=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/records/"+encodeURIComponent(e)})},e.prototype.deleteRecord=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/records/"+encodeURIComponent(e),method:a.HttpMethods.DELETE})},e.prototype.updateRecord=function(t,e,s){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/records/"+encodeURIComponent(e),method:a.HttpMethods.PUT,body:s})},e}(n.BaseModule);e.default=h},6708:function(t,e,s){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s])})(t,e)},function(t,e){function s(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(s.prototype=e.prototype,new s)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,s=1,r=arguments.length;s<r;s++)for(var i in e=arguments[s])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var n=s(7693),a=s(5710),h=function(t){function e(e,s){var r=t.call(this,e,s)||this;return r.basePath="droplets",r.baseOptions={actionPath:r.basePath+"/"},r}return i(e,t),e.prototype.getAll=function(t,e,s,r){void 0===e&&(e=!1),void 0===s&&(s=1),void 0===r&&(r=this.pageSize);var i=this._getBasePaginatedRequestOptions(o(o({},this.baseOptions),{key:"droplets",tagName:t,pageSize:r,page:s,includeAll:e}));return this._execute(i)},e.prototype.getKernels=function(t,e,s,r,i){void 0===s&&(s=!1),void 0===r&&(r=1),void 0===i&&(i=this.pageSize);var o=this._getBasePaginatedRequestOptions({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/kernels",key:"kernels",tagName:e,pageSize:i,page:r,includeAll:s});return this._execute(o)},e.prototype.getSnapshots=function(t,e,s,r,i){void 0===s&&(s=!1),void 0===r&&(r=1),void 0===i&&(i=this.pageSize);var o=this._getBasePaginatedRequestOptions({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/snapshots",key:"snapshots",tagName:e,pageSize:i,page:r,includeAll:s});return this._execute(o)},e.prototype.getBackups=function(t,e,s,r,i){void 0===s&&(s=!1),void 0===r&&(r=1),void 0===i&&(i=this.pageSize);var o=this._getBasePaginatedRequestOptions({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/backups",key:"backups",tagName:e,pageSize:i,page:r,includeAll:s});return this._execute(o)},e.prototype.getActions=function(t,e,s,r,i){void 0===s&&(s=!1),void 0===r&&(r=1),void 0===i&&(i=this.pageSize);var o=this._getBasePaginatedRequestOptions({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/actions",key:"actions",tagName:e,pageSize:i,page:r,includeAll:s});return this._execute(o)},e.prototype.create=function(t){return this._execute(o(o({},this.baseOptions),{method:a.HttpMethods.POST,body:t}))},e.prototype.getById=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)})},e.prototype.deleteById=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t),method:a.HttpMethods.DELETE})},e.prototype.deleteByTag=function(t){return this._execute(o(o({},this.baseOptions),{method:a.HttpMethods.DELETE,qs:{tag_name:t}}))},e.prototype.getNeighbors=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/neighbors"})},e.prototype.getUpgrades=function(){return this._execute({actionPath:"droplet_upgrades"})},e.prototype.requestAction=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/actions",method:a.HttpMethods.POST,body:e})},e.prototype.requestActionByTag=function(t,e){return this._execute({actionPath:this.basePath+"/actions",method:a.HttpMethods.POST,qs:{tag_name:t},body:e})},e.prototype.getAction=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/actions/"+encodeURIComponent(e)})},e}(n.BaseModule);e.default=h},9766:function(t,e,s){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s])})(t,e)},function(t,e){function s(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(s.prototype=e.prototype,new s)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,s=1,r=arguments.length;s<r;s++)for(var i in e=arguments[s])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var n=s(7693),a=s(5710),h=function(t){function e(e,s){var r=t.call(this,e,s)||this;return r.basePath="firewalls",r.baseOptions={actionPath:r.basePath+"/"},r}return i(e,t),e.prototype.create=function(t){return this._execute(o(o({},this.baseOptions),{method:a.HttpMethods.POST,body:t}))},e.prototype.delete=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t),method:a.HttpMethods.DELETE})},e.prototype.getById=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)})},e.prototype.getAll=function(){return this._execute({actionPath:this.basePath})},e.prototype.update=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t),method:a.HttpMethods.PUT,body:e})},e.prototype.addDroplets=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/droplets",method:a.HttpMethods.POST,body:{droplet_ids:e}})},e.prototype.removeDroplets=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/droplets",method:a.HttpMethods.DELETE,body:{droplet_ids:e}})},e.prototype.addTags=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/tags",method:a.HttpMethods.POST,body:{tags:e}})},e.prototype.removeTags=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/tags",method:a.HttpMethods.DELETE,body:{tags:e}})},e.prototype.addRules=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/rules",method:a.HttpMethods.POST,body:e})},e.prototype.removeRules=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/rules",method:a.HttpMethods.DELETE,body:e})},e}(n.BaseModule);e.default=h},4358:function(t,e,s){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s])})(t,e)},function(t,e){function s(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(s.prototype=e.prototype,new s)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,s=1,r=arguments.length;s<r;s++)for(var i in e=arguments[s])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var n=s(7693),a=s(5710),h=function(t){function e(e,s){var r=t.call(this,e,s)||this;return r.basePath="floating_ips",r.baseOptions={actionPath:r.basePath+"/"},r}return i(e,t),e.prototype.getAll=function(t,e,s,r){void 0===e&&(e=!1),void 0===s&&(s=1),void 0===r&&(r=this.pageSize);var i=this._getBasePaginatedRequestOptions(o(o({},this.baseOptions),{key:"floating_ips",tagName:t,pageSize:r,page:s,includeAll:e}));return this._execute(i)},e.prototype.assignDroplet=function(t){return this._execute(o(o({},this.baseOptions),{method:a.HttpMethods.POST,body:{droplet_id:t}}))},e.prototype.assignRegion=function(t){return this._execute(o(o({},this.baseOptions),{method:a.HttpMethods.POST,body:{region:t}}))},e.prototype.getByIp=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)})},e.prototype.deleteByIp=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t),method:a.HttpMethods.DELETE})},e.prototype.requestAction=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/actions",method:a.HttpMethods.POST,body:e})},e.prototype.getAction=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/actions/"+encodeURIComponent(e)})},e.prototype.getAllActions=function(t,e,s,r,i){void 0===s&&(s=!1),void 0===r&&(r=1),void 0===i&&(i=this.pageSize);var o=this._getBasePaginatedRequestOptions({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/actions",key:"actions",tagName:e,pageSize:i,page:r,includeAll:s});return this._execute(o)},e}(n.BaseModule);e.default=h},9752:function(t,e,s){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s])})(t,e)},function(t,e){function s(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(s.prototype=e.prototype,new s)});Object.defineProperty(e,"__esModule",{value:!0});var o=s(7693),n=s(5710),a=function(t){function e(e,s){var r=t.call(this,e,s)||this;return r.basePath="images",r.baseOptions={actionPath:r.basePath+"/"},r}return i(e,t),e.prototype.getAll=function(t,e,s,r){void 0===e&&(e=!1),void 0===s&&(s=1),void 0===r&&(r=this.pageSize);var i=this._getBasePaginatedRequestOptions({actionPath:this.basePath,key:"images",tagName:t,pageSize:r,page:s,includeAll:e});return this._execute(i)},e.prototype.getByIdOrSlug=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)})},e.prototype.deleteById=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t),method:n.HttpMethods.DELETE})},e.prototype.rename=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t),method:n.HttpMethods.PUT,body:{name:e}})},e.prototype.getActions=function(t,e,s,r){void 0===e&&(e=!1),void 0===s&&(s=1),void 0===r&&(r=this.pageSize);var i=this._getBasePaginatedRequestOptions({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/actions",key:"actions",pageSize:r,page:s,includeAll:e});return this._execute(i)},e.prototype.getActionById=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/actions/"+encodeURIComponent(e)})},e.prototype.requestAction=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/actions",method:n.HttpMethods.POST,body:e})},e}(o.BaseModule);e.default=a},8292:function(t,e,s){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s])})(t,e)},function(t,e){function s(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(s.prototype=e.prototype,new s)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,s=1,r=arguments.length;s<r;s++)for(var i in e=arguments[s])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var n=s(7693),a=s(5710),h=function(t){function e(e,s){var r=t.call(this,e,s)||this;return r.basePath="account/keys",r.baseOptions={actionPath:r.basePath+"/"},r}return i(e,t),e.prototype.getAll=function(t,e,s,r){void 0===e&&(e=!1),void 0===s&&(s=1),void 0===r&&(r=this.pageSize);var i=this._getBasePaginatedRequestOptions({actionPath:this.basePath,key:"ssh_keys",tagName:t,pageSize:r,page:s,includeAll:e});return this._execute(i)},e.prototype.getById=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)})},e.prototype.getByFingerprint=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)})},e.prototype.add=function(t){var e=o(o({},this.baseOptions),{method:a.HttpMethods.POST,body:t});return this._execute(e)},e.prototype.rename=function(t,e){var s={actionPath:this.basePath+"/"+encodeURIComponent(t),method:a.HttpMethods.PUT,body:{name:e}};return this._execute(s)},e.prototype.delete=function(t){var e={actionPath:this.basePath+"/"+encodeURIComponent(t),method:a.HttpMethods.DELETE};return this._execute(e)},e}(n.BaseModule);e.default=h},1084:function(t,e,s){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s])})(t,e)},function(t,e){function s(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(s.prototype=e.prototype,new s)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,s=1,r=arguments.length;s<r;s++)for(var i in e=arguments[s])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var n=s(7693),a=s(5710),h=function(t){function e(e,s){var r=t.call(this,e,s)||this;return r.basePath="kubernetes/clusters",r.baseOptions={actionPath:r.basePath+"/"},r}return i(e,t),e.prototype.getAvailability=function(){return this._execute({actionPath:"kubernetes/options"})},e.prototype.getClusters=function(t,e,s){void 0===t&&(t=!1),void 0===e&&(e=1),void 0===s&&(s=this.pageSize);var r=this._getBasePaginatedRequestOptions(o(o({},this.baseOptions),{key:"kubernetes",pageSize:s,page:e,includeAll:t}));return this._execute(r)},e.prototype.create=function(t){return this._execute(o(o({},this.baseOptions),{method:a.HttpMethods.POST,body:t}))},e.prototype.getById=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)})},e.prototype.getKubeconfig=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/kubeconfig"})},e.prototype.delete=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t),method:a.HttpMethods.DELETE})},e.prototype.getNodePools=function(t,e,s,r){void 0===e&&(e=!1),void 0===s&&(s=1),void 0===r&&(r=this.pageSize);var i=this._getBasePaginatedRequestOptions({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/node_pools",key:"kubernetes",pageSize:r,page:s,includeAll:e});return this._execute(i)},e.prototype.getNodePoolById=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/node_pools/"+encodeURIComponent(e)})},e.prototype.addNodePool=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/node_pools",method:a.HttpMethods.POST,body:e})},e.prototype.updateNodePool=function(t,e,s){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/node_pools/"+encodeURIComponent(e),method:a.HttpMethods.PUT,body:s})},e.prototype.deleteNodePool=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/node_pools/"+encodeURIComponent(e),method:a.HttpMethods.DELETE})},e.prototype.recycleNodePool=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/node_pools/"+encodeURIComponent(e)+"/recycle",method:a.HttpMethods.POST})},e}(n.BaseModule);e.default=h},3989:function(t,e,s){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s])})(t,e)},function(t,e){function s(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(s.prototype=e.prototype,new s)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,s=1,r=arguments.length;s<r;s++)for(var i in e=arguments[s])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var n=s(7693),a=s(5710),h=function(t){function e(e,s){var r=t.call(this,e,s)||this;return r.basePath="load_balancers",r.baseOptions={actionPath:r.basePath+"/"},r}return i(e,t),e.prototype.create=function(t){return this._execute(o(o({},this.baseOptions),{method:a.HttpMethods.POST,body:t}))},e.prototype.getAll=function(){return this._execute(o({},this.baseOptions))},e.prototype.getById=function(t){return this._execute({actionPath:this.basePath+"/"+t})},e.prototype.update=function(t,e){return this._execute({actionPath:this.basePath+"/"+t,method:a.HttpMethods.PUT,body:e})},e.prototype.delete=function(t){return this._execute({actionPath:this.basePath+"/"+t,method:a.HttpMethods.DELETE})},e.prototype.addDroplets=function(t,e){return this._execute({actionPath:this.basePath+"/"+t+"/droplets",method:a.HttpMethods.POST,body:{droplet_ids:e}})},e.prototype.removeDroplets=function(t,e){return this._execute({actionPath:this.basePath+"/"+t+"/droplets",method:a.HttpMethods.DELETE,body:{droplet_ids:e}})},e.prototype.addForwardingRules=function(t,e){return this._execute({actionPath:this.basePath+"/"+t+"/forwarding_rules",method:a.HttpMethods.POST,body:{forwarding_rules:e}})},e.prototype.removeForwardingRules=function(t,e){return this._execute({actionPath:this.basePath+"/"+t+"/forwarding_rules",method:a.HttpMethods.DELETE,body:{forwarding_rules:e}})},e}(n.BaseModule);e.default=h},7612:function(t,e,s){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s])})(t,e)},function(t,e){function s(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(s.prototype=e.prototype,new s)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,s=1,r=arguments.length;s<r;s++)for(var i in e=arguments[s])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var n=s(7693),a=s(5710),h=function(t){function e(e,s){var r=t.call(this,e,s)||this;return r.basePath="projects",r.baseOptions={actionPath:""+r.basePath},r}return i(e,t),e.prototype.getAll=function(t,e,s){void 0===t&&(t=!1),void 0===e&&(e=1),void 0===s&&(s=this.pageSize);var r=this._getBasePaginatedRequestOptions(o(o({},this.baseOptions),{key:"projects",pageSize:s,page:e,includeAll:t}));return this._execute(r)},e.prototype.create=function(t){return this._execute(o(o({},this.baseOptions),{method:a.HttpMethods.POST,body:t}))},e.prototype.getById=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)})},e.prototype.update=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t),method:a.HttpMethods.PUT,body:e})},e.prototype.patch=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t),method:a.HttpMethods.PATCH,body:e})},e.prototype.getResources=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/resources"})},e.prototype.addResources=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/resources",method:a.HttpMethods.POST,body:{resources:e}})},e.prototype.getDefault=function(){return this._execute({actionPath:this.basePath+"/default"})},e.prototype.getDefaultResources=function(){return this._execute({actionPath:this.basePath+"/default/resources"})},e.prototype.addDefaultResources=function(t){return this._execute({actionPath:this.basePath+"/default/resources",method:a.HttpMethods.POST,body:{resources:t}})},e.prototype.updateDefault=function(t){return this._execute({actionPath:this.basePath+"/default",method:a.HttpMethods.PUT,body:t})},e.prototype.patchDefault=function(t){return this._execute({actionPath:this.basePath+"/default",method:a.HttpMethods.PATCH,body:t})},e}(n.BaseModule);e.default=h},7762:function(t,e,s){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s])})(t,e)},function(t,e){function s(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(s.prototype=e.prototype,new s)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(e,s){var r=t.call(this,e,s)||this;return r.basePath="regions",r}return i(e,t),e.prototype.getAll=function(t,e,s,r){void 0===e&&(e=!1),void 0===s&&(s=1),void 0===r&&(r=this.pageSize);var i=this._getBasePaginatedRequestOptions({actionPath:this.basePath,key:"regions",tagName:t,pageSize:r,page:s,includeAll:e});return this._execute(i)},e}(s(7693).BaseModule);e.default=o},2034:function(t,e,s){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s])})(t,e)},function(t,e){function s(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(s.prototype=e.prototype,new s)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(e,s){var r=t.call(this,e,s)||this;return r.basePath="reports",r}return i(e,t),e.prototype.getDropletNeighbors=function(){return this._execute({actionPath:this.basePath+"/droplet_neighbors_ids"})},e}(s(7693).BaseModule);e.default=o},2114:function(t,e,s){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s])})(t,e)},function(t,e){function s(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(s.prototype=e.prototype,new s)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(e,s){var r=t.call(this,e,s)||this;return r.basePath="sizes",r}return i(e,t),e.prototype.get=function(t,e,s,r){void 0===e&&(e=!1),void 0===s&&(s=1),void 0===r&&(r=this.pageSize);var i=this._getBasePaginatedRequestOptions({actionPath:this.basePath,key:"sizes",tagName:t,pageSize:r,page:s,includeAll:e});return this._execute(i)},e}(s(7693).BaseModule);e.default=o},2260:function(t,e,s){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s])})(t,e)},function(t,e){function s(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(s.prototype=e.prototype,new s)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,s=1,r=arguments.length;s<r;s++)for(var i in e=arguments[s])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var n=s(7693),a=s(5710),h=function(t){function e(e,s){var r=t.call(this,e,s)||this;return r.basePath="snapshots",r.baseOptions={actionPath:r.basePath,key:"snapshots"},r}return i(e,t),e.prototype.get=function(t,e,s,r){void 0===e&&(e=!1),void 0===s&&(s=1),void 0===r&&(r=this.pageSize);var i=this._getBasePaginatedRequestOptions(o(o({},this.baseOptions),{tagName:t,pageSize:r,page:s,includeAll:e}));return this._execute(i)},e.prototype.getById=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)})},e.prototype.getForVolumes=function(t,e,s,r){void 0===e&&(e=!1),void 0===s&&(s=1),void 0===r&&(r=this.pageSize);var i=this._getBasePaginatedRequestOptions(o(o({},this.baseOptions),{tagName:t,pageSize:r,page:s,includeAll:e,qs:{resource_type:"volume"}}));return this._execute(i)},e.prototype.getForDroplets=function(t,e,s,r){void 0===e&&(e=!1),void 0===s&&(s=1),void 0===r&&(r=this.pageSize);var i=this._getBasePaginatedRequestOptions(o(o({},this.baseOptions),{tagName:t,pageSize:r,page:s,includeAll:e,qs:{resource_type:"droplet"}}));return this._execute(i)},e.prototype.deleteById=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t),method:a.HttpMethods.DELETE})},e}(n.BaseModule);e.default=h},9450:function(t,e,s){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s])})(t,e)},function(t,e){function s(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(s.prototype=e.prototype,new s)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,s=1,r=arguments.length;s<r;s++)for(var i in e=arguments[s])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var n=s(7693),a=s(5710),h=function(t){function e(e,s){var r=t.call(this,e,s)||this;return r.basePath="tags",r.baseOptions={actionPath:r.basePath},r}return i(e,t),e.prototype.getAll=function(t,e,s,r){void 0===e&&(e=!1),void 0===s&&(s=1),void 0===r&&(r=this.pageSize);var i=this._getBasePaginatedRequestOptions(o(o({},this.baseOptions),{key:"tags",tagName:t,pageSize:r,page:s,includeAll:e}));return this._execute(i)},e.prototype.create=function(t){return this._execute(o(o({},this.baseOptions),{method:a.HttpMethods.POST,body:{name:t}}))},e.prototype.getByName=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)})},e.prototype.delete=function(t){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t),method:a.HttpMethods.DELETE})},e.prototype.addResources=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/resources",method:a.HttpMethods.POST,body:e})},e.prototype.removeResources=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/resources",method:a.HttpMethods.DELETE,body:e})},e}(n.BaseModule);e.default=h},5957:function(t,e,s){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s])})(t,e)},function(t,e){function s(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(s.prototype=e.prototype,new s)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,s=1,r=arguments.length;s<r;s++)for(var i in e=arguments[s])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var n=s(7693),a=s(5710),h=function(t){function e(e,s){var r=t.call(this,e,s)||this;return r.basePath="volumes",r.baseOptions={actionPath:r.basePath+"/"},r}return i(e,t),e.prototype.getAll=function(t){return this._execute(o(o({},this.baseOptions),{qs:{region:t||""}}))},e.prototype.create=function(t){return this._execute(o(o({},this.baseOptions),{method:a.HttpMethods.POST,body:t}))},e.prototype.getById=function(t){return this._execute({actionPath:this.basePath+"/"+t})},e.prototype.getByNameAndRegion=function(t,e){return this._execute(o(o({},this.baseOptions),{qs:{name:t,region:e}}))},e.prototype.deleteById=function(t){return this._execute({actionPath:this.basePath+"/"+t,method:a.HttpMethods.DELETE})},e.prototype.deleteByNameAndRegion=function(t,e){return this._execute(o(o({},this.baseOptions),{method:a.HttpMethods.DELETE,qs:{name:t,region:e}}))},e.prototype.requestAction=function(t,e){return this._execute({actionPath:this.basePath+"/"+encodeURIComponent(t)+"/actions",method:a.HttpMethods.POST,body:e})},e.prototype.getSnapshots=function(t){return this._execute({actionPath:this.basePath+"/"+t+"/snapshots"})},e.prototype.createSnapshot=function(t,e){return this._execute({actionPath:this.basePath+"/"+t+"/snapshots",method:a.HttpMethods.POST,body:e})},e}(n.BaseModule);e.default=h},6610:function(t,e,s){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,s=1,r=arguments.length;s<r;s++)for(var i in e=arguments[s])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=i(s(2210)),n=s(5710),a=function(){function t(t){this.headers={authorization:"Bearer "+t,content_type:"application/json"},this.apiUrl="https://api.digitalocean.com/v2/"}return t.prototype.request=function(t){var e,s=new Promise((function(t,s){e=function(e,r){r?s(r):t(e)}}));return t.includeAll?this.getAllPages(t.key,t,e):this.submitRequest(t,e),s},t.prototype.submitRequest=function(t,e){var s=this.requestBuilder(t);o.default(this.apiUrl+t.actionPath,s).then((function(t){e(204===t.statusCode?null:JSON.parse(t.body),null)})).catch((function(t){e(null,t)}))},t.prototype.getAllPages=function(t,e,s){var r=this,i=[],o=0,n=0,a=1;e.qs.page=1,e.qs.per_page=25,this.submitRequest(e,(function(h,c){return c?s(null,c):(o=h.meta.total,i=i.concat(h[t]),n=Math.ceil(o/e.qs.per_page),i.length>=o?s(i):void r.getRemainingPages(e,2,n,(function(e,r){return r?s(null,r):(a++,i=i.concat(e[t]),a===n?s(i):void 0)})))}))},t.prototype.getRemainingPages=function(t,e,s,r){for(var i=e;i<=s;i++)t.qs.page=i,this.submitRequest(t,r)},t.prototype.requestBuilder=function(t){return r({method:t.method||n.HttpMethods.GET,headers:t.headers||this.headers,strictSSL:!0,searchParams:t.qs||{},retry:0},t.body&&{json:t.body})},t}();e.default=a},9738:(t,e,s)=>{const r=s(4826),i=s(5622);function o(t){console.log(`[dotenv][DEBUG] ${t}`)}const n=/^\s*([\w.-]+)\s*=\s*(.*)?\s*$/,a=/\\n/g,h=/\n|\r|\r\n/;t.exports.v=function(t){let e=i.resolve(process.cwd(),".env"),s="utf8",c=!1;t&&(null!=t.path&&(e=t.path),null!=t.encoding&&(s=t.encoding),null!=t.debug&&(c=!0));try{const t=function(t,e){const s=Boolean(e&&e.debug),r={};return t.toString().split(h).forEach((function(t,e){const i=t.match(n);if(null!=i){const t=i[1];let e=i[2]||"";const s=e.length-1,o='"'===e[0]&&'"'===e[s];"'"===e[0]&&"'"===e[s]||o?(e=e.substring(1,s),o&&(e=e.replace(a,"\n"))):e=e.trim(),r[t]=e}else s&&o(`did not match key and value when parsing line ${e+1}: ${t}`)})),r}(r.readFileSync(e,{encoding:s}),{debug:c});return Object.keys(t).forEach((function(e){Object.prototype.hasOwnProperty.call(process.env,e)?c&&o(`"${e}" is already defined in \`process.env\` and will not be overwritten`):process.env[e]=t[e]})),{parsed:t}}catch(t){return{error:t}}}},2840:(t,e,s)=>{var r=s(778),i=function(){},o=function(t,e,s){if("function"==typeof e)return o(t,null,e);e||(e={}),s=r(s||i);var n=t._writableState,a=t._readableState,h=e.readable||!1!==e.readable&&t.readable,c=e.writable||!1!==e.writable&&t.writable,u=!1,l=function(){t.writable||d()},d=function(){c=!1,h||s.call(t)},p=function(){h=!1,c||s.call(t)},f=function(e){s.call(t,e?new Error("exited with error code: "+e):null)},m=function(e){s.call(t,e)},g=function(){process.nextTick(y)},y=function(){if(!u)return(!h||a&&a.ended&&!a.destroyed)&&(!c||n&&n.ended&&!n.destroyed)?void 0:s.call(t,new Error("premature close"))},b=function(){t.req.on("finish",d)};return function(t){return t.setHeader&&"function"==typeof t.abort}(t)?(t.on("complete",d),t.on("abort",g),t.req?b():t.on("request",b)):c&&!n&&(t.on("end",l),t.on("close",l)),function(t){return t.stdio&&Array.isArray(t.stdio)&&3===t.stdio.length}(t)&&t.on("exit",f),t.on("end",p),t.on("finish",d),!1!==e.error&&t.on("error",m),t.on("close",g),function(){u=!0,t.removeListener("complete",d),t.removeListener("abort",g),t.removeListener("request",b),t.req&&t.req.removeListener("finish",d),t.removeListener("end",l),t.removeListener("close",l),t.removeListener("finish",d),t.removeListener("exit",f),t.removeListener("end",p),t.removeListener("error",m),t.removeListener("close",g)}};t.exports=o},6133:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=s(2337);e.default=function(t,...e){const s=(async()=>{if(t instanceof r.RequestError)try{for(const s of e)if(s)for(const e of s)t=await e(t)}catch(e){t=e}throw t})(),i=()=>s;return s.json=i,s.text=i,s.buffer=i,s.on=i,s}},9291:function(t,e,s){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,e,s,r){void 0===r&&(r=s),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[s]}})}:function(t,e,s,r){void 0===r&&(r=s),t[r]=e[s]}),i=this&&this.__exportStar||function(t,e){for(var s in t)"default"===s||Object.prototype.hasOwnProperty.call(e,s)||r(e,t,s)};Object.defineProperty(e,"__esModule",{value:!0});const o=s(8614),n=s(657),a=s(341),h=s(2337),c=s(8568),u=s(8178),l=s(4805),d=s(4992),p=s(8141),f=["request","response","redirect","uploadProgress","downloadProgress"];e.default=function t(e){let s,r;const i=new o.EventEmitter,m=new a(((o,a,g)=>{const y=b=>{const v=new u.default(void 0,e);v.retryCount=b,v._noPipe=!0,g((()=>v.destroy())),g.shouldReject=!1,g((()=>a(new h.CancelError(v)))),s=v,v.once("response",(async e=>{var s;if(e.retryCount=b,e.request.aborted)return;let i;try{i=await d.default(v),e.rawBody=i}catch(t){return}if(v._isAboutToError)return;const n=(null!==(s=e.headers["content-encoding"])&&void 0!==s?s:"").toLowerCase(),a=["gzip","deflate","br"].includes(n),{options:l}=v;if(a&&!l.decompress)e.body=i;else try{e.body=c.default(e,l.responseType,l.parseJson,l.encoding)}catch(t){if(e.body=i.toString(),p.isResponseOk(e))return void v._beforeError(t)}try{for(const[s,r]of l.hooks.afterResponse.entries())e=await r(e,(async e=>{const r=u.default.normalizeArguments(void 0,{...e,retry:{calculateDelay:()=>0},throwHttpErrors:!1,resolveBodyOnly:!1},l);r.hooks.afterResponse=r.hooks.afterResponse.slice(0,s);for(const t of r.hooks.beforeRetry)await t(r);const i=t(r);return g((()=>{i.catch((()=>{})),i.cancel()})),i}))}catch(t){return void v._beforeError(new h.RequestError(t.message,t,v))}p.isResponseOk(e)?(r=e,o(v.options.resolveBodyOnly?e.body:e)):v._beforeError(new h.HTTPError(e))}));const _=t=>{if(m.isCanceled)return;const{options:e}=v;if(t instanceof h.HTTPError&&!e.throwHttpErrors){const{response:e}=t;o(v.options.resolveBodyOnly?e.body:e)}else a(t)};v.once("error",_);const w=v.options.body;v.once("retry",((t,e)=>{var s,r;w===(null===(s=e.request)||void 0===s?void 0:s.options.body)&&n.default.nodeStream(null===(r=e.request)||void 0===r?void 0:r.options.body)?_(e):y(t)})),l.default(v,i,f)};y(0)}));m.on=(t,e)=>(i.on(t,e),m);const g=t=>{const e=(async()=>{await m;const{options:e}=r.request;return c.default(r,t,e.parseJson,e.encoding)})();return Object.defineProperties(e,Object.getOwnPropertyDescriptors(m)),e};return m.json=()=>{const{headers:t}=s.options;return s.writableFinished||void 0!==t.accept||(t.accept="application/json"),g("json")},m.buffer=()=>g("buffer"),m.text=()=>g("text"),m},i(s(2337),e)},7999:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=s(657);e.default=(t,e)=>{if(r.default.null_(t.encoding))throw new TypeError("To get a Buffer, set `options.responseType` to `buffer` instead");r.assert.any([r.default.string,r.default.undefined],t.encoding),r.assert.any([r.default.boolean,r.default.undefined],t.resolveBodyOnly),r.assert.any([r.default.boolean,r.default.undefined],t.methodRewriting),r.assert.any([r.default.boolean,r.default.undefined],t.isStream),r.assert.any([r.default.string,r.default.undefined],t.responseType),void 0===t.responseType&&(t.responseType="text");const{retry:s}=t;if(t.retry=e?{...e.retry}:{calculateDelay:t=>t.computedValue,limit:0,methods:[],statusCodes:[],errorCodes:[],maxRetryAfter:void 0},r.default.object(s)?(t.retry={...t.retry,...s},t.retry.methods=[...new Set(t.retry.methods.map((t=>t.toUpperCase())))],t.retry.statusCodes=[...new Set(t.retry.statusCodes)],t.retry.errorCodes=[...new Set(t.retry.errorCodes)]):r.default.number(s)&&(t.retry.limit=s),r.default.undefined(t.retry.maxRetryAfter)&&(t.retry.maxRetryAfter=Math.min(...[t.timeout.request,t.timeout.connect].filter(r.default.number))),r.default.object(t.pagination)){e&&(t.pagination={...e.pagination,...t.pagination});const{pagination:s}=t;if(!r.default.function_(s.transform))throw new Error("`options.pagination.transform` must be implemented");if(!r.default.function_(s.shouldContinue))throw new Error("`options.pagination.shouldContinue` must be implemented");if(!r.default.function_(s.filter))throw new TypeError("`options.pagination.filter` must be implemented");if(!r.default.function_(s.paginate))throw new Error("`options.pagination.paginate` must be implemented")}return"json"===t.responseType&&void 0===t.headers.accept&&(t.headers.accept="application/json"),t}},8568:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=s(2337);e.default=(t,e,s,i)=>{const{rawBody:o}=t;try{if("text"===e)return o.toString(i);if("json"===e)return 0===o.length?"":s(o.toString());if("buffer"===e)return o;throw new r.ParseError({message:`Unknown body type '${e}'`,name:"Error"},t)}catch(e){throw new r.ParseError(e,t)}}},2337:function(t,e,s){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,e,s,r){void 0===r&&(r=s),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[s]}})}:function(t,e,s,r){void 0===r&&(r=s),t[r]=e[s]}),i=this&&this.__exportStar||function(t,e){for(var s in t)"default"===s||Object.prototype.hasOwnProperty.call(e,s)||r(e,t,s)};Object.defineProperty(e,"__esModule",{value:!0}),e.CancelError=e.ParseError=void 0;const o=s(8178);class n extends o.RequestError{constructor(t,e){const{options:s}=e.request;super(`${t.message} in "${s.url.toString()}"`,t,e.request),this.name="ParseError"}}e.ParseError=n;class a extends o.RequestError{constructor(t){super("Promise was canceled",{},t),this.name="CancelError"}get isCanceled(){return!0}}e.CancelError=a,i(s(8178),e)},6582:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.retryAfterStatusCodes=void 0,e.retryAfterStatusCodes=new Set([413,429,503]),e.default=({attemptCount:t,retryOptions:e,error:s,retryAfter:r})=>{if(t>e.limit)return 0;const i=e.methods.includes(s.options.method),o=e.errorCodes.includes(s.code),n=s.response&&e.statusCodes.includes(s.response.statusCode);if(!i||!o&&!n)return 0;if(s.response){if(r)return void 0===e.maxRetryAfter||r>e.maxRetryAfter?0:r;if(413===s.response.statusCode)return 0}return 2**(t-1)*1e3+100*Math.random()}},8178:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.UnsupportedProtocolError=e.ReadError=e.TimeoutError=e.UploadError=e.CacheError=e.HTTPError=e.MaxRedirectsError=e.RequestError=e.setNonEnumerableProperties=e.knownHookEvents=e.withoutBody=e.kIsNormalizedAlready=void 0;const r=s(1669),i=s(2413),o=s(4826),n=s(8835),a=s(8605),h=s(8605),c=s(7211),u=s(81),l=s(3266),d=s(3481),p=s(346),f=s(9758),m=s(5989),g=s(657),y=s(2425),b=s(6721),v=s(4805),_=s(4834),w=s(6959),x=s(186),P=s(7440),O=s(4992),S=s(354),E=s(8141),T=s(5241),C=s(7999),k=s(6582),j=new l.default,R=Symbol("request"),A=Symbol("response"),M=Symbol("responseSize"),I=Symbol("downloadedSize"),H=Symbol("bodySize"),U=Symbol("uploadedSize"),D=Symbol("serverResponsesPiped"),q=Symbol("unproxyEvents"),$=Symbol("isFromCache"),L=Symbol("cancelTimeouts"),B=Symbol("startedReading"),N=Symbol("stopReading"),z=Symbol("triggerRead"),F=Symbol("body"),V=Symbol("jobs"),W=Symbol("originalResponse"),G=Symbol("retryTimeout");e.kIsNormalizedAlready=Symbol("isNormalizedAlready");const Y=g.default.string(process.versions.brotli);e.withoutBody=new Set(["GET","HEAD"]),e.knownHookEvents=["init","beforeRequest","beforeRedirect","beforeError","beforeRetry","afterResponse"];const J=new P.default,K=new Set([300,301,302,303,304,307,308]),Z=["context","body","json","form"];e.setNonEnumerableProperties=(t,e)=>{const s={};for(const e of t)if(e)for(const t of Z)t in e&&(s[t]={writable:!0,configurable:!0,enumerable:!1,value:e[t]});Object.defineProperties(e,s)};class Q extends Error{constructor(t,e,s){var r;if(super(t),Error.captureStackTrace(this,this.constructor),this.name="RequestError",this.code=e.code,s instanceof at?(Object.defineProperty(this,"request",{enumerable:!1,value:s}),Object.defineProperty(this,"response",{enumerable:!1,value:s[A]}),Object.defineProperty(this,"options",{enumerable:!1,value:s.options})):Object.defineProperty(this,"options",{enumerable:!1,value:s}),this.timings=null===(r=this.request)||void 0===r?void 0:r.timings,g.default.string(e.stack)&&g.default.string(this.stack)){const t=this.stack.indexOf(this.message)+this.message.length,s=this.stack.slice(t).split("\n").reverse(),r=e.stack.slice(e.stack.indexOf(e.message)+e.message.length).split("\n").reverse();for(;0!==r.length&&r[0]===s[0];)s.shift();this.stack=`${this.stack.slice(0,t)}${s.reverse().join("\n")}${r.reverse().join("\n")}`}}}e.RequestError=Q;class X extends Q{constructor(t){super(`Redirected ${t.options.maxRedirects} times. Aborting.`,{},t),this.name="MaxRedirectsError"}}e.MaxRedirectsError=X;class tt extends Q{constructor(t){super(`Response code ${t.statusCode} (${t.statusMessage})`,{},t.request),this.name="HTTPError"}}e.HTTPError=tt;class et extends Q{constructor(t,e){super(t.message,t,e),this.name="CacheError"}}e.CacheError=et;class st extends Q{constructor(t,e){super(t.message,t,e),this.name="UploadError"}}e.UploadError=st;class rt extends Q{constructor(t,e,s){super(t.message,t,s),this.name="TimeoutError",this.event=t.event,this.timings=e}}e.TimeoutError=rt;class it extends Q{constructor(t,e){super(t.message,t,e),this.name="ReadError"}}e.ReadError=it;class ot extends Q{constructor(t){super(`Unsupported protocol "${t.url.protocol}"`,{},t),this.name="UnsupportedProtocolError"}}e.UnsupportedProtocolError=ot;const nt=["socket","connect","continue","information","upgrade","timeout"];class at extends i.Duplex{constructor(t,s={},r){super({autoDestroy:!1,highWaterMark:0}),this[I]=0,this[U]=0,this.requestInitialized=!1,this[D]=new Set,this.redirects=[],this[N]=!1,this[z]=!1,this[V]=[],this.retryCount=0,this._progressCallbacks=[];const i=()=>this._unlockWrite(),n=()=>this._lockWrite();this.on("pipe",(t=>{t.prependListener("data",i),t.on("data",n),t.prependListener("end",i),t.on("end",n)})),this.on("unpipe",(t=>{t.off("data",i),t.off("data",n),t.off("end",i),t.off("end",n)})),this.on("pipe",(t=>{t instanceof h.IncomingMessage&&(this.options.headers={...t.headers,...this.options.headers})}));const{json:a,body:c,form:u}=s;if((a||c||u)&&this._lockWrite(),e.kIsNormalizedAlready in s)this.options=s;else try{this.options=this.constructor.normalizeArguments(t,s,r)}catch(t){return g.default.nodeStream(s.body)&&s.body.destroy(),void this.destroy(t)}(async()=>{var t;try{this.options.body instanceof o.ReadStream&&await(async t=>new Promise(((e,s)=>{const r=t=>{s(t)};t.pending||e(),t.once("error",r),t.once("ready",(()=>{t.off("error",r),e()}))})))(this.options.body);const{url:e}=this.options;if(!e)throw new TypeError("Missing `url` property");if(this.requestUrl=e.toString(),decodeURI(this.requestUrl),await this._finalizeBody(),await this._makeRequest(),this.destroyed)return void(null===(t=this[R])||void 0===t||t.destroy());for(const t of this[V])t();this[V].length=0,this.requestInitialized=!0}catch(t){if(t instanceof Q)return void this._beforeError(t);this.destroyed||this.destroy(t)}})()}static normalizeArguments(t,s,i){var o,a,h,c,u;const l=s;if(g.default.object(t)&&!g.default.urlInstance(t))s={...i,...t,...s};else{if(t&&s&&void 0!==s.url)throw new TypeError("The `url` option is mutually exclusive with the `input` argument");s={...i,...s},void 0!==t&&(s.url=t),g.default.urlInstance(s.url)&&(s.url=new n.URL(s.url.toString()))}if(!1===s.cache&&(s.cache=void 0),!1===s.dnsCache&&(s.dnsCache=void 0),g.assert.any([g.default.string,g.default.undefined],s.method),g.assert.any([g.default.object,g.default.undefined],s.headers),g.assert.any([g.default.string,g.default.urlInstance,g.default.undefined],s.prefixUrl),g.assert.any([g.default.object,g.default.undefined],s.cookieJar),g.assert.any([g.default.object,g.default.string,g.default.undefined],s.searchParams),g.assert.any([g.default.object,g.default.string,g.default.undefined],s.cache),g.assert.any([g.default.object,g.default.number,g.default.undefined],s.timeout),g.assert.any([g.default.object,g.default.undefined],s.context),g.assert.any([g.default.object,g.default.undefined],s.hooks),g.assert.any([g.default.boolean,g.default.undefined],s.decompress),g.assert.any([g.default.boolean,g.default.undefined],s.ignoreInvalidCookies),g.assert.any([g.default.boolean,g.default.undefined],s.followRedirect),g.assert.any([g.default.number,g.default.undefined],s.maxRedirects),g.assert.any([g.default.boolean,g.default.undefined],s.throwHttpErrors),g.assert.any([g.default.boolean,g.default.undefined],s.http2),g.assert.any([g.default.boolean,g.default.undefined],s.allowGetBody),g.assert.any([g.default.string,g.default.undefined],s.localAddress),g.assert.any([S.isDnsLookupIpVersion,g.default.undefined],s.dnsLookupIpVersion),g.assert.any([g.default.object,g.default.undefined],s.https),g.assert.any([g.default.boolean,g.default.undefined],s.rejectUnauthorized),s.https&&(g.assert.any([g.default.boolean,g.default.undefined],s.https.rejectUnauthorized),g.assert.any([g.default.function_,g.default.undefined],s.https.checkServerIdentity),g.assert.any([g.default.string,g.default.object,g.default.array,g.default.undefined],s.https.certificateAuthority),g.assert.any([g.default.string,g.default.object,g.default.array,g.default.undefined],s.https.key),g.assert.any([g.default.string,g.default.object,g.default.array,g.default.undefined],s.https.certificate),g.assert.any([g.default.string,g.default.undefined],s.https.passphrase),g.assert.any([g.default.string,g.default.buffer,g.default.array,g.default.undefined],s.https.pfx)),g.assert.any([g.default.object,g.default.undefined],s.cacheOptions),g.default.string(s.method)?s.method=s.method.toUpperCase():s.method="GET",s.headers===(null==i?void 0:i.headers)?s.headers={...s.headers}:s.headers=m({...null==i?void 0:i.headers,...s.headers}),"slashes"in s)throw new TypeError("The legacy `url.Url` has been deprecated. Use `URL` instead.");if("auth"in s)throw new TypeError("Parameter `auth` is deprecated. Use `username` / `password` instead.");if("searchParams"in s&&s.searchParams&&s.searchParams!==(null==i?void 0:i.searchParams)){let t;if(g.default.string(s.searchParams)||s.searchParams instanceof n.URLSearchParams)t=new n.URLSearchParams(s.searchParams);else{!function(t){for(const e in t){const s=t[e];if(!(g.default.string(s)||g.default.number(s)||g.default.boolean(s)||g.default.null_(s)||g.default.undefined(s)))throw new TypeError(`The \`searchParams\` value '${String(s)}' must be a string, number, boolean or null`)}}(s.searchParams),t=new n.URLSearchParams;for(const e in s.searchParams){const r=s.searchParams[e];null===r?t.append(e,""):void 0!==r&&t.append(e,r)}}null===(o=null==i?void 0:i.searchParams)||void 0===o||o.forEach(((e,s)=>{t.has(s)||t.append(s,e)})),s.searchParams=t}if(s.username=null!==(a=s.username)&&void 0!==a?a:"",s.password=null!==(h=s.password)&&void 0!==h?h:"",g.default.undefined(s.prefixUrl)?s.prefixUrl=null!==(c=null==i?void 0:i.prefixUrl)&&void 0!==c?c:"":(s.prefixUrl=s.prefixUrl.toString(),""===s.prefixUrl||s.prefixUrl.endsWith("/")||(s.prefixUrl+="/")),g.default.string(s.url)){if(s.url.startsWith("/"))throw new Error("`input` must not start with a slash when using `prefixUrl`");s.url=x.default(s.prefixUrl+s.url,s)}else(g.default.undefined(s.url)&&""!==s.prefixUrl||s.protocol)&&(s.url=x.default(s.prefixUrl,s));if(s.url){"port"in s&&delete s.port;let{prefixUrl:t}=s;Object.defineProperty(s,"prefixUrl",{set:e=>{const r=s.url;if(!r.href.startsWith(e))throw new Error(`Cannot change \`prefixUrl\` from ${t} to ${e}: ${r.href}`);s.url=new n.URL(e+r.href.slice(t.length)),t=e},get:()=>t});let{protocol:e}=s.url;if("unix:"===e&&(e="http:",s.url=new n.URL(`http://unix${s.url.pathname}${s.url.search}`)),s.searchParams&&(s.url.search=s.searchParams.toString()),"http:"!==e&&"https:"!==e)throw new ot(s);""===s.username?s.username=s.url.username:s.url.username=s.username,""===s.password?s.password=s.url.password:s.url.password=s.password}const{cookieJar:p}=s;if(p){let{setCookie:t,getCookieString:e}=p;g.assert.function_(t),g.assert.function_(e),4===t.length&&0===e.length&&(t=r.promisify(t.bind(s.cookieJar)),e=r.promisify(e.bind(s.cookieJar)),s.cookieJar={setCookie:t,getCookieString:e})}const{cache:f}=s;if(f&&(J.has(f)||J.set(f,new d(((t,e)=>{const s=t[R](t,e);return g.default.promise(s)&&(s.once=(t,e)=>{if("error"===t)s.catch(e);else{if("abort"!==t)throw new Error(`Unknown HTTP2 promise event: ${t}`);(async()=>{try{(await s).once("abort",e)}catch(t){}})()}return s}),s}),f))),s.cacheOptions={...s.cacheOptions},!0===s.dnsCache)s.dnsCache=j;else if(!g.default.undefined(s.dnsCache)&&!s.dnsCache.lookup)throw new TypeError(`Parameter \`dnsCache\` must be a CacheableLookup instance or a boolean, got ${g.default(s.dnsCache)}`);g.default.number(s.timeout)?s.timeout={request:s.timeout}:i&&s.timeout!==i.timeout?s.timeout={...i.timeout,...s.timeout}:s.timeout={...s.timeout},s.context||(s.context={});const y=s.hooks===(null==i?void 0:i.hooks);s.hooks={...s.hooks};for(const t of e.knownHookEvents)if(t in s.hooks){if(!g.default.array(s.hooks[t]))throw new TypeError(`Parameter \`${t}\` must be an Array, got ${g.default(s.hooks[t])}`);s.hooks[t]=[...s.hooks[t]]}else s.hooks[t]=[];if(i&&!y)for(const t of e.knownHookEvents)i.hooks[t].length>0&&(s.hooks[t]=[...i.hooks[t],...s.hooks[t]]);if("family"in s&&T.default('"options.family" was never documented, please use "options.dnsLookupIpVersion"'),(null==i?void 0:i.https)&&(s.https={...i.https,...s.https}),"rejectUnauthorized"in s&&T.default('"options.rejectUnauthorized" is now deprecated, please use "options.https.rejectUnauthorized"'),"checkServerIdentity"in s&&T.default('"options.checkServerIdentity" was never documented, please use "options.https.checkServerIdentity"'),"ca"in s&&T.default('"options.ca" was never documented, please use "options.https.certificateAuthority"'),"key"in s&&T.default('"options.key" was never documented, please use "options.https.key"'),"cert"in s&&T.default('"options.cert" was never documented, please use "options.https.certificate"'),"passphrase"in s&&T.default('"options.passphrase" was never documented, please use "options.https.passphrase"'),"pfx"in s&&T.default('"options.pfx" was never documented, please use "options.https.pfx"'),"followRedirects"in s)throw new TypeError("The `followRedirects` option does not exist. Use `followRedirect` instead.");if(s.agent)for(const t in s.agent)if("http"!==t&&"https"!==t&&"http2"!==t)throw new TypeError(`Expected the \`options.agent\` properties to be \`http\`, \`https\` or \`http2\`, got \`${t}\``);return s.maxRedirects=null!==(u=s.maxRedirects)&&void 0!==u?u:0,e.setNonEnumerableProperties([i,l],s),C.default(s,i)}_lockWrite(){const t=()=>{throw new TypeError("The payload has been already provided")};this.write=t,this.end=t}_unlockWrite(){this.write=super.write,this.end=super.end}async _finalizeBody(){const{options:t}=this,{headers:s}=t,r=!g.default.undefined(t.form),o=!g.default.undefined(t.json),a=!g.default.undefined(t.body),h=r||o||a,c=e.withoutBody.has(t.method)&&!("GET"===t.method&&t.allowGetBody);if(this._cannotHaveBody=c,h){if(c)throw new TypeError(`The \`${t.method}\` method cannot be used with a body`);if([a,r,o].filter((t=>t)).length>1)throw new TypeError("The `body`, `json` and `form` options are mutually exclusive");if(a&&!(t.body instanceof i.Readable)&&!g.default.string(t.body)&&!g.default.buffer(t.body)&&!b.default(t.body))throw new TypeError("The `body` option must be a stream.Readable, string or Buffer");if(r&&!g.default.object(t.form))throw new TypeError("The `form` option must be an Object");{const e=!g.default.string(s["content-type"]);a?(b.default(t.body)&&e&&(s["content-type"]=`multipart/form-data; boundary=${t.body.getBoundary()}`),this[F]=t.body):r?(e&&(s["content-type"]="application/x-www-form-urlencoded"),this[F]=new n.URLSearchParams(t.form).toString()):(e&&(s["content-type"]="application/json"),this[F]=t.stringifyJson(t.json));const i=await y.default(this[F],t.headers);g.default.undefined(s["content-length"])&&g.default.undefined(s["transfer-encoding"])&&(c||g.default.undefined(i)||(s["content-length"]=String(i)))}}else c?this._lockWrite():this._unlockWrite();this[H]=Number(s["content-length"])||void 0}async _onResponseBase(t){const{options:e}=this,{url:s}=e;this[W]=t,e.decompress&&(t=p(t));const r=t.statusCode,i=t;i.statusMessage=i.statusMessage?i.statusMessage:a.STATUS_CODES[r],i.url=e.url.toString(),i.requestUrl=this.requestUrl,i.redirectUrls=this.redirects,i.request=this,i.isFromCache=t.fromCache||!1,i.ip=this.ip,i.retryCount=this.retryCount,this[$]=i.isFromCache,this[M]=Number(t.headers["content-length"])||void 0,this[A]=t,t.once("end",(()=>{this[M]=this[I],this.emit("downloadProgress",this.downloadProgress)})),t.once("error",(e=>{t.destroy(),this._beforeError(new it(e,this))})),t.once("aborted",(()=>{this._beforeError(new it({name:"Error",message:"The server aborted pending request",code:"ECONNRESET"},this))})),this.emit("downloadProgress",this.downloadProgress);const o=t.headers["set-cookie"];if(g.default.object(e.cookieJar)&&o){let t=o.map((async t=>e.cookieJar.setCookie(t,s.toString())));e.ignoreInvalidCookies&&(t=t.map((async t=>t.catch((()=>{})))));try{await Promise.all(t)}catch(t){return void this._beforeError(t)}}if(e.followRedirect&&t.headers.location&&K.has(r)){if(t.resume(),this[R]&&(this[L](),delete this[R],this[q]()),!(303===r&&"GET"!==e.method&&"HEAD"!==e.method)&&e.methodRewriting||(e.method="GET","body"in e&&delete e.body,"json"in e&&delete e.json,"form"in e&&delete e.form,this[F]=void 0,delete e.headers["content-length"]),this.redirects.length>=e.maxRedirects)return void this._beforeError(new X(this));try{const r=Buffer.from(t.headers.location,"binary").toString(),o=new n.URL(r,s),a=o.toString();decodeURI(a),o.hostname!==s.hostname||o.port!==s.port?("host"in e.headers&&delete e.headers.host,"cookie"in e.headers&&delete e.headers.cookie,"authorization"in e.headers&&delete e.headers.authorization,(e.username||e.password)&&(e.username="",e.password="")):(o.username=e.username,o.password=e.password),this.redirects.push(a),e.url=o;for(const t of e.hooks.beforeRedirect)await t(e,i);this.emit("redirect",i,e),await this._makeRequest()}catch(t){return void this._beforeError(t)}}else if(e.isStream&&e.throwHttpErrors&&!E.isResponseOk(i))this._beforeError(new tt(i));else{t.on("readable",(()=>{this[z]&&this._read()})),this.on("resume",(()=>{t.resume()})),this.on("pause",(()=>{t.pause()})),t.once("end",(()=>{this.push(null)})),this.emit("response",t);for(const s of this[D])if(!s.headersSent){for(const r in t.headers){const i=!e.decompress||"content-encoding"!==r,o=t.headers[r];i&&s.setHeader(r,o)}s.statusCode=r}}}async _onResponse(t){try{await this._onResponseBase(t)}catch(t){this._beforeError(t)}}_onRequest(t){const{options:e}=this,{timeout:s,url:r}=e;u.default(t),this[L]=_.default(t,s,r);const i=e.cache?"cacheableResponse":"response";t.once(i,(t=>{this._onResponse(t)})),t.once("error",(e=>{var s;t.destroy(),null===(s=t.res)||void 0===s||s.removeAllListeners("end"),e=e instanceof _.TimeoutError?new rt(e,this.timings,this):new Q(e.message,e,this),this._beforeError(e)})),this[q]=v.default(t,this,nt),this[R]=t,this.emit("uploadProgress",this.uploadProgress);const o=this[F],n=0===this.redirects.length?this:t;g.default.nodeStream(o)?(o.pipe(n),o.once("error",(t=>{this._beforeError(new st(t,this))}))):(this._unlockWrite(),g.default.undefined(o)?(this._cannotHaveBody||this._noPipe)&&(n.end(),this._lockWrite()):(this._writeRequest(o,void 0,(()=>{})),n.end(),this._lockWrite())),this.emit("request",t)}async _createCacheableRequest(t,e){return new Promise(((s,r)=>{let i;Object.assign(e,w.default(t)),delete e.url;const o=J.get(e.cache)(e,(async t=>{t._readableState.autoDestroy=!1,i&&(await i).emit("cacheableResponse",t),s(t)}));e.url=t,o.once("error",r),o.once("request",(async t=>{i=t,s(i)}))}))}async _makeRequest(){var t,e,s,r,i;const{options:o}=this,{headers:n}=o;for(const t in n)if(g.default.undefined(n[t]))delete n[t];else if(g.default.null_(n[t]))throw new TypeError(`Use \`undefined\` instead of \`null\` to delete the \`${t}\` header`);if(o.decompress&&g.default.undefined(n["accept-encoding"])&&(n["accept-encoding"]=Y?"gzip, deflate, br":"gzip, deflate"),o.cookieJar){const t=await o.cookieJar.getCookieString(o.url.toString());g.default.nonEmptyString(t)&&(o.headers.cookie=t)}for(const t of o.hooks.beforeRequest){const e=await t(o);if(!g.default.undefined(e)){o.request=()=>e;break}}o.body&&this[F]!==o.body&&(this[F]=o.body);const{agent:h,request:u,timeout:l,url:p}=o;if(o.dnsCache&&!("lookup"in o)&&(o.lookup=o.dnsCache.lookup),"unix"===p.hostname){const t=/(?<socketPath>.+?):(?<path>.+)/.exec(`${p.pathname}${p.search}`);if(null==t?void 0:t.groups){const{socketPath:e,path:s}=t.groups;Object.assign(o,{socketPath:e,path:s,host:""})}}const m="https:"===p.protocol;let y;y=o.http2?f.auto:m?c.request:a.request;const b=null!==(t=o.request)&&void 0!==t?t:y,v=o.cache?this._createCacheableRequest:b;h&&!o.http2&&(o.agent=h[m?"https":"http"]),o[R]=b,delete o.request,delete o.timeout;const _=o;if(_.shared=null===(e=o.cacheOptions)||void 0===e?void 0:e.shared,_.cacheHeuristic=null===(s=o.cacheOptions)||void 0===s?void 0:s.cacheHeuristic,_.immutableMinTimeToLive=null===(r=o.cacheOptions)||void 0===r?void 0:r.immutableMinTimeToLive,_.ignoreCargoCult=null===(i=o.cacheOptions)||void 0===i?void 0:i.ignoreCargoCult,void 0!==o.dnsLookupIpVersion)try{_.family=S.dnsLookupIpVersionToFamily(o.dnsLookupIpVersion)}catch(t){throw new Error("Invalid `dnsLookupIpVersion` option value")}o.https&&("rejectUnauthorized"in o.https&&(_.rejectUnauthorized=o.https.rejectUnauthorized),o.https.checkServerIdentity&&(_.checkServerIdentity=o.https.checkServerIdentity),o.https.certificateAuthority&&(_.ca=o.https.certificateAuthority),o.https.certificate&&(_.cert=o.https.certificate),o.https.key&&(_.key=o.https.key),o.https.passphrase&&(_.passphrase=o.https.passphrase),o.https.pfx&&(_.pfx=o.https.pfx));try{let t=await v(p,_);g.default.undefined(t)&&(t=y(p,_)),o.request=u,o.timeout=l,o.agent=h,o.https&&("rejectUnauthorized"in o.https&&delete _.rejectUnauthorized,o.https.checkServerIdentity&&delete _.checkServerIdentity,o.https.certificateAuthority&&delete _.ca,o.https.certificate&&delete _.cert,o.https.key&&delete _.key,o.https.passphrase&&delete _.passphrase,o.https.pfx&&delete _.pfx),w=t,g.default.object(w)&&!("statusCode"in w)?this._onRequest(t):this.writable?(this.once("finish",(()=>{this._onResponse(t)})),this._unlockWrite(),this.end(),this._lockWrite()):this._onResponse(t)}catch(t){if(t instanceof d.CacheError)throw new et(t,this);throw new Q(t.message,t,this)}var w}async _error(t){try{for(const e of this.options.hooks.beforeError)t=await e(t)}catch(e){t=new Q(e.message,e,this)}this.destroy(t)}_beforeError(t){if(this[N])return;const{options:e}=this,s=this.retryCount+1;this[N]=!0,t instanceof Q||(t=new Q(t.message,t,this));const r=t,{response:i}=r;(async()=>{if(i&&!i.body){i.setEncoding(this._readableState.encoding);try{i.rawBody=await O.default(i),i.body=i.rawBody.toString()}catch(t){}}if(0!==this.listenerCount("retry")){let o;try{let t;i&&"retry-after"in i.headers&&(t=Number(i.headers["retry-after"]),Number.isNaN(t)?(t=Date.parse(i.headers["retry-after"])-Date.now(),t<=0&&(t=1)):t*=1e3),o=await e.retry.calculateDelay({attemptCount:s,retryOptions:e.retry,error:r,retryAfter:t,computedValue:k.default({attemptCount:s,retryOptions:e.retry,error:r,retryAfter:t,computedValue:0})})}catch(t){return void this._error(new Q(t.message,t,this))}if(o){const e=async()=>{try{for(const t of this.options.hooks.beforeRetry)await t(this.options,r,s)}catch(e){return void this._error(new Q(e.message,t,this))}this.destroyed||(this.destroy(),this.emit("retry",s,t))};return void(this[G]=setTimeout(e,o))}}this._error(r)})()}_read(){this[z]=!0;const t=this[A];if(t&&!this[N]){let e;for(t.readableLength&&(this[z]=!1);null!==(e=t.read());){this[I]+=e.length,this[B]=!0;const t=this.downloadProgress;t.percent<1&&this.emit("downloadProgress",t),this.push(e)}}}_write(t,e,s){const r=()=>{this._writeRequest(t,e,s)};this.requestInitialized?r():this[V].push(r)}_writeRequest(t,e,s){this[R].destroyed||(this._progressCallbacks.push((()=>{this[U]+=Buffer.byteLength(t,e);const s=this.uploadProgress;s.percent<1&&this.emit("uploadProgress",s)})),this[R].write(t,e,(t=>{!t&&this._progressCallbacks.length>0&&this._progressCallbacks.shift()(),s(t)})))}_final(t){const e=()=>{for(;0!==this._progressCallbacks.length;)this._progressCallbacks.shift()();R in this?this[R].destroyed?t():this[R].end((e=>{e||(this[H]=this[U],this.emit("uploadProgress",this.uploadProgress),this[R].emit("upload-complete")),t(e)})):t()};this.requestInitialized?e():this[V].push(e)}_destroy(t,e){var s;this[N]=!0,clearTimeout(this[G]),R in this&&(this[L](),(null===(s=this[A])||void 0===s?void 0:s.complete)||this[R].destroy()),null===t||g.default.undefined(t)||t instanceof Q||(t=new Q(t.message,t,this)),e(t)}get _isAboutToError(){return this[N]}get ip(){var t;return null===(t=this.socket)||void 0===t?void 0:t.remoteAddress}get aborted(){var t,e,s;return(null!==(e=null===(t=this[R])||void 0===t?void 0:t.destroyed)&&void 0!==e?e:this.destroyed)&&!(null===(s=this[W])||void 0===s?void 0:s.complete)}get socket(){var t,e;return null!==(e=null===(t=this[R])||void 0===t?void 0:t.socket)&&void 0!==e?e:void 0}get downloadProgress(){let t;return t=this[M]?this[I]/this[M]:this[M]===this[I]?1:0,{percent:t,transferred:this[I],total:this[M]}}get uploadProgress(){let t;return t=this[H]?this[U]/this[H]:this[H]===this[U]?1:0,{percent:t,transferred:this[U],total:this[H]}}get timings(){var t;return null===(t=this[R])||void 0===t?void 0:t.timings}get isFromCache(){return this[$]}pipe(t,e){if(this[B])throw new Error("Failed to pipe. The response has been emitted already.");return t instanceof h.ServerResponse&&this[D].add(t),super.pipe(t,e)}unpipe(t){return t instanceof h.ServerResponse&&this[D].delete(t),super.unpipe(t),this}}e.default=at},354:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.dnsLookupIpVersionToFamily=e.isDnsLookupIpVersion=void 0;const s={auto:0,ipv4:4,ipv6:6};e.isDnsLookupIpVersion=t=>t in s,e.dnsLookupIpVersionToFamily=t=>{if(e.isDnsLookupIpVersion(t))return s[t];throw new Error("Invalid DNS lookup IP version")}},2425:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=s(4826),i=s(1669),o=s(657),n=s(6721),a=i.promisify(r.stat);e.default=async(t,e)=>{if(e&&"content-length"in e)return Number(e["content-length"]);if(!t)return 0;if(o.default.string(t))return Buffer.byteLength(t);if(o.default.buffer(t))return t.length;if(n.default(t))return i.promisify(t.getLength.bind(t))();if(t instanceof r.ReadStream){const{size:e}=await a(t.path);if(0===e)return;return e}}},4992:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=async t=>{const e=[];let s=0;for await(const r of t)e.push(r),s+=Buffer.byteLength(r);return Buffer.isBuffer(e[0])?Buffer.concat(e,s):Buffer.from(e.join(""))}},6721:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=s(657);e.default=t=>r.default.nodeStream(t)&&r.default.function_(t.getBoundary)},8141:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.isResponseOk=void 0,e.isResponseOk=t=>{const{statusCode:e}=t,s=t.request.options.followRedirect?299:399;return e>=200&&e<=s||304===e}},186:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=s(8835),i=["protocol","host","hostname","port","pathname","search"];e.default=(t,e)=>{var s,o;if(e.path){if(e.pathname)throw new TypeError("Parameters `path` and `pathname` are mutually exclusive.");if(e.search)throw new TypeError("Parameters `path` and `search` are mutually exclusive.");if(e.searchParams)throw new TypeError("Parameters `path` and `searchParams` are mutually exclusive.")}if(e.search&&e.searchParams)throw new TypeError("Parameters `search` and `searchParams` are mutually exclusive.");if(!t){if(!e.protocol)throw new TypeError("No URL protocol specified");t=`${e.protocol}//${null!==(o=null!==(s=e.hostname)&&void 0!==s?s:e.host)&&void 0!==o?o:""}`}const n=new r.URL(t);if(e.path){const t=e.path.indexOf("?");-1===t?e.pathname=e.path:(e.pathname=e.path.slice(0,t),e.search=e.path.slice(t+1)),delete e.path}for(const t of i)e[t]&&(n[t]=e[t].toString());return n}},4805:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,s){const r={};for(const i of s)r[i]=(...t)=>{e.emit(i,...t)},t.on(i,r[i]);return()=>{for(const e of s)t.off(e,r[e])}}},4834:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TimeoutError=void 0;const r=s(1631),i=s(8535),o=Symbol("reentry"),n=()=>{};class a extends Error{constructor(t,e){super(`Timeout awaiting '${e}' for ${t}ms`),this.event=e,this.name="TimeoutError",this.code="ETIMEDOUT"}}e.TimeoutError=a,e.default=(t,e,s)=>{if(o in t)return n;t[o]=!0;const h=[],{once:c,unhandleAll:u}=i.default(),l=(t,e,s)=>{var r;const i=setTimeout(e,t,t,s);null===(r=i.unref)||void 0===r||r.call(i);const o=()=>{clearTimeout(i)};return h.push(o),o},{host:d,hostname:p}=s,f=(e,s)=>{t.destroy(new a(e,s))},m=()=>{for(const t of h)t();u()};if(t.once("error",(e=>{if(m(),0===t.listenerCount("error"))throw e})),t.once("close",m),c(t,"response",(t=>{c(t,"end",m)})),void 0!==e.request&&l(e.request,f,"request"),void 0!==e.socket){const s=()=>{f(e.socket,"socket")};t.setTimeout(e.socket,s),h.push((()=>{t.removeListener("timeout",s)}))}return c(t,"socket",(i=>{var o;const{socketPath:n}=t;if(i.connecting){const t=Boolean(null!=n?n:0!==r.isIP(null!==(o=null!=p?p:d)&&void 0!==o?o:""));if(void 0!==e.lookup&&!t&&void 0===i.address().address){const t=l(e.lookup,f,"lookup");c(i,"lookup",t)}if(void 0!==e.connect){const s=()=>l(e.connect,f,"connect");t?c(i,"connect",s()):c(i,"lookup",(t=>{null===t&&c(i,"connect",s())}))}void 0!==e.secureConnect&&"https:"===s.protocol&&c(i,"connect",(()=>{const t=l(e.secureConnect,f,"secureConnect");c(i,"secureConnect",t)}))}if(void 0!==e.send){const s=()=>l(e.send,f,"send");i.connecting?c(i,"connect",(()=>{c(t,"upload-complete",s())})):c(t,"upload-complete",s())}})),void 0!==e.response&&c(t,"upload-complete",(()=>{const s=l(e.response,f,"response");c(t,"response",s)})),m}},8535:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=()=>{const t=[];return{once(e,s,r){e.once(s,r),t.push({origin:e,event:s,fn:r})},unhandleAll(){for(const e of t){const{origin:t,event:s,fn:r}=e;t.removeListener(s,r)}t.length=0}}}},6959:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=s(657);e.default=t=>{const e={protocol:(t=t).protocol,hostname:r.default.string(t.hostname)&&t.hostname.startsWith("[")?t.hostname.slice(1,-1):t.hostname,host:t.host,hash:t.hash,search:t.search,pathname:t.pathname,href:t.href,path:`${t.pathname||""}${t.search||""}`};return r.default.string(t.port)&&t.port.length>0&&(e.port=Number(t.port)),(t.username||t.password)&&(e.auth=`${t.username||""}:${t.password||""}`),e}},7440:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(){this.weakMap=new WeakMap,this.map=new Map}set(t,e){"object"==typeof t?this.weakMap.set(t,e):this.map.set(t,e)}get(t){return"object"==typeof t?this.weakMap.get(t):this.map.get(t)}has(t){return"object"==typeof t?this.weakMap.has(t):this.map.has(t)}}},6427:function(t,e,s){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,e,s,r){void 0===r&&(r=s),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[s]}})}:function(t,e,s,r){void 0===r&&(r=s),t[r]=e[s]}),i=this&&this.__exportStar||function(t,e){for(var s in t)"default"===s||Object.prototype.hasOwnProperty.call(e,s)||r(e,t,s)};Object.defineProperty(e,"__esModule",{value:!0}),e.defaultHandler=void 0;const o=s(657),n=s(9291),a=s(6133),h=s(8178),c=s(4638),u={RequestError:n.RequestError,CacheError:n.CacheError,ReadError:n.ReadError,HTTPError:n.HTTPError,MaxRedirectsError:n.MaxRedirectsError,TimeoutError:n.TimeoutError,ParseError:n.ParseError,CancelError:n.CancelError,UnsupportedProtocolError:n.UnsupportedProtocolError,UploadError:n.UploadError},l=async t=>new Promise((e=>{setTimeout(e,t)})),{normalizeArguments:d}=h.default,p=(...t)=>{let e;for(const s of t)e=d(void 0,s,e);return e},f=t=>t.isStream?new h.default(void 0,t):n.default(t),m=t=>"defaults"in t&&"options"in t.defaults,g=["get","post","put","patch","head","delete"];e.defaultHandler=(t,e)=>e(t);const y=(t,e)=>{if(t)for(const s of t)s(e)},b=t=>{t._rawHandlers=t.handlers,t.handlers=t.handlers.map((t=>(e,s)=>{let r;const i=t(e,(t=>(r=s(t),r)));if(i!==r&&!e.isStream&&r){const t=i,{then:e,catch:s,finally:o}=t;Object.setPrototypeOf(t,Object.getPrototypeOf(r)),Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)),t.then=e,t.catch=s,t.finally=o}return i}));const s=(e,s={},r)=>{var i,c;let u=0;const l=e=>t.handlers[u++](e,u===t.handlers.length?f:l);if(o.default.plainObject(e)){const t={...e,...s};h.setNonEnumerableProperties([e,s],t),s=t,e=void 0}try{let o;try{y(t.options.hooks.init,s),y(null===(i=s.hooks)||void 0===i?void 0:i.init,s)}catch(t){o=t}const a=d(e,s,null!=r?r:t.options);if(a[h.kIsNormalizedAlready]=!0,o)throw new n.RequestError(o.message,o,a);return l(a)}catch(e){if(s.isStream)throw e;return a.default(e,t.options.hooks.beforeError,null===(c=s.hooks)||void 0===c?void 0:c.beforeError)}};s.extend=(...s)=>{const r=[t.options];let i,o=[...t._rawHandlers];for(const t of s)m(t)?(r.push(t.defaults.options),o.push(...t.defaults._rawHandlers),i=t.defaults.mutableDefaults):(r.push(t),"handlers"in t&&o.push(...t.handlers),i=t.mutableDefaults);return o=o.filter((t=>t!==e.defaultHandler)),0===o.length&&o.push(e.defaultHandler),b({options:p(...r),handlers:o,mutableDefaults:Boolean(i)})};const r=async function*(e,r){let i=d(e,r,t.options);i.resolveBodyOnly=!1;const n=i.pagination;if(!o.default.object(n))throw new TypeError("`options.pagination` must be implemented");const a=[];let{countLimit:h}=n,c=0;for(;c<n.requestLimit;){0!==c&&await l(n.backoff);const t=await s(void 0,void 0,i),e=await n.transform(t),r=[];for(const t of e)if(n.filter(t,a,r)){if(!n.shouldContinue(t,a,r))return;if(yield t,n.stackAllItems&&a.push(t),r.push(t),--h<=0)return}const o=n.paginate(t,a,r);if(!1===o)return;o===t.request.options?i=t.request.options:void 0!==o&&(i=d(void 0,o,i)),c++}};(s.paginate=r).all=async(t,e)=>{const s=[];for await(const i of r(t,e))s.push(i);return s},s.paginate.each=r,s.stream=(t,e)=>s(t,{...e,isStream:!0});for(const t of g)s[t]=(e,r)=>s(e,{...r,method:t}),s.stream[t]=(e,r)=>s(e,{...r,method:t,isStream:!0});return Object.assign(s,u),Object.defineProperty(s,"defaults",{value:t.mutableDefaults?t:c.default(t),writable:t.mutableDefaults,configurable:t.mutableDefaults,enumerable:!0}),s.mergeOptions=p,s};e.default=b,i(s(8317),e)},2210:function(t,e,s){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,e,s,r){void 0===r&&(r=s),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[s]}})}:function(t,e,s,r){void 0===r&&(r=s),t[r]=e[s]}),i=this&&this.__exportStar||function(t,e){for(var s in t)"default"===s||Object.prototype.hasOwnProperty.call(e,s)||r(e,t,s)};Object.defineProperty(e,"__esModule",{value:!0});const o=s(8835),n=s(6427),a={options:{method:"GET",retry:{limit:2,methods:["GET","PUT","HEAD","DELETE","OPTIONS","TRACE"],statusCodes:[408,413,429,500,502,503,504,521,522,524],errorCodes:["ETIMEDOUT","ECONNRESET","EADDRINUSE","ECONNREFUSED","EPIPE","ENOTFOUND","ENETUNREACH","EAI_AGAIN"],maxRetryAfter:void 0,calculateDelay:({computedValue:t})=>t},timeout:{},headers:{"user-agent":"got (https://github.com/sindresorhus/got)"},hooks:{init:[],beforeRequest:[],beforeRedirect:[],beforeRetry:[],beforeError:[],afterResponse:[]},cache:void 0,dnsCache:void 0,decompress:!0,throwHttpErrors:!0,followRedirect:!0,isStream:!1,responseType:"text",resolveBodyOnly:!1,maxRedirects:10,prefixUrl:"",methodRewriting:!0,ignoreInvalidCookies:!1,context:{},http2:!1,allowGetBody:!1,https:void 0,pagination:{transform:t=>"json"===t.request.options.responseType?t.body:JSON.parse(t.body),paginate:t=>{if(!Reflect.has(t.headers,"link"))return!1;const e=t.headers.link.split(",");let s;for(const t of e){const e=t.split(";");if(e[1].includes("next")){s=e[0].trimStart().trim(),s=s.slice(1,-1);break}}return!!s&&{url:new o.URL(s)}},filter:()=>!0,shouldContinue:()=>!0,countLimit:1/0,backoff:0,requestLimit:1e4,stackAllItems:!0},parseJson:t=>JSON.parse(t),stringifyJson:t=>JSON.stringify(t),cacheOptions:{}},handlers:[n.defaultHandler],mutableDefaults:!1},h=n.default(a);e.default=h,t.exports=h,t.exports.default=h,t.exports.__esModule=!0,i(s(6427),e),i(s(9291),e)},8317:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0})},4638:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=s(657);e.default=function t(e){for(const s of Object.values(e))(r.default.plainObject(s)||r.default.array(s))&&t(s);return Object.freeze(e)}},5241:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=new Set;e.default=t=>{s.has(t)||(s.add(t),process.emitWarning(`Got: ${t}`,{type:"DeprecationWarning"}))}},6214:t=>{"use strict";const e=new Set([200,203,204,206,300,301,404,405,410,414,501]),s=new Set([200,203,204,300,301,302,303,307,308,404,405,410,414,501]),r=new Set([500,502,503,504]),i={date:!0,connection:!0,"keep-alive":!0,"proxy-authenticate":!0,"proxy-authorization":!0,te:!0,trailer:!0,"transfer-encoding":!0,upgrade:!0},o={"content-length":!0,"content-encoding":!0,"transfer-encoding":!0,"content-range":!0};function n(t){const e=parseInt(t,10);return isFinite(e)?e:0}function a(t){const e={};if(!t)return e;const s=t.trim().split(/\s*,\s*/);for(const t of s){const[s,r]=t.split(/\s*=\s*/,2);e[s]=void 0===r||r.replace(/^"|"$/g,"")}return e}function h(t){let e=[];for(const s in t){const r=t[s];e.push(!0===r?s:s+"="+r)}if(e.length)return e.join(", ")}t.exports=class{constructor(t,e,{shared:s,cacheHeuristic:r,immutableMinTimeToLive:i,ignoreCargoCult:o,_fromObject:n}={}){if(n)this._fromObject(n);else{if(!e||!e.headers)throw Error("Response headers missing");this._assertRequestHasHeaders(t),this._responseTime=this.now(),this._isShared=!1!==s,this._cacheHeuristic=void 0!==r?r:.1,this._immutableMinTtl=void 0!==i?i:864e5,this._status="status"in e?e.status:200,this._resHeaders=e.headers,this._rescc=a(e.headers["cache-control"]),this._method="method"in t?t.method:"GET",this._url=t.url,this._host=t.headers.host,this._noAuthorization=!t.headers.authorization,this._reqHeaders=e.headers.vary?t.headers:null,this._reqcc=a(t.headers["cache-control"]),o&&"pre-check"in this._rescc&&"post-check"in this._rescc&&(delete this._rescc["pre-check"],delete this._rescc["post-check"],delete this._rescc["no-cache"],delete this._rescc["no-store"],delete this._rescc["must-revalidate"],this._resHeaders=Object.assign({},this._resHeaders,{"cache-control":h(this._rescc)}),delete this._resHeaders.expires,delete this._resHeaders.pragma),null==e.headers["cache-control"]&&/no-cache/.test(e.headers.pragma)&&(this._rescc["no-cache"]=!0)}}now(){return Date.now()}storable(){return!(this._reqcc["no-store"]||!("GET"===this._method||"HEAD"===this._method||"POST"===this._method&&this._hasExplicitExpiration())||!s.has(this._status)||this._rescc["no-store"]||this._isShared&&this._rescc.private||this._isShared&&!this._noAuthorization&&!this._allowsStoringAuthenticated()||!(this._resHeaders.expires||this._rescc["max-age"]||this._isShared&&this._rescc["s-maxage"]||this._rescc.public||e.has(this._status)))}_hasExplicitExpiration(){return this._isShared&&this._rescc["s-maxage"]||this._rescc["max-age"]||this._resHeaders.expires}_assertRequestHasHeaders(t){if(!t||!t.headers)throw Error("Request headers missing")}satisfiesWithoutRevalidation(t){this._assertRequestHasHeaders(t);const e=a(t.headers["cache-control"]);return!e["no-cache"]&&!/no-cache/.test(t.headers.pragma)&&(!(e["max-age"]&&this.age()>e["max-age"])&&(!(e["min-fresh"]&&this.timeToLive()<1e3*e["min-fresh"])&&(!(this.stale()&&(!e["max-stale"]||this._rescc["must-revalidate"]||!(!0===e["max-stale"]||e["max-stale"]>this.age()-this.maxAge())))&&this._requestMatches(t,!1))))}_requestMatches(t,e){return(!this._url||this._url===t.url)&&this._host===t.headers.host&&(!t.method||this._method===t.method||e&&"HEAD"===t.method)&&this._varyMatches(t)}_allowsStoringAuthenticated(){return this._rescc["must-revalidate"]||this._rescc.public||this._rescc["s-maxage"]}_varyMatches(t){if(!this._resHeaders.vary)return!0;if("*"===this._resHeaders.vary)return!1;const e=this._resHeaders.vary.trim().toLowerCase().split(/\s*,\s*/);for(const s of e)if(t.headers[s]!==this._reqHeaders[s])return!1;return!0}_copyWithoutHopByHopHeaders(t){const e={};for(const s in t)i[s]||(e[s]=t[s]);if(t.connection){const s=t.connection.trim().split(/\s*,\s*/);for(const t of s)delete e[t]}if(e.warning){const t=e.warning.split(/,/).filter((t=>!/^\s*1[0-9][0-9]/.test(t)));t.length?e.warning=t.join(",").trim():delete e.warning}return e}responseHeaders(){const t=this._copyWithoutHopByHopHeaders(this._resHeaders),e=this.age();return e>86400&&!this._hasExplicitExpiration()&&this.maxAge()>86400&&(t.warning=(t.warning?`${t.warning}, `:"")+'113 - "rfc7234 5.5.4"'),t.age=`${Math.round(e)}`,t.date=new Date(this.now()).toUTCString(),t}date(){const t=Date.parse(this._resHeaders.date);return isFinite(t)?t:this._responseTime}age(){return this._ageValue()+(this.now()-this._responseTime)/1e3}_ageValue(){return n(this._resHeaders.age)}maxAge(){if(!this.storable()||this._rescc["no-cache"])return 0;if(this._isShared&&this._resHeaders["set-cookie"]&&!this._rescc.public&&!this._rescc.immutable)return 0;if("*"===this._resHeaders.vary)return 0;if(this._isShared){if(this._rescc["proxy-revalidate"])return 0;if(this._rescc["s-maxage"])return n(this._rescc["s-maxage"])}if(this._rescc["max-age"])return n(this._rescc["max-age"]);const t=this._rescc.immutable?this._immutableMinTtl:0,e=this.date();if(this._resHeaders.expires){const s=Date.parse(this._resHeaders.expires);return Number.isNaN(s)||s<e?0:Math.max(t,(s-e)/1e3)}if(this._resHeaders["last-modified"]){const s=Date.parse(this._resHeaders["last-modified"]);if(isFinite(s)&&e>s)return Math.max(t,(e-s)/1e3*this._cacheHeuristic)}return t}timeToLive(){const t=this.maxAge()-this.age(),e=t+n(this._rescc["stale-if-error"]),s=t+n(this._rescc["stale-while-revalidate"]);return 1e3*Math.max(0,t,e,s)}stale(){return this.maxAge()<=this.age()}_useStaleIfError(){return this.maxAge()+n(this._rescc["stale-if-error"])>this.age()}useStaleWhileRevalidate(){return this.maxAge()+n(this._rescc["stale-while-revalidate"])>this.age()}static fromObject(t){return new this(void 0,void 0,{_fromObject:t})}_fromObject(t){if(this._responseTime)throw Error("Reinitialized");if(!t||1!==t.v)throw Error("Invalid serialization");this._responseTime=t.t,this._isShared=t.sh,this._cacheHeuristic=t.ch,this._immutableMinTtl=void 0!==t.imm?t.imm:864e5,this._status=t.st,this._resHeaders=t.resh,this._rescc=t.rescc,this._method=t.m,this._url=t.u,this._host=t.h,this._noAuthorization=t.a,this._reqHeaders=t.reqh,this._reqcc=t.reqcc}toObject(){return{v:1,t:this._responseTime,sh:this._isShared,ch:this._cacheHeuristic,imm:this._immutableMinTtl,st:this._status,resh:this._resHeaders,rescc:this._rescc,m:this._method,u:this._url,h:this._host,a:this._noAuthorization,reqh:this._reqHeaders,reqcc:this._reqcc}}revalidationHeaders(t){this._assertRequestHasHeaders(t);const e=this._copyWithoutHopByHopHeaders(t.headers);if(delete e["if-range"],!this._requestMatches(t,!0)||!this.storable())return delete e["if-none-match"],delete e["if-modified-since"],e;if(this._resHeaders.etag&&(e["if-none-match"]=e["if-none-match"]?`${e["if-none-match"]}, ${this._resHeaders.etag}`:this._resHeaders.etag),e["accept-ranges"]||e["if-match"]||e["if-unmodified-since"]||this._method&&"GET"!=this._method){if(delete e["if-modified-since"],e["if-none-match"]){const t=e["if-none-match"].split(/,/).filter((t=>!/^\s*W\//.test(t)));t.length?e["if-none-match"]=t.join(",").trim():delete e["if-none-match"]}}else this._resHeaders["last-modified"]&&!e["if-modified-since"]&&(e["if-modified-since"]=this._resHeaders["last-modified"]);return e}revalidatedPolicy(t,e){if(this._assertRequestHasHeaders(t),this._useStaleIfError()&&function(t){return!t||r.has(t.status)}(e))return{modified:!1,matches:!1,policy:this};if(!e||!e.headers)throw Error("Response headers missing");let s=!1;if(void 0!==e.status&&304!=e.status?s=!1:e.headers.etag&&!/^\s*W\//.test(e.headers.etag)?s=this._resHeaders.etag&&this._resHeaders.etag.replace(/^\s*W\//,"")===e.headers.etag:this._resHeaders.etag&&e.headers.etag?s=this._resHeaders.etag.replace(/^\s*W\//,"")===e.headers.etag.replace(/^\s*W\//,""):this._resHeaders["last-modified"]?s=this._resHeaders["last-modified"]===e.headers["last-modified"]:this._resHeaders.etag||this._resHeaders["last-modified"]||e.headers.etag||e.headers["last-modified"]||(s=!0),!s)return{policy:new this.constructor(t,e),modified:304!=e.status,matches:!1};const i={};for(const t in this._resHeaders)i[t]=t in e.headers&&!o[t]?e.headers[t]:this._resHeaders[t];const n=Object.assign({},e,{status:this._status,method:this._method,headers:i});return{policy:new this.constructor(t,n,{shared:this._isShared,cacheHeuristic:this._cacheHeuristic,immutableMinTimeToLive:this._immutableMinTtl}),modified:!1,matches:!0}}}},4685:(t,e,s)=>{"use strict";const r=s(8614),i=s(4016),o=s(7565),n=s(1269),a=Symbol("currentStreamsCount"),h=Symbol("request"),c=Symbol("cachedOriginSet"),u=Symbol("gracefullyClosing"),l=["maxDeflateDynamicTableSize","maxSessionMemory","maxHeaderListPairs","maxOutstandingPings","maxReservedRemoteStreams","maxSendHeaderBlockLength","paddingStrategy","localAddress","path","rejectUnauthorized","minDHSize","ca","cert","clientCertEngine","ciphers","key","pfx","servername","minVersion","maxVersion","secureProtocol","crl","honorCipherOrder","ecdhCurve","dhparam","secureOptions","sessionIdContext"],d=(t,e)=>t.remoteSettings.maxConcurrentStreams>e.remoteSettings.maxConcurrentStreams,p=(t,e)=>{for(const s of t)s[c].length<e[c].length&&s[c].every((t=>e[c].includes(t)))&&s[a]+e[a]<=e.remoteSettings.maxConcurrentStreams&&m(s)},f=({agent:t,isFree:e})=>{const s={};for(const r in t.sessions){const i=t.sessions[r].filter((t=>{const s=t[g.kCurrentStreamsCount]<t.remoteSettings.maxConcurrentStreams;return e?s:!s}));0!==i.length&&(s[r]=i)}return s},m=t=>{t[u]=!0,0===t[a]&&t.close()};class g extends r{constructor({timeout:t=6e4,maxSessions:e=1/0,maxFreeSessions:s=10,maxCachedTlsSessions:r=100}={}){super(),this.sessions={},this.queue={},this.timeout=t,this.maxSessions=e,this.maxFreeSessions=s,this._freeSessionsCount=0,this._sessionsCount=0,this.settings={enablePush:!1},this.tlsSessionCache=new n({maxSize:r})}static normalizeOrigin(t,e){return"string"==typeof t&&(t=new URL(t)),e&&t.hostname!==e&&(t.hostname=e),t.origin}normalizeOptions(t){let e="";if(t)for(const s of l)t[s]&&(e+=`:${t[s]}`);return e}_tryToCreateNewSession(t,e){if(!(t in this.queue)||!(e in this.queue[t]))return;const s=this.queue[t][e];this._sessionsCount<this.maxSessions&&!s.completed&&(s.completed=!0,s())}getSession(t,e,s){return new Promise(((r,i)=>{Array.isArray(s)?(s=[...s],r()):s=[{resolve:r,reject:i}];const n=this.normalizeOptions(e),l=g.normalizeOrigin(t,e&&e.servername);if(void 0===l){for(const{reject:t}of s)t(new TypeError("The `origin` argument needs to be a string or an URL object"));return}if(n in this.sessions){const t=this.sessions[n];let e,r=-1,i=-1;for(const s of t){const t=s.remoteSettings.maxConcurrentStreams;if(t<r)break;if(s[c].includes(l)){const o=s[a];if(o>=t||s[u]||s.destroyed)continue;e||(r=t),o>i&&(e=s,i=o)}}if(e){if(1!==s.length){for(const{reject:t}of s)t(new Error(`Expected the length of listeners to be 1, got ${s.length}.\nPlease report this to https://github.com/szmarczak/http2-wrapper/`));return}return void s[0].resolve(e)}}if(n in this.queue){if(l in this.queue[n])return this.queue[n][l].listeners.push(...s),void this._tryToCreateNewSession(n,l)}else this.queue[n]={};const f=()=>{n in this.queue&&this.queue[n][l]===y&&(delete this.queue[n][l],0===Object.keys(this.queue[n]).length&&delete this.queue[n])},y=()=>{const r=`${l}:${n}`;let i=!1;try{const g=o.connect(t,{createConnection:this.createConnection,settings:this.settings,session:this.tlsSessionCache.get(r),...e});g[a]=0,g[u]=!1;const b=()=>g[a]<g.remoteSettings.maxConcurrentStreams;let v=!0;g.socket.once("session",(t=>{this.tlsSessionCache.set(r,t)})),g.once("error",(t=>{for(const{reject:e}of s)e(t);this.tlsSessionCache.delete(r)})),g.setTimeout(this.timeout,(()=>{g.destroy()})),g.once("close",(()=>{if(i){v&&this._freeSessionsCount--,this._sessionsCount--;const t=this.sessions[n];t.splice(t.indexOf(g),1),0===t.length&&delete this.sessions[n]}else{const t=new Error("Session closed without receiving a SETTINGS frame");t.code="HTTP2WRAPPER_NOSETTINGS";for(const{reject:e}of s)e(t);f()}this._tryToCreateNewSession(n,l)}));const _=()=>{if(n in this.queue&&b())for(const t of g[c])if(t in this.queue[n]){const{listeners:e}=this.queue[n][t];for(;0!==e.length&&b();)e.shift().resolve(g);const s=this.queue[n];if(0===s[t].listeners.length&&(delete s[t],0===Object.keys(s).length)){delete this.queue[n];break}if(!b())break}};g.on("origin",(()=>{g[c]=g.originSet,b()&&(_(),p(this.sessions[n],g))})),g.once("remoteSettings",(()=>{if(g.ref(),g.unref(),this._sessionsCount++,y.destroyed){const t=new Error("Agent has been destroyed");for(const e of s)e.reject(t);g.destroy()}else{g[c]=g.originSet;{const t=this.sessions;if(n in t){const e=t[n];e.splice(((t,e,s)=>{let r=0,i=t.length;for(;r<i;){const o=r+i>>>1;s(t[o],e)?r=o+1:i=o}return r})(e,g,d),0,g)}else t[n]=[g]}this._freeSessionsCount+=1,i=!0,this.emit("session",g),_(),f(),0===g[a]&&this._freeSessionsCount>this.maxFreeSessions&&g.close(),0!==s.length&&(this.getSession(l,e,s),s.length=0),g.on("remoteSettings",(()=>{_(),p(this.sessions[n],g)}))}})),g[h]=g.request,g.request=(t,e)=>{if(g[u])throw new Error("The session is gracefully closing. No new streams are allowed.");const s=g[h](t,e);return g.ref(),++g[a],g[a]===g.remoteSettings.maxConcurrentStreams&&this._freeSessionsCount--,s.once("close",(()=>{if(v=b(),--g[a],!g.destroyed&&!g.closed&&(((t,e)=>{for(const s of t)e[c].length<s[c].length&&e[c].every((t=>s[c].includes(t)))&&e[a]+s[a]<=s.remoteSettings.maxConcurrentStreams&&m(e)})(this.sessions[n],g),b()&&!g.closed)){v||(this._freeSessionsCount++,v=!0);const t=0===g[a];t&&g.unref(),t&&(this._freeSessionsCount>this.maxFreeSessions||g[u])?g.close():(p(this.sessions[n],g),_())}})),s}}catch(t){for(const e of s)e.reject(t);f()}};y.listeners=s,y.completed=!1,y.destroyed=!1,this.queue[n][l]=y,this._tryToCreateNewSession(n,l)}))}request(t,e,s,r){return new Promise(((i,o)=>{this.getSession(t,e,[{reject:o,resolve:t=>{try{i(t.request(s,r))}catch(t){o(t)}}}])}))}createConnection(t,e){return g.connect(t,e)}static connect(t,e){e.ALPNProtocols=["h2"];const s=t.port||443,r=t.hostname||t.host;return void 0===e.servername&&(e.servername=r),i.connect(s,r,e)}closeFreeSessions(){for(const t of Object.values(this.sessions))for(const e of t)0===e[a]&&e.close()}destroy(t){for(const e of Object.values(this.sessions))for(const s of e)s.destroy(t);for(const t of Object.values(this.queue))for(const e of Object.values(t))e.destroyed=!0;this.queue={}}get freeSessions(){return f({agent:this,isFree:!0})}get busySessions(){return f({agent:this,isFree:!1})}}g.kCurrentStreamsCount=a,g.kGracefullyClosing=u,t.exports={Agent:g,globalAgent:new g}},6673:(t,e,s)=>{"use strict";const r=s(8605),i=s(7211),o=s(5322),n=s(1269),a=s(2287),h=s(4017),c=s(5978),u=new n({maxSize:100}),l=new Map,d=(t,e,s)=>{e._httpMessage={shouldKeepAlive:!0};const r=()=>{t.emit("free",e,s)};e.on("free",r);const i=()=>{t.removeSocket(e,s)};e.on("close",i);const o=()=>{t.removeSocket(e,s),e.off("close",i),e.off("free",r),e.off("agentRemove",o)};e.on("agentRemove",o),t.emit("free",e,s)};t.exports=async(t,e,s)=>{if(("string"==typeof t||t instanceof URL)&&(t=c(new URL(t))),"function"==typeof e&&(s=e,e=void 0),e={ALPNProtocols:["h2","http/1.1"],...t,...e,resolveSocket:!0},!Array.isArray(e.ALPNProtocols)||0===e.ALPNProtocols.length)throw new Error("The `ALPNProtocols` option must be an Array with at least one entry");e.protocol=e.protocol||"https:";const n="https:"===e.protocol;e.host=e.hostname||e.host||"localhost",e.session=e.tlsSession,e.servername=e.servername||h(e),e.port=e.port||(n?443:80),e._defaultAgent=n?i.globalAgent:r.globalAgent;const p=e.agent;if(p){if(p.addRequest)throw new Error("The `options.agent` object can contain only `http`, `https` or `http2` properties");e.agent=p[n?"https":"http"]}return n&&"h2"===await(async t=>{const e=`${t.host}:${t.port}:${t.ALPNProtocols.sort()}`;if(!u.has(e)){if(l.has(e))return(await l.get(e)).alpnProtocol;const{path:s,agent:r}=t;t.path=t.socketPath;const n=o(t);l.set(e,n);try{const{socket:o,alpnProtocol:a}=await n;if(u.set(e,a),t.path=s,"h2"===a)o.destroy();else{const{globalAgent:e}=i,s=i.Agent.prototype.createConnection;r?r.createConnection===s?d(r,o,t):o.destroy():e.createConnection===s?d(e,o,t):o.destroy()}return l.delete(e),a}catch(t){throw l.delete(e),t}}return u.get(e)})(e)?(p&&(e.agent=p.http2),new a(e,s)):r.request(e,s)},t.exports.protocolCache=u},2287:(t,e,s)=>{"use strict";const r=s(7565),{Writable:i}=s(2413),{Agent:o,globalAgent:n}=s(4685),a=s(7138),h=s(5978),c=s(7306),u=s(8202),{ERR_INVALID_ARG_TYPE:l,ERR_INVALID_PROTOCOL:d,ERR_HTTP_HEADERS_SENT:p,ERR_INVALID_HTTP_TOKEN:f,ERR_HTTP_INVALID_HEADER_VALUE:m,ERR_INVALID_CHAR:g}=s(3190),{HTTP2_HEADER_STATUS:y,HTTP2_HEADER_METHOD:b,HTTP2_HEADER_PATH:v,HTTP2_METHOD_CONNECT:_}=r.constants,w=Symbol("headers"),x=Symbol("origin"),P=Symbol("session"),O=Symbol("options"),S=Symbol("flushedHeaders"),E=Symbol("jobs"),T=/^[\^`\-\w!#$%&*+.|~]+$/,C=/[^\t\u0020-\u007E\u0080-\u00FF]/;t.exports=class extends i{constructor(t,e,s){super({autoDestroy:!1});const r="string"==typeof t||t instanceof URL;if(r&&(t=h(t instanceof URL?t:new URL(t))),"function"==typeof e||void 0===e?(s=e,e=r?t:{...t}):e={...t,...e},e.h2session)this[P]=e.h2session;else if(!1===e.agent)this.agent=new o({maxFreeSessions:0});else if(void 0===e.agent||null===e.agent)"function"==typeof e.createConnection?(this.agent=new o({maxFreeSessions:0}),this.agent.createConnection=e.createConnection):this.agent=n;else{if("function"!=typeof e.agent.request)throw new l("options.agent",["Agent-like Object","undefined","false"],e.agent);this.agent=e.agent}if(e.protocol&&"https:"!==e.protocol)throw new d(e.protocol,"https:");const i=e.port||e.defaultPort||this.agent&&this.agent.defaultPort||443,a=e.hostname||e.host||"localhost";delete e.hostname,delete e.host,delete e.port;const{timeout:c}=e;if(e.timeout=void 0,this[w]=Object.create(null),this[E]=[],this.socket=null,this.connection=null,this.method=e.method||"GET",this.path=e.path,this.res=null,this.aborted=!1,this.reusedSocket=!1,e.headers)for(const[t,s]of Object.entries(e.headers))this.setHeader(t,s);e.auth&&!("authorization"in this[w])&&(this[w].authorization="Basic "+Buffer.from(e.auth).toString("base64")),e.session=e.tlsSession,e.path=e.socketPath,this[O]=e,443===i?(this[x]=`https://${a}`,":authority"in this[w]||(this[w][":authority"]=a)):(this[x]=`https://${a}:${i}`,":authority"in this[w]||(this[w][":authority"]=`${a}:${i}`)),c&&this.setTimeout(c),s&&this.once("response",s),this[S]=!1}get method(){return this[w][b]}set method(t){t&&(this[w][b]=t.toUpperCase())}get path(){return this[w][v]}set path(t){t&&(this[w][v]=t)}get _mustNotHaveABody(){return"GET"===this.method||"HEAD"===this.method||"DELETE"===this.method}_write(t,e,s){if(this._mustNotHaveABody)return void s(new Error("The GET, HEAD and DELETE methods must NOT have a body"));this.flushHeaders();const r=()=>this._request.write(t,e,s);this._request?r():this[E].push(r)}_final(t){if(this.destroyed)return;this.flushHeaders();const e=()=>{this._mustNotHaveABody?t():this._request.end(t)};this._request?e():this[E].push(e)}abort(){this.res&&this.res.complete||(this.aborted||process.nextTick((()=>this.emit("abort"))),this.aborted=!0,this.destroy())}_destroy(t,e){this.res&&this.res._dump(),this._request&&this._request.destroy(),e(t)}async flushHeaders(){if(this[S]||this.destroyed)return;this[S]=!0;const t=this.method===_,e=e=>{if(this._request=e,this.destroyed)return void e.destroy();t||c(e,this,["timeout","continue","close","error"]);const s=t=>(...e)=>{this.writable||this.destroyed?this.once("finish",(()=>{t(...e)})):t(...e)};e.once("response",s(((s,r,i)=>{const o=new a(this.socket,e.readableHighWaterMark);this.res=o,o.req=this,o.statusCode=s[y],o.headers=s,o.rawHeaders=i,o.once("end",(()=>{this.aborted?(o.aborted=!0,o.emit("aborted")):(o.complete=!0,o.socket=null,o.connection=null)})),t?(o.upgrade=!0,this.emit("connect",o,e,Buffer.alloc(0))?this.emit("close"):e.destroy()):(e.on("data",(t=>{o._dumped||o.push(t)||e.pause()})),e.once("end",(()=>{o.push(null)})),this.emit("response",o)||o._dump())}))),e.once("headers",s((t=>this.emit("information",{statusCode:t[y]})))),e.once("trailers",s(((t,e,s)=>{const{res:r}=this;r.trailers=t,r.rawTrailers=s})));const{socket:r}=e.session;this.socket=r,this.connection=r;for(const t of this[E])t();this.emit("socket",this.socket)};if(this[P])try{e(this[P].request(this[w]))}catch(t){this.emit("error",t)}else{this.reusedSocket=!0;try{e(await this.agent.request(this[x],this[O],this[w]))}catch(t){this.emit("error",t)}}}getHeader(t){if("string"!=typeof t)throw new l("name","string",t);return this[w][t.toLowerCase()]}get headersSent(){return this[S]}removeHeader(t){if("string"!=typeof t)throw new l("name","string",t);if(this.headersSent)throw new p("remove");delete this[w][t.toLowerCase()]}setHeader(t,e){if(this.headersSent)throw new p("set");if("string"!=typeof t||!T.test(t)&&!u(t))throw new f("Header name",t);if(void 0===e)throw new m(e,t);if(C.test(e))throw new g("header content",t);this[w][t.toLowerCase()]=e}setNoDelay(){}setSocketKeepAlive(){}setTimeout(t,e){const s=()=>this._request.setTimeout(t,e);return this._request?s():this[E].push(s),this}get maxHeadersCount(){if(!this.destroyed&&this._request)return this._request.session.localSettings.maxHeaderListSize}set maxHeadersCount(t){}}},7138:(t,e,s)=>{"use strict";const{Readable:r}=s(2413);t.exports=class extends r{constructor(t,e){super({highWaterMark:e,autoDestroy:!1}),this.statusCode=null,this.statusMessage="",this.httpVersion="2.0",this.httpVersionMajor=2,this.httpVersionMinor=0,this.headers={},this.trailers={},this.req=null,this.aborted=!1,this.complete=!1,this.upgrade=null,this.rawHeaders=[],this.rawTrailers=[],this.socket=t,this.connection=t,this._dumped=!1}_destroy(t){this.req._request.destroy(t)}setTimeout(t,e){return this.req.setTimeout(t,e),this}_dump(){this._dumped||(this._dumped=!0,this.removeAllListeners("data"),this.resume())}_read(){this.req&&this.req._request.resume()}}},9758:(t,e,s)=>{"use strict";const r=s(7565),i=s(4685),o=s(2287),n=s(7138),a=s(6673);t.exports={...r,ClientRequest:o,IncomingMessage:n,...i,request:(t,e,s)=>new o(t,e,s),get:(t,e,s)=>{const r=new o(t,e,s);return r.end(),r},auto:a}},4017:(t,e,s)=>{"use strict";const r=s(1631);t.exports=t=>{let e=t.host;const s=t.headers&&t.headers.host;return s&&(e=s.startsWith("[")?-1===s.indexOf("]")?s:s.slice(1,-1):s.split(":",1)[0]),r.isIP(e)?"":e}},3190:t=>{"use strict";const e=(e,s,r)=>{t.exports[s]=class extends e{constructor(...t){super("string"==typeof r?r:r(t)),this.name=`${super.name} [${s}]`,this.code=s}}};e(TypeError,"ERR_INVALID_ARG_TYPE",(t=>{const e=t[0].includes(".")?"property":"argument";let s=t[1];const r=Array.isArray(s);return r&&(s=`${s.slice(0,-1).join(", ")} or ${s.slice(-1)}`),`The "${t[0]}" ${e} must be ${r?"one of":"of"} type ${s}. Received ${typeof t[2]}`})),e(TypeError,"ERR_INVALID_PROTOCOL",(t=>`Protocol "${t[0]}" not supported. Expected "${t[1]}"`)),e(Error,"ERR_HTTP_HEADERS_SENT",(t=>`Cannot ${t[0]} headers after they are sent to the client`)),e(TypeError,"ERR_INVALID_HTTP_TOKEN",(t=>`${t[0]} must be a valid HTTP token [${t[1]}]`)),e(TypeError,"ERR_HTTP_INVALID_HEADER_VALUE",(t=>`Invalid value "${t[0]} for header "${t[1]}"`)),e(TypeError,"ERR_INVALID_CHAR",(t=>`Invalid character in ${t[0]} [${t[1]}]`))},8202:t=>{"use strict";t.exports=t=>{switch(t){case":method":case":scheme":case":authority":case":path":return!0;default:return!1}}},7306:t=>{"use strict";t.exports=(t,e,s)=>{for(const r of s)t.on(r,((...t)=>e.emit(r,...t)))}},5978:t=>{"use strict";t.exports=t=>{const e={protocol:t.protocol,hostname:"string"==typeof t.hostname&&t.hostname.startsWith("[")?t.hostname.slice(1,-1):t.hostname,host:t.host,hash:t.hash,search:t.search,pathname:t.pathname,href:t.href,path:`${t.pathname||""}${t.search||""}`};return"string"==typeof t.port&&0!==t.port.length&&(e.port=Number(t.port)),(t.username||t.password)&&(e.auth=`${t.username||""}:${t.password||""}`),e}},1085:(t,e)=>{e.stringify=function t(e){if(void 0===e)return e;if(e&&Buffer.isBuffer(e))return JSON.stringify(":base64:"+e.toString("base64"));if(e&&e.toJSON&&(e=e.toJSON()),e&&"object"==typeof e){var s="",r=Array.isArray(e);s=r?"[":"{";var i=!0;for(var o in e){var n="function"==typeof e[o]||!r&&void 0===e[o];Object.hasOwnProperty.call(e,o)&&!n&&(i||(s+=","),i=!1,r?null==e[o]?s+="null":s+=t(e[o]):void 0!==e[o]&&(s+=t(o)+":"+t(e[o])))}return s+(r?"]":"}")}return"string"==typeof e?JSON.stringify(/^:/.test(e)?":"+e:e):void 0===e?"null":JSON.stringify(e)},e.parse=function(t){return JSON.parse(t,(function(t,e){return"string"==typeof e?/^:base64:/.test(e)?Buffer.from(e.substring(8),"base64"):/^:/.test(e)?e.substring(1):e:e}))}},4958:(t,e,s)=>{"use strict";const r=s(8614),i=s(1085);t.exports=class extends r{constructor(t,e){if(super(),this.opts=Object.assign({namespace:"keyv",serialize:i.stringify,deserialize:i.parse},"string"==typeof t?{uri:t}:t,e),!this.opts.store){const t=Object.assign({},this.opts);this.opts.store=(t=>{const e={redis:"@keyv/redis",mongodb:"@keyv/mongo",mongo:"@keyv/mongo",sqlite:"@keyv/sqlite",postgresql:"@keyv/postgres",postgres:"@keyv/postgres",mysql:"@keyv/mysql"};if(t.adapter||t.uri){const r=t.adapter||/^[^:]*/.exec(t.uri)[0];return new(s(3196)(e[r]))(t)}return new Map})(t)}"function"==typeof this.opts.store.on&&this.opts.store.on("error",(t=>this.emit("error",t))),this.opts.store.namespace=this.opts.namespace}_getKeyPrefix(t){return`${this.opts.namespace}:${t}`}get(t,e){const s=this._getKeyPrefix(t),{store:r}=this.opts;return Promise.resolve().then((()=>r.get(s))).then((t=>"string"==typeof t?this.opts.deserialize(t):t)).then((s=>{if(void 0!==s){if(!("number"==typeof s.expires&&Date.now()>s.expires))return e&&e.raw?s:s.value;this.delete(t)}}))}set(t,e,s){const r=this._getKeyPrefix(t);void 0===s&&(s=this.opts.ttl),0===s&&(s=void 0);const{store:i}=this.opts;return Promise.resolve().then((()=>{const t="number"==typeof s?Date.now()+s:null;return e={value:e,expires:t},this.opts.serialize(e)})).then((t=>i.set(r,t,s))).then((()=>!0))}delete(t){const e=this._getKeyPrefix(t),{store:s}=this.opts;return Promise.resolve().then((()=>s.delete(e)))}clear(){const{store:t}=this.opts;return Promise.resolve().then((()=>t.clear()))}}},3196:t=>{function e(t){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}e.keys=()=>[],e.resolve=e,e.id=3196,t.exports=e},1391:t=>{"use strict";const{FORCE_COLOR:e,NODE_DISABLE_COLORS:s,TERM:r}=process.env,i={enabled:!s&&"dumb"!==r&&"0"!==e,reset:n(0,0),bold:n(1,22),dim:n(2,22),italic:n(3,23),underline:n(4,24),inverse:n(7,27),hidden:n(8,28),strikethrough:n(9,29),black:n(30,39),red:n(31,39),green:n(32,39),yellow:n(33,39),blue:n(34,39),magenta:n(35,39),cyan:n(36,39),white:n(37,39),gray:n(90,39),grey:n(90,39),bgBlack:n(40,49),bgRed:n(41,49),bgGreen:n(42,49),bgYellow:n(43,49),bgBlue:n(44,49),bgMagenta:n(45,49),bgCyan:n(46,49),bgWhite:n(47,49)};function o(t,e){let s,r=0,i="",o="";for(;r<t.length;r++)s=t[r],i+=s.open,o+=s.close,e.includes(s.close)&&(e=e.replace(s.rgx,s.close+s.open));return i+e+o}function n(t,e){let s={open:`[${t}m`,close:`[${e}m`,rgx:new RegExp(`\\x1b\\[${e}m`,"g")};return function(e){return void 0!==this&&void 0!==this.has?(this.has.includes(t)||(this.has.push(t),this.keys.push(s)),void 0===e?this:i.enabled?o(this.keys,e+""):e+""):void 0===e?function(t,e){let s={has:t,keys:e};return s.reset=i.reset.bind(s),s.bold=i.bold.bind(s),s.dim=i.dim.bind(s),s.italic=i.italic.bind(s),s.underline=i.underline.bind(s),s.inverse=i.inverse.bind(s),s.hidden=i.hidden.bind(s),s.strikethrough=i.strikethrough.bind(s),s.black=i.black.bind(s),s.red=i.red.bind(s),s.green=i.green.bind(s),s.yellow=i.yellow.bind(s),s.blue=i.blue.bind(s),s.magenta=i.magenta.bind(s),s.cyan=i.cyan.bind(s),s.white=i.white.bind(s),s.gray=i.gray.bind(s),s.grey=i.grey.bind(s),s.bgBlack=i.bgBlack.bind(s),s.bgRed=i.bgRed.bind(s),s.bgGreen=i.bgGreen.bind(s),s.bgYellow=i.bgYellow.bind(s),s.bgBlue=i.bgBlue.bind(s),s.bgMagenta=i.bgMagenta.bind(s),s.bgCyan=i.bgCyan.bind(s),s.bgWhite=i.bgWhite.bind(s),s}([t],[s]):i.enabled?o([s],e+""):e+""}}t.exports=i},5989:t=>{"use strict";t.exports=t=>{const e={};for(const[s,r]of Object.entries(t))e[s.toLowerCase()]=r;return e}},6344:t=>{"use strict";const e=["aborted","complete","headers","httpVersion","httpVersionMinor","httpVersionMajor","method","rawHeaders","rawTrailers","setTimeout","socket","statusCode","statusMessage","trailers","url"];t.exports=(t,s)=>{if(s._readableState.autoDestroy)throw new Error("The second stream must have the `autoDestroy` option set to `false`");const r=new Set(Object.keys(t).concat(e)),i={};for(const e of r)e in s||(i[e]={get(){const s=t[e];return"function"==typeof s?s.bind(t):s},set(s){t[e]=s},enumerable:!0,configurable:!1});return Object.defineProperties(s,i),t.once("aborted",(()=>{s.destroy(),s.emit("aborted")})),t.once("close",(()=>{t.complete&&s.readable?s.once("end",(()=>{s.emit("close")})):s.emit("close")})),s}},15:(t,e,s)=>{"use strict";const r="undefined"==typeof URL?s(8835).URL:URL,i=(t,e)=>e.some((e=>e instanceof RegExp?e.test(t):e===t)),o=(t,e)=>{if(e={defaultProtocol:"http:",normalizeProtocol:!0,forceHttp:!1,forceHttps:!1,stripAuthentication:!0,stripHash:!1,stripWWW:!0,removeQueryParameters:[/^utm_\w+/i],removeTrailingSlash:!0,removeDirectoryIndex:!1,sortQueryParameters:!0,...e},Reflect.has(e,"normalizeHttps"))throw new Error("options.normalizeHttps is renamed to options.forceHttp");if(Reflect.has(e,"normalizeHttp"))throw new Error("options.normalizeHttp is renamed to options.forceHttps");if(Reflect.has(e,"stripFragment"))throw new Error("options.stripFragment is renamed to options.stripHash");if(t=t.trim(),/^data:/i.test(t))return((t,{stripHash:e})=>{const s=t.match(/^data:(.*?),(.*?)(?:#(.*))?$/);if(!s)throw new Error(`Invalid URL: ${t}`);const r=s[1].split(";"),i=s[2],o=e?"":s[3];let n=!1;"base64"===r[r.length-1]&&(r.pop(),n=!0);const a=(r.shift()||"").toLowerCase(),h=[...r.map((t=>{let[e,s=""]=t.split("=").map((t=>t.trim()));return"charset"===e&&(s=s.toLowerCase(),"us-ascii"===s)?"":`${e}${s?`=${s}`:""}`})).filter(Boolean)];return n&&h.push("base64"),(0!==h.length||a&&"text/plain"!==a)&&h.unshift(a),`data:${h.join(";")},${n?i.trim():i}${o?`#${o}`:""}`})(t,e);const s=t.startsWith("//");!s&&/^\.*\//.test(t)||(t=t.replace(/^(?!(?:\w+:)?\/\/)|^\/\//,e.defaultProtocol));const o=new r(t);if(e.forceHttp&&e.forceHttps)throw new Error("The `forceHttp` and `forceHttps` options cannot be used together");if(e.forceHttp&&"https:"===o.protocol&&(o.protocol="http:"),e.forceHttps&&"http:"===o.protocol&&(o.protocol="https:"),e.stripAuthentication&&(o.username="",o.password=""),e.stripHash&&(o.hash=""),o.pathname&&(o.pathname=o.pathname.replace(/((?!:).|^)\/{2,}/g,((t,e)=>/^(?!\/)/g.test(e)?`${e}/`:"/"))),o.pathname&&(o.pathname=decodeURI(o.pathname)),!0===e.removeDirectoryIndex&&(e.removeDirectoryIndex=[/^index\.[a-z]+$/]),Array.isArray(e.removeDirectoryIndex)&&e.removeDirectoryIndex.length>0){let t=o.pathname.split("/");const s=t[t.length-1];i(s,e.removeDirectoryIndex)&&(t=t.slice(0,t.length-1),o.pathname=t.slice(1).join("/")+"/")}if(o.hostname&&(o.hostname=o.hostname.replace(/\.$/,""),e.stripWWW&&/^www\.([a-z\-\d]{2,63})\.([a-z.]{2,5})$/.test(o.hostname)&&(o.hostname=o.hostname.replace(/^www\./,""))),Array.isArray(e.removeQueryParameters))for(const t of[...o.searchParams.keys()])i(t,e.removeQueryParameters)&&o.searchParams.delete(t);return e.sortQueryParameters&&o.searchParams.sort(),e.removeTrailingSlash&&(o.pathname=o.pathname.replace(/\/$/,"")),t=o.toString(),!e.removeTrailingSlash&&"/"!==o.pathname||""!==o.hash||(t=t.replace(/\/$/,"")),s&&!e.normalizeProtocol&&(t=t.replace(/^http:\/\//,"//")),e.stripProtocol&&(t=t.replace(/^(?:https?:)?\/\//,"")),t};t.exports=o,t.exports.default=o},778:(t,e,s)=>{var r=s(2479);function i(t){var e=function(){return e.called?e.value:(e.called=!0,e.value=t.apply(this,arguments))};return e.called=!1,e}function o(t){var e=function(){if(e.called)throw new Error(e.onceError);return e.called=!0,e.value=t.apply(this,arguments)},s=t.name||"Function wrapped with `once`";return e.onceError=s+" shouldn't be called more than once",e.called=!1,e}t.exports=r(i),t.exports.strict=r(o),i.proto=i((function(){Object.defineProperty(Function.prototype,"once",{value:function(){return i(this)},configurable:!0}),Object.defineProperty(Function.prototype,"onceStrict",{value:function(){return o(this)},configurable:!0})}))},341:t=>{"use strict";class e extends Error{constructor(t){super(t||"Promise was canceled"),this.name="CancelError"}get isCanceled(){return!0}}class s{static fn(t){return(...e)=>new s(((s,r,i)=>{e.push(i),t(...e).then(s,r)}))}constructor(t){this._cancelHandlers=[],this._isPending=!0,this._isCanceled=!1,this._rejectOnCancel=!0,this._promise=new Promise(((e,s)=>{this._reject=s;const r=t=>{if(!this._isPending)throw new Error("The `onCancel` handler was attached after the promise settled.");this._cancelHandlers.push(t)};return Object.defineProperties(r,{shouldReject:{get:()=>this._rejectOnCancel,set:t=>{this._rejectOnCancel=t}}}),t((t=>{this._isPending=!1,e(t)}),(t=>{this._isPending=!1,s(t)}),r)}))}then(t,e){return this._promise.then(t,e)}catch(t){return this._promise.catch(t)}finally(t){return this._promise.finally(t)}cancel(t){if(this._isPending&&!this._isCanceled){if(this._cancelHandlers.length>0)try{for(const t of this._cancelHandlers)t()}catch(t){this._reject(t)}this._isCanceled=!0,this._rejectOnCancel&&this._reject(new e(t))}}get isCanceled(){return this._isCanceled}}Object.setPrototypeOf(s.prototype,Promise.prototype),t.exports=s,t.exports.CancelError=e},7076:t=>{"use strict";class e{constructor({token:t,date:e,parts:s,locales:r}){this.token=t,this.date=e||new Date,this.parts=s||[this],this.locales=r||{}}up(){}down(){}next(){const t=this.parts.indexOf(this);return this.parts.find(((s,r)=>r>t&&s instanceof e))}setTo(t){}prev(){let t=[].concat(this.parts).reverse();const s=t.indexOf(this);return t.find(((t,r)=>r>s&&t instanceof e))}toString(){return String(this.date)}}t.exports=e},2102:(t,e,s)=>{"use strict";const r=s(7076);t.exports=class extends r{constructor(t={}){super(t)}up(){this.date.setDate(this.date.getDate()+1)}down(){this.date.setDate(this.date.getDate()-1)}setTo(t){this.date.setDate(parseInt(t.substr(-2)))}toString(){let t=this.date.getDate(),e=this.date.getDay();return"DD"===this.token?String(t).padStart(2,"0"):"Do"===this.token?t+(s=t,1==(s%=10)?"st":2===s?"nd":3===s?"rd":"th"):"d"===this.token?e+1:"ddd"===this.token?this.locales.weekdaysShort[e]:"dddd"===this.token?this.locales.weekdays[e]:t;var s}}},4990:(t,e,s)=>{"use strict";const r=s(7076);t.exports=class extends r{constructor(t={}){super(t)}up(){this.date.setHours(this.date.getHours()+1)}down(){this.date.setHours(this.date.getHours()-1)}setTo(t){this.date.setHours(parseInt(t.substr(-2)))}toString(){let t=this.date.getHours();return/h/.test(this.token)&&(t=t%12||12),this.token.length>1?String(t).padStart(2,"0"):t}}},281:(t,e,s)=>{"use strict";t.exports={DatePart:s(7076),Meridiem:s(3692),Day:s(2102),Hours:s(4990),Milliseconds:s(2491),Minutes:s(1331),Month:s(9219),Seconds:s(1362),Year:s(6600)}},3692:(t,e,s)=>{"use strict";const r=s(7076);t.exports=class extends r{constructor(t={}){super(t)}up(){this.date.setHours((this.date.getHours()+12)%24)}down(){this.up()}toString(){let t=this.date.getHours()>12?"pm":"am";return/\A/.test(this.token)?t.toUpperCase():t}}},2491:(t,e,s)=>{"use strict";const r=s(7076);t.exports=class extends r{constructor(t={}){super(t)}up(){this.date.setMilliseconds(this.date.getMilliseconds()+1)}down(){this.date.setMilliseconds(this.date.getMilliseconds()-1)}setTo(t){this.date.setMilliseconds(parseInt(t.substr(-this.token.length)))}toString(){return String(this.date.getMilliseconds()).padStart(4,"0").substr(0,this.token.length)}}},1331:(t,e,s)=>{"use strict";const r=s(7076);t.exports=class extends r{constructor(t={}){super(t)}up(){this.date.setMinutes(this.date.getMinutes()+1)}down(){this.date.setMinutes(this.date.getMinutes()-1)}setTo(t){this.date.setMinutes(parseInt(t.substr(-2)))}toString(){let t=this.date.getMinutes();return this.token.length>1?String(t).padStart(2,"0"):t}}},9219:(t,e,s)=>{"use strict";const r=s(7076);t.exports=class extends r{constructor(t={}){super(t)}up(){this.date.setMonth(this.date.getMonth()+1)}down(){this.date.setMonth(this.date.getMonth()-1)}setTo(t){t=parseInt(t.substr(-2))-1,this.date.setMonth(t<0?0:t)}toString(){let t=this.date.getMonth(),e=this.token.length;return 2===e?String(t+1).padStart(2,"0"):3===e?this.locales.monthsShort[t]:4===e?this.locales.months[t]:String(t+1)}}},1362:(t,e,s)=>{"use strict";const r=s(7076);t.exports=class extends r{constructor(t={}){super(t)}up(){this.date.setSeconds(this.date.getSeconds()+1)}down(){this.date.setSeconds(this.date.getSeconds()-1)}setTo(t){this.date.setSeconds(parseInt(t.substr(-2)))}toString(){let t=this.date.getSeconds();return this.token.length>1?String(t).padStart(2,"0"):t}}},6600:(t,e,s)=>{"use strict";const r=s(7076);t.exports=class extends r{constructor(t={}){super(t)}up(){this.date.setFullYear(this.date.getFullYear()+1)}down(){this.date.setFullYear(this.date.getFullYear()-1)}setTo(t){this.date.setFullYear(t.substr(-4))}toString(){let t=String(this.date.getFullYear()).padStart(4,"0");return 2===this.token.length?t.substr(-2):t}}},4439:(t,e,s)=>{"use strict";function r(t,e,s,r,i,o,n){try{var a=t[o](n),h=a.value}catch(t){return void s(t)}a.done?e(h):Promise.resolve(h).then(r,i)}const i=s(1391),o=s(1537),n=s(2698),a=n.erase,h=n.cursor,c=s(6513),u=c.style,l=c.clear,d=c.figures,p=c.wrap,f=c.entriesToDisplay,m=(t,e)=>t[e]&&(t[e].value||t[e].title||t[e]),g=(t,e)=>t[e]&&(t[e].title||t[e].value||t[e]);t.exports=class extends o{constructor(t={}){super(t),this.msg=t.message,this.suggest=t.suggest,this.choices=t.choices,this.initial="number"==typeof t.initial?t.initial:((t,e)=>{const s=t.findIndex((t=>t.value===e||t.title===e));return s>-1?s:void 0})(t.choices,t.initial),this.select=this.initial||t.cursor||0,this.i18n={noMatches:t.noMatches||"no matches found"},this.fallback=t.fallback||this.initial,this.clearFirst=t.clearFirst||!1,this.suggestions=[],this.input="",this.limit=t.limit||10,this.cursor=0,this.transform=u.render(t.style),this.scale=this.transform.scale,this.render=this.render.bind(this),this.complete=this.complete.bind(this),this.clear=l("",this.out.columns),this.complete(this.render),this.render()}set fallback(t){this._fb=Number.isSafeInteger(parseInt(t))?parseInt(t):t}get fallback(){let t;return"number"==typeof this._fb?t=this.choices[this._fb]:"string"==typeof this._fb&&(t={title:this._fb}),t||this._fb||{title:this.i18n.noMatches}}moveSelect(t){this.select=t,this.suggestions.length>0?this.value=m(this.suggestions,t):this.value=this.fallback.value,this.fire()}complete(t){var e,s=this;return(e=function*(){const e=s.completing=s.suggest(s.input,s.choices),r=yield e;if(s.completing!==e)return;s.suggestions=r.map(((t,e,s)=>({title:g(s,e),value:m(s,e),description:t.description}))),s.completing=!1;const i=Math.max(r.length-1,0);s.moveSelect(Math.min(i,s.select)),t&&t()},function(){var t=this,s=arguments;return new Promise((function(i,o){var n=e.apply(t,s);function a(t){r(n,i,o,a,h,"next",t)}function h(t){r(n,i,o,a,h,"throw",t)}a(void 0)}))})()}reset(){this.input="",this.complete((()=>{this.moveSelect(void 0!==this.initial?this.initial:0),this.render()})),this.render()}exit(){this.clearFirst&&this.input.length>0?this.reset():(this.done=this.exited=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close())}abort(){this.done=this.aborted=!0,this.exited=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){this.done=!0,this.aborted=this.exited=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}_(t,e){let s=this.input.slice(0,this.cursor),r=this.input.slice(this.cursor);this.input=`${s}${t}${r}`,this.cursor=s.length+1,this.complete(this.render),this.render()}delete(){if(0===this.cursor)return this.bell();let t=this.input.slice(0,this.cursor-1),e=this.input.slice(this.cursor);this.input=`${t}${e}`,this.complete(this.render),this.cursor=this.cursor-1,this.render()}deleteForward(){if(this.cursor*this.scale>=this.rendered.length)return this.bell();let t=this.input.slice(0,this.cursor),e=this.input.slice(this.cursor+1);this.input=`${t}${e}`,this.complete(this.render),this.render()}first(){this.moveSelect(0),this.render()}last(){this.moveSelect(this.suggestions.length-1),this.render()}up(){0===this.select?this.moveSelect(this.suggestions.length-1):this.moveSelect(this.select-1),this.render()}down(){this.select===this.suggestions.length-1?this.moveSelect(0):this.moveSelect(this.select+1),this.render()}next(){this.select===this.suggestions.length-1?this.moveSelect(0):this.moveSelect(this.select+1),this.render()}nextPage(){this.moveSelect(Math.min(this.select+this.limit,this.suggestions.length-1)),this.render()}prevPage(){this.moveSelect(Math.max(this.select-this.limit,0)),this.render()}left(){if(this.cursor<=0)return this.bell();this.cursor=this.cursor-1,this.render()}right(){if(this.cursor*this.scale>=this.rendered.length)return this.bell();this.cursor=this.cursor+1,this.render()}renderOption(t,e,s,r){let o,n=s?d.arrowUp:r?d.arrowDown:" ",a=e?i.cyan().underline(t.title):t.title;return n=(e?i.cyan(d.pointer)+" ":"  ")+n,t.description&&(o=` - ${t.description}`,(n.length+a.length+o.length>=this.out.columns||t.description.split(/\r?\n/).length>1)&&(o="\n"+p(t.description,{margin:3,width:this.out.columns}))),n+" "+a+i.gray(o||"")}render(){if(this.closed)return;this.firstRender?this.out.write(h.hide):this.out.write(l(this.outputText,this.out.columns)),super.render();let t=f(this.select,this.choices.length,this.limit),e=t.startIndex,s=t.endIndex;if(this.outputText=[u.symbol(this.done,this.aborted,this.exited),i.bold(this.msg),u.delimiter(this.completing),this.done&&this.suggestions[this.select]?this.suggestions[this.select].title:this.rendered=this.transform.render(this.input)].join(" "),!this.done){const t=this.suggestions.slice(e,s).map(((t,r)=>this.renderOption(t,this.select===r+e,0===r&&e>0,r+e===s-1&&s<this.choices.length))).join("\n");this.outputText+="\n"+(t||i.gray(this.fallback.title))}this.out.write(a.line+h.to(0)+this.outputText)}}},5174:(t,e,s)=>{"use strict";const r=s(1391),i=s(2698).cursor,o=s(4491),n=s(6513),a=n.clear,h=n.style,c=n.figures;t.exports=class extends o{constructor(t={}){t.overrideRender=!0,super(t),this.inputValue="",this.clear=a("",this.out.columns),this.filteredOptions=this.value,this.render()}last(){this.cursor=this.filteredOptions.length-1,this.render()}next(){this.cursor=(this.cursor+1)%this.filteredOptions.length,this.render()}up(){0===this.cursor?this.cursor=this.filteredOptions.length-1:this.cursor--,this.render()}down(){this.cursor===this.filteredOptions.length-1?this.cursor=0:this.cursor++,this.render()}left(){this.filteredOptions[this.cursor].selected=!1,this.render()}right(){if(this.value.filter((t=>t.selected)).length>=this.maxChoices)return this.bell();this.filteredOptions[this.cursor].selected=!0,this.render()}delete(){this.inputValue.length&&(this.inputValue=this.inputValue.substr(0,this.inputValue.length-1),this.updateFilteredOptions())}updateFilteredOptions(){const t=this.filteredOptions[this.cursor];this.filteredOptions=this.value.filter((t=>!this.inputValue||!("string"!=typeof t.title||!t.title.toLowerCase().includes(this.inputValue.toLowerCase()))||!("string"!=typeof t.value||!t.value.toLowerCase().includes(this.inputValue.toLowerCase()))));const e=this.filteredOptions.findIndex((e=>e===t));this.cursor=e<0?0:e,this.render()}handleSpaceToggle(){const t=this.filteredOptions[this.cursor];if(t.selected)t.selected=!1,this.render();else{if(t.disabled||this.value.filter((t=>t.selected)).length>=this.maxChoices)return this.bell();t.selected=!0,this.render()}}handleInputChange(t){this.inputValue=this.inputValue+t,this.updateFilteredOptions()}_(t,e){" "===t?this.handleSpaceToggle():this.handleInputChange(t)}renderInstructions(){return void 0===this.instructions||this.instructions?"string"==typeof this.instructions?this.instructions:`\nInstructions:\n    ${c.arrowUp}/${c.arrowDown}: Highlight option\n    ${c.arrowLeft}/${c.arrowRight}/[space]: Toggle selection\n    [a,b,c]/delete: Filter choices\n    enter/return: Complete answer\n`:""}renderCurrentInput(){return`\nFiltered results for: ${this.inputValue?this.inputValue:r.gray("Enter something to filter")}\n`}renderOption(t,e,s){let i;return i=e.disabled?t===s?r.gray().underline(e.title):r.strikethrough().gray(e.title):t===s?r.cyan().underline(e.title):e.title,(e.selected?r.green(c.radioOn):c.radioOff)+"  "+i}renderDoneOrInstructions(){if(this.done)return this.value.filter((t=>t.selected)).map((t=>t.title)).join(", ");const t=[r.gray(this.hint),this.renderInstructions(),this.renderCurrentInput()];return this.filteredOptions.length&&this.filteredOptions[this.cursor].disabled&&t.push(r.yellow(this.warn)),t.join(" ")}render(){if(this.closed)return;this.firstRender&&this.out.write(i.hide),super.render();let t=[h.symbol(this.done,this.aborted),r.bold(this.msg),h.delimiter(!1),this.renderDoneOrInstructions()].join(" ");this.showMinError&&(t+=r.red(`You must select a minimum of ${this.minSelected} choices.`),this.showMinError=!1),t+=this.renderOptions(this.filteredOptions),this.out.write(this.clear+t),this.clear=a(t,this.out.columns)}}},2290:(t,e,s)=>{"use strict";const r=s(1391),i=s(1537),o=s(6513),n=o.style,a=o.clear,h=s(2698),c=h.erase,u=h.cursor;t.exports=class extends i{constructor(t={}){super(t),this.msg=t.message,this.value=t.initial,this.initialValue=!!t.initial,this.yesMsg=t.yes||"yes",this.yesOption=t.yesOption||"(Y/n)",this.noMsg=t.no||"no",this.noOption=t.noOption||"(y/N)",this.render()}reset(){this.value=this.initialValue,this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){this.value=this.value||!1,this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}_(t,e){return"y"===t.toLowerCase()?(this.value=!0,this.submit()):"n"===t.toLowerCase()?(this.value=!1,this.submit()):this.bell()}render(){this.closed||(this.firstRender?this.out.write(u.hide):this.out.write(a(this.outputText,this.out.columns)),super.render(),this.outputText=[n.symbol(this.done,this.aborted),r.bold(this.msg),n.delimiter(this.done),this.done?this.value?this.yesMsg:this.noMsg:r.gray(this.initialValue?this.yesOption:this.noOption)].join(" "),this.out.write(c.line+u.to(0)+this.outputText))}}},1492:(t,e,s)=>{"use strict";function r(t,e,s,r,i,o,n){try{var a=t[o](n),h=a.value}catch(t){return void s(t)}a.done?e(h):Promise.resolve(h).then(r,i)}function i(t){return function(){var e=this,s=arguments;return new Promise((function(i,o){var n=t.apply(e,s);function a(t){r(n,i,o,a,h,"next",t)}function h(t){r(n,i,o,a,h,"throw",t)}a(void 0)}))}}const o=s(1391),n=s(1537),a=s(6513),h=a.style,c=a.clear,u=a.figures,l=s(2698),d=l.erase,p=l.cursor,f=s(281),m=f.DatePart,g=f.Meridiem,y=f.Day,b=f.Hours,v=f.Milliseconds,_=f.Minutes,w=f.Month,x=f.Seconds,P=f.Year,O=/\\(.)|"((?:\\["\\]|[^"])+)"|(D[Do]?|d{3,4}|d)|(M{1,4})|(YY(?:YY)?)|([aA])|([Hh]{1,2})|(m{1,2})|(s{1,2})|(S{1,4})|./g,S={1:({token:t})=>t.replace(/\\(.)/g,"$1"),2:t=>new y(t),3:t=>new w(t),4:t=>new P(t),5:t=>new g(t),6:t=>new b(t),7:t=>new _(t),8:t=>new x(t),9:t=>new v(t)},E={months:"January,February,March,April,May,June,July,August,September,October,November,December".split(","),monthsShort:"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),weekdays:"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),weekdaysShort:"Sun,Mon,Tue,Wed,Thu,Fri,Sat".split(",")};t.exports=class extends n{constructor(t={}){super(t),this.msg=t.message,this.cursor=0,this.typed="",this.locales=Object.assign(E,t.locales),this._date=t.initial||new Date,this.errorMsg=t.error||"Please Enter A Valid Value",this.validator=t.validate||(()=>!0),this.mask=t.mask||"YYYY-MM-DD HH:mm:ss",this.clear=c("",this.out.columns),this.render()}get value(){return this.date}get date(){return this._date}set date(t){t&&this._date.setTime(t.getTime())}set mask(t){let e;for(this.parts=[];e=O.exec(t);){let t=e.shift(),s=e.findIndex((t=>null!=t));this.parts.push(s in S?S[s]({token:e[s]||t,date:this.date,parts:this.parts,locales:this.locales}):e[s]||t)}let s=this.parts.reduce(((t,e)=>("string"==typeof e&&"string"==typeof t[t.length-1]?t[t.length-1]+=e:t.push(e),t)),[]);this.parts.splice(0),this.parts.push(...s),this.reset()}moveCursor(t){this.typed="",this.cursor=t,this.fire()}reset(){this.moveCursor(this.parts.findIndex((t=>t instanceof m))),this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.error=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}validate(){var t=this;return i((function*(){let e=yield t.validator(t.value);"string"==typeof e&&(t.errorMsg=e,e=!1),t.error=!e}))()}submit(){var t=this;return i((function*(){if(yield t.validate(),t.error)return t.color="red",t.fire(),void t.render();t.done=!0,t.aborted=!1,t.fire(),t.render(),t.out.write("\n"),t.close()}))()}up(){this.typed="",this.parts[this.cursor].up(),this.render()}down(){this.typed="",this.parts[this.cursor].down(),this.render()}left(){let t=this.parts[this.cursor].prev();if(null==t)return this.bell();this.moveCursor(this.parts.indexOf(t)),this.render()}right(){let t=this.parts[this.cursor].next();if(null==t)return this.bell();this.moveCursor(this.parts.indexOf(t)),this.render()}next(){let t=this.parts[this.cursor].next();this.moveCursor(t?this.parts.indexOf(t):this.parts.findIndex((t=>t instanceof m))),this.render()}_(t){/\d/.test(t)&&(this.typed+=t,this.parts[this.cursor].setTo(this.typed),this.render())}render(){this.closed||(this.firstRender?this.out.write(p.hide):this.out.write(c(this.outputText,this.out.columns)),super.render(),this.outputText=[h.symbol(this.done,this.aborted),o.bold(this.msg),h.delimiter(!1),this.parts.reduce(((t,e,s)=>t.concat(s!==this.cursor||this.done?e:o.cyan().underline(e.toString()))),[]).join("")].join(" "),this.error&&(this.outputText+=this.errorMsg.split("\n").reduce(((t,e,s)=>t+`\n${s?" ":u.pointerSmall} ${o.red().italic(e)}`),"")),this.out.write(d.line+p.to(0)+this.outputText))}}},4910:(t,e,s)=>{"use strict";t.exports={TextPrompt:s(1741),SelectPrompt:s(2289),TogglePrompt:s(8660),DatePrompt:s(1492),NumberPrompt:s(8147),MultiselectPrompt:s(4491),AutocompletePrompt:s(4439),AutocompleteMultiselectPrompt:s(5174),ConfirmPrompt:s(2290)}},4491:(t,e,s)=>{"use strict";const r=s(1391),i=s(2698).cursor,o=s(1537),n=s(6513),a=n.clear,h=n.figures,c=n.style,u=n.wrap,l=n.entriesToDisplay;t.exports=class extends o{constructor(t={}){super(t),this.msg=t.message,this.cursor=t.cursor||0,this.scrollIndex=t.cursor||0,this.hint=t.hint||"",this.warn=t.warn||"- This option is disabled -",this.minSelected=t.min,this.showMinError=!1,this.maxChoices=t.max,this.instructions=t.instructions,this.optionsPerPage=t.optionsPerPage||10,this.value=t.choices.map(((t,e)=>("string"==typeof t&&(t={title:t,value:e}),{title:t&&(t.title||t.value||t),description:t&&t.description,value:t&&(void 0===t.value?e:t.value),selected:t&&t.selected,disabled:t&&t.disabled}))),this.clear=a("",this.out.columns),t.overrideRender||this.render()}reset(){this.value.map((t=>!t.selected)),this.cursor=0,this.fire(),this.render()}selected(){return this.value.filter((t=>t.selected))}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){const t=this.value.filter((t=>t.selected));this.minSelected&&t.length<this.minSelected?(this.showMinError=!0,this.render()):(this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close())}first(){this.cursor=0,this.render()}last(){this.cursor=this.value.length-1,this.render()}next(){this.cursor=(this.cursor+1)%this.value.length,this.render()}up(){0===this.cursor?this.cursor=this.value.length-1:this.cursor--,this.render()}down(){this.cursor===this.value.length-1?this.cursor=0:this.cursor++,this.render()}left(){this.value[this.cursor].selected=!1,this.render()}right(){if(this.value.filter((t=>t.selected)).length>=this.maxChoices)return this.bell();this.value[this.cursor].selected=!0,this.render()}handleSpaceToggle(){const t=this.value[this.cursor];if(t.selected)t.selected=!1,this.render();else{if(t.disabled||this.value.filter((t=>t.selected)).length>=this.maxChoices)return this.bell();t.selected=!0,this.render()}}toggleAll(){if(void 0!==this.maxChoices||this.value[this.cursor].disabled)return this.bell();const t=!this.value[this.cursor].selected;this.value.filter((t=>!t.disabled)).forEach((e=>e.selected=t)),this.render()}_(t,e){if(" "===t)this.handleSpaceToggle();else{if("a"!==t)return this.bell();this.toggleAll()}}renderInstructions(){return void 0===this.instructions||this.instructions?"string"==typeof this.instructions?this.instructions:`\nInstructions:\n    ${h.arrowUp}/${h.arrowDown}: Highlight option\n    ${h.arrowLeft}/${h.arrowRight}/[space]: Toggle selection\n`+(void 0===this.maxChoices?"    a: Toggle all\n":"")+"    enter/return: Complete answer":""}renderOption(t,e,s,i){const o=(e.selected?r.green(h.radioOn):h.radioOff)+" "+i+" ";let n,a;return e.disabled?n=t===s?r.gray().underline(e.title):r.strikethrough().gray(e.title):(n=t===s?r.cyan().underline(e.title):e.title,t===s&&e.description&&(a=` - ${e.description}`,(o.length+n.length+a.length>=this.out.columns||e.description.split(/\r?\n/).length>1)&&(a="\n"+u(e.description,{margin:o.length,width:this.out.columns})))),o+n+r.gray(a||"")}paginateOptions(t){if(0===t.length)return r.red("No matches for this query.");let e,s=l(this.cursor,t.length,this.optionsPerPage),i=s.startIndex,o=s.endIndex,n=[];for(let s=i;s<o;s++)e=s===i&&i>0?h.arrowUp:s===o-1&&o<t.length?h.arrowDown:" ",n.push(this.renderOption(this.cursor,t[s],s,e));return"\n"+n.join("\n")}renderOptions(t){return this.done?"":this.paginateOptions(t)}renderDoneOrInstructions(){if(this.done)return this.value.filter((t=>t.selected)).map((t=>t.title)).join(", ");const t=[r.gray(this.hint),this.renderInstructions()];return this.value[this.cursor].disabled&&t.push(r.yellow(this.warn)),t.join(" ")}render(){if(this.closed)return;this.firstRender&&this.out.write(i.hide),super.render();let t=[c.symbol(this.done,this.aborted),r.bold(this.msg),c.delimiter(!1),this.renderDoneOrInstructions()].join(" ");this.showMinError&&(t+=r.red(`You must select a minimum of ${this.minSelected} choices.`),this.showMinError=!1),t+=this.renderOptions(this.value),this.out.write(this.clear+t),this.clear=a(t,this.out.columns)}}},8147:(t,e,s)=>{"use strict";function r(t,e,s,r,i,o,n){try{var a=t[o](n),h=a.value}catch(t){return void s(t)}a.done?e(h):Promise.resolve(h).then(r,i)}function i(t){return function(){var e=this,s=arguments;return new Promise((function(i,o){var n=t.apply(e,s);function a(t){r(n,i,o,a,h,"next",t)}function h(t){r(n,i,o,a,h,"throw",t)}a(void 0)}))}}const o=s(1391),n=s(1537),a=s(2698),h=a.cursor,c=a.erase,u=s(6513),l=u.style,d=u.figures,p=u.clear,f=u.lines,m=/[0-9]/,g=t=>void 0!==t,y=(t,e)=>{let s=Math.pow(10,e);return Math.round(t*s)/s};t.exports=class extends n{constructor(t={}){super(t),this.transform=l.render(t.style),this.msg=t.message,this.initial=g(t.initial)?t.initial:"",this.float=!!t.float,this.round=t.round||2,this.inc=t.increment||1,this.min=g(t.min)?t.min:-1/0,this.max=g(t.max)?t.max:1/0,this.errorMsg=t.error||"Please Enter A Valid Value",this.validator=t.validate||(()=>!0),this.color="cyan",this.value="",this.typed="",this.lastHit=0,this.render()}set value(t){t||0===t?(this.placeholder=!1,this.rendered=this.transform.render(`${y(t,this.round)}`),this._value=y(t,this.round)):(this.placeholder=!0,this.rendered=o.gray(this.transform.render(`${this.initial}`)),this._value=""),this.fire()}get value(){return this._value}parse(t){return this.float?parseFloat(t):parseInt(t)}valid(t){return"-"===t||"."===t&&this.float||m.test(t)}reset(){this.typed="",this.value="",this.fire(),this.render()}exit(){this.abort()}abort(){let t=this.value;this.value=""!==t?t:this.initial,this.done=this.aborted=!0,this.error=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}validate(){var t=this;return i((function*(){let e=yield t.validator(t.value);"string"==typeof e&&(t.errorMsg=e,e=!1),t.error=!e}))()}submit(){var t=this;return i((function*(){if(yield t.validate(),t.error)return t.color="red",t.fire(),void t.render();let e=t.value;t.value=""!==e?e:t.initial,t.done=!0,t.aborted=!1,t.error=!1,t.fire(),t.render(),t.out.write("\n"),t.close()}))()}up(){if(this.typed="",""===this.value&&(this.value=this.min-this.inc),this.value>=this.max)return this.bell();this.value+=this.inc,this.color="cyan",this.fire(),this.render()}down(){if(this.typed="",""===this.value&&(this.value=this.min+this.inc),this.value<=this.min)return this.bell();this.value-=this.inc,this.color="cyan",this.fire(),this.render()}delete(){let t=this.value.toString();if(0===t.length)return this.bell();this.value=this.parse(t=t.slice(0,-1))||"",""!==this.value&&this.value<this.min&&(this.value=this.min),this.color="cyan",this.fire(),this.render()}next(){this.value=this.initial,this.fire(),this.render()}_(t,e){if(!this.valid(t))return this.bell();const s=Date.now();if(s-this.lastHit>1e3&&(this.typed=""),this.typed+=t,this.lastHit=s,this.color="cyan","."===t)return this.fire();this.value=Math.min(this.parse(this.typed),this.max),this.value>this.max&&(this.value=this.max),this.value<this.min&&(this.value=this.min),this.fire(),this.render()}render(){this.closed||(this.firstRender||(this.outputError&&this.out.write(h.down(f(this.outputError,this.out.columns)-1)+p(this.outputError,this.out.columns)),this.out.write(p(this.outputText,this.out.columns))),super.render(),this.outputError="",this.outputText=[l.symbol(this.done,this.aborted),o.bold(this.msg),l.delimiter(this.done),this.done&&(this.done||this.placeholder)?this.rendered:o[this.color]().underline(this.rendered)].join(" "),this.error&&(this.outputError+=this.errorMsg.split("\n").reduce(((t,e,s)=>t+`\n${s?" ":d.pointerSmall} ${o.red().italic(e)}`),"")),this.out.write(c.line+h.to(0)+this.outputText+h.save+this.outputError+h.restore))}}},1537:(t,e,s)=>{"use strict";const r=s(1058),i=s(6513).action,o=s(8614),n=s(2698),a=n.beep,h=n.cursor,c=s(1391);t.exports=class extends o{constructor(t={}){super(),this.firstRender=!0,this.in=t.stdin||process.stdin,this.out=t.stdout||process.stdout,this.onRender=(t.onRender||(()=>{})).bind(this);const e=r.createInterface({input:this.in,escapeCodeTimeout:50});r.emitKeypressEvents(this.in,e),this.in.isTTY&&this.in.setRawMode(!0);const s=["SelectPrompt","MultiselectPrompt"].indexOf(this.constructor.name)>-1,o=(t,e)=>{let r=i(e,s);!1===r?this._&&this._(t,e):"function"==typeof this[r]?this[r](e):this.bell()};this.close=()=>{this.out.write(h.show),this.in.removeListener("keypress",o),this.in.isTTY&&this.in.setRawMode(!1),e.close(),this.emit(this.aborted?"abort":this.exited?"exit":"submit",this.value),this.closed=!0},this.in.on("keypress",o)}fire(){this.emit("state",{value:this.value,aborted:!!this.aborted,exited:!!this.exited})}bell(){this.out.write(a)}render(){this.onRender(c),this.firstRender&&(this.firstRender=!1)}}},2289:(t,e,s)=>{"use strict";const r=s(1391),i=s(1537),o=s(6513),n=o.style,a=o.clear,h=o.figures,c=o.wrap,u=o.entriesToDisplay,l=s(2698).cursor;t.exports=class extends i{constructor(t={}){super(t),this.msg=t.message,this.hint=t.hint||"- Use arrow-keys. Return to submit.",this.warn=t.warn||"- This option is disabled",this.cursor=t.initial||0,this.choices=t.choices.map(((t,e)=>("string"==typeof t&&(t={title:t,value:e}),{title:t&&(t.title||t.value||t),value:t&&(void 0===t.value?e:t.value),description:t&&t.description,selected:t&&t.selected,disabled:t&&t.disabled}))),this.optionsPerPage=t.optionsPerPage||10,this.value=(this.choices[this.cursor]||{}).value,this.clear=a("",this.out.columns),this.render()}moveCursor(t){this.cursor=t,this.value=this.choices[t].value,this.fire()}reset(){this.moveCursor(0),this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){this.selection.disabled?this.bell():(this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close())}first(){this.moveCursor(0),this.render()}last(){this.moveCursor(this.choices.length-1),this.render()}up(){0===this.cursor?this.moveCursor(this.choices.length-1):this.moveCursor(this.cursor-1),this.render()}down(){this.cursor===this.choices.length-1?this.moveCursor(0):this.moveCursor(this.cursor+1),this.render()}next(){this.moveCursor((this.cursor+1)%this.choices.length),this.render()}_(t,e){if(" "===t)return this.submit()}get selection(){return this.choices[this.cursor]}render(){if(this.closed)return;this.firstRender?this.out.write(l.hide):this.out.write(a(this.outputText,this.out.columns)),super.render();let t=u(this.cursor,this.choices.length,this.optionsPerPage),e=t.startIndex,s=t.endIndex;if(this.outputText=[n.symbol(this.done,this.aborted),r.bold(this.msg),n.delimiter(!1),this.done?this.selection.title:this.selection.disabled?r.yellow(this.warn):r.gray(this.hint)].join(" "),!this.done){this.outputText+="\n";for(let t=e;t<s;t++){let i,o,n="",a=this.choices[t];o=t===e&&e>0?h.arrowUp:t===s-1&&s<this.choices.length?h.arrowDown:" ",a.disabled?(i=this.cursor===t?r.gray().underline(a.title):r.strikethrough().gray(a.title),o=(this.cursor===t?r.bold().gray(h.pointer)+" ":"  ")+o):(i=this.cursor===t?r.cyan().underline(a.title):a.title,o=(this.cursor===t?r.cyan(h.pointer)+" ":"  ")+o,a.description&&this.cursor===t&&(n=` - ${a.description}`,(o.length+i.length+n.length>=this.out.columns||a.description.split(/\r?\n/).length>1)&&(n="\n"+c(a.description,{margin:3,width:this.out.columns})))),this.outputText+=`${o} ${i}${r.gray(n)}\n`}}this.out.write(this.outputText)}}},1741:(t,e,s)=>{"use strict";function r(t,e,s,r,i,o,n){try{var a=t[o](n),h=a.value}catch(t){return void s(t)}a.done?e(h):Promise.resolve(h).then(r,i)}function i(t){return function(){var e=this,s=arguments;return new Promise((function(i,o){var n=t.apply(e,s);function a(t){r(n,i,o,a,h,"next",t)}function h(t){r(n,i,o,a,h,"throw",t)}a(void 0)}))}}const o=s(1391),n=s(1537),a=s(2698),h=a.erase,c=a.cursor,u=s(6513),l=u.style,d=u.clear,p=u.lines,f=u.figures;t.exports=class extends n{constructor(t={}){super(t),this.transform=l.render(t.style),this.scale=this.transform.scale,this.msg=t.message,this.initial=t.initial||"",this.validator=t.validate||(()=>!0),this.value="",this.errorMsg=t.error||"Please Enter A Valid Value",this.cursor=Number(!!this.initial),this.clear=d("",this.out.columns),this.render()}set value(t){!t&&this.initial?(this.placeholder=!0,this.rendered=o.gray(this.transform.render(this.initial))):(this.placeholder=!1,this.rendered=this.transform.render(t)),this._value=t,this.fire()}get value(){return this._value}reset(){this.value="",this.cursor=Number(!!this.initial),this.fire(),this.render()}exit(){this.abort()}abort(){this.value=this.value||this.initial,this.done=this.aborted=!0,this.error=!1,this.red=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}validate(){var t=this;return i((function*(){let e=yield t.validator(t.value);"string"==typeof e&&(t.errorMsg=e,e=!1),t.error=!e}))()}submit(){var t=this;return i((function*(){if(t.value=t.value||t.initial,yield t.validate(),t.error)return t.red=!0,t.fire(),void t.render();t.done=!0,t.aborted=!1,t.fire(),t.render(),t.out.write("\n"),t.close()}))()}next(){if(!this.placeholder)return this.bell();this.value=this.initial,this.cursor=this.rendered.length,this.fire(),this.render()}moveCursor(t){this.placeholder||(this.cursor=this.cursor+t)}_(t,e){let s=this.value.slice(0,this.cursor),r=this.value.slice(this.cursor);this.value=`${s}${t}${r}`,this.red=!1,this.cursor=this.placeholder?0:s.length+1,this.render()}delete(){if(0===this.cursor)return this.bell();let t=this.value.slice(0,this.cursor-1),e=this.value.slice(this.cursor);this.value=`${t}${e}`,this.red=!1,this.moveCursor(-1),this.render()}deleteForward(){if(this.cursor*this.scale>=this.rendered.length||this.placeholder)return this.bell();let t=this.value.slice(0,this.cursor),e=this.value.slice(this.cursor+1);this.value=`${t}${e}`,this.red=!1,this.render()}first(){this.cursor=0,this.render()}last(){this.cursor=this.value.length,this.render()}left(){if(this.cursor<=0||this.placeholder)return this.bell();this.moveCursor(-1),this.render()}right(){if(this.cursor*this.scale>=this.rendered.length||this.placeholder)return this.bell();this.moveCursor(1),this.render()}render(){this.closed||(this.firstRender||(this.outputError&&this.out.write(c.down(p(this.outputError,this.out.columns)-1)+d(this.outputError,this.out.columns)),this.out.write(d(this.outputText,this.out.columns))),super.render(),this.outputError="",this.outputText=[l.symbol(this.done,this.aborted),o.bold(this.msg),l.delimiter(this.done),this.red?o.red(this.rendered):this.rendered].join(" "),this.error&&(this.outputError+=this.errorMsg.split("\n").reduce(((t,e,s)=>t+`\n${s?" ":f.pointerSmall} ${o.red().italic(e)}`),"")),this.out.write(h.line+c.to(0)+this.outputText+c.save+this.outputError+c.restore))}}},8660:(t,e,s)=>{"use strict";const r=s(1391),i=s(1537),o=s(6513),n=o.style,a=o.clear,h=s(2698),c=h.cursor,u=h.erase;t.exports=class extends i{constructor(t={}){super(t),this.msg=t.message,this.value=!!t.initial,this.active=t.active||"on",this.inactive=t.inactive||"off",this.initialValue=this.value,this.render()}reset(){this.value=this.initialValue,this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}deactivate(){if(!1===this.value)return this.bell();this.value=!1,this.render()}activate(){if(!0===this.value)return this.bell();this.value=!0,this.render()}delete(){this.deactivate()}left(){this.deactivate()}right(){this.activate()}down(){this.deactivate()}up(){this.activate()}next(){this.value=!this.value,this.fire(),this.render()}_(t,e){if(" "===t)this.value=!this.value;else if("1"===t)this.value=!0;else{if("0"!==t)return this.bell();this.value=!1}this.render()}render(){this.closed||(this.firstRender?this.out.write(c.hide):this.out.write(a(this.outputText,this.out.columns)),super.render(),this.outputText=[n.symbol(this.done,this.aborted),r.bold(this.msg),n.delimiter(this.done),this.value?this.inactive:r.cyan().underline(this.inactive),r.gray("/"),this.value?r.cyan().underline(this.active):this.active].join(" "),this.out.write(u.line+c.to(0)+this.outputText))}}},482:(t,e,s)=>{"use strict";function r(t,e){var s=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),s.push.apply(s,r)}return s}function i(t){for(var e=1;e<arguments.length;e++){var s=null!=arguments[e]?arguments[e]:{};e%2?r(Object(s),!0).forEach((function(e){o(t,e,s[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(s)):r(Object(s)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(s,e))}))}return t}function o(t,e,s){return e in t?Object.defineProperty(t,e,{value:s,enumerable:!0,configurable:!0,writable:!0}):t[e]=s,t}function n(t,e){var s;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(s=function(t,e){if(t){if("string"==typeof t)return a(t,e);var s=Object.prototype.toString.call(t).slice(8,-1);return"Object"===s&&t.constructor&&(s=t.constructor.name),"Map"===s||"Set"===s?Array.from(t):"Arguments"===s||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s)?a(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){s&&(t=s);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,n=!0,h=!1;return{s:function(){s=t[Symbol.iterator]()},n:function(){var t=s.next();return n=t.done,t},e:function(t){h=!0,o=t},f:function(){try{n||null==s.return||s.return()}finally{if(h)throw o}}}}function a(t,e){(null==e||e>t.length)&&(e=t.length);for(var s=0,r=new Array(e);s<e;s++)r[s]=t[s];return r}function h(t,e,s,r,i,o,n){try{var a=t[o](n),h=a.value}catch(t){return void s(t)}a.done?e(h):Promise.resolve(h).then(r,i)}function c(t){return function(){var e=this,s=arguments;return new Promise((function(r,i){var o=t.apply(e,s);function n(t){h(o,r,i,n,a,"next",t)}function a(t){h(o,r,i,n,a,"throw",t)}n(void 0)}))}}const u=s(2897),l=["suggest","format","onState","validate","onRender","type"],d=()=>{};function p(){return f.apply(this,arguments)}function f(){return(f=c((function*(t=[],{onSubmit:e=d,onCancel:s=d}={}){const r={},o=p._override||{};let a,h,f,g,y,b;t=[].concat(t);const v=function(){var t=c((function*(t,e,s=!1){if(s||!t.validate||!0===t.validate(e))return t.format?yield t.format(e,r):e}));return function(e,s){return t.apply(this,arguments)}}();var _,w=n(t);try{for(w.s();!(_=w.n()).done;){h=_.value;var x=h;if(g=x.name,y=x.type,"function"==typeof y&&(y=yield y(a,i({},r),h),h.type=y),y){for(let t in h){if(l.includes(t))continue;let e=h[t];h[t]="function"==typeof e?yield e(a,i({},r),b):e}if(b=h,"string"!=typeof h.message)throw new Error("prompt message is required");var P=h;if(g=P.name,y=P.type,void 0===u[y])throw new Error(`prompt type (${y}) is not defined`);if(void 0===o[h.name]||(a=yield v(h,o[h.name]),void 0===a)){try{a=p._injected?m(p._injected,h.initial):yield u[y](h),r[g]=a=yield v(h,a,!0),f=yield e(h,a,r)}catch(t){f=!(yield s(h,r))}if(f)return r}else r[g]=a}}}catch(t){w.e(t)}finally{w.f()}return r}))).apply(this,arguments)}function m(t,e){const s=t.shift();if(s instanceof Error)throw s;return void 0===s?e:s}t.exports=Object.assign(p,{prompt:p,prompts:u,inject:function(t){p._injected=(p._injected||[]).concat(t)},override:function(t){p._override=Object.assign({},t)}})},2897:(t,e,s)=>{"use strict";const r=e,i=s(4910),o=t=>t;function n(t,e,s={}){return new Promise(((r,n)=>{const a=new i[t](e),h=s.onAbort||o,c=s.onSubmit||o,u=s.onExit||o;a.on("state",e.onState||o),a.on("submit",(t=>r(c(t)))),a.on("exit",(t=>r(u(t)))),a.on("abort",(t=>n(h(t))))}))}r.text=t=>n("TextPrompt",t),r.password=t=>(t.style="password",r.text(t)),r.invisible=t=>(t.style="invisible",r.text(t)),r.number=t=>n("NumberPrompt",t),r.date=t=>n("DatePrompt",t),r.confirm=t=>n("ConfirmPrompt",t),r.list=t=>{const e=t.separator||",";return n("TextPrompt",t,{onSubmit:t=>t.split(e).map((t=>t.trim()))})},r.toggle=t=>n("TogglePrompt",t),r.select=t=>n("SelectPrompt",t),r.multiselect=t=>{t.choices=[].concat(t.choices||[]);const e=t=>t.filter((t=>t.selected)).map((t=>t.value));return n("MultiselectPrompt",t,{onAbort:e,onSubmit:e})},r.autocompleteMultiselect=t=>{t.choices=[].concat(t.choices||[]);const e=t=>t.filter((t=>t.selected)).map((t=>t.value));return n("AutocompleteMultiselectPrompt",t,{onAbort:e,onSubmit:e})};const a=(t,e)=>Promise.resolve(e.filter((e=>e.title.slice(0,t.length).toLowerCase()===t.toLowerCase())));r.autocomplete=t=>(t.suggest=t.suggest||a,t.choices=[].concat(t.choices||[]),n("AutocompletePrompt",t))},3556:t=>{"use strict";t.exports=(t,e)=>{if(!t.meta||"escape"===t.name){if(t.ctrl){if("a"===t.name)return"first";if("c"===t.name)return"abort";if("d"===t.name)return"abort";if("e"===t.name)return"last";if("g"===t.name)return"reset"}if(e){if("j"===t.name)return"down";if("k"===t.name)return"up"}return"return"===t.name||"enter"===t.name?"submit":"backspace"===t.name?"delete":"delete"===t.name?"deleteForward":"abort"===t.name?"abort":"escape"===t.name?"exit":"tab"===t.name?"next":"pagedown"===t.name?"nextPage":"pageup"===t.name?"prevPage":"home"===t.name?"home":"end"===t.name?"end":"up"===t.name?"up":"down"===t.name?"down":"right"===t.name?"right":"left"===t.name&&"left"}}},8296:(t,e,s)=>{"use strict";function r(t,e){(null==e||e>t.length)&&(e=t.length);for(var s=0,r=new Array(e);s<e;s++)r[s]=t[s];return r}const i=s(7734),o=s(2698),n=o.erase,a=o.cursor;t.exports=function(t,e){if(!e)return n.line+a.to(0);let s=0;var o,h=function(t,e){var s;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(s=function(t,e){if(t){if("string"==typeof t)return r(t,e);var s=Object.prototype.toString.call(t).slice(8,-1);return"Object"===s&&t.constructor&&(s=t.constructor.name),"Map"===s||"Set"===s?Array.from(t):"Arguments"===s||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s)?r(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){s&&(t=s);var i=0,o=function(){};return{s:o,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n,a=!0,h=!1;return{s:function(){s=t[Symbol.iterator]()},n:function(){var t=s.next();return a=t.done,t},e:function(t){h=!0,n=t},f:function(){try{a||null==s.return||s.return()}finally{if(h)throw n}}}}(t.split(/\r?\n/));try{for(h.s();!(o=h.n()).done;){let t=o.value;s+=1+Math.floor(Math.max([...i(t)].length-1,0)/e)}}catch(t){h.e(t)}finally{h.f()}return n.lines(s)}},2496:t=>{"use strict";t.exports=(t,e,s)=>{s=s||e;let r=Math.min(e-s,t-Math.floor(s/2));return r<0&&(r=0),{startIndex:r,endIndex:Math.min(r+s,e)}}},9188:t=>{"use strict";const e={arrowUp:"↑",arrowDown:"↓",arrowLeft:"←",arrowRight:"→",radioOn:"◉",radioOff:"◯",tick:"✔",cross:"✖",ellipsis:"…",pointerSmall:"›",line:"─",pointer:"❯"},s={arrowUp:e.arrowUp,arrowDown:e.arrowDown,arrowLeft:e.arrowLeft,arrowRight:e.arrowRight,radioOn:"(*)",radioOff:"( )",tick:"√",cross:"×",ellipsis:"...",pointerSmall:"»",line:"─",pointer:">"},r="win32"===process.platform?s:e;t.exports=r},6513:(t,e,s)=>{"use strict";t.exports={action:s(3556),clear:s(8296),style:s(2052),strip:s(7734),figures:s(9188),lines:s(7731),wrap:s(8611),entriesToDisplay:s(2496)}},7731:(t,e,s)=>{"use strict";const r=s(7734);t.exports=function(t,e){let s=String(r(t)||"").split(/\r?\n/);return e?s.map((t=>Math.ceil(t.length/e))).reduce(((t,e)=>t+e)):s.length}},7734:t=>{"use strict";t.exports=t=>{const e=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[a-zA-Z\\d]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))"].join("|"),s=new RegExp(e,"g");return"string"==typeof t?t.replace(s,""):t}},2052:(t,e,s)=>{"use strict";const r=s(1391),i=s(9188),o=Object.freeze({password:{scale:1,render:t=>"*".repeat(t.length)},emoji:{scale:2,render:t=>"😃".repeat(t.length)},invisible:{scale:0,render:t=>""},default:{scale:1,render:t=>`${t}`}}),n=Object.freeze({aborted:r.red(i.cross),done:r.green(i.tick),exited:r.yellow(i.cross),default:r.cyan("?")});t.exports={styles:o,render:t=>o[t]||o.default,symbols:n,symbol:(t,e,s)=>e?n.aborted:s?n.exited:t?n.done:n.default,delimiter:t=>r.gray(t?i.ellipsis:i.pointerSmall),item:(t,e)=>r.gray(t?e?i.pointerSmall:"+":i.line)}},8611:t=>{"use strict";t.exports=(t,e={})=>{const s=Number.isSafeInteger(parseInt(e.margin))?new Array(parseInt(e.margin)).fill(" ").join(""):e.margin||"",r=e.width;return(t||"").split(/\r?\n/g).map((t=>t.split(/\s+/g).reduce(((t,e)=>(e.length+s.length>=r||t[t.length-1].length+e.length+1<r?t[t.length-1]+=` ${e}`:t.push(`${s}${e}`),t)),[s]).join("\n"))).join("\n")}},8809:(t,e,s)=>{t.exports=function(t){t=(Array.isArray(t)?t:t.split(".")).map(Number);let e=0,s=process.versions.node.split(".").map(Number);for(;e<t.length;e++){if(s[e]>t[e])return!1;if(t[e]>s[e])return!0}return!1}("8.6.0")?s(482):s(9439)},5468:t=>{"use strict";class e{constructor({token:t,date:e,parts:s,locales:r}){this.token=t,this.date=e||new Date,this.parts=s||[this],this.locales=r||{}}up(){}down(){}next(){const t=this.parts.indexOf(this);return this.parts.find(((s,r)=>r>t&&s instanceof e))}setTo(t){}prev(){let t=[].concat(this.parts).reverse();const s=t.indexOf(this);return t.find(((t,r)=>r>s&&t instanceof e))}toString(){return String(this.date)}}t.exports=e},608:(t,e,s)=>{"use strict";const r=s(5468);t.exports=class extends r{constructor(t={}){super(t)}up(){this.date.setDate(this.date.getDate()+1)}down(){this.date.setDate(this.date.getDate()-1)}setTo(t){this.date.setDate(parseInt(t.substr(-2)))}toString(){let t=this.date.getDate(),e=this.date.getDay();return"DD"===this.token?String(t).padStart(2,"0"):"Do"===this.token?t+(s=t,1==(s%=10)?"st":2===s?"nd":3===s?"rd":"th"):"d"===this.token?e+1:"ddd"===this.token?this.locales.weekdaysShort[e]:"dddd"===this.token?this.locales.weekdays[e]:t;var s}}},4134:(t,e,s)=>{"use strict";const r=s(5468);t.exports=class extends r{constructor(t={}){super(t)}up(){this.date.setHours(this.date.getHours()+1)}down(){this.date.setHours(this.date.getHours()-1)}setTo(t){this.date.setHours(parseInt(t.substr(-2)))}toString(){let t=this.date.getHours();return/h/.test(this.token)&&(t=t%12||12),this.token.length>1?String(t).padStart(2,"0"):t}}},1106:(t,e,s)=>{"use strict";t.exports={DatePart:s(5468),Meridiem:s(689),Day:s(608),Hours:s(4134),Milliseconds:s(5479),Minutes:s(5512),Month:s(8318),Seconds:s(8908),Year:s(9958)}},689:(t,e,s)=>{"use strict";const r=s(5468);t.exports=class extends r{constructor(t={}){super(t)}up(){this.date.setHours((this.date.getHours()+12)%24)}down(){this.up()}toString(){let t=this.date.getHours()>12?"pm":"am";return/\A/.test(this.token)?t.toUpperCase():t}}},5479:(t,e,s)=>{"use strict";const r=s(5468);t.exports=class extends r{constructor(t={}){super(t)}up(){this.date.setMilliseconds(this.date.getMilliseconds()+1)}down(){this.date.setMilliseconds(this.date.getMilliseconds()-1)}setTo(t){this.date.setMilliseconds(parseInt(t.substr(-this.token.length)))}toString(){return String(this.date.getMilliseconds()).padStart(4,"0").substr(0,this.token.length)}}},5512:(t,e,s)=>{"use strict";const r=s(5468);t.exports=class extends r{constructor(t={}){super(t)}up(){this.date.setMinutes(this.date.getMinutes()+1)}down(){this.date.setMinutes(this.date.getMinutes()-1)}setTo(t){this.date.setMinutes(parseInt(t.substr(-2)))}toString(){let t=this.date.getMinutes();return this.token.length>1?String(t).padStart(2,"0"):t}}},8318:(t,e,s)=>{"use strict";const r=s(5468);t.exports=class extends r{constructor(t={}){super(t)}up(){this.date.setMonth(this.date.getMonth()+1)}down(){this.date.setMonth(this.date.getMonth()-1)}setTo(t){t=parseInt(t.substr(-2))-1,this.date.setMonth(t<0?0:t)}toString(){let t=this.date.getMonth(),e=this.token.length;return 2===e?String(t+1).padStart(2,"0"):3===e?this.locales.monthsShort[t]:4===e?this.locales.months[t]:String(t+1)}}},8908:(t,e,s)=>{"use strict";const r=s(5468);t.exports=class extends r{constructor(t={}){super(t)}up(){this.date.setSeconds(this.date.getSeconds()+1)}down(){this.date.setSeconds(this.date.getSeconds()-1)}setTo(t){this.date.setSeconds(parseInt(t.substr(-2)))}toString(){let t=this.date.getSeconds();return this.token.length>1?String(t).padStart(2,"0"):t}}},9958:(t,e,s)=>{"use strict";const r=s(5468);t.exports=class extends r{constructor(t={}){super(t)}up(){this.date.setFullYear(this.date.getFullYear()+1)}down(){this.date.setFullYear(this.date.getFullYear()-1)}setTo(t){this.date.setFullYear(t.substr(-4))}toString(){let t=String(this.date.getFullYear()).padStart(4,"0");return 2===this.token.length?t.substr(-2):t}}},656:(t,e,s)=>{"use strict";const r=s(1391),i=s(1739),{erase:o,cursor:n}=s(2698),{style:a,clear:h,figures:c,wrap:u,entriesToDisplay:l}=s(9016),d=(t,e)=>t[e]&&(t[e].value||t[e].title||t[e]),p=(t,e)=>t[e]&&(t[e].title||t[e].value||t[e]);t.exports=class extends i{constructor(t={}){super(t),this.msg=t.message,this.suggest=t.suggest,this.choices=t.choices,this.initial="number"==typeof t.initial?t.initial:((t,e)=>{const s=t.findIndex((t=>t.value===e||t.title===e));return s>-1?s:void 0})(t.choices,t.initial),this.select=this.initial||t.cursor||0,this.i18n={noMatches:t.noMatches||"no matches found"},this.fallback=t.fallback||this.initial,this.clearFirst=t.clearFirst||!1,this.suggestions=[],this.input="",this.limit=t.limit||10,this.cursor=0,this.transform=a.render(t.style),this.scale=this.transform.scale,this.render=this.render.bind(this),this.complete=this.complete.bind(this),this.clear=h("",this.out.columns),this.complete(this.render),this.render()}set fallback(t){this._fb=Number.isSafeInteger(parseInt(t))?parseInt(t):t}get fallback(){let t;return"number"==typeof this._fb?t=this.choices[this._fb]:"string"==typeof this._fb&&(t={title:this._fb}),t||this._fb||{title:this.i18n.noMatches}}moveSelect(t){this.select=t,this.suggestions.length>0?this.value=d(this.suggestions,t):this.value=this.fallback.value,this.fire()}async complete(t){const e=this.completing=this.suggest(this.input,this.choices),s=await e;if(this.completing!==e)return;this.suggestions=s.map(((t,e,s)=>({title:p(s,e),value:d(s,e),description:t.description}))),this.completing=!1;const r=Math.max(s.length-1,0);this.moveSelect(Math.min(r,this.select)),t&&t()}reset(){this.input="",this.complete((()=>{this.moveSelect(void 0!==this.initial?this.initial:0),this.render()})),this.render()}exit(){this.clearFirst&&this.input.length>0?this.reset():(this.done=this.exited=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close())}abort(){this.done=this.aborted=!0,this.exited=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){this.done=!0,this.aborted=this.exited=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}_(t,e){let s=this.input.slice(0,this.cursor),r=this.input.slice(this.cursor);this.input=`${s}${t}${r}`,this.cursor=s.length+1,this.complete(this.render),this.render()}delete(){if(0===this.cursor)return this.bell();let t=this.input.slice(0,this.cursor-1),e=this.input.slice(this.cursor);this.input=`${t}${e}`,this.complete(this.render),this.cursor=this.cursor-1,this.render()}deleteForward(){if(this.cursor*this.scale>=this.rendered.length)return this.bell();let t=this.input.slice(0,this.cursor),e=this.input.slice(this.cursor+1);this.input=`${t}${e}`,this.complete(this.render),this.render()}first(){this.moveSelect(0),this.render()}last(){this.moveSelect(this.suggestions.length-1),this.render()}up(){0===this.select?this.moveSelect(this.suggestions.length-1):this.moveSelect(this.select-1),this.render()}down(){this.select===this.suggestions.length-1?this.moveSelect(0):this.moveSelect(this.select+1),this.render()}next(){this.select===this.suggestions.length-1?this.moveSelect(0):this.moveSelect(this.select+1),this.render()}nextPage(){this.moveSelect(Math.min(this.select+this.limit,this.suggestions.length-1)),this.render()}prevPage(){this.moveSelect(Math.max(this.select-this.limit,0)),this.render()}left(){if(this.cursor<=0)return this.bell();this.cursor=this.cursor-1,this.render()}right(){if(this.cursor*this.scale>=this.rendered.length)return this.bell();this.cursor=this.cursor+1,this.render()}renderOption(t,e,s,i){let o,n=s?c.arrowUp:i?c.arrowDown:" ",a=e?r.cyan().underline(t.title):t.title;return n=(e?r.cyan(c.pointer)+" ":"  ")+n,t.description&&(o=` - ${t.description}`,(n.length+a.length+o.length>=this.out.columns||t.description.split(/\r?\n/).length>1)&&(o="\n"+u(t.description,{margin:3,width:this.out.columns}))),n+" "+a+r.gray(o||"")}render(){if(this.closed)return;this.firstRender?this.out.write(n.hide):this.out.write(h(this.outputText,this.out.columns)),super.render();let{startIndex:t,endIndex:e}=l(this.select,this.choices.length,this.limit);if(this.outputText=[a.symbol(this.done,this.aborted,this.exited),r.bold(this.msg),a.delimiter(this.completing),this.done&&this.suggestions[this.select]?this.suggestions[this.select].title:this.rendered=this.transform.render(this.input)].join(" "),!this.done){const s=this.suggestions.slice(t,e).map(((s,r)=>this.renderOption(s,this.select===r+t,0===r&&t>0,r+t===e-1&&e<this.choices.length))).join("\n");this.outputText+="\n"+(s||r.gray(this.fallback.title))}this.out.write(o.line+n.to(0)+this.outputText)}}},6900:(t,e,s)=>{"use strict";const r=s(1391),{cursor:i}=s(2698),o=s(3702),{clear:n,style:a,figures:h}=s(9016);t.exports=class extends o{constructor(t={}){t.overrideRender=!0,super(t),this.inputValue="",this.clear=n("",this.out.columns),this.filteredOptions=this.value,this.render()}last(){this.cursor=this.filteredOptions.length-1,this.render()}next(){this.cursor=(this.cursor+1)%this.filteredOptions.length,this.render()}up(){0===this.cursor?this.cursor=this.filteredOptions.length-1:this.cursor--,this.render()}down(){this.cursor===this.filteredOptions.length-1?this.cursor=0:this.cursor++,this.render()}left(){this.filteredOptions[this.cursor].selected=!1,this.render()}right(){if(this.value.filter((t=>t.selected)).length>=this.maxChoices)return this.bell();this.filteredOptions[this.cursor].selected=!0,this.render()}delete(){this.inputValue.length&&(this.inputValue=this.inputValue.substr(0,this.inputValue.length-1),this.updateFilteredOptions())}updateFilteredOptions(){const t=this.filteredOptions[this.cursor];this.filteredOptions=this.value.filter((t=>!this.inputValue||!("string"!=typeof t.title||!t.title.toLowerCase().includes(this.inputValue.toLowerCase()))||!("string"!=typeof t.value||!t.value.toLowerCase().includes(this.inputValue.toLowerCase()))));const e=this.filteredOptions.findIndex((e=>e===t));this.cursor=e<0?0:e,this.render()}handleSpaceToggle(){const t=this.filteredOptions[this.cursor];if(t.selected)t.selected=!1,this.render();else{if(t.disabled||this.value.filter((t=>t.selected)).length>=this.maxChoices)return this.bell();t.selected=!0,this.render()}}handleInputChange(t){this.inputValue=this.inputValue+t,this.updateFilteredOptions()}_(t,e){" "===t?this.handleSpaceToggle():this.handleInputChange(t)}renderInstructions(){return void 0===this.instructions||this.instructions?"string"==typeof this.instructions?this.instructions:`\nInstructions:\n    ${h.arrowUp}/${h.arrowDown}: Highlight option\n    ${h.arrowLeft}/${h.arrowRight}/[space]: Toggle selection\n    [a,b,c]/delete: Filter choices\n    enter/return: Complete answer\n`:""}renderCurrentInput(){return`\nFiltered results for: ${this.inputValue?this.inputValue:r.gray("Enter something to filter")}\n`}renderOption(t,e,s){let i;return i=e.disabled?t===s?r.gray().underline(e.title):r.strikethrough().gray(e.title):t===s?r.cyan().underline(e.title):e.title,(e.selected?r.green(h.radioOn):h.radioOff)+"  "+i}renderDoneOrInstructions(){if(this.done)return this.value.filter((t=>t.selected)).map((t=>t.title)).join(", ");const t=[r.gray(this.hint),this.renderInstructions(),this.renderCurrentInput()];return this.filteredOptions.length&&this.filteredOptions[this.cursor].disabled&&t.push(r.yellow(this.warn)),t.join(" ")}render(){if(this.closed)return;this.firstRender&&this.out.write(i.hide),super.render();let t=[a.symbol(this.done,this.aborted),r.bold(this.msg),a.delimiter(!1),this.renderDoneOrInstructions()].join(" ");this.showMinError&&(t+=r.red(`You must select a minimum of ${this.minSelected} choices.`),this.showMinError=!1),t+=this.renderOptions(this.filteredOptions),this.out.write(this.clear+t),this.clear=n(t,this.out.columns)}}},5747:(t,e,s)=>{const r=s(1391),i=s(1739),{style:o,clear:n}=s(9016),{erase:a,cursor:h}=s(2698);t.exports=class extends i{constructor(t={}){super(t),this.msg=t.message,this.value=t.initial,this.initialValue=!!t.initial,this.yesMsg=t.yes||"yes",this.yesOption=t.yesOption||"(Y/n)",this.noMsg=t.no||"no",this.noOption=t.noOption||"(y/N)",this.render()}reset(){this.value=this.initialValue,this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){this.value=this.value||!1,this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}_(t,e){return"y"===t.toLowerCase()?(this.value=!0,this.submit()):"n"===t.toLowerCase()?(this.value=!1,this.submit()):this.bell()}render(){this.closed||(this.firstRender?this.out.write(h.hide):this.out.write(n(this.outputText,this.out.columns)),super.render(),this.outputText=[o.symbol(this.done,this.aborted),r.bold(this.msg),o.delimiter(this.done),this.done?this.value?this.yesMsg:this.noMsg:r.gray(this.initialValue?this.yesOption:this.noOption)].join(" "),this.out.write(a.line+h.to(0)+this.outputText))}}},1054:(t,e,s)=>{"use strict";const r=s(1391),i=s(1739),{style:o,clear:n,figures:a}=s(9016),{erase:h,cursor:c}=s(2698),{DatePart:u,Meridiem:l,Day:d,Hours:p,Milliseconds:f,Minutes:m,Month:g,Seconds:y,Year:b}=s(1106),v=/\\(.)|"((?:\\["\\]|[^"])+)"|(D[Do]?|d{3,4}|d)|(M{1,4})|(YY(?:YY)?)|([aA])|([Hh]{1,2})|(m{1,2})|(s{1,2})|(S{1,4})|./g,_={1:({token:t})=>t.replace(/\\(.)/g,"$1"),2:t=>new d(t),3:t=>new g(t),4:t=>new b(t),5:t=>new l(t),6:t=>new p(t),7:t=>new m(t),8:t=>new y(t),9:t=>new f(t)},w={months:"January,February,March,April,May,June,July,August,September,October,November,December".split(","),monthsShort:"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),weekdays:"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),weekdaysShort:"Sun,Mon,Tue,Wed,Thu,Fri,Sat".split(",")};t.exports=class extends i{constructor(t={}){super(t),this.msg=t.message,this.cursor=0,this.typed="",this.locales=Object.assign(w,t.locales),this._date=t.initial||new Date,this.errorMsg=t.error||"Please Enter A Valid Value",this.validator=t.validate||(()=>!0),this.mask=t.mask||"YYYY-MM-DD HH:mm:ss",this.clear=n("",this.out.columns),this.render()}get value(){return this.date}get date(){return this._date}set date(t){t&&this._date.setTime(t.getTime())}set mask(t){let e;for(this.parts=[];e=v.exec(t);){let t=e.shift(),s=e.findIndex((t=>null!=t));this.parts.push(s in _?_[s]({token:e[s]||t,date:this.date,parts:this.parts,locales:this.locales}):e[s]||t)}let s=this.parts.reduce(((t,e)=>("string"==typeof e&&"string"==typeof t[t.length-1]?t[t.length-1]+=e:t.push(e),t)),[]);this.parts.splice(0),this.parts.push(...s),this.reset()}moveCursor(t){this.typed="",this.cursor=t,this.fire()}reset(){this.moveCursor(this.parts.findIndex((t=>t instanceof u))),this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.error=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}async validate(){let t=await this.validator(this.value);"string"==typeof t&&(this.errorMsg=t,t=!1),this.error=!t}async submit(){if(await this.validate(),this.error)return this.color="red",this.fire(),void this.render();this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}up(){this.typed="",this.parts[this.cursor].up(),this.render()}down(){this.typed="",this.parts[this.cursor].down(),this.render()}left(){let t=this.parts[this.cursor].prev();if(null==t)return this.bell();this.moveCursor(this.parts.indexOf(t)),this.render()}right(){let t=this.parts[this.cursor].next();if(null==t)return this.bell();this.moveCursor(this.parts.indexOf(t)),this.render()}next(){let t=this.parts[this.cursor].next();this.moveCursor(t?this.parts.indexOf(t):this.parts.findIndex((t=>t instanceof u))),this.render()}_(t){/\d/.test(t)&&(this.typed+=t,this.parts[this.cursor].setTo(this.typed),this.render())}render(){this.closed||(this.firstRender?this.out.write(c.hide):this.out.write(n(this.outputText,this.out.columns)),super.render(),this.outputText=[o.symbol(this.done,this.aborted),r.bold(this.msg),o.delimiter(!1),this.parts.reduce(((t,e,s)=>t.concat(s!==this.cursor||this.done?e:r.cyan().underline(e.toString()))),[]).join("")].join(" "),this.error&&(this.outputText+=this.errorMsg.split("\n").reduce(((t,e,s)=>t+`\n${s?" ":a.pointerSmall} ${r.red().italic(e)}`),"")),this.out.write(h.line+c.to(0)+this.outputText))}}},635:(t,e,s)=>{"use strict";t.exports={TextPrompt:s(4490),SelectPrompt:s(9770),TogglePrompt:s(4639),DatePrompt:s(1054),NumberPrompt:s(8531),MultiselectPrompt:s(3702),AutocompletePrompt:s(656),AutocompleteMultiselectPrompt:s(6900),ConfirmPrompt:s(5747)}},3702:(t,e,s)=>{"use strict";const r=s(1391),{cursor:i}=s(2698),o=s(1739),{clear:n,figures:a,style:h,wrap:c,entriesToDisplay:u}=s(9016);t.exports=class extends o{constructor(t={}){super(t),this.msg=t.message,this.cursor=t.cursor||0,this.scrollIndex=t.cursor||0,this.hint=t.hint||"",this.warn=t.warn||"- This option is disabled -",this.minSelected=t.min,this.showMinError=!1,this.maxChoices=t.max,this.instructions=t.instructions,this.optionsPerPage=t.optionsPerPage||10,this.value=t.choices.map(((t,e)=>("string"==typeof t&&(t={title:t,value:e}),{title:t&&(t.title||t.value||t),description:t&&t.description,value:t&&(void 0===t.value?e:t.value),selected:t&&t.selected,disabled:t&&t.disabled}))),this.clear=n("",this.out.columns),t.overrideRender||this.render()}reset(){this.value.map((t=>!t.selected)),this.cursor=0,this.fire(),this.render()}selected(){return this.value.filter((t=>t.selected))}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){const t=this.value.filter((t=>t.selected));this.minSelected&&t.length<this.minSelected?(this.showMinError=!0,this.render()):(this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close())}first(){this.cursor=0,this.render()}last(){this.cursor=this.value.length-1,this.render()}next(){this.cursor=(this.cursor+1)%this.value.length,this.render()}up(){0===this.cursor?this.cursor=this.value.length-1:this.cursor--,this.render()}down(){this.cursor===this.value.length-1?this.cursor=0:this.cursor++,this.render()}left(){this.value[this.cursor].selected=!1,this.render()}right(){if(this.value.filter((t=>t.selected)).length>=this.maxChoices)return this.bell();this.value[this.cursor].selected=!0,this.render()}handleSpaceToggle(){const t=this.value[this.cursor];if(t.selected)t.selected=!1,this.render();else{if(t.disabled||this.value.filter((t=>t.selected)).length>=this.maxChoices)return this.bell();t.selected=!0,this.render()}}toggleAll(){if(void 0!==this.maxChoices||this.value[this.cursor].disabled)return this.bell();const t=!this.value[this.cursor].selected;this.value.filter((t=>!t.disabled)).forEach((e=>e.selected=t)),this.render()}_(t,e){if(" "===t)this.handleSpaceToggle();else{if("a"!==t)return this.bell();this.toggleAll()}}renderInstructions(){return void 0===this.instructions||this.instructions?"string"==typeof this.instructions?this.instructions:`\nInstructions:\n    ${a.arrowUp}/${a.arrowDown}: Highlight option\n    ${a.arrowLeft}/${a.arrowRight}/[space]: Toggle selection\n`+(void 0===this.maxChoices?"    a: Toggle all\n":"")+"    enter/return: Complete answer":""}renderOption(t,e,s,i){const o=(e.selected?r.green(a.radioOn):a.radioOff)+" "+i+" ";let n,h;return e.disabled?n=t===s?r.gray().underline(e.title):r.strikethrough().gray(e.title):(n=t===s?r.cyan().underline(e.title):e.title,t===s&&e.description&&(h=` - ${e.description}`,(o.length+n.length+h.length>=this.out.columns||e.description.split(/\r?\n/).length>1)&&(h="\n"+c(e.description,{margin:o.length,width:this.out.columns})))),o+n+r.gray(h||"")}paginateOptions(t){if(0===t.length)return r.red("No matches for this query.");let e,{startIndex:s,endIndex:i}=u(this.cursor,t.length,this.optionsPerPage),o=[];for(let r=s;r<i;r++)e=r===s&&s>0?a.arrowUp:r===i-1&&i<t.length?a.arrowDown:" ",o.push(this.renderOption(this.cursor,t[r],r,e));return"\n"+o.join("\n")}renderOptions(t){return this.done?"":this.paginateOptions(t)}renderDoneOrInstructions(){if(this.done)return this.value.filter((t=>t.selected)).map((t=>t.title)).join(", ");const t=[r.gray(this.hint),this.renderInstructions()];return this.value[this.cursor].disabled&&t.push(r.yellow(this.warn)),t.join(" ")}render(){if(this.closed)return;this.firstRender&&this.out.write(i.hide),super.render();let t=[h.symbol(this.done,this.aborted),r.bold(this.msg),h.delimiter(!1),this.renderDoneOrInstructions()].join(" ");this.showMinError&&(t+=r.red(`You must select a minimum of ${this.minSelected} choices.`),this.showMinError=!1),t+=this.renderOptions(this.value),this.out.write(this.clear+t),this.clear=n(t,this.out.columns)}}},8531:(t,e,s)=>{const r=s(1391),i=s(1739),{cursor:o,erase:n}=s(2698),{style:a,figures:h,clear:c,lines:u}=s(9016),l=/[0-9]/,d=t=>void 0!==t,p=(t,e)=>{let s=Math.pow(10,e);return Math.round(t*s)/s};t.exports=class extends i{constructor(t={}){super(t),this.transform=a.render(t.style),this.msg=t.message,this.initial=d(t.initial)?t.initial:"",this.float=!!t.float,this.round=t.round||2,this.inc=t.increment||1,this.min=d(t.min)?t.min:-1/0,this.max=d(t.max)?t.max:1/0,this.errorMsg=t.error||"Please Enter A Valid Value",this.validator=t.validate||(()=>!0),this.color="cyan",this.value="",this.typed="",this.lastHit=0,this.render()}set value(t){t||0===t?(this.placeholder=!1,this.rendered=this.transform.render(`${p(t,this.round)}`),this._value=p(t,this.round)):(this.placeholder=!0,this.rendered=r.gray(this.transform.render(`${this.initial}`)),this._value=""),this.fire()}get value(){return this._value}parse(t){return this.float?parseFloat(t):parseInt(t)}valid(t){return"-"===t||"."===t&&this.float||l.test(t)}reset(){this.typed="",this.value="",this.fire(),this.render()}exit(){this.abort()}abort(){let t=this.value;this.value=""!==t?t:this.initial,this.done=this.aborted=!0,this.error=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}async validate(){let t=await this.validator(this.value);"string"==typeof t&&(this.errorMsg=t,t=!1),this.error=!t}async submit(){if(await this.validate(),this.error)return this.color="red",this.fire(),void this.render();let t=this.value;this.value=""!==t?t:this.initial,this.done=!0,this.aborted=!1,this.error=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}up(){if(this.typed="",""===this.value&&(this.value=this.min-this.inc),this.value>=this.max)return this.bell();this.value+=this.inc,this.color="cyan",this.fire(),this.render()}down(){if(this.typed="",""===this.value&&(this.value=this.min+this.inc),this.value<=this.min)return this.bell();this.value-=this.inc,this.color="cyan",this.fire(),this.render()}delete(){let t=this.value.toString();if(0===t.length)return this.bell();this.value=this.parse(t=t.slice(0,-1))||"",""!==this.value&&this.value<this.min&&(this.value=this.min),this.color="cyan",this.fire(),this.render()}next(){this.value=this.initial,this.fire(),this.render()}_(t,e){if(!this.valid(t))return this.bell();const s=Date.now();if(s-this.lastHit>1e3&&(this.typed=""),this.typed+=t,this.lastHit=s,this.color="cyan","."===t)return this.fire();this.value=Math.min(this.parse(this.typed),this.max),this.value>this.max&&(this.value=this.max),this.value<this.min&&(this.value=this.min),this.fire(),this.render()}render(){this.closed||(this.firstRender||(this.outputError&&this.out.write(o.down(u(this.outputError,this.out.columns)-1)+c(this.outputError,this.out.columns)),this.out.write(c(this.outputText,this.out.columns))),super.render(),this.outputError="",this.outputText=[a.symbol(this.done,this.aborted),r.bold(this.msg),a.delimiter(this.done),this.done&&(this.done||this.placeholder)?this.rendered:r[this.color]().underline(this.rendered)].join(" "),this.error&&(this.outputError+=this.errorMsg.split("\n").reduce(((t,e,s)=>t+`\n${s?" ":h.pointerSmall} ${r.red().italic(e)}`),"")),this.out.write(n.line+o.to(0)+this.outputText+o.save+this.outputError+o.restore))}}},1739:(t,e,s)=>{"use strict";const r=s(1058),{action:i}=s(9016),o=s(8614),{beep:n,cursor:a}=s(2698),h=s(1391);t.exports=class extends o{constructor(t={}){super(),this.firstRender=!0,this.in=t.stdin||process.stdin,this.out=t.stdout||process.stdout,this.onRender=(t.onRender||(()=>{})).bind(this);const e=r.createInterface({input:this.in,escapeCodeTimeout:50});r.emitKeypressEvents(this.in,e),this.in.isTTY&&this.in.setRawMode(!0);const s=["SelectPrompt","MultiselectPrompt"].indexOf(this.constructor.name)>-1,o=(t,e)=>{let r=i(e,s);!1===r?this._&&this._(t,e):"function"==typeof this[r]?this[r](e):this.bell()};this.close=()=>{this.out.write(a.show),this.in.removeListener("keypress",o),this.in.isTTY&&this.in.setRawMode(!1),e.close(),this.emit(this.aborted?"abort":this.exited?"exit":"submit",this.value),this.closed=!0},this.in.on("keypress",o)}fire(){this.emit("state",{value:this.value,aborted:!!this.aborted,exited:!!this.exited})}bell(){this.out.write(n)}render(){this.onRender(h),this.firstRender&&(this.firstRender=!1)}}},9770:(t,e,s)=>{"use strict";const r=s(1391),i=s(1739),{style:o,clear:n,figures:a,wrap:h,entriesToDisplay:c}=s(9016),{cursor:u}=s(2698);t.exports=class extends i{constructor(t={}){super(t),this.msg=t.message,this.hint=t.hint||"- Use arrow-keys. Return to submit.",this.warn=t.warn||"- This option is disabled",this.cursor=t.initial||0,this.choices=t.choices.map(((t,e)=>("string"==typeof t&&(t={title:t,value:e}),{title:t&&(t.title||t.value||t),value:t&&(void 0===t.value?e:t.value),description:t&&t.description,selected:t&&t.selected,disabled:t&&t.disabled}))),this.optionsPerPage=t.optionsPerPage||10,this.value=(this.choices[this.cursor]||{}).value,this.clear=n("",this.out.columns),this.render()}moveCursor(t){this.cursor=t,this.value=this.choices[t].value,this.fire()}reset(){this.moveCursor(0),this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){this.selection.disabled?this.bell():(this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close())}first(){this.moveCursor(0),this.render()}last(){this.moveCursor(this.choices.length-1),this.render()}up(){0===this.cursor?this.moveCursor(this.choices.length-1):this.moveCursor(this.cursor-1),this.render()}down(){this.cursor===this.choices.length-1?this.moveCursor(0):this.moveCursor(this.cursor+1),this.render()}next(){this.moveCursor((this.cursor+1)%this.choices.length),this.render()}_(t,e){if(" "===t)return this.submit()}get selection(){return this.choices[this.cursor]}render(){if(this.closed)return;this.firstRender?this.out.write(u.hide):this.out.write(n(this.outputText,this.out.columns)),super.render();let{startIndex:t,endIndex:e}=c(this.cursor,this.choices.length,this.optionsPerPage);if(this.outputText=[o.symbol(this.done,this.aborted),r.bold(this.msg),o.delimiter(!1),this.done?this.selection.title:this.selection.disabled?r.yellow(this.warn):r.gray(this.hint)].join(" "),!this.done){this.outputText+="\n";for(let s=t;s<e;s++){let i,o,n="",c=this.choices[s];o=s===t&&t>0?a.arrowUp:s===e-1&&e<this.choices.length?a.arrowDown:" ",c.disabled?(i=this.cursor===s?r.gray().underline(c.title):r.strikethrough().gray(c.title),o=(this.cursor===s?r.bold().gray(a.pointer)+" ":"  ")+o):(i=this.cursor===s?r.cyan().underline(c.title):c.title,o=(this.cursor===s?r.cyan(a.pointer)+" ":"  ")+o,c.description&&this.cursor===s&&(n=` - ${c.description}`,(o.length+i.length+n.length>=this.out.columns||c.description.split(/\r?\n/).length>1)&&(n="\n"+h(c.description,{margin:3,width:this.out.columns})))),this.outputText+=`${o} ${i}${r.gray(n)}\n`}}this.out.write(this.outputText)}}},4490:(t,e,s)=>{const r=s(1391),i=s(1739),{erase:o,cursor:n}=s(2698),{style:a,clear:h,lines:c,figures:u}=s(9016);t.exports=class extends i{constructor(t={}){super(t),this.transform=a.render(t.style),this.scale=this.transform.scale,this.msg=t.message,this.initial=t.initial||"",this.validator=t.validate||(()=>!0),this.value="",this.errorMsg=t.error||"Please Enter A Valid Value",this.cursor=Number(!!this.initial),this.clear=h("",this.out.columns),this.render()}set value(t){!t&&this.initial?(this.placeholder=!0,this.rendered=r.gray(this.transform.render(this.initial))):(this.placeholder=!1,this.rendered=this.transform.render(t)),this._value=t,this.fire()}get value(){return this._value}reset(){this.value="",this.cursor=Number(!!this.initial),this.fire(),this.render()}exit(){this.abort()}abort(){this.value=this.value||this.initial,this.done=this.aborted=!0,this.error=!1,this.red=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}async validate(){let t=await this.validator(this.value);"string"==typeof t&&(this.errorMsg=t,t=!1),this.error=!t}async submit(){if(this.value=this.value||this.initial,await this.validate(),this.error)return this.red=!0,this.fire(),void this.render();this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}next(){if(!this.placeholder)return this.bell();this.value=this.initial,this.cursor=this.rendered.length,this.fire(),this.render()}moveCursor(t){this.placeholder||(this.cursor=this.cursor+t)}_(t,e){let s=this.value.slice(0,this.cursor),r=this.value.slice(this.cursor);this.value=`${s}${t}${r}`,this.red=!1,this.cursor=this.placeholder?0:s.length+1,this.render()}delete(){if(0===this.cursor)return this.bell();let t=this.value.slice(0,this.cursor-1),e=this.value.slice(this.cursor);this.value=`${t}${e}`,this.red=!1,this.moveCursor(-1),this.render()}deleteForward(){if(this.cursor*this.scale>=this.rendered.length||this.placeholder)return this.bell();let t=this.value.slice(0,this.cursor),e=this.value.slice(this.cursor+1);this.value=`${t}${e}`,this.red=!1,this.render()}first(){this.cursor=0,this.render()}last(){this.cursor=this.value.length,this.render()}left(){if(this.cursor<=0||this.placeholder)return this.bell();this.moveCursor(-1),this.render()}right(){if(this.cursor*this.scale>=this.rendered.length||this.placeholder)return this.bell();this.moveCursor(1),this.render()}render(){this.closed||(this.firstRender||(this.outputError&&this.out.write(n.down(c(this.outputError,this.out.columns)-1)+h(this.outputError,this.out.columns)),this.out.write(h(this.outputText,this.out.columns))),super.render(),this.outputError="",this.outputText=[a.symbol(this.done,this.aborted),r.bold(this.msg),a.delimiter(this.done),this.red?r.red(this.rendered):this.rendered].join(" "),this.error&&(this.outputError+=this.errorMsg.split("\n").reduce(((t,e,s)=>t+`\n${s?" ":u.pointerSmall} ${r.red().italic(e)}`),"")),this.out.write(o.line+n.to(0)+this.outputText+n.save+this.outputError+n.restore))}}},4639:(t,e,s)=>{const r=s(1391),i=s(1739),{style:o,clear:n}=s(9016),{cursor:a,erase:h}=s(2698);t.exports=class extends i{constructor(t={}){super(t),this.msg=t.message,this.value=!!t.initial,this.active=t.active||"on",this.inactive=t.inactive||"off",this.initialValue=this.value,this.render()}reset(){this.value=this.initialValue,this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}deactivate(){if(!1===this.value)return this.bell();this.value=!1,this.render()}activate(){if(!0===this.value)return this.bell();this.value=!0,this.render()}delete(){this.deactivate()}left(){this.deactivate()}right(){this.activate()}down(){this.deactivate()}up(){this.activate()}next(){this.value=!this.value,this.fire(),this.render()}_(t,e){if(" "===t)this.value=!this.value;else if("1"===t)this.value=!0;else{if("0"!==t)return this.bell();this.value=!1}this.render()}render(){this.closed||(this.firstRender?this.out.write(a.hide):this.out.write(n(this.outputText,this.out.columns)),super.render(),this.outputText=[o.symbol(this.done,this.aborted),r.bold(this.msg),o.delimiter(this.done),this.value?this.inactive:r.cyan().underline(this.inactive),r.gray("/"),this.value?r.cyan().underline(this.active):this.active].join(" "),this.out.write(h.line+a.to(0)+this.outputText))}}},9439:(t,e,s)=>{"use strict";const r=s(8378),i=["suggest","format","onState","validate","onRender","type"],o=()=>{};async function n(t=[],{onSubmit:e=o,onCancel:s=o}={}){const h={},c=n._override||{};let u,l,d,p,f,m;t=[].concat(t);const g=async(t,e,s=!1)=>{if(s||!t.validate||!0===t.validate(e))return t.format?await t.format(e,h):e};for(l of t)if(({name:p,type:f}=l),"function"==typeof f&&(f=await f(u,{...h},l),l.type=f),f){for(let t in l){if(i.includes(t))continue;let e=l[t];l[t]="function"==typeof e?await e(u,{...h},m):e}if(m=l,"string"!=typeof l.message)throw new Error("prompt message is required");if(({name:p,type:f}=l),void 0===r[f])throw new Error(`prompt type (${f}) is not defined`);if(void 0===c[l.name]||(u=await g(l,c[l.name]),void 0===u)){try{u=n._injected?a(n._injected,l.initial):await r[f](l),h[p]=u=await g(l,u,!0),d=await e(l,u,h)}catch(t){d=!await s(l,h)}if(d)return h}else h[p]=u}return h}function a(t,e){const s=t.shift();if(s instanceof Error)throw s;return void 0===s?e:s}t.exports=Object.assign(n,{prompt:n,prompts:r,inject:function(t){n._injected=(n._injected||[]).concat(t)},override:function(t){n._override=Object.assign({},t)}})},8378:(t,e,s)=>{"use strict";const r=e,i=s(635),o=t=>t;function n(t,e,s={}){return new Promise(((r,n)=>{const a=new i[t](e),h=s.onAbort||o,c=s.onSubmit||o,u=s.onExit||o;a.on("state",e.onState||o),a.on("submit",(t=>r(c(t)))),a.on("exit",(t=>r(u(t)))),a.on("abort",(t=>n(h(t))))}))}r.text=t=>n("TextPrompt",t),r.password=t=>(t.style="password",r.text(t)),r.invisible=t=>(t.style="invisible",r.text(t)),r.number=t=>n("NumberPrompt",t),r.date=t=>n("DatePrompt",t),r.confirm=t=>n("ConfirmPrompt",t),r.list=t=>{const e=t.separator||",";return n("TextPrompt",t,{onSubmit:t=>t.split(e).map((t=>t.trim()))})},r.toggle=t=>n("TogglePrompt",t),r.select=t=>n("SelectPrompt",t),r.multiselect=t=>{t.choices=[].concat(t.choices||[]);const e=t=>t.filter((t=>t.selected)).map((t=>t.value));return n("MultiselectPrompt",t,{onAbort:e,onSubmit:e})},r.autocompleteMultiselect=t=>{t.choices=[].concat(t.choices||[]);const e=t=>t.filter((t=>t.selected)).map((t=>t.value));return n("AutocompleteMultiselectPrompt",t,{onAbort:e,onSubmit:e})};const a=(t,e)=>Promise.resolve(e.filter((e=>e.title.slice(0,t.length).toLowerCase()===t.toLowerCase())));r.autocomplete=t=>(t.suggest=t.suggest||a,t.choices=[].concat(t.choices||[]),n("AutocompletePrompt",t))},2866:t=>{"use strict";t.exports=(t,e)=>{if(!t.meta||"escape"===t.name){if(t.ctrl){if("a"===t.name)return"first";if("c"===t.name)return"abort";if("d"===t.name)return"abort";if("e"===t.name)return"last";if("g"===t.name)return"reset"}if(e){if("j"===t.name)return"down";if("k"===t.name)return"up"}return"return"===t.name||"enter"===t.name?"submit":"backspace"===t.name?"delete":"delete"===t.name?"deleteForward":"abort"===t.name?"abort":"escape"===t.name?"exit":"tab"===t.name?"next":"pagedown"===t.name?"nextPage":"pageup"===t.name?"prevPage":"home"===t.name?"home":"end"===t.name?"end":"up"===t.name?"up":"down"===t.name?"down":"right"===t.name?"right":"left"===t.name&&"left"}}},8694:(t,e,s)=>{"use strict";const r=s(9420),{erase:i,cursor:o}=s(2698);t.exports=function(t,e){if(!e)return i.line+o.to(0);let s=0;const n=t.split(/\r?\n/);for(let t of n)s+=1+Math.floor(Math.max([...r(t)].length-1,0)/e);return i.lines(s)}},2163:t=>{"use strict";t.exports=(t,e,s)=>{s=s||e;let r=Math.min(e-s,t-Math.floor(s/2));return r<0&&(r=0),{startIndex:r,endIndex:Math.min(r+s,e)}}},4815:t=>{"use strict";const e={arrowUp:"↑",arrowDown:"↓",arrowLeft:"←",arrowRight:"→",radioOn:"◉",radioOff:"◯",tick:"✔",cross:"✖",ellipsis:"…",pointerSmall:"›",line:"─",pointer:"❯"},s={arrowUp:e.arrowUp,arrowDown:e.arrowDown,arrowLeft:e.arrowLeft,arrowRight:e.arrowRight,radioOn:"(*)",radioOff:"( )",tick:"√",cross:"×",ellipsis:"...",pointerSmall:"»",line:"─",pointer:">"},r="win32"===process.platform?s:e;t.exports=r},9016:(t,e,s)=>{"use strict";t.exports={action:s(2866),clear:s(8694),style:s(424),strip:s(9420),figures:s(4815),lines:s(4985),wrap:s(8524),entriesToDisplay:s(2163)}},4985:(t,e,s)=>{"use strict";const r=s(9420);t.exports=function(t,e){let s=String(r(t)||"").split(/\r?\n/);return e?s.map((t=>Math.ceil(t.length/e))).reduce(((t,e)=>t+e)):s.length}},9420:t=>{"use strict";t.exports=t=>{const e=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[a-zA-Z\\d]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))"].join("|"),s=new RegExp(e,"g");return"string"==typeof t?t.replace(s,""):t}},424:(t,e,s)=>{"use strict";const r=s(1391),i=s(4815),o=Object.freeze({password:{scale:1,render:t=>"*".repeat(t.length)},emoji:{scale:2,render:t=>"😃".repeat(t.length)},invisible:{scale:0,render:t=>""},default:{scale:1,render:t=>`${t}`}}),n=Object.freeze({aborted:r.red(i.cross),done:r.green(i.tick),exited:r.yellow(i.cross),default:r.cyan("?")});t.exports={styles:o,render:t=>o[t]||o.default,symbols:n,symbol:(t,e,s)=>e?n.aborted:s?n.exited:t?n.done:n.default,delimiter:t=>r.gray(t?i.ellipsis:i.pointerSmall),item:(t,e)=>r.gray(t?e?i.pointerSmall:"+":i.line)}},8524:t=>{"use strict";t.exports=(t,e={})=>{const s=Number.isSafeInteger(parseInt(e.margin))?new Array(parseInt(e.margin)).fill(" ").join(""):e.margin||"",r=e.width;return(t||"").split(/\r?\n/g).map((t=>t.split(/\s+/g).reduce(((t,e)=>(e.length+s.length>=r||t[t.length-1].length+e.length+1<r?t[t.length-1]+=` ${e}`:t.push(`${s}${e}`),t)),[s]).join("\n"))).join("\n")}},4286:(t,e,s)=>{var r=s(778),i=s(2840),o=s(4826),n=function(){},a=/^v?\.0/.test(process.version),h=function(t){return"function"==typeof t},c=function(t,e,s,c){c=r(c);var u=!1;t.on("close",(function(){u=!0})),i(t,{readable:e,writable:s},(function(t){if(t)return c(t);u=!0,c()}));var l=!1;return function(e){if(!u&&!l)return l=!0,function(t){return!!a&&!!o&&(t instanceof(o.ReadStream||n)||t instanceof(o.WriteStream||n))&&h(t.close)}(t)?t.close(n):function(t){return t.setHeader&&h(t.abort)}(t)?t.abort():h(t.destroy)?t.destroy():void c(e||new Error("stream was destroyed"))}},u=function(t){t()},l=function(t,e){return t.pipe(e)};t.exports=function(){var t,e=Array.prototype.slice.call(arguments),s=h(e[e.length-1]||n)&&e.pop()||n;if(Array.isArray(e[0])&&(e=e[0]),e.length<2)throw new Error("pump requires two streams per minimum");var r=e.map((function(i,o){var n=o<e.length-1;return c(i,n,o>0,(function(e){t||(t=e),e&&r.forEach(u),n||(r.forEach(u),s(t))}))}));return e.reduce(l)}},1269:t=>{"use strict";class e{constructor(t={}){if(!(t.maxSize&&t.maxSize>0))throw new TypeError("`maxSize` must be a number greater than 0");this.maxSize=t.maxSize,this.onEviction=t.onEviction,this.cache=new Map,this.oldCache=new Map,this._size=0}_set(t,e){if(this.cache.set(t,e),this._size++,this._size>=this.maxSize){if(this._size=0,"function"==typeof this.onEviction)for(const[t,e]of this.oldCache.entries())this.onEviction(t,e);this.oldCache=this.cache,this.cache=new Map}}get(t){if(this.cache.has(t))return this.cache.get(t);if(this.oldCache.has(t)){const e=this.oldCache.get(t);return this.oldCache.delete(t),this._set(t,e),e}}set(t,e){return this.cache.has(t)?this.cache.set(t,e):this._set(t,e),this}has(t){return this.cache.has(t)||this.oldCache.has(t)}peek(t){return this.cache.has(t)?this.cache.get(t):this.oldCache.has(t)?this.oldCache.get(t):void 0}delete(t){const e=this.cache.delete(t);return e&&this._size--,this.oldCache.delete(t)||e}clear(){this.cache.clear(),this.oldCache.clear(),this._size=0}*keys(){for(const[t]of this)yield t}*values(){for(const[,t]of this)yield t}*[Symbol.iterator](){for(const t of this.cache)yield t;for(const t of this.oldCache){const[e]=t;this.cache.has(e)||(yield t)}}get size(){let t=0;for(const e of this.oldCache.keys())this.cache.has(e)||t++;return Math.min(this._size+t,this.maxSize)}}t.exports=e},5322:(t,e,s)=>{"use strict";const r=s(4016);t.exports=(t={})=>new Promise(((e,s)=>{const i=r.connect(t,(()=>{t.resolveSocket?(i.off("error",s),e({alpnProtocol:i.alpnProtocol,socket:i})):(i.destroy(),e({alpnProtocol:i.alpnProtocol}))}));i.on("error",s)}))},4259:(t,e,s)=>{"use strict";const r=s(2413).Readable,i=s(5989);t.exports=class extends r{constructor(t,e,s,r){if("number"!=typeof t)throw new TypeError("Argument `statusCode` should be a number");if("object"!=typeof e)throw new TypeError("Argument `headers` should be an object");if(!(s instanceof Buffer))throw new TypeError("Argument `body` should be a buffer");if("string"!=typeof r)throw new TypeError("Argument `url` should be a string");super(),this.statusCode=t,this.headers=i(e),this.body=s,this.url=r}_read(){this.push(this.body),this.push(null)}}},2698:t=>{"use strict";const e={to:(t,e)=>e?`[${e+1};${t+1}H`:`[${t+1}G`,move(t,e){let s="";return t<0?s+=`[${-t}D`:t>0&&(s+=`[${t}C`),e<0?s+=`[${-e}A`:e>0&&(s+=`[${e}B`),s},up:(t=1)=>`[${t}A`,down:(t=1)=>`[${t}B`,forward:(t=1)=>`[${t}C`,backward:(t=1)=>`[${t}D`,nextLine:(t=1)=>"[E".repeat(t),prevLine:(t=1)=>"[F".repeat(t),left:"[G",hide:"[?25l",show:"[?25h",save:"7",restore:"8"},s={screen:"[2J",up:(t=1)=>"[1J".repeat(t),down:(t=1)=>"[J".repeat(t),line:"[2K",lineEnd:"[K",lineStart:"[1K",lines(t){let s="";for(let r=0;r<t;r++)s+=this.line+(r<t-1?e.up():"");return t&&(s+=e.left),s}};t.exports={cursor:e,scroll:{up:(t=1)=>"[S".repeat(t),down:(t=1)=>"[T".repeat(t)},erase:s,beep:""}},2479:t=>{t.exports=function t(e,s){if(e&&s)return t(e)(s);if("function"!=typeof e)throw new TypeError("need wrapper function");return Object.keys(e).forEach((function(t){r[t]=e[t]})),r;function r(){for(var t=new Array(arguments.length),s=0;s<t.length;s++)t[s]=arguments[s];var r=e.apply(this,t),i=t[t.length-1];return"function"==typeof r&&r!==i&&Object.keys(i).forEach((function(t){r[t]=i[t]})),r}}},4293:t=>{"use strict";t.exports=require("buffer")},881:t=>{"use strict";t.exports=require("dns")},8614:t=>{"use strict";t.exports=require("events")},4826:t=>{"use strict";t.exports=require("fs")},8605:t=>{"use strict";t.exports=require("http")},7565:t=>{"use strict";t.exports=require("http2")},7211:t=>{"use strict";t.exports=require("https")},1631:t=>{"use strict";t.exports=require("net")},2087:t=>{"use strict";t.exports=require("os")},5622:t=>{"use strict";t.exports=require("path")},1058:t=>{"use strict";t.exports=require("readline")},2413:t=>{"use strict";t.exports=require("stream")},4016:t=>{"use strict";t.exports=require("tls")},8835:t=>{"use strict";t.exports=require("url")},1669:t=>{"use strict";t.exports=require("util")},8761:t=>{"use strict";t.exports=require("zlib")}},e={};function s(r){if(e[r])return e[r].exports;var i=e[r]={exports:{}};return t[r].call(i.exports,i,i.exports,s),i.exports}s.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return s.d(e,{a:e}),e},s.d=(t,e)=>{for(var r in e)s.o(e,r)&&!s.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=s(8614);function e(t){return null==t?[]:Array.isArray(t)?t:[t]}function r(t,e,s,r){var i,o=t[e],n=~r.string.indexOf(e)?null==s||!0===s?"":String(s):"boolean"==typeof s?s:~r.boolean.indexOf(e)?"false"!==s&&("true"===s||(t._.push(0*(i=+s)==0?i:s),!!s)):0*(i=+s)==0?i:s;t[e]=null==o?n:Array.isArray(o)?o.concat(n):[o,n]}const i=t=>t.replace(/[<[].+/,"").trim(),o=t=>t.sort(((t,e)=>t.length>e.length?-1:1))[0],n=(t,e)=>t.length>=e?t:`${t}${" ".repeat(e-t.length)}`,a=(t,e,s)=>{let r,i=0,o=e.length,n=t;for(;i<o;++i)r=n[e[i]],n=n[e[i]]=i===o-1?s:null!=r?r:!~e[i+1].indexOf(".")&&+e[i+1]>-1?[]:{}},h=(t,e)=>{for(const s of Object.keys(e)){const r=e[s];r.shouldTransform&&(t[s]=Array.prototype.concat.call([],t[s]),"function"==typeof r.transformFunction&&(t[s]=t[s].map(r.transformFunction)))}},c=t=>t.split(".").map(((t,e)=>0===e?t.replace(/([a-z])-([a-z])/g,((t,e,s)=>e+s.toUpperCase())):t)).join(".");class u extends Error{constructor(t){super(t),this.name=this.constructor.name,"function"==typeof Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error(t).stack}}class l{constructor(t,e,s){this.rawName=t,this.description=e,this.config=Object.assign({},s),t=t.replace(/\.\*/g,""),this.negated=!1,this.names=i(t).split(",").map((t=>{let e=t.trim().replace(/^-{1,2}/,"");return e.startsWith("no-")&&(this.negated=!0,e=e.replace(/^no-/,"")),c(e)})).sort(((t,e)=>t.length>e.length?1:-1)),this.name=this.names[this.names.length-1],this.negated&&(this.config.default=!0),t.includes("<")?this.required=!0:t.includes("[")?this.required=!1:this.isBoolean=!0}}const d=process.argv,p=`${process.platform}-${process.arch} node-${process.version}`;class f{constructor(t,e,s={},r){this.rawName=t,this.description=e,this.config=s,this.cli=r,this.options=[],this.aliasNames=[],this.name=i(t),this.args=(t=>{const e=/<([^>]+)>/g,s=/\[([^\]]+)\]/g,r=[],i=t=>{let e=!1,s=t[1];return s.startsWith("...")&&(s=s.slice(3),e=!0),{required:t[0].startsWith("<"),value:s,variadic:e}};let o,n;for(;o=e.exec(t);)r.push(i(o));for(;n=s.exec(t);)r.push(i(n));return r})(t),this.examples=[]}usage(t){return this.usageText=t,this}allowUnknownOptions(){return this.config.allowUnknownOptions=!0,this}ignoreOptionDefaultValue(){return this.config.ignoreOptionDefaultValue=!0,this}version(t,e="-v, --version"){return this.versionNumber=t,this.option(e,"Display version number"),this}example(t){return this.examples.push(t),this}option(t,e,s){const r=new l(t,e,s);return this.options.push(r),this}alias(t){return this.aliasNames.push(t),this}action(t){return this.commandAction=t,this}isMatched(t){return this.name===t||this.aliasNames.includes(t)}get isDefaultCommand(){return""===this.name||this.aliasNames.includes("!")}get isGlobalCommand(){return this instanceof m}hasOption(t){return t=t.split(".")[0],this.options.find((e=>e.names.includes(t)))}outputHelp(){const{name:t,commands:e}=this.cli,{versionNumber:s,options:r,helpCallback:i}=this.cli.globalCommand;let a=[{body:`${t}${s?`/${s}`:""}`}];if(a.push({title:"Usage",body:`  $ ${t} ${this.usageText||this.rawName}`}),(this.isGlobalCommand||this.isDefaultCommand)&&e.length>0){const s=o(e.map((t=>t.rawName)));a.push({title:"Commands",body:e.map((t=>`  ${n(t.rawName,s.length)}  ${t.description}`)).join("\n")}),a.push({title:"For more info, run any command with the `--help` flag",body:e.map((e=>`  $ ${t}${""===e.name?"":` ${e.name}`} --help`)).join("\n")})}const h=this.isGlobalCommand?r:[...this.options,...r||[]];if(h.length>0){const t=o(h.map((t=>t.rawName)));a.push({title:"Options",body:h.map((e=>`  ${n(e.rawName,t.length)}  ${e.description} ${void 0===e.config.default?"":`(default: ${e.config.default})`}`)).join("\n")})}this.examples.length>0&&a.push({title:"Examples",body:this.examples.map((e=>"function"==typeof e?e(t):e)).join("\n")}),i&&(a=i(a)||a),console.log(a.map((t=>t.title?`${t.title}:\n${t.body}`:t.body)).join("\n\n"))}outputVersion(){const{name:t}=this.cli,{versionNumber:e}=this.cli.globalCommand;e&&console.log(`${t}/${e} ${p}`)}checkRequiredArgs(){const t=this.args.filter((t=>t.required)).length;if(this.cli.args.length<t)throw new u(`missing required args for command \`${this.rawName}\``)}checkUnknownOptions(){const{options:t,globalCommand:e}=this.cli;if(!this.config.allowUnknownOptions)for(const s of Object.keys(t))if("--"!==s&&!this.hasOption(s)&&!e.hasOption(s))throw new u(`Unknown option \`${s.length>1?`--${s}`:`-${s}`}\``)}checkOptionValue(){const{options:t,globalCommand:e}=this.cli,s=[...e.options,...this.options];for(const e of s){const r=t[e.name.split(".")[0]];if(e.required){const t=s.some((t=>t.negated&&t.names.includes(e.name)));if(!0===r||!1===r&&!t)throw new u(`option \`${e.rawName}\` value is missing`)}}}}class m extends f{constructor(t){super("@@global@@","",{},t)}}var g=Object.assign;class y extends t.EventEmitter{constructor(t=""){super(),this.name=t,this.commands=[],this.rawArgs=[],this.args=[],this.options={},this.globalCommand=new m(this),this.globalCommand.usage("<command> [options]")}usage(t){return this.globalCommand.usage(t),this}command(t,e,s){const r=new f(t,e||"",s,this);return r.globalCommand=this.globalCommand,this.commands.push(r),r}option(t,e,s){return this.globalCommand.option(t,e,s),this}help(t){return this.globalCommand.option("-h, --help","Display this message"),this.globalCommand.helpCallback=t,this.showHelpOnExit=!0,this}version(t,e="-v, --version"){return this.globalCommand.version(t,e),this.showVersionOnExit=!0,this}example(t){return this.globalCommand.example(t),this}outputHelp(){this.matchedCommand?this.matchedCommand.outputHelp():this.globalCommand.outputHelp()}outputVersion(){this.globalCommand.outputVersion()}setParsedInfo({args:t,options:e},s,r){return this.args=t,this.options=e,s&&(this.matchedCommand=s),r&&(this.matchedCommandName=r),this}unsetMatchedCommand(){this.matchedCommand=void 0,this.matchedCommandName=void 0}parse(t=d,{run:e=!0}={}){this.rawArgs=t,this.name||(this.name=t[1]?(t=>{const e=/([^\\\/]+)$/.exec(t);return e?e[1]:""})(t[1]):"cli");let s=!0;for(const e of this.commands){const r=this.mri(t.slice(2),e),i=r.args[0];if(e.isMatched(i)){s=!1;const t=g(g({},r),{args:r.args.slice(1)});this.setParsedInfo(t,e,i),this.emit(`command:${i}`,e)}}if(s)for(const e of this.commands)if(""===e.name){s=!1;const r=this.mri(t.slice(2),e);this.setParsedInfo(r,e),this.emit("command:!",e)}if(s){const e=this.mri(t.slice(2));this.setParsedInfo(e)}this.options.help&&this.showHelpOnExit&&(this.outputHelp(),e=!1,this.unsetMatchedCommand()),this.options.version&&this.showVersionOnExit&&(this.outputVersion(),e=!1,this.unsetMatchedCommand());const r={args:this.args,options:this.options};return e&&this.runMatchedCommand(),!this.matchedCommand&&this.args[0]&&this.emit("command:*"),r}mri(t,s){const i=[...this.globalCommand.options,...s?s.options:[]],o=(t=>{const e={alias:{},boolean:[]};for(const[s,r]of t.entries())r.names.length>1&&(e.alias[r.names[0]]=r.names.slice(1)),r.isBoolean&&(r.negated&&t.some(((t,e)=>e!==s&&t.names.some((t=>r.names.includes(t)))&&"boolean"==typeof t.required))||e.boolean.push(r.names[0]));return e})(i);let n=[];const u=t.indexOf("--");u>-1&&(n=t.slice(u+1),t=t.slice(0,u));let l=function(t,s){s=s||{};var i,o,n,a,h,c={_:[]},u=0,l=0,d=0,p=(t=t||[]).length;const f=void 0!==s.alias,m=void 0!==s.unknown,g=void 0!==s.default;if(s.alias=s.alias||{},s.string=e(s.string),s.boolean=e(s.boolean),f)for(i in s.alias)for(o=s.alias[i]=e(s.alias[i]),u=0;u<o.length;u++)(s.alias[o[u]]=o.concat(i)).splice(u,1);for(u=s.boolean.length;u-- >0;)for(l=(o=s.alias[s.boolean[u]]||[]).length;l-- >0;)s.boolean.push(o[l]);for(u=s.string.length;u-- >0;)for(l=(o=s.alias[s.string[u]]||[]).length;l-- >0;)s.string.push(o[l]);if(g)for(i in s.default)if(a=typeof s.default[i],o=s.alias[i]=s.alias[i]||[],void 0!==s[a])for(s[a].push(i),u=0;u<o.length;u++)s[a].push(o[u]);const y=m?Object.keys(s.alias):[];for(u=0;u<p;u++){if("--"===(n=t[u])){c._=c._.concat(t.slice(++u));break}for(l=0;l<n.length&&45===n.charCodeAt(l);l++);if(0===l)c._.push(n);else if("no-"===n.substring(l,l+3)){if(a=n.substring(l+3),m&&!~y.indexOf(a))return s.unknown(n);c[a]=!1}else{for(d=l+1;d<n.length&&61!==n.charCodeAt(d);d++);for(a=n.substring(l,d),h=n.substring(++d)||u+1===p||45===(""+t[u+1]).charCodeAt(0)||t[++u],o=2===l?[a]:a,d=0;d<o.length;d++){if(a=o[d],m&&!~y.indexOf(a))return s.unknown("-".repeat(l)+a);r(c,a,d+1<o.length||h,s)}}}if(g)for(i in s.default)void 0===c[i]&&(c[i]=s.default[i]);if(f)for(i in c)for(o=s.alias[i]||[];o.length>0;)c[o.shift()]=c[i];return c}(t,o);l=Object.keys(l).reduce(((t,e)=>g(g({},t),{[c(e)]:l[e]})),{_:[]});const d=l._,p={"--":n},f=s&&s.config.ignoreOptionDefaultValue?s.config.ignoreOptionDefaultValue:this.globalCommand.config.ignoreOptionDefaultValue;let m=Object.create(null);for(const t of i){if(!f&&void 0!==t.config.default)for(const e of t.names)p[e]=t.config.default;Array.isArray(t.config.type)&&void 0===m[t.name]&&(m[t.name]=Object.create(null),m[t.name].shouldTransform=!0,m[t.name].transformFunction=t.config.type[0])}for(const t of Object.keys(l))if("_"!==t){const e=t.split(".");a(p,e,l[t]),h(p,m)}return{args:d,options:p}}runMatchedCommand(){const{args:t,options:e,matchedCommand:s}=this;if(!s||!s.commandAction)return;s.checkUnknownOptions(),s.checkOptionValue(),s.checkRequiredArgs();const r=[];return s.args.forEach(((e,s)=>{e.variadic?r.push(t.slice(s)):r.push(t[s])})),r.push(e),s.commandAction.apply(this,r)}}const b=(t="")=>new y(t);"undefined"!=typeof module&&(module.exports=b,module.exports.default=b,module.exports.cac=b);const v=b;var _=s(8809),w=s(9738),x=s(2613),P=s.n(x);w.v();var O=v().parse();console.log(JSON.stringify(O,null,2));var S,E,T,C,k={type:"number",name:"value",message:"how old are you",validate:function(t){return!(t<18)||"Nightclub is 18+ only"}};S=void 0,E=void 0,C=function(){return function(t,e){var s,r,i,o,n={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(s)throw new TypeError("Generator is already executing.");for(;n;)try{if(s=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return n.label++,{value:o[1],done:!1};case 5:n.label++,r=o[1],o=[0];continue;case 7:o=n.ops.pop(),n.trys.pop();continue;default:if(!((i=(i=n.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){n=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){n.label=o[1];break}if(6===o[0]&&n.label<i[1]){n.label=i[1],i=o;break}if(i&&n.label<i[2]){n.label=i[2],n.ops.push(o);break}i[2]&&n.ops.pop(),n.trys.pop();continue}o=e.call(t,n)}catch(t){o=[6,t],r=0}finally{s=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}(this,(function(t){switch(t.label){case 0:return[4,_.prompts.number(k)];case 1:return t.sent(),[4,(e=function(){var t=process.env.DIGITAL_OCEAN_PERSONAL_ACCESS_TOKEN;if(null==t.length)throw"Digital Ocean Personal Access Token has not been set in `.env`. Cannot access digital ocean API";return t}(),void new(P())(e).droplets.create({name:"test",region:"nyc3",size:"s-1vcpu-1gb",image:"rancheros",ssh_keys:[27608986,28496457],backups:!1,ipv6:!0,private_networking:!0,monitoring:!0,user_data:"",volumes:[""],tags:""}).then((function(t){return console.log(t)})).catch((function(t){return console.error(t)})))];case 2:return t.sent(),[2]}var e}))},new((T=void 0)||(T=Promise))((function(t,e){function s(t){try{i(C.next(t))}catch(t){e(t)}}function r(t){try{i(C.throw(t))}catch(t){e(t)}}function i(e){var i;e.done?t(e.value):(i=e.value,i instanceof T?i:new T((function(t){t(i)}))).then(s,r)}i((C=C.apply(S,E||[])).next())}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL0BzaW5kcmVzb3JodXMvaXMvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL0Bzem1hcmN6YWsvaHR0cC10aW1lci9kaXN0L3NvdXJjZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2NhY2hlYWJsZS1sb29rdXAvc291cmNlL2luZGV4LmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvY2FjaGVhYmxlLXJlcXVlc3Qvbm9kZV9tb2R1bGVzL2dldC1zdHJlYW0vYnVmZmVyLXN0cmVhbS5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2NhY2hlYWJsZS1yZXF1ZXN0L25vZGVfbW9kdWxlcy9nZXQtc3RyZWFtL2luZGV4LmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvY2FjaGVhYmxlLXJlcXVlc3Qvc3JjL2luZGV4LmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvY2xvbmUtcmVzcG9uc2Uvbm9kZV9tb2R1bGVzL21pbWljLXJlc3BvbnNlL2luZGV4LmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvY2xvbmUtcmVzcG9uc2Uvc3JjL2luZGV4LmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvZGVjb21wcmVzcy1yZXNwb25zZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2RlZmVyLXRvLWNvbm5lY3QvZGlzdC9zb3VyY2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9kby13cmFwcGVyL2Rpc3QvY29tbW9uLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvZG8td3JhcHBlci9kaXN0L2RvLXdyYXBwZXIuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9kby13cmFwcGVyL2Rpc3QvbW9kdWxlcy9hY2NvdW50LmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvZG8td3JhcHBlci9kaXN0L21vZHVsZXMvYWN0aW9ucy5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2RvLXdyYXBwZXIvZGlzdC9tb2R1bGVzL2Jhc2UtbW9kdWxlLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvZG8td3JhcHBlci9kaXN0L21vZHVsZXMvY2RuLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvZG8td3JhcHBlci9kaXN0L21vZHVsZXMvY2VydGlmaWNhdGVzLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvZG8td3JhcHBlci9kaXN0L21vZHVsZXMvZGF0YWJhc2VzLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvZG8td3JhcHBlci9kaXN0L21vZHVsZXMvZG9tYWlucy5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2RvLXdyYXBwZXIvZGlzdC9tb2R1bGVzL2Ryb3BsZXRzLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvZG8td3JhcHBlci9kaXN0L21vZHVsZXMvZmlyZXdhbGxzLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvZG8td3JhcHBlci9kaXN0L21vZHVsZXMvZmxvYXRpbmctaXAuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9kby13cmFwcGVyL2Rpc3QvbW9kdWxlcy9pbWFnZXMuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9kby13cmFwcGVyL2Rpc3QvbW9kdWxlcy9rZXlzLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvZG8td3JhcHBlci9kaXN0L21vZHVsZXMva3ViZXJuZXRlcy5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2RvLXdyYXBwZXIvZGlzdC9tb2R1bGVzL2xvYWQtYmFsYW5jZXJzLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvZG8td3JhcHBlci9kaXN0L21vZHVsZXMvcHJvamVjdHMuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9kby13cmFwcGVyL2Rpc3QvbW9kdWxlcy9yZWdpb25zLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvZG8td3JhcHBlci9kaXN0L21vZHVsZXMvcmVwb3J0cy5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2RvLXdyYXBwZXIvZGlzdC9tb2R1bGVzL3NpemVzLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvZG8td3JhcHBlci9kaXN0L21vZHVsZXMvc25hcHNob3RzLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvZG8td3JhcHBlci9kaXN0L21vZHVsZXMvdGFncy5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2RvLXdyYXBwZXIvZGlzdC9tb2R1bGVzL3ZvbHVtZXMuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9kby13cmFwcGVyL2Rpc3QvcmVxdWVzdC1oZWxwZXIuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9kb3RlbnYvbGliL21haW4uanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9lbmQtb2Ytc3RyZWFtL2luZGV4LmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2FzLXByb21pc2UvY3JlYXRlLXJlamVjdGlvbi5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9hcy1wcm9taXNlL2luZGV4LmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2FzLXByb21pc2Uvbm9ybWFsaXplLWFyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9hcy1wcm9taXNlL3BhcnNlLWJvZHkuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvYXMtcHJvbWlzZS90eXBlcy5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL2NhbGN1bGF0ZS1yZXRyeS1kZWxheS5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL2luZGV4LmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvZG5zLWlwLXZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS91dGlscy9nZXQtYm9keS1zaXplLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvZ2V0LWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL2lzLWZvcm0tZGF0YS5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL2lzLXJlc3BvbnNlLW9rLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvb3B0aW9ucy10by11cmwuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS91dGlscy9wcm94eS1ldmVudHMuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS91dGlscy90aW1lZC1vdXQuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS91dGlscy91bmhhbmRsZS5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL3VybC10by1vcHRpb25zLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvd2Vha2FibGUtbWFwLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NyZWF0ZS5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS90eXBlcy5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS91dGlscy9kZWVwLWZyZWV6ZS5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS91dGlscy9kZXByZWNhdGlvbi13YXJuaW5nLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvaHR0cC1jYWNoZS1zZW1hbnRpY3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9odHRwMi13cmFwcGVyL3NvdXJjZS9hZ2VudC5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL2F1dG8uanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9odHRwMi13cmFwcGVyL3NvdXJjZS9jbGllbnQtcmVxdWVzdC5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL2luY29taW5nLW1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9odHRwMi13cmFwcGVyL3NvdXJjZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL3V0aWxzL2NhbGN1bGF0ZS1zZXJ2ZXItbmFtZS5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL3V0aWxzL2Vycm9ycy5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL3V0aWxzL2lzLXJlcXVlc3QtcHNldWRvLWhlYWRlci5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL3V0aWxzL3Byb3h5LWV2ZW50cy5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL3V0aWxzL3VybC10by1vcHRpb25zLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvanNvbi1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9rZXl2L3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2tleXYvc3JjfHN5bmMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9rbGV1ci9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2xvd2VyY2FzZS1rZXlzL2luZGV4LmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvbWltaWMtcmVzcG9uc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9ub3JtYWxpemUtdXJsL2luZGV4LmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvb25jZS9vbmNlLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvcC1jYW5jZWxhYmxlL2luZGV4LmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L2RhdGVwYXJ0cy9kYXRlcGFydC5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC9kYXRlcGFydHMvZGF5LmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L2RhdGVwYXJ0cy9ob3Vycy5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC9kYXRlcGFydHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvZGF0ZXBhcnRzL21lcmlkaWVtLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L2RhdGVwYXJ0cy9taWxsaXNlY29uZHMuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvZGF0ZXBhcnRzL21pbnV0ZXMuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvZGF0ZXBhcnRzL21vbnRoLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L2RhdGVwYXJ0cy9zZWNvbmRzLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L2RhdGVwYXJ0cy95ZWFyLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L2VsZW1lbnRzL2F1dG9jb21wbGV0ZS5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC9lbGVtZW50cy9hdXRvY29tcGxldGVNdWx0aXNlbGVjdC5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC9lbGVtZW50cy9jb25maXJtLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L2VsZW1lbnRzL2RhdGUuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvZWxlbWVudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvZWxlbWVudHMvbXVsdGlzZWxlY3QuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvZWxlbWVudHMvbnVtYmVyLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L2VsZW1lbnRzL3Byb21wdC5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC9lbGVtZW50cy9zZWxlY3QuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvZWxlbWVudHMvdGV4dC5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC9lbGVtZW50cy90b2dnbGUuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvcHJvbXB0cy5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC91dGlsL2FjdGlvbi5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC91dGlsL2NsZWFyLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L3V0aWwvZW50cmllc1RvRGlzcGxheS5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC91dGlsL2ZpZ3VyZXMuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvdXRpbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC91dGlsL2xpbmVzLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9kaXN0L3V0aWwvc3RyaXAuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2Rpc3QvdXRpbC9zdHlsZS5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Byb21wdHMvZGlzdC91dGlsL3dyYXAuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2luZGV4LmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvZGF0ZXBhcnRzL2RhdGVwYXJ0LmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvZGF0ZXBhcnRzL2RheS5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2RhdGVwYXJ0cy9ob3Vycy5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2RhdGVwYXJ0cy9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2RhdGVwYXJ0cy9tZXJpZGllbS5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2RhdGVwYXJ0cy9taWxsaXNlY29uZHMuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi9kYXRlcGFydHMvbWludXRlcy5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2RhdGVwYXJ0cy9tb250aC5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2RhdGVwYXJ0cy9zZWNvbmRzLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvZGF0ZXBhcnRzL3llYXIuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi9lbGVtZW50cy9hdXRvY29tcGxldGUuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi9lbGVtZW50cy9hdXRvY29tcGxldGVNdWx0aXNlbGVjdC5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2VsZW1lbnRzL2NvbmZpcm0uanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi9lbGVtZW50cy9kYXRlLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvZWxlbWVudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi9lbGVtZW50cy9tdWx0aXNlbGVjdC5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2VsZW1lbnRzL251bWJlci5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2VsZW1lbnRzL3Byb21wdC5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2VsZW1lbnRzL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL2VsZW1lbnRzL3RleHQuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi9lbGVtZW50cy90b2dnbGUuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL3Byb21wdHMuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi91dGlsL2FjdGlvbi5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL3V0aWwvY2xlYXIuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi91dGlsL2VudHJpZXNUb0Rpc3BsYXkuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi91dGlsL2ZpZ3VyZXMuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi91dGlsL2luZGV4LmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvdXRpbC9saW5lcy5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Byb21wdHMvbGliL3V0aWwvc3RyaXAuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9wcm9tcHRzL2xpYi91dGlsL3N0eWxlLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvcHJvbXB0cy9saWIvdXRpbC93cmFwLmpzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9ub2RlX21vZHVsZXMvcHVtcC9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3F1aWNrLWxydS9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtYWxwbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3Jlc3BvbnNlbGlrZS9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC8uL25vZGVfbW9kdWxlcy9zaXN0ZXJhbnNpL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL3dyYXBweS93cmFwcHkuanMiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC9leHRlcm5hbCBcImJ1ZmZlclwiIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvZXh0ZXJuYWwgXCJkbnNcIiIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkL2V4dGVybmFsIFwiZXZlbnRzXCIiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC9leHRlcm5hbCBcImZzXCIiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC9leHRlcm5hbCBcImh0dHBcIiIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkL2V4dGVybmFsIFwiaHR0cDJcIiIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkL2V4dGVybmFsIFwiaHR0cHNcIiIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkL2V4dGVybmFsIFwibmV0XCIiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC9leHRlcm5hbCBcIm9zXCIiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC9leHRlcm5hbCBcInBhdGhcIiIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkL2V4dGVybmFsIFwicmVhZGxpbmVcIiIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkL2V4dGVybmFsIFwic3RyZWFtXCIiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC9leHRlcm5hbCBcInRsc1wiIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvZXh0ZXJuYWwgXCJ1cmxcIiIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkL2V4dGVybmFsIFwidXRpbFwiIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvZXh0ZXJuYWwgXCJ6bGliXCIiLCJ3ZWJwYWNrOi8vYW5zaWJsZS1zZXR1cC1vd25jbG91ZC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vbm9kZV9tb2R1bGVzL2NhYy9kaXN0L2luZGV4Lm1qcyIsIndlYnBhY2s6Ly9hbnNpYmxlLXNldHVwLW93bmNsb3VkLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9zcmMvcHJvdmlzaW9uUmFuY2hlck9uRGlnaXRhbE9jZWFuL2luZGV4LnRzIiwid2VicGFjazovL2Fuc2libGUtc2V0dXAtb3duY2xvdWQvLi9zcmMvcHJvdmlzaW9uUmFuY2hlck9uRGlnaXRhbE9jZWFuL2dldERpZ2l0YWxPY2VhblBlcnNvbmFsQWNjZXNzVG9rZW4udHMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0eXBlZEFycmF5VHlwZU5hbWVzIiwib2JqZWN0VHlwZU5hbWVzIiwicHJpbWl0aXZlVHlwZU5hbWVzIiwiaXNPZlR5cGUiLCJ0eXBlIiwidG9TdHJpbmciLCJwcm90b3R5cGUiLCJnZXRPYmplY3RUeXBlIiwib2JqZWN0VHlwZU5hbWUiLCJjYWxsIiwic2xpY2UiLCJ0ZXN0IiwiaXMiLCJkb21FbGVtZW50IiwibmFtZSIsImluY2x1ZGVzIiwiaXNPYmplY3RPZlR5cGUiLCJvYnNlcnZhYmxlIiwiYXJyYXkiLCJidWZmZXIiLCJ0YWdUeXBlIiwiU3RyaW5nIiwiQm9vbGVhbiIsIk51bWJlciIsIlR5cGVFcnJvciIsInVuZGVmaW5lZCIsInN0cmluZyIsImlzTnVtYmVyVHlwZSIsIm51bWJlciIsIm5hbiIsImJpZ2ludCIsImZ1bmN0aW9uXyIsIm51bGxfIiwiY2xhc3NfIiwic3RhcnRzV2l0aCIsImJvb2xlYW4iLCJzeW1ib2wiLCJudW1lcmljU3RyaW5nIiwiZW1wdHlTdHJpbmdPcldoaXRlc3BhY2UiLCJpc05hTiIsImFzc2VydGlvbiIsIkFycmF5IiwiaXNBcnJheSIsImV2ZXJ5IiwiX2EiLCJfYiIsIl9jIiwiX2QiLCJjb25zdHJ1Y3RvciIsImlzQnVmZmVyIiwibnVsbE9yVW5kZWZpbmVkIiwib2JqZWN0IiwiaXRlcmFibGUiLCJTeW1ib2wiLCJpdGVyYXRvciIsImFzeW5jSXRlcmFibGUiLCJhc3luY0l0ZXJhdG9yIiwiZ2VuZXJhdG9yIiwibmV4dCIsInRocm93IiwiYXN5bmNHZW5lcmF0b3IiLCJuYXRpdmVQcm9taXNlIiwicHJvbWlzZSIsInRoZW4iLCJjYXRjaCIsImhhc1Byb21pc2VBUEkiLCJnZW5lcmF0b3JGdW5jdGlvbiIsImFzeW5jR2VuZXJhdG9yRnVuY3Rpb24iLCJhc3luY0Z1bmN0aW9uIiwiYm91bmRGdW5jdGlvbiIsImhhc093blByb3BlcnR5IiwicmVnRXhwIiwiZGF0ZSIsImVycm9yIiwibWFwIiwic2V0Iiwid2Vha01hcCIsIndlYWtTZXQiLCJpbnQ4QXJyYXkiLCJ1aW50OEFycmF5IiwidWludDhDbGFtcGVkQXJyYXkiLCJpbnQxNkFycmF5IiwidWludDE2QXJyYXkiLCJpbnQzMkFycmF5IiwidWludDMyQXJyYXkiLCJmbG9hdDMyQXJyYXkiLCJmbG9hdDY0QXJyYXkiLCJiaWdJbnQ2NEFycmF5IiwiYmlnVWludDY0QXJyYXkiLCJhcnJheUJ1ZmZlciIsInNoYXJlZEFycmF5QnVmZmVyIiwiZGF0YVZpZXciLCJkaXJlY3RJbnN0YW5jZU9mIiwiaW5zdGFuY2UiLCJnZXRQcm90b3R5cGVPZiIsInVybEluc3RhbmNlIiwidXJsU3RyaW5nIiwiVVJMIiwidHJ1dGh5IiwiZmFsc3kiLCJwcmltaXRpdmUiLCJpbnRlZ2VyIiwiaXNJbnRlZ2VyIiwic2FmZUludGVnZXIiLCJpc1NhZmVJbnRlZ2VyIiwicGxhaW5PYmplY3QiLCJ0eXBlZEFycmF5IiwiaXNUeXBlZEFycmF5TmFtZSIsImFycmF5TGlrZSIsImlzVmFsaWRMZW5ndGgiLCJsZW5ndGgiLCJpblJhbmdlIiwicmFuZ2UiLCJNYXRoIiwibWluIiwibWF4IiwiSlNPTiIsInN0cmluZ2lmeSIsIkRPTV9QUk9QRVJUSUVTX1RPX0NIRUNLIiwibm9kZVR5cGUiLCJub2RlTmFtZSIsInByb3BlcnR5Iiwibm9kZVN0cmVhbSIsInBpcGUiLCJpbmZpbml0ZSIsIkluZmluaXR5IiwiaXNBYnNvbHV0ZU1vZDIiLCJyZW1haW5kZXIiLCJhYnMiLCJldmVuSW50ZWdlciIsIm9kZEludGVnZXIiLCJlbXB0eUFycmF5Iiwibm9uRW1wdHlBcnJheSIsImVtcHR5U3RyaW5nIiwibm9uRW1wdHlTdHJpbmciLCJpc1doaXRlU3BhY2VTdHJpbmciLCJlbXB0eU9iamVjdCIsImtleXMiLCJub25FbXB0eU9iamVjdCIsImVtcHR5U2V0Iiwic2l6ZSIsIm5vbkVtcHR5U2V0IiwiZW1wdHlNYXAiLCJub25FbXB0eU1hcCIsInByZWRpY2F0ZU9uQXJyYXkiLCJtZXRob2QiLCJwcmVkaWNhdGUiLCJ2YWx1ZXMiLCJhbnkiLCJzb21lIiwic2luZ2xlUHJlZGljYXRlIiwiYWxsIiwiYXNzZXJ0VHlwZSIsImNvbmRpdGlvbiIsImRlc2NyaXB0aW9uIiwiYXNzZXJ0IiwiZm9yRWFjaCIsImRlZmluZVByb3BlcnRpZXMiLCJjbGFzcyIsImZ1bmN0aW9uIiwibnVsbCIsImRlZmF1bHQiLCJtb2R1bGUiLCJkZWZlcl90b19jb25uZWN0XzEiLCJub2RlanNNYWpvclZlcnNpb24iLCJwcm9jZXNzIiwidmVyc2lvbnMiLCJub2RlIiwic3BsaXQiLCJ0aW1lciIsInJlcXVlc3QiLCJ0aW1pbmdzIiwic3RhcnQiLCJEYXRlIiwibm93Iiwic29ja2V0IiwibG9va3VwIiwiY29ubmVjdCIsInNlY3VyZUNvbm5lY3QiLCJ1cGxvYWQiLCJyZXNwb25zZSIsImVuZCIsImFib3J0IiwicGhhc2VzIiwid2FpdCIsImRucyIsInRjcCIsInRscyIsImZpcnN0Qnl0ZSIsImRvd25sb2FkIiwidG90YWwiLCJoYW5kbGVFcnJvciIsIm9yaWdpbiIsImVtaXQiLCJiaW5kIiwiZXZlbnQiLCJhcmdzIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsIm9uU29ja2V0IiwibG9va3VwTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsIm9uVXBsb2FkIiwid3JpdGFibGVGaW5pc2hlZCIsImZpbmlzaGVkIiwib3V0cHV0U2l6ZSIsIndyaXRhYmxlTGVuZ3RoIiwiVjRNQVBQRUQiLCJBRERSQ09ORklHIiwiQUxMIiwicHJvbWlzZXMiLCJSZXNvbHZlciIsIkFzeW5jUmVzb2x2ZXIiLCJkbnNMb29rdXAiLCJwcm9taXNpZnkiLCJvcyIsImtDYWNoZWFibGVMb29rdXBDcmVhdGVDb25uZWN0aW9uIiwia0NhY2hlYWJsZUxvb2t1cEluc3RhbmNlIiwia0V4cGlyZXMiLCJzdXBwb3J0c0FMTCIsInZlcmlmeUFnZW50IiwiYWdlbnQiLCJjcmVhdGVDb25uZWN0aW9uIiwiRXJyb3IiLCJnZXRJZmFjZUluZm8iLCJoYXM0IiwiaGFzNiIsImRldmljZSIsIm5ldHdvcmtJbnRlcmZhY2VzIiwiaWZhY2UiLCJpbnRlcm5hbCIsImZhbWlseSIsInR0bCIsIkNhY2hlYWJsZUxvb2t1cCIsImNhY2hlIiwiTWFwIiwibWF4VHRsIiwiZmFsbGJhY2tEdXJhdGlvbiIsImVycm9yVHRsIiwicmVzb2x2ZXIiLCJ0aGlzIiwiX2NhY2hlIiwiX3Jlc29sdmVyIiwiX2Ruc0xvb2t1cCIsIl9yZXNvbHZlNCIsInJlc29sdmU0IiwiX3Jlc29sdmU2IiwicmVzb2x2ZTYiLCJfaWZhY2UiLCJfcGVuZGluZyIsIl9uZXh0UmVtb3ZhbFRpbWUiLCJfaG9zdG5hbWVzVG9GYWxsYmFjayIsIlNldCIsIl9mYWxsYmFjayIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhciIsInVucmVmIiwibG9va3VwQXN5bmMiLCJzZXJ2ZXJzIiwic2V0U2VydmVycyIsImdldFNlcnZlcnMiLCJob3N0bmFtZSIsIm9wdGlvbnMiLCJjYWxsYmFjayIsInJlc3VsdCIsImFkZHJlc3MiLCJleHBpcmVzIiwiY2FjaGVkIiwicXVlcnkiLCJmaWx0ZXJlZCIsImZpbHRlciIsImVudHJ5IiwiaGludHMiLCJlbnRyaWVzIiwibWFwNHRvNiIsImNvZGUiLCJnZXQiLCJwZW5kaW5nIiwibmV3UHJvbWlzZSIsInF1ZXJ5QW5kQ2FjaGUiLCJBIiwiQUFBQSIsIlByb21pc2UiLCJhc3luYyIsIndyYXAiLCJhVHRsIiwiYWFhYVR0bCIsImNhY2hlVHRsIiwiXyIsImRhdGEiLCJjYWNoZUVycm9yIiwiY2F1c2UiLCJfdGljayIsImhhcyIsIl9yZXNvbHZlIiwiX2xvb2t1cCIsImFkZCIsIl9zZXQiLCJtcyIsIm5leHRSZW1vdmFsVGltZSIsImNsZWFyVGltZW91dCIsIl9yZW1vdmFsVGltZW91dCIsInNldFRpbWVvdXQiLCJuZXh0RXhwaXJ5IiwiZGVsZXRlIiwiUGFzc1Rocm91Z2giLCJQYXNzVGhyb3VnaFN0cmVhbSIsImVuY29kaW5nIiwib2JqZWN0TW9kZSIsInN0cmVhbSIsInNldEVuY29kaW5nIiwiY2h1bmtzIiwib24iLCJjaHVuayIsInB1c2giLCJnZXRCdWZmZXJlZFZhbHVlIiwiQnVmZmVyIiwiY29uY2F0Iiwiam9pbiIsImdldEJ1ZmZlcmVkTGVuZ3RoIiwiY29uc3RhbnRzIiwiQnVmZmVyQ29uc3RhbnRzIiwicHVtcCIsImJ1ZmZlclN0cmVhbSIsIk1heEJ1ZmZlckVycm9yIiwic3VwZXIiLCJnZXRTdHJlYW0iLCJpbnB1dFN0cmVhbSIsInJlamVjdCIsIm1heEJ1ZmZlciIsInJlc29sdmUiLCJyZWplY3RQcm9taXNlIiwiTUFYX0xFTkdUSCIsImJ1ZmZlcmVkRGF0YSIsIkV2ZW50RW1pdHRlciIsInVybExpYiIsIm5vcm1hbGl6ZVVybCIsIkNhY2hlUG9saWN5IiwiUmVzcG9uc2UiLCJsb3dlcmNhc2VLZXlzIiwiY2xvbmVSZXNwb25zZSIsIktleXYiLCJDYWNoZWFibGVSZXF1ZXN0IiwiY2FjaGVBZGFwdGVyIiwidXJpIiwic3RvcmUiLCJuYW1lc3BhY2UiLCJjcmVhdGVDYWNoZWFibGVSZXF1ZXN0Iiwib3B0cyIsImNiIiwidXJsIiwibm9ybWFsaXplVXJsT2JqZWN0IiwicGFyc2UiLCJwYXRobmFtZSIsInNlYXJjaFBhcnRzIiwicGF0aCIsInNlYXJjaCIsImhlYWRlcnMiLCJzdHJpY3RUdGwiLCJhdXRvbWF0aWNGYWlsb3ZlciIsInVybE9iamVjdFRvUmVxdWVzdE9wdGlvbnMiLCJlZSIsIm5vcm1hbGl6ZWRVcmxTdHJpbmciLCJmb3JtYXQiLCJzdHJpcFdXVyIsInJlbW92ZVRyYWlsaW5nU2xhc2giLCJzdHJpcEF1dGhlbnRpY2F0aW9uIiwia2V5IiwicmV2YWxpZGF0ZSIsIm1hZGVSZXF1ZXN0IiwibWFrZVJlcXVlc3QiLCJyZXF1ZXN0RXJyb3JDYWxsYmFjayIsInJlcXVlc3RFcnJvcmVkIiwicmVxdWVzdEVycm9yUHJvbWlzZSIsImhhbmRsZXIiLCJmb3JjZVJlZnJlc2giLCJzdGF0dXMiLCJzdGF0dXNDb2RlIiwicmV2YWxpZGF0ZWRQb2xpY3kiLCJmcm9tT2JqZWN0IiwiY2FjaGVQb2xpY3kiLCJtb2RpZmllZCIsInBvbGljeSIsInJlc3BvbnNlSGVhZGVycyIsImJvZHkiLCJmcm9tQ2FjaGUiLCJjbG9uZWRSZXNwb25zZSIsInN0b3JhYmxlIiwiYm9keVByb21pc2UiLCJyYWNlIiwib25jZSIsInRvT2JqZWN0IiwidGltZVRvTGl2ZSIsIkNhY2hlRXJyb3IiLCJyZXEiLCJSZXF1ZXN0RXJyb3IiLCJjYWNoZUVudHJ5Iiwic2F0aXNmaWVzV2l0aG91dFJldmFsaWRhdGlvbiIsInJldmFsaWRhdGlvbkhlYWRlcnMiLCJlcnJvckhhbmRsZXIiLCJwcm90b2NvbCIsImF1dGgiLCJob3N0IiwicG9ydCIsIm1lc3NhZ2UiLCJhc3NpZ24iLCJrbm93blByb3BzIiwiZnJvbVN0cmVhbSIsInRvU3RyZWFtIiwiZnJvbVByb3BzIiwicHJvcCIsIm1pbWljUmVzcG9uc2UiLCJjbG9uZSIsIlRyYW5zZm9ybSIsInpsaWIiLCJjb250ZW50RW5jb2RpbmciLCJ0b0xvd2VyQ2FzZSIsImlzQnJvdGxpIiwiY3JlYXRlQnJvdGxpRGVjb21wcmVzcyIsImRlc3Ryb3kiLCJpc0VtcHR5IiwiY2hlY2tlciIsIl9lbmNvZGluZyIsImZpbmFsU3RyZWFtIiwiYXV0b0Rlc3Ryb3kiLCJkZWNvbXByZXNzU3RyZWFtIiwiY3JlYXRlVW56aXAiLCJyZWFkYWJsZSIsInRsc18xIiwiZGVmZXJUb0Nvbm5lY3QiLCJmbiIsImxpc3RlbmVycyIsImhhc0Nvbm5lY3RMaXN0ZW5lciIsImhhc1NlY3VyZUNvbm5lY3RMaXN0ZW5lciIsImhhc0Nsb3NlTGlzdGVuZXIiLCJjbG9zZSIsIm9uQ29ubmVjdCIsIlRMU1NvY2tldCIsImF1dGhvcml6ZWQiLCJhdXRob3JpemF0aW9uRXJyb3IiLCJ3cml0YWJsZSIsImNvbm5lY3RpbmciLCJkZXN0cm95ZWQiLCJfaGFkRXJyb3IiLCJIdHRwTWV0aG9kcyIsIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJyZXF1ZXN0X2hlbHBlcl8xIiwiYWNjb3VudF8xIiwiYWN0aW9uc18xIiwiY2RuXzEiLCJjZXJ0aWZpY2F0ZXNfMSIsImRhdGFiYXNlc18xIiwiZG9tYWluc18xIiwiZHJvcGxldHNfMSIsImZpcmV3YWxsc18xIiwiZmxvYXRpbmdfaXBfMSIsImltYWdlc18xIiwia2V5c18xIiwia3ViZXJuZXRlc18xIiwibG9hZF9iYWxhbmNlcnNfMSIsInByb2plY3RzXzEiLCJyZWdpb25zXzEiLCJyZXBvcnRzXzEiLCJzaXplc18xIiwic25hcHNob3RzXzEiLCJ0YWdzXzEiLCJ2b2x1bWVzXzEiLCJ0b2tlbiIsInBhZ2VTaXplIiwicmVxdWVzdEhlbHBlciIsImFjY291bnQiLCJhY3Rpb25zIiwiY2RuIiwiY2VydGlmaWNhdGVzIiwiZGF0YWJhc2VzIiwiZG9tYWlucyIsImRyb3BsZXRzIiwiZmlyZXdhbGxzIiwiZmxvYXRpbmdJUHMiLCJpbWFnZXMiLCJrdWJlcm5ldGVzIiwibG9hZEJhbGFuY2VycyIsInByb2plY3RzIiwicmVnaW9ucyIsInJlcG9ydHMiLCJzaXplcyIsInNuYXBzaG90cyIsInRhZ3MiLCJ2b2x1bWVzIiwiZXh0ZW5kU3RhdGljcyIsIl9fZXh0ZW5kcyIsImQiLCJiIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJwIiwiX18iLCJjcmVhdGUiLCJBY2NvdW50IiwiX3N1cGVyIiwiX3RoaXMiLCJiYXNlT3B0aW9ucyIsImFjdGlvblBhdGgiLCJfZXhlY3V0ZSIsIkJhc2VNb2R1bGUiLCJBY3Rpb25zIiwiYmFzZVBhdGgiLCJ0YWdOYW1lIiwiaW5jbHVkZUFsbCIsInBhZ2UiLCJyZXF1ZXN0T3B0aW9ucyIsIl9nZXRCYXNlUGFnaW5hdGVkUmVxdWVzdE9wdGlvbnMiLCJnZXRCeUlkIiwiYWN0aW9uSWQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJfX2Fzc2lnbiIsInQiLCJzIiwiaSIsIm4iLCJhcmd1bWVudHMiLCJhcHBseSIsInFzIiwidGFnX25hbWUiLCJwZXJfcGFnZSIsImJhc2VfbW9kdWxlXzEiLCJjb21tb25fMSIsIkNETiIsImdldEFsbEVuZHBvaW50cyIsImdldEVuZHBvaW50QnlJZCIsImVuZHBvaW50SWQiLCJjcmVhdGVFbmRwb2ludCIsIlBPU1QiLCJ1cGRhdGVFbmRwb2ludFR0bCIsIlBVVCIsImRlbGV0ZUVuZHBvaW50IiwiREVMRVRFIiwicHVyZ2VFbmRwb2ludENhY2hlIiwiZmlsZU5hbWVzIiwiZmlsZXMiLCJDZXJ0aWZpY2F0ZXMiLCJnZXRBbGwiLCJjZXJ0aWZpY2F0ZUlkIiwiRGF0YWJhc2VzIiwiZ2V0QWxsQ2x1c3RlcnMiLCJjcmVhdGVDbHVzdGVyIiwiY2x1c3Rlck9wdGlvbnMiLCJnZXRDbHVzdGVyQnlJZCIsImNsdXN0ZXJJZCIsInJlc2l6ZUNsdXN0ZXIiLCJjb25maWd1cmF0aW9uIiwiY3JlYXRlVXNlciIsInVzZXJuYW1lIiwiZGVsZXRlVXNlciIsImdldFVzZXIiLCJnZXRBbGxVc2VycyIsImFkZFBvb2wiLCJwb29sT3B0aW9ucyIsImdldEFsbFBvb2xzIiwiZ2V0UG9vbCIsInBvb2xOYW1lIiwiZGVsZXRlUG9vbCIsIkRvbWFpbnMiLCJnZXRCeU5hbWUiLCJkb21haW5OYW1lIiwiZ2V0QWxsUmVjb3JkcyIsImNyZWF0ZVJlY29yZCIsImdldFJlY29yZCIsInJlY29yZElkIiwiZGVsZXRlUmVjb3JkIiwidXBkYXRlUmVjb3JkIiwiRHJvcGxldHMiLCJnZXRLZXJuZWxzIiwiZHJvcGxldElkIiwiZ2V0U25hcHNob3RzIiwiZ2V0QmFja3VwcyIsImdldEFjdGlvbnMiLCJkZWxldGVCeUlkIiwiZGVsZXRlQnlUYWciLCJnZXROZWlnaGJvcnMiLCJnZXRVcGdyYWRlcyIsInJlcXVlc3RBY3Rpb24iLCJhY3Rpb24iLCJyZXF1ZXN0QWN0aW9uQnlUYWciLCJnZXRBY3Rpb24iLCJGaXJld2FsbHMiLCJmaXJld2FsbElkIiwidXBkYXRlIiwiYWRkRHJvcGxldHMiLCJkcm9wbGV0SWRzIiwiZHJvcGxldF9pZHMiLCJyZW1vdmVEcm9wbGV0cyIsImFkZFRhZ3MiLCJyZW1vdmVUYWdzIiwiYWRkUnVsZXMiLCJyZW1vdmVSdWxlcyIsIkZsb2F0aW5nSVBzIiwiYXNzaWduRHJvcGxldCIsImRyb3BsZXRfaWQiLCJhc3NpZ25SZWdpb24iLCJyZWdpb24iLCJnZXRCeUlwIiwiaXBBZGRyZXNzIiwiZGVsZXRlQnlJcCIsImdldEFsbEFjdGlvbnMiLCJJbWFnZXMiLCJnZXRCeUlkT3JTbHVnIiwiaW1hZ2VJZE9yU2x1ZyIsImltYWdlSWQiLCJyZW5hbWUiLCJuZXdOYW1lIiwiZ2V0QWN0aW9uQnlJZCIsIktleXMiLCJrZXlJZCIsImdldEJ5RmluZ2VycHJpbnQiLCJmaW5nZXJwcmludCIsImFkZEtleVJlcXVlc3QiLCJpZGVudGlmaWVyIiwiS3ViZXJuZXRlcyIsImdldEF2YWlsYWJpbGl0eSIsImdldENsdXN0ZXJzIiwiZ2V0S3ViZWNvbmZpZyIsImdldE5vZGVQb29scyIsImdldE5vZGVQb29sQnlJZCIsIm5vZGVQb29sSWQiLCJhZGROb2RlUG9vbCIsIm5vZGVQb29sIiwidXBkYXRlTm9kZVBvb2wiLCJub2RlUG9vbE9wdGlvbnMiLCJkZWxldGVOb2RlUG9vbCIsInJlY3ljbGVOb2RlUG9vbCIsIkxvYWRCYWxhbmNlcnMiLCJsb2FkQmFsYW5jZXJJZCIsImFkZEZvcndhcmRpbmdSdWxlcyIsInJ1bGVzIiwiZm9yd2FyZGluZ19ydWxlcyIsInJlbW92ZUZvcndhcmRpbmdSdWxlcyIsIlByb2plY3RzIiwicHJvamVjdE9wdGlvbnMiLCJwcm9qZWN0SWQiLCJwYXRjaCIsIlBBVENIIiwiZ2V0UmVzb3VyY2VzIiwiYWRkUmVzb3VyY2VzIiwicmVzb3VyY2VzIiwiZ2V0RGVmYXVsdCIsImdldERlZmF1bHRSZXNvdXJjZXMiLCJhZGREZWZhdWx0UmVzb3VyY2VzIiwidXBkYXRlRGVmYXVsdCIsInBhdGNoRGVmYXVsdCIsIlJlZ2lvbnMiLCJSZXBvcnRzIiwiZ2V0RHJvcGxldE5laWdoYm9ycyIsIlNpemVzIiwiU25hcHNob3RzIiwic25hcHNob3RJZCIsImdldEZvclZvbHVtZXMiLCJyZXNvdXJjZV90eXBlIiwiZ2V0Rm9yRHJvcGxldHMiLCJUYWdzIiwicmVtb3ZlUmVzb3VyY2VzIiwiVm9sdW1lcyIsInZvbHVtZUlkIiwiZ2V0QnlOYW1lQW5kUmVnaW9uIiwidm9sdW1lTmFtZSIsImRlbGV0ZUJ5TmFtZUFuZFJlZ2lvbiIsImNyZWF0ZVNuYXBzaG90IiwiZ290XzEiLCJSZXF1ZXN0SGVscGVyIiwiYXBpVXJsIiwiZXJyIiwiZ2V0QWxsUGFnZXMiLCJzdWJtaXRSZXF1ZXN0IiwicmVxdWVzdEJ1aWxkZXIiLCJpdGVtcyIsInJlcXVpcmVkIiwiY29tcGxldGVkIiwibWV0YSIsImNlaWwiLCJnZXRSZW1haW5pbmdQYWdlcyIsImZpcnN0IiwibGFzdCIsImN1cnJlbnQiLCJHRVQiLCJzdHJpY3RTU0wiLCJzZWFyY2hQYXJhbXMiLCJyZXRyeSIsImpzb24iLCJmcyIsImxvZyIsImNvbnNvbGUiLCJSRV9JTklfS0VZX1ZBTCIsIlJFX05FV0xJTkVTIiwiTkVXTElORVNfTUFUQ0giLCJkb3RlbnZQYXRoIiwiY3dkIiwiZGVidWciLCJwYXJzZWQiLCJzcmMiLCJvYmoiLCJsaW5lIiwiaWR4Iiwia2V5VmFsdWVBcnIiLCJtYXRjaCIsInZhbCIsImlzRG91YmxlUXVvdGVkIiwic3Vic3RyaW5nIiwicmVwbGFjZSIsInRyaW0iLCJyZWFkRmlsZVN5bmMiLCJlbnYiLCJlIiwibm9vcCIsImVvcyIsIndzIiwiX3dyaXRhYmxlU3RhdGUiLCJycyIsIl9yZWFkYWJsZVN0YXRlIiwiY2FuY2VsbGVkIiwib25sZWdhY3lmaW5pc2giLCJvbmZpbmlzaCIsIm9uZW5kIiwib25leGl0IiwiZXhpdENvZGUiLCJvbmVycm9yIiwib25jbG9zZSIsIm5leHRUaWNrIiwib25jbG9zZW5leHR0aWNrIiwiZW5kZWQiLCJvbnJlcXVlc3QiLCJzZXRIZWFkZXIiLCJpc1JlcXVlc3QiLCJzdGRpbyIsImlzQ2hpbGRQcm9jZXNzIiwidHlwZXNfMSIsImJlZm9yZUVycm9yR3JvdXBzIiwiaG9va3MiLCJob29rIiwiZXJyb3JfIiwicmV0dXJuUHJvbWlzZSIsInRleHQiLCJfX2NyZWF0ZUJpbmRpbmciLCJvIiwibSIsImsiLCJrMiIsImVudW1lcmFibGUiLCJfX2V4cG9ydFN0YXIiLCJldmVudHNfMSIsImlzXzEiLCJQQ2FuY2VsYWJsZSIsInBhcnNlX2JvZHlfMSIsImNvcmVfMSIsInByb3h5X2V2ZW50c18xIiwiZ2V0X2J1ZmZlcl8xIiwiaXNfcmVzcG9uc2Vfb2tfMSIsInByb3hpZWRSZXF1ZXN0RXZlbnRzIiwiYXNQcm9taXNlIiwibm9ybWFsaXplZE9wdGlvbnMiLCJnbG9iYWxSZXF1ZXN0IiwiZ2xvYmFsUmVzcG9uc2UiLCJlbWl0dGVyIiwib25DYW5jZWwiLCJyZXRyeUNvdW50IiwiX25vUGlwZSIsInNob3VsZFJlamVjdCIsIkNhbmNlbEVycm9yIiwiYWJvcnRlZCIsInJhd0JvZHkiLCJfaXNBYm91dFRvRXJyb3IiLCJpc0NvbXByZXNzZWQiLCJkZWNvbXByZXNzIiwicmVzcG9uc2VUeXBlIiwicGFyc2VKc29uIiwiaXNSZXNwb25zZU9rIiwiX2JlZm9yZUVycm9yIiwiaW5kZXgiLCJhZnRlclJlc3BvbnNlIiwidXBkYXRlZE9wdGlvbnMiLCJ0eXBlZE9wdGlvbnMiLCJub3JtYWxpemVBcmd1bWVudHMiLCJjYWxjdWxhdGVEZWxheSIsInRocm93SHR0cEVycm9ycyIsInJlc29sdmVCb2R5T25seSIsImJlZm9yZVJldHJ5IiwiY2FuY2VsIiwiSFRUUEVycm9yIiwib25FcnJvciIsImlzQ2FuY2VsZWQiLCJwcmV2aW91c0JvZHkiLCJuZXdSZXRyeUNvdW50Iiwic2hvcnRjdXQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiYWNjZXB0IiwiZGVmYXVsdHMiLCJtZXRob2RSZXdyaXRpbmciLCJpc1N0cmVhbSIsInJldHJ5T2JqZWN0IiwiY29tcHV0ZWRWYWx1ZSIsImxpbWl0IiwibWV0aG9kcyIsInN0YXR1c0NvZGVzIiwiZXJyb3JDb2RlcyIsIm1heFJldHJ5QWZ0ZXIiLCJ0b1VwcGVyQ2FzZSIsInRpbWVvdXQiLCJwYWdpbmF0aW9uIiwidHJhbnNmb3JtIiwic2hvdWxkQ29udGludWUiLCJwYWdpbmF0ZSIsIlBhcnNlRXJyb3IiLCJyZXRyeUFmdGVyU3RhdHVzQ29kZXMiLCJhdHRlbXB0Q291bnQiLCJyZXRyeU9wdGlvbnMiLCJyZXRyeUFmdGVyIiwiaGFzTWV0aG9kIiwiaGFzRXJyb3JDb2RlIiwiaGFzU3RhdHVzQ29kZSIsInJhbmRvbSIsIlVuc3VwcG9ydGVkUHJvdG9jb2xFcnJvciIsIlJlYWRFcnJvciIsIlRpbWVvdXRFcnJvciIsIlVwbG9hZEVycm9yIiwiTWF4UmVkaXJlY3RzRXJyb3IiLCJzZXROb25FbnVtZXJhYmxlUHJvcGVydGllcyIsImtub3duSG9va0V2ZW50cyIsIndpdGhvdXRCb2R5Iiwia0lzTm9ybWFsaXplZEFscmVhZHkiLCJ1dGlsXzEiLCJzdHJlYW1fMSIsImZzXzEiLCJ1cmxfMSIsImh0dHAiLCJodHRwXzEiLCJodHRwcyIsImh0dHBfdGltZXJfMSIsImNhY2hlYWJsZV9sb29rdXBfMSIsImRlY29tcHJlc3NSZXNwb25zZSIsImh0dHAyd3JhcHBlciIsImdldF9ib2R5X3NpemVfMSIsImlzX2Zvcm1fZGF0YV8xIiwidGltZWRfb3V0XzEiLCJ1cmxfdG9fb3B0aW9uc18xIiwib3B0aW9uc190b191cmxfMSIsIndlYWthYmxlX21hcF8xIiwiZG5zX2lwX3ZlcnNpb25fMSIsImRlcHJlY2F0aW9uX3dhcm5pbmdfMSIsIm5vcm1hbGl6ZV9hcmd1bWVudHNfMSIsImNhbGN1bGF0ZV9yZXRyeV9kZWxheV8xIiwiZ2xvYmFsRG5zQ2FjaGUiLCJrUmVxdWVzdCIsImtSZXNwb25zZSIsImtSZXNwb25zZVNpemUiLCJrRG93bmxvYWRlZFNpemUiLCJrQm9keVNpemUiLCJrVXBsb2FkZWRTaXplIiwia1NlcnZlclJlc3BvbnNlc1BpcGVkIiwia1VucHJveHlFdmVudHMiLCJrSXNGcm9tQ2FjaGUiLCJrQ2FuY2VsVGltZW91dHMiLCJrU3RhcnRlZFJlYWRpbmciLCJrU3RvcFJlYWRpbmciLCJrVHJpZ2dlclJlYWQiLCJrQm9keSIsImtKb2JzIiwia09yaWdpbmFsUmVzcG9uc2UiLCJrUmV0cnlUaW1lb3V0Iiwic3VwcG9ydHNCcm90bGkiLCJicm90bGkiLCJjYWNoZWFibGVTdG9yZSIsInJlZGlyZWN0Q29kZXMiLCJub25FbnVtZXJhYmxlUHJvcGVydGllcyIsInNvdXJjZXMiLCJ0byIsInByb3BlcnRpZXMiLCJzb3VyY2UiLCJjb25maWd1cmFibGUiLCJzZWxmIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJSZXF1ZXN0Iiwic3RhY2siLCJpbmRleE9mTWVzc2FnZSIsImluZGV4T2YiLCJ0aGlzU3RhY2tUcmFjZSIsInJldmVyc2UiLCJlcnJvclN0YWNrVHJhY2UiLCJzaGlmdCIsIm1heFJlZGlyZWN0cyIsInN0YXR1c01lc3NhZ2UiLCJEdXBsZXgiLCJoaWdoV2F0ZXJNYXJrIiwicmVxdWVzdEluaXRpYWxpemVkIiwicmVkaXJlY3RzIiwiX3Byb2dyZXNzQ2FsbGJhY2tzIiwidW5sb2NrV3JpdGUiLCJfdW5sb2NrV3JpdGUiLCJsb2NrV3JpdGUiLCJfbG9ja1dyaXRlIiwicHJlcGVuZExpc3RlbmVyIiwib2ZmIiwiSW5jb21pbmdNZXNzYWdlIiwiZm9ybSIsIlJlYWRTdHJlYW0iLCJmaWxlIiwid2FpdEZvck9wZW5GaWxlIiwibm9ybWFsaXplZFVSTCIsInJlcXVlc3RVcmwiLCJkZWNvZGVVUkkiLCJfZmluYWxpemVCb2R5IiwiX21ha2VSZXF1ZXN0Iiwiam9iIiwiX2UiLCJyYXdPcHRpb25zIiwiZG5zQ2FjaGUiLCJwcmVmaXhVcmwiLCJjb29raWVKYXIiLCJjb250ZXh0IiwiaWdub3JlSW52YWxpZENvb2tpZXMiLCJmb2xsb3dSZWRpcmVjdCIsImh0dHAyIiwiYWxsb3dHZXRCb2R5IiwibG9jYWxBZGRyZXNzIiwiaXNEbnNMb29rdXBJcFZlcnNpb24iLCJkbnNMb29rdXBJcFZlcnNpb24iLCJyZWplY3RVbmF1dGhvcml6ZWQiLCJjaGVja1NlcnZlcklkZW50aXR5IiwiY2VydGlmaWNhdGVBdXRob3JpdHkiLCJjZXJ0aWZpY2F0ZSIsInBhc3NwaHJhc2UiLCJwZngiLCJjYWNoZU9wdGlvbnMiLCJzZWFyY2hQYXJhbWV0ZXJzIiwiVVJMU2VhcmNoUGFyYW1zIiwidmFsaWRhdGVTZWFyY2hQYXJhbWV0ZXJzIiwiYXBwZW5kIiwicGFzc3dvcmQiLCJlbmRzV2l0aCIsImhyZWYiLCJzZXRDb29raWUiLCJnZXRDb29raWVTdHJpbmciLCJhcmVIb29rc0RlZmF1bHQiLCJvbkxvY2tlZFdyaXRlIiwid3JpdGUiLCJpc0Zvcm0iLCJpc0pTT04iLCJpc0JvZHkiLCJoYXNQYXlsb2FkIiwiY2Fubm90SGF2ZUJvZHkiLCJfY2Fubm90SGF2ZUJvZHkiLCJpc1RydWUiLCJSZWFkYWJsZSIsIm5vQ29udGVudFR5cGUiLCJnZXRCb3VuZGFyeSIsInN0cmluZ2lmeUpzb24iLCJ1cGxvYWRCb2R5U2l6ZSIsInR5cGVkUmVzcG9uc2UiLCJTVEFUVVNfQ09ERVMiLCJyZWRpcmVjdFVybHMiLCJpc0Zyb21DYWNoZSIsImlwIiwiZG93bmxvYWRQcm9ncmVzcyIsInJhd0Nvb2tpZXMiLCJyYXdDb29raWUiLCJsb2NhdGlvbiIsInJlc3VtZSIsInJlZGlyZWN0QnVmZmVyIiwiZnJvbSIsInJlZGlyZWN0VXJsIiwicmVkaXJlY3RTdHJpbmciLCJjb29raWUiLCJhdXRob3JpemF0aW9uIiwiYmVmb3JlUmVkaXJlY3QiLCJfcmVhZCIsInBhdXNlIiwiZGVzdGluYXRpb24iLCJoZWFkZXJzU2VudCIsImlzQWxsb3dlZCIsIl9vblJlc3BvbnNlQmFzZSIsInJlc3BvbnNlRXZlbnROYW1lIiwiX29uUmVzcG9uc2UiLCJyZXMiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJ1cGxvYWRQcm9ncmVzcyIsImN1cnJlbnRSZXF1ZXN0IiwiX3dyaXRlUmVxdWVzdCIsImNhY2hlUmVxdWVzdCIsInJlcXVlc3RPclByb21pc2UiLCJjb29raWVTdHJpbmciLCJiZWZvcmVSZXF1ZXN0IiwibWF0Y2hlcyIsImV4ZWMiLCJncm91cHMiLCJzb2NrZXRQYXRoIiwiaXNIdHRwcyIsImZhbGxiYWNrRm4iLCJhdXRvIiwicmVhbEZuIiwiX2NyZWF0ZUNhY2hlYWJsZVJlcXVlc3QiLCJzaGFyZWQiLCJjYWNoZUhldXJpc3RpYyIsImltbXV0YWJsZU1pblRpbWVUb0xpdmUiLCJpZ25vcmVDYXJnb0N1bHQiLCJkbnNMb29rdXBJcFZlcnNpb25Ub0ZhbWlseSIsIl9mIiwiY2EiLCJjZXJ0IiwicmVxdWVzdE9yUmVzcG9uc2UiLCJjbGllbnRSZXF1ZXN0IiwiX29uUmVxdWVzdCIsImJlZm9yZUVycm9yIiwidHlwZWRFcnJvciIsImxpc3RlbmVyQ291bnQiLCJiYWNrb2ZmIiwiX2Vycm9yIiwicmVhZGFibGVMZW5ndGgiLCJyZWFkIiwicHJvZ3Jlc3MiLCJwZXJjZW50IiwiYnl0ZUxlbmd0aCIsImVuZFJlcXVlc3QiLCJjb21wbGV0ZSIsInJlbW90ZUFkZHJlc3MiLCJ0cmFuc2ZlcnJlZCIsIlNlcnZlclJlc3BvbnNlIiwidW5waXBlIiwiY29udmVyc2lvblRhYmxlIiwiaXB2NCIsImlwdjYiLCJzdGF0QXN5bmMiLCJzdGF0IiwiZ2V0TGVuZ3RoIiwibGltaXRTdGF0dXNDb2RlIiwic2VhcmNoSW5kZXgiLCJldmVudHMiLCJmbnMiLCJuZXQiLCJ1bmhhbmRsZV8xIiwicmVlbnRyeSIsInRocmVzaG9sZCIsImRlbGF5cyIsImNhbmNlbGVycyIsInVuaGFuZGxlQWxsIiwiYWRkVGltZW91dCIsImRlbGF5IiwidGltZW91dEhhbmRsZXIiLCJjYW5jZWxUaW1lb3V0cyIsInNvY2tldFRpbWVvdXRIYW5kbGVyIiwiaGFzUGF0aCIsImlzSVAiLCJjYW5jZWxUaW1lb3V0IiwidGltZUNvbm5lY3QiLCJzZW5kIiwidGltZVJlcXVlc3QiLCJoYW5kbGVycyIsImhhc2giLCJXZWFrTWFwIiwiZGVmYXVsdEhhbmRsZXIiLCJhc19wcm9taXNlXzEiLCJjcmVhdGVfcmVqZWN0aW9uXzEiLCJkZWVwX2ZyZWV6ZV8xIiwiZXJyb3JzIiwibWVyZ2VPcHRpb25zIiwibWVyZ2VkT3B0aW9ucyIsImdldFByb21pc2VPclN0cmVhbSIsImlzR290SW5zdGFuY2UiLCJhbGlhc2VzIiwiY2FsbEluaXRIb29rcyIsIl9yYXdIYW5kbGVycyIsInJvb3QiLCJuZXdPcHRpb25zIiwidHlwZWRSZXN1bHQiLCJwcm9taXNlVGhlbiIsInByb21pc2VDYXRjaCIsImZpbmFsbHkiLCJwcm9taXNlRmlhbmxseSIsImdvdCIsIl9kZWZhdWx0cyIsIml0ZXJhdGlvbiIsIml0ZXJhdGVIYW5kbGVycyIsImluaXRIb29rRXJyb3IiLCJpbml0IiwiZXh0ZW5kIiwiaW5zdGFuY2VzT3JPcHRpb25zIiwib3B0aW9uc0FycmF5IiwiaXNNdXRhYmxlRGVmYXVsdHMiLCJtdXRhYmxlRGVmYXVsdHMiLCJwYWdpbmF0ZUVhY2giLCJjb3VudExpbWl0IiwibnVtYmVyT2ZSZXF1ZXN0cyIsInJlcXVlc3RMaW1pdCIsIml0ZW0iLCJzdGFja0FsbEl0ZW1zIiwib3B0aW9uc1RvTWVyZ2UiLCJyZXN1bHRzIiwiZWFjaCIsImNyZWF0ZV8xIiwiUmVmbGVjdCIsImxpbmsiLCJ0cmltU3RhcnQiLCJkZWVwRnJlZXplIiwiZnJlZXplIiwiYWxyZWFkeVdhcm5lZCIsImVtaXRXYXJuaW5nIiwic3RhdHVzQ29kZUNhY2hlYWJsZUJ5RGVmYXVsdCIsInVuZGVyc3Rvb2RTdGF0dXNlcyIsImVycm9yU3RhdHVzQ29kZXMiLCJob3BCeUhvcEhlYWRlcnMiLCJjb25uZWN0aW9uIiwidGUiLCJ0cmFpbGVyIiwidXBncmFkZSIsImV4Y2x1ZGVkRnJvbVJldmFsaWRhdGlvblVwZGF0ZSIsInRvTnVtYmVyT3JaZXJvIiwicGFyc2VJbnQiLCJpc0Zpbml0ZSIsInBhcnNlQ2FjaGVDb250cm9sIiwiaGVhZGVyIiwiY2MiLCJwYXJ0cyIsInBhcnQiLCJ2IiwiZm9ybWF0Q2FjaGVDb250cm9sIiwiX2Zyb21PYmplY3QiLCJfYXNzZXJ0UmVxdWVzdEhhc0hlYWRlcnMiLCJfcmVzcG9uc2VUaW1lIiwiX2lzU2hhcmVkIiwiX2NhY2hlSGV1cmlzdGljIiwiX2ltbXV0YWJsZU1pblR0bCIsIl9zdGF0dXMiLCJfcmVzSGVhZGVycyIsIl9yZXNjYyIsIl9tZXRob2QiLCJfdXJsIiwiX2hvc3QiLCJfbm9BdXRob3JpemF0aW9uIiwiX3JlcUhlYWRlcnMiLCJ2YXJ5IiwiX3JlcWNjIiwicHJhZ21hIiwiX2hhc0V4cGxpY2l0RXhwaXJhdGlvbiIsInByaXZhdGUiLCJfYWxsb3dzU3RvcmluZ0F1dGhlbnRpY2F0ZWQiLCJwdWJsaWMiLCJyZXF1ZXN0Q0MiLCJhZ2UiLCJzdGFsZSIsIm1heEFnZSIsIl9yZXF1ZXN0TWF0Y2hlcyIsImFsbG93SGVhZE1ldGhvZCIsIl92YXJ5TWF0Y2hlcyIsImZpZWxkcyIsImluSGVhZGVycyIsInRva2VucyIsIndhcm5pbmciLCJ3YXJuaW5ncyIsIl9jb3B5V2l0aG91dEhvcEJ5SG9wSGVhZGVycyIsInJvdW5kIiwidG9VVENTdHJpbmciLCJzZXJ2ZXJEYXRlIiwiX2FnZVZhbHVlIiwiaW1tdXRhYmxlIiwiZGVmYXVsdE1pblR0bCIsImxhc3RNb2RpZmllZCIsInN0YWxlSWZFcnJvckFnZSIsInN0YWxlV2hpbGVSZXZhbGlkYXRlQWdlIiwic2giLCJjaCIsImltbSIsInN0IiwicmVzaCIsInJlc2NjIiwidSIsImgiLCJhIiwicmVxaCIsInJlcWNjIiwiaW5jb21pbmdSZXEiLCJldGFnIiwiZXRhZ3MiLCJfdXNlU3RhbGVJZkVycm9yIiwiaXNFcnJvclJlc3BvbnNlIiwibmV3UmVzcG9uc2UiLCJRdWlja0xSVSIsImtDdXJyZW50U3RyZWFtc0NvdW50Iiwia09yaWdpblNldCIsImtHcmFjZWZ1bGx5Q2xvc2luZyIsIm5hbWVLZXlzIiwiY29tcGFyZVNlc3Npb25zIiwicmVtb3RlU2V0dGluZ3MiLCJtYXhDb25jdXJyZW50U3RyZWFtcyIsImNsb3NlQ292ZXJlZFNlc3Npb25zIiwid2hlcmUiLCJzZXNzaW9uIiwiY292ZXJlZFNlc3Npb24iLCJncmFjZWZ1bGx5Q2xvc2UiLCJnZXRTZXNzaW9ucyIsImlzRnJlZSIsInNlc3Npb25zIiwiQWdlbnQiLCJtYXhTZXNzaW9ucyIsIm1heEZyZWVTZXNzaW9ucyIsIm1heENhY2hlZFRsc1Nlc3Npb25zIiwicXVldWUiLCJfZnJlZVNlc3Npb25zQ291bnQiLCJfc2Vzc2lvbnNDb3VudCIsInNldHRpbmdzIiwiZW5hYmxlUHVzaCIsInRsc1Nlc3Npb25DYWNoZSIsIm1heFNpemUiLCJzZXJ2ZXJuYW1lIiwibm9ybWFsaXplZCIsIm5vcm1hbGl6ZWRPcmlnaW4iLCJub3JtYWxpemVPcHRpb25zIiwibm9ybWFsaXplT3JpZ2luIiwib3B0aW1hbFNlc3Npb24iLCJjdXJyZW50U3RyZWFtc0NvdW50Iiwic2Vzc2lvbk1heENvbmN1cnJlbnRTdHJlYW1zIiwic2Vzc2lvbkN1cnJlbnRTdHJlYW1zQ291bnQiLCJfdHJ5VG9DcmVhdGVOZXdTZXNzaW9uIiwicmVtb3ZlRnJvbVF1ZXVlIiwicmVjZWl2ZWRTZXR0aW5ncyIsIndhc0ZyZWUiLCJ0bHNTZXNzaW9uIiwic3BsaWNlIiwicHJvY2Vzc0xpc3RlbmVycyIsIm9yaWdpblNldCIsInJlZiIsImxpc3RlbmVyIiwiY29tcGFyZSIsImxvdyIsImhpZ2giLCJtaWQiLCJnZXRTb3J0ZWRJbmRleCIsImdldFNlc3Npb24iLCJzdHJlYW1PcHRpb25zIiwiY2xvc2VkIiwiY2xvc2VTZXNzaW9uSWZDb3ZlcmVkIiwiQUxQTlByb3RvY29scyIsInJlYXNvbiIsImVudHJpZXNPZkF1dGhvcml0eSIsImdsb2JhbEFnZW50IiwicmVzb2x2ZUFMUE4iLCJIdHRwMkNsaWVudFJlcXVlc3QiLCJjYWxjdWxhdGVTZXJ2ZXJOYW1lIiwidXJsVG9PcHRpb25zIiwiaW5zdGFsbFNvY2tldCIsIl9odHRwTWVzc2FnZSIsInNob3VsZEtlZXBBbGl2ZSIsIm9uRnJlZSIsIm9uQ2xvc2UiLCJyZW1vdmVTb2NrZXQiLCJvblJlbW92ZSIsImlucHV0IiwicmVzb2x2ZVNvY2tldCIsIl9kZWZhdWx0QWdlbnQiLCJhZ2VudHMiLCJhZGRSZXF1ZXN0Iiwic29ydCIsImFscG5Qcm90b2NvbCIsInJlc3VsdFByb21pc2UiLCJkZWZhdWx0Q3JlYXRlQ29ubmVjdGlvbiIsInJlc29sdmVQcm90b2NvbCIsInByb3RvY29sQ2FjaGUiLCJXcml0YWJsZSIsInByb3h5RXZlbnRzIiwiaXNSZXF1ZXN0UHNldWRvSGVhZGVyIiwiRVJSX0lOVkFMSURfQVJHX1RZUEUiLCJFUlJfSU5WQUxJRF9QUk9UT0NPTCIsIkVSUl9IVFRQX0hFQURFUlNfU0VOVCIsIkVSUl9JTlZBTElEX0hUVFBfVE9LRU4iLCJFUlJfSFRUUF9JTlZBTElEX0hFQURFUl9WQUxVRSIsIkVSUl9JTlZBTElEX0NIQVIiLCJIVFRQMl9IRUFERVJfU1RBVFVTIiwiSFRUUDJfSEVBREVSX01FVEhPRCIsIkhUVFAyX0hFQURFUl9QQVRIIiwiSFRUUDJfTUVUSE9EX0NPTk5FQ1QiLCJrSGVhZGVycyIsImtPcmlnaW4iLCJrU2Vzc2lvbiIsImtPcHRpb25zIiwia0ZsdXNoZWRIZWFkZXJzIiwiaXNWYWxpZEh0dHBUb2tlbiIsImlzSW52YWxpZEhlYWRlclZhbHVlIiwiaGFzSW5wdXQiLCJoMnNlc3Npb24iLCJkZWZhdWx0UG9ydCIsInJldXNlZFNvY2tldCIsIl9tdXN0Tm90SGF2ZUFCb2R5IiwiZmx1c2hIZWFkZXJzIiwiY2FsbFdyaXRlIiwiX3JlcXVlc3QiLCJjYWxsRW5kIiwiX2R1bXAiLCJpc0Nvbm5lY3RNZXRob2QiLCJvblN0cmVhbSIsIndhaXRGb3JFbmQiLCJmbGFncyIsInJhd0hlYWRlcnMiLCJyZWFkYWJsZUhpZ2hXYXRlck1hcmsiLCJhbGxvYyIsIl9kdW1wZWQiLCJ0cmFpbGVycyIsInJhd1RyYWlsZXJzIiwiYXBwbHlUaW1lb3V0IiwibG9jYWxTZXR0aW5ncyIsIm1heEhlYWRlckxpc3RTaXplIiwiX3ZhbHVlIiwiaHR0cFZlcnNpb24iLCJodHRwVmVyc2lvbk1ham9yIiwiaHR0cFZlcnNpb25NaW5vciIsIkNsaWVudFJlcXVlc3QiLCJob3N0SGVhZGVyIiwibWFrZUVycm9yIiwiQmFzZSIsImdldE1lc3NhZ2UiLCJ2YWxpZCIsImlzTWFueVR5cGVzIiwidG9KU09OIiwiaWdub3JlIiwiSlNPTkIiLCJzZXJpYWxpemUiLCJkZXNlcmlhbGl6ZSIsImFkYXB0ZXJPcHRzIiwiYWRhcHRlcnMiLCJyZWRpcyIsIm1vbmdvZGIiLCJtb25nbyIsInNxbGl0ZSIsInBvc3RncmVzcWwiLCJwb3N0Z3JlcyIsIm15c3FsIiwiYWRhcHRlciIsImxvYWRTdG9yZSIsImtleVByZWZpeGVkIiwiX2dldEtleVByZWZpeCIsInJhdyIsIndlYnBhY2tFbXB0eUNvbnRleHQiLCJpZCIsIkZPUkNFX0NPTE9SIiwiTk9ERV9ESVNBQkxFX0NPTE9SUyIsIlRFUk0iLCIkIiwiZW5hYmxlZCIsInJlc2V0IiwiYm9sZCIsImRpbSIsIml0YWxpYyIsInVuZGVybGluZSIsImludmVyc2UiLCJoaWRkZW4iLCJzdHJpa2V0aHJvdWdoIiwiYmxhY2siLCJyZWQiLCJncmVlbiIsInllbGxvdyIsImJsdWUiLCJtYWdlbnRhIiwiY3lhbiIsIndoaXRlIiwiZ3JheSIsImdyZXkiLCJiZ0JsYWNrIiwiYmdSZWQiLCJiZ0dyZWVuIiwiYmdZZWxsb3ciLCJiZ0JsdWUiLCJiZ01hZ2VudGEiLCJiZ0N5YW4iLCJiZ1doaXRlIiwicnVuIiwiYXJyIiwic3RyIiwidG1wIiwiYmVnIiwib3BlbiIsInJneCIsImJsayIsIlJlZ0V4cCIsInR4dCIsImN0eCIsImNoYWluIiwia25vd25Qcm9wZXJ0aWVzIiwiZnJvbVByb3BlcnRpZXMiLCJVUkxQYXJzZXIiLCJ0ZXN0UGFyYW1ldGVyIiwiZmlsdGVycyIsImRlZmF1bHRQcm90b2NvbCIsIm5vcm1hbGl6ZVByb3RvY29sIiwiZm9yY2VIdHRwIiwiZm9yY2VIdHRwcyIsInN0cmlwSGFzaCIsInJlbW92ZVF1ZXJ5UGFyYW1ldGVycyIsInJlbW92ZURpcmVjdG9yeUluZGV4Iiwic29ydFF1ZXJ5UGFyYW1ldGVycyIsIm1lZGlhVHlwZSIsImJhc2U2NCIsInBvcCIsIm1pbWVUeXBlIiwibm9ybWFsaXplZE1lZGlhVHlwZSIsImF0dHJpYnV0ZSIsInVuc2hpZnQiLCJub3JtYWxpemVEYXRhVVJMIiwiaGFzUmVsYXRpdmVQcm90b2NvbCIsInVybE9iaiIsInAxIiwicGF0aENvbXBvbmVudHMiLCJsYXN0Q29tcG9uZW50Iiwic3RyaXBQcm90b2NvbCIsIndyYXBweSIsImYiLCJjYWxsZWQiLCJvbmNlU3RyaWN0Iiwib25jZUVycm9yIiwic3RyaWN0IiwicHJvdG8iLCJGdW5jdGlvbiIsInVzZXJGbiIsImFyZ3VtZW50c18iLCJleGVjdXRvciIsIl9jYW5jZWxIYW5kbGVycyIsIl9pc1BlbmRpbmciLCJfaXNDYW5jZWxlZCIsIl9yZWplY3RPbkNhbmNlbCIsIl9wcm9taXNlIiwiX3JlamVjdCIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsIm9uRmluYWxseSIsIkRhdGVQYXJ0IiwibG9jYWxlcyIsImN1cnJlbnRJZHgiLCJmaW5kIiwic2V0RGF0ZSIsImdldERhdGUiLCJzdWJzdHIiLCJkYXkiLCJnZXREYXkiLCJwYWRTdGFydCIsIndlZWtkYXlzU2hvcnQiLCJ3ZWVrZGF5cyIsInNldEhvdXJzIiwiZ2V0SG91cnMiLCJob3VycyIsIk1lcmlkaWVtIiwiRGF5IiwiSG91cnMiLCJNaWxsaXNlY29uZHMiLCJNaW51dGVzIiwiTW9udGgiLCJTZWNvbmRzIiwiWWVhciIsInVwIiwibWVyaWRpZW0iLCJzZXRNaWxsaXNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJzZXRNaW51dGVzIiwiZ2V0TWludXRlcyIsInNldE1vbnRoIiwiZ2V0TW9udGgiLCJtb250aCIsInRsIiwibW9udGhzU2hvcnQiLCJtb250aHMiLCJzZXRTZWNvbmRzIiwiZ2V0U2Vjb25kcyIsInNldEZ1bGxZZWFyIiwiZ2V0RnVsbFllYXIiLCJ5ZWFyIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwiX25leHQiLCJfdGhyb3ciLCJhcmciLCJpbmZvIiwiZG9uZSIsImNvbG9yIiwiUHJvbXB0IiwiX3JlcXVpcmUiLCJlcmFzZSIsImN1cnNvciIsIl9yZXF1aXJlMiIsInN0eWxlIiwiZmlndXJlcyIsImVudHJpZXNUb0Rpc3BsYXkiLCJnZXRWYWwiLCJ0aXRsZSIsImdldFRpdGxlIiwibXNnIiwic3VnZ2VzdCIsImNob2ljZXMiLCJpbml0aWFsIiwidmFsT3JUaXRsZSIsImZpbmRJbmRleCIsImVsIiwiZ2V0SW5kZXgiLCJzZWxlY3QiLCJpMThuIiwibm9NYXRjaGVzIiwiZmFsbGJhY2siLCJjbGVhckZpcnN0Iiwic3VnZ2VzdGlvbnMiLCJyZW5kZXIiLCJzY2FsZSIsIm91dCIsImNvbHVtbnMiLCJmYiIsIl9mYiIsImNob2ljZSIsImZpcmUiLCJjb21wbGV0aW5nIiwibCIsIm1vdmVTZWxlY3QiLCJleGl0ZWQiLCJjIiwiczEiLCJzMiIsImJlbGwiLCJyZW5kZXJlZCIsImhvdmVyZWQiLCJpc1N0YXJ0IiwiaXNFbmQiLCJkZXNjIiwicHJlZml4IiwiYXJyb3dVcCIsImFycm93RG93biIsInBvaW50ZXIiLCJtYXJnaW4iLCJ3aWR0aCIsImZpcnN0UmVuZGVyIiwiaGlkZSIsIm91dHB1dFRleHQiLCJfZW50cmllc1RvRGlzcGxheSIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsImRlbGltaXRlciIsInJlbmRlck9wdGlvbiIsIk11bHRpc2VsZWN0UHJvbXB0Iiwib3ZlcnJpZGVSZW5kZXIiLCJpbnB1dFZhbHVlIiwiZmlsdGVyZWRPcHRpb25zIiwic2VsZWN0ZWQiLCJtYXhDaG9pY2VzIiwidXBkYXRlRmlsdGVyZWRPcHRpb25zIiwiY3VycmVudEhpZ2hsaWdodCIsIm5ld0hpZ2hsaWdodEluZGV4IiwiZGlzYWJsZWQiLCJoYW5kbGVTcGFjZVRvZ2dsZSIsImhhbmRsZUlucHV0Q2hhbmdlIiwiaW5zdHJ1Y3Rpb25zIiwiYXJyb3dMZWZ0IiwiYXJyb3dSaWdodCIsInJhZGlvT24iLCJyYWRpb09mZiIsIm91dHB1dCIsImhpbnQiLCJyZW5kZXJJbnN0cnVjdGlvbnMiLCJyZW5kZXJDdXJyZW50SW5wdXQiLCJ3YXJuIiwicHJvbXB0IiwicmVuZGVyRG9uZU9ySW5zdHJ1Y3Rpb25zIiwic2hvd01pbkVycm9yIiwibWluU2VsZWN0ZWQiLCJyZW5kZXJPcHRpb25zIiwiaW5pdGlhbFZhbHVlIiwieWVzTXNnIiwieWVzIiwieWVzT3B0aW9uIiwibm9Nc2ciLCJubyIsIm5vT3B0aW9uIiwic3VibWl0IiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJfcmVxdWlyZTMiLCJyZWdleCIsInJlZ2V4R3JvdXBzIiwiMSIsIjIiLCIzIiwiNCIsIjUiLCI2IiwiNyIsIjgiLCI5IiwiZGZsdExvY2FsZXMiLCJ0eXBlZCIsIl9kYXRlIiwiZXJyb3JNc2ciLCJ2YWxpZGF0b3IiLCJ2YWxpZGF0ZSIsIm1hc2siLCJzZXRUaW1lIiwiZ2V0VGltZSIsImdyIiwicmVkdWNlIiwibW92ZUN1cnNvciIsIl90aGlzMiIsImRvd24iLCJwcmV2Iiwic2V0VG8iLCJwb2ludGVyU21hbGwiLCJUZXh0UHJvbXB0IiwiU2VsZWN0UHJvbXB0IiwiVG9nZ2xlUHJvbXB0IiwiRGF0ZVByb21wdCIsIk51bWJlclByb21wdCIsIkF1dG9jb21wbGV0ZVByb21wdCIsIkF1dG9jb21wbGV0ZU11bHRpc2VsZWN0UHJvbXB0IiwiQ29uZmlybVByb21wdCIsInNjcm9sbEluZGV4Iiwib3B0aW9uc1BlclBhZ2UiLCJuZXdTZWxlY3RlZCIsInRvZ2dsZUFsbCIsImFycm93SW5kaWNhdG9yIiwic3R5bGVkT3B0aW9ucyIsInBhZ2luYXRlT3B0aW9ucyIsImxpbmVzIiwiaXNOdW1iZXIiLCJpc0RlZiIsInByZWNpc2lvbiIsImZhY3RvciIsInBvdyIsImZsb2F0IiwiaW5jIiwiaW5jcmVtZW50IiwibGFzdEhpdCIsInBsYWNlaG9sZGVyIiwieCIsInBhcnNlRmxvYXQiLCJvdXRwdXRFcnJvciIsInNhdmUiLCJyZXN0b3JlIiwicmVhZGxpbmUiLCJiZWVwIiwiaW4iLCJzdGRpbiIsInN0ZG91dCIsIm9uUmVuZGVyIiwicmwiLCJjcmVhdGVJbnRlcmZhY2UiLCJlc2NhcGVDb2RlVGltZW91dCIsImVtaXRLZXlwcmVzc0V2ZW50cyIsImlzVFRZIiwic2V0UmF3TW9kZSIsImlzU2VsZWN0Iiwia2V5cHJlc3MiLCJzaG93Iiwic2VsZWN0aW9uIiwiYWN0aXZlIiwiaW5hY3RpdmUiLCJkZWFjdGl2YXRlIiwiYWN0aXZhdGUiLCJvd25LZXlzIiwiZW51bWVyYWJsZU9ubHkiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX29iamVjdFNwcmVhZCIsInRhcmdldCIsIl9kZWZpbmVQcm9wZXJ0eSIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIiwiYWxsb3dBcnJheUxpa2UiLCJpdCIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiRiIsIm5vcm1hbENvbXBsZXRpb24iLCJkaWRFcnIiLCJzdGVwIiwiX2UyIiwicmV0dXJuIiwibGVuIiwiYXJyMiIsInByb21wdHMiLCJwYXNzT24iLCJfcHJvbXB0IiwicXVlc3Rpb25zIiwib25TdWJtaXQiLCJhbnN3ZXJzIiwib3ZlcnJpZGUiLCJfb3ZlcnJpZGUiLCJhbnN3ZXIiLCJxdWVzdGlvbiIsInF1aXQiLCJsYXN0UHJvbXB0IiwiZ2V0Rm9ybWF0dGVkQW5zd2VyIiwiX3JlZiIsInNraXBWYWxpZGF0aW9uIiwiX3giLCJfeDIiLCJfc3RlcCIsIl9pdGVyYXRvciIsIl9xdWVzdGlvbiIsIl9xdWVzdGlvbjIiLCJfaW5qZWN0ZWQiLCJnZXRJbmplY3RlZEFuc3dlciIsImluamVjdGVkIiwiZGVhZnVsdFZhbHVlIiwiaW5qZWN0IiwidG9Qcm9tcHQiLCJyZWoiLCJvbkFib3J0Iiwib25FeGl0Iiwib25TdGF0ZSIsImludmlzaWJsZSIsImNvbmZpcm0iLCJsaXN0Iiwic2VwIiwic2VwYXJhdG9yIiwidG9nZ2xlIiwibXVsdGlzZWxlY3QiLCJ0b1NlbGVjdGVkIiwiYXV0b2NvbXBsZXRlTXVsdGlzZWxlY3QiLCJieVRpdGxlIiwiYXV0b2NvbXBsZXRlIiwiY3RybCIsInN0cmlwIiwicGVyTGluZSIsInJvd3MiLCJmbG9vciIsIm1heFZpc2libGUiLCJtYWluIiwidGljayIsImNyb3NzIiwiZWxsaXBzaXMiLCJ3aW4iLCJwbGF0Zm9ybSIsInBhdHRlcm4iLCJSR1giLCJzdHlsZXMiLCJyZXBlYXQiLCJlbW9qaSIsImV4cGFuZGFibGUiLCJleHBhbmRlZCIsInRhYiIsImZpbGwiLCJ3IiwidGFyIiwiaXNOb2RlTFQiLCJhbmNpZW50IiwidmVyc2lvbiIsImlzRm4iLCJkZXN0cm95ZXIiLCJyZWFkaW5nIiwid3JpdGluZyIsIldyaXRlU3RyZWFtIiwiaXNGUyIsInN0cmVhbXMiLCJkZXN0cm95cyIsIm9uRXZpY3Rpb24iLCJvbGRDYWNoZSIsIl9zaXplIiwiZGVsZXRlZCIsIm9sZENhY2hlU2l6ZSIsInkiLCJyZXQiLCJjb3VudCIsImZvcndhcmQiLCJiYWNrd2FyZCIsIm5leHRMaW5lIiwicHJldkxpbmUiLCJsZWZ0Iiwic2NyZWVuIiwibGluZUVuZCIsImxpbmVTdGFydCIsInNjcm9sbCIsIndyYXBwZXIiLCJyZXF1aXJlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsImRlZmluaXRpb24iLCJ0b0FyciIsInRvVmFsIiwib2xkIiwibnh0IiwicmVtb3ZlQnJhY2tldHMiLCJmaW5kTG9uZ2VzdCIsInBhZFJpZ2h0Iiwic2V0RG90UHJvcCIsInNldEJ5VHlwZSIsInRyYW5zZm9ybXMiLCJzaG91bGRUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1GdW5jdGlvbiIsImNhbWVsY2FzZU9wdGlvbk5hbWUiLCJwMiIsIkNBQ0Vycm9yIiwiT3B0aW9uIiwicmF3TmFtZSIsImNvbmZpZyIsIm5lZ2F0ZWQiLCJuYW1lcyIsImlzQm9vbGVhbiIsInByb2Nlc3NBcmdzIiwiYXJndiIsInBsYXRmb3JtSW5mbyIsImFyY2giLCJDb21tYW5kIiwiY2xpIiwiYWxpYXNOYW1lcyIsIkFOR0xFRF9CUkFDS0VUX1JFX0dMT0JBTCIsIlNRVUFSRV9CUkFDS0VUX1JFX0dMT0JBTCIsInZhcmlhZGljIiwiYW5nbGVkTWF0Y2giLCJzcXVhcmVNYXRjaCIsImZpbmRBbGxCcmFja2V0cyIsImV4YW1wbGVzIiwidXNhZ2VUZXh0IiwiYWxsb3dVbmtub3duT3B0aW9ucyIsImlnbm9yZU9wdGlvbkRlZmF1bHRWYWx1ZSIsImN1c3RvbUZsYWdzIiwidmVyc2lvbk51bWJlciIsIm9wdGlvbiIsImV4YW1wbGUiLCJjb21tYW5kQWN0aW9uIiwiR2xvYmFsQ29tbWFuZCIsImNvbW1hbmRzIiwiZ2xvYmFsT3B0aW9ucyIsImhlbHBDYWxsYmFjayIsImdsb2JhbENvbW1hbmQiLCJzZWN0aW9ucyIsImlzR2xvYmFsQ29tbWFuZCIsImlzRGVmYXVsdENvbW1hbmQiLCJsb25nZXN0Q29tbWFuZE5hbWUiLCJjb21tYW5kIiwibG9uZ2VzdE9wdGlvbk5hbWUiLCJzZWN0aW9uIiwibWluaW1hbEFyZ3NDb3VudCIsImhhc09wdGlvbiIsInBhcnNlZE9wdGlvbnMiLCJoYXNOZWdhdGVkIiwiQ0FDIiwicmF3QXJncyIsInVzYWdlIiwic2hvd0hlbHBPbkV4aXQiLCJzaG93VmVyc2lvbk9uRXhpdCIsIm1hdGNoZWRDb21tYW5kIiwib3V0cHV0SGVscCIsIm91dHB1dFZlcnNpb24iLCJtYXRjaGVkQ29tbWFuZE5hbWUiLCJnZXRGaWxlTmFtZSIsInNob3VsZFBhcnNlIiwibXJpIiwiY29tbWFuZE5hbWUiLCJpc01hdGNoZWQiLCJwYXJzZWRJbmZvIiwic2V0UGFyc2VkSW5mbyIsImhlbHAiLCJ1bnNldE1hdGNoZWRDb21tYW5kIiwicGFyc2VkQXJndiIsInJ1bk1hdGNoZWRDb21tYW5kIiwiY2xpT3B0aW9ucyIsIm1yaU9wdGlvbnMiLCJhbGlhcyIsImdldE1yaU9wdGlvbnMiLCJhcmdzQWZ0ZXJEb3VibGVEYXNoZXMiLCJkb3VibGVEYXNoZXNJbmRleCIsImoiLCJhbGliaSIsInVua25vd24iLCJjaGFyQ29kZUF0IiwibXJpMiIsImlnbm9yZURlZmF1bHQiLCJjbGlPcHRpb24iLCJjaGVja1Vua25vd25PcHRpb25zIiwiY2hlY2tPcHRpb25WYWx1ZSIsImNoZWNrUmVxdWlyZWRBcmdzIiwiYWN0aW9uQXJncyIsImNhYyIsInByb21wdHNDb25maWciLCJhdXRoVG9rZW4iLCJESUdJVEFMX09DRUFOX1BFUlNPTkFMX0FDQ0VTU19UT0tFTiIsImltYWdlIiwic3NoX2tleXMiLCJiYWNrdXBzIiwicHJpdmF0ZV9uZXR3b3JraW5nIiwibW9uaXRvcmluZyIsInVzZXJfZGF0YSJdLCJtYXBwaW5ncyI6InNDQUlBQSxPQUFPQyxlQUFlQyxFQUFTLGFBQWMsQ0FBRUMsT0FBTyxJQUN0RCxNQUFNQyxFQUFzQixDQUN4QixZQUNBLGFBQ0Esb0JBQ0EsYUFDQSxjQUNBLGFBQ0EsY0FDQSxlQUNBLGVBQ0EsZ0JBQ0Esa0JBS0VDLEVBQWtCLENBQ3BCLFdBQ0EsWUFDQSxpQkFDQSxvQkFDQSx5QkFDQSxnQkFDQSxhQUNBLFFBQ0EsU0FDQSxTQUNBLFNBQ0EsT0FDQSxRQUNBLE1BQ0EsTUFDQSxVQUNBLFVBQ0EsY0FDQSxvQkFDQSxXQUNBLFVBQ0EsTUFDQSxpQkFDR0QsR0FLREUs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LElBQU1BLEVBQVkvcUQsUUFBUW1pQixJQUFJNm9DLG9DQUU5QixHQUxtRDV6RCxNQUtoQjJ6RCxFQUxNdHVELE9BTXZDLEtBQU0sa0dBRVIsT0FBT3N1RCxFRE9XLFFBQ1UsSUFBSSxJQUFKLENBQWlCQSxHQUN6QnQzQyxTQUNqQnFCLE9BbEJtQixDQUNwQnJlLEtBQU0sT0FDTjRrQixPQUFRLE9BQ1I5YyxLQUFNLGNBQ04wc0QsTUFBTyxZQUNQQyxTQUFVLENBQUMsU0FBVSxVQUNyQkMsU0FBUyxFQUNUbjFCLE1BQU0sRUFDTm8xQixvQkFBb0IsRUFDcEJDLFlBQVksRUFDWkMsVUFBVyxHQUNYajNDLFFBQVMsQ0FBQyxJQUNWRCxLQUFNLEtBT0wxYSxNQUFLLFNBQUNrTyxHQUFTLE9BQUFtWixRQUFRRCxJQUFJbFosTUFDM0JqTyxPQUFNLFNBQUNTLEdBQVUsT0FBQTJtQixRQUFRM21CLE1BQU1BLFEsY0RGbEMsUyxJQ25CYSxJQWdCUDJ3RCxNLFlEQ1AsSyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8vIDxyZWZlcmVuY2UgbGliPVwiZXMyMDE4XCIvPlxuLy8vIDxyZWZlcmVuY2UgbGliPVwiZG9tXCIvPlxuLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJub2RlXCIvPlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHlwZWRBcnJheVR5cGVOYW1lcyA9IFtcbiAgICAnSW50OEFycmF5JyxcbiAgICAnVWludDhBcnJheScsXG4gICAgJ1VpbnQ4Q2xhbXBlZEFycmF5JyxcbiAgICAnSW50MTZBcnJheScsXG4gICAgJ1VpbnQxNkFycmF5JyxcbiAgICAnSW50MzJBcnJheScsXG4gICAgJ1VpbnQzMkFycmF5JyxcbiAgICAnRmxvYXQzMkFycmF5JyxcbiAgICAnRmxvYXQ2NEFycmF5JyxcbiAgICAnQmlnSW50NjRBcnJheScsXG4gICAgJ0JpZ1VpbnQ2NEFycmF5J1xuXTtcbmZ1bmN0aW9uIGlzVHlwZWRBcnJheU5hbWUobmFtZSkge1xuICAgIHJldHVybiB0eXBlZEFycmF5VHlwZU5hbWVzLmluY2x1ZGVzKG5hbWUpO1xufVxuY29uc3Qgb2JqZWN0VHlwZU5hbWVzID0gW1xuICAgICdGdW5jdGlvbicsXG4gICAgJ0dlbmVyYXRvcicsXG4gICAgJ0FzeW5jR2VuZXJhdG9yJyxcbiAgICAnR2VuZXJhdG9yRnVuY3Rpb24nLFxuICAgICdBc3luY0dlbmVyYXRvckZ1bmN0aW9uJyxcbiAgICAnQXN5bmNGdW5jdGlvbicsXG4gICAgJ09ic2VydmFibGUnLFxuICAgICdBcnJheScsXG4gICAgJ0J1ZmZlcicsXG4gICAgJ09iamVjdCcsXG4gICAgJ1JlZ0V4cCcsXG4gICAgJ0RhdGUnLFxuICAgICdFcnJvcicsXG4gICAgJ01hcCcsXG4gICAgJ1NldCcsXG4gICAgJ1dlYWtNYXAnLFxuICAgICdXZWFrU2V0JyxcbiAgICAnQXJyYXlCdWZmZXInLFxuICAgICdTaGFyZWRBcnJheUJ1ZmZlcicsXG4gICAgJ0RhdGFWaWV3JyxcbiAgICAnUHJvbWlzZScsXG4gICAgJ1VSTCcsXG4gICAgJ0hUTUxFbGVtZW50JyxcbiAgICAuLi50eXBlZEFycmF5VHlwZU5hbWVzXG5dO1xuZnVuY3Rpb24gaXNPYmplY3RUeXBlTmFtZShuYW1lKSB7XG4gICAgcmV0dXJuIG9iamVjdFR5cGVOYW1lcy5pbmNsdWRlcyhuYW1lKTtcbn1cbmNvbnN0IHByaW1pdGl2ZVR5cGVOYW1lcyA9IFtcbiAgICAnbnVsbCcsXG4gICAgJ3VuZGVmaW5lZCcsXG4gICAgJ3N0cmluZycsXG4gICAgJ251bWJlcicsXG4gICAgJ2JpZ2ludCcsXG4gICAgJ2Jvb2xlYW4nLFxuICAgICdzeW1ib2wnXG5dO1xuZnVuY3Rpb24gaXNQcmltaXRpdmVUeXBlTmFtZShuYW1lKSB7XG4gICAgcmV0dXJuIHByaW1pdGl2ZVR5cGVOYW1lcy5pbmNsdWRlcyhuYW1lKTtcbn1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG5mdW5jdGlvbiBpc09mVHlwZSh0eXBlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSB0eXBlO1xufVxuY29uc3QgeyB0b1N0cmluZyB9ID0gT2JqZWN0LnByb3RvdHlwZTtcbmNvbnN0IGdldE9iamVjdFR5cGUgPSAodmFsdWUpID0+IHtcbiAgICBjb25zdCBvYmplY3RUeXBlTmFtZSA9IHRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKTtcbiAgICBpZiAoL0hUTUxcXHcrRWxlbWVudC8udGVzdChvYmplY3RUeXBlTmFtZSkgJiYgaXMuZG9tRWxlbWVudCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICdIVE1MRWxlbWVudCc7XG4gICAgfVxuICAgIGlmIChpc09iamVjdFR5cGVOYW1lKG9iamVjdFR5cGVOYW1lKSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0VHlwZU5hbWU7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59O1xuY29uc3QgaXNPYmplY3RPZlR5cGUgPSAodHlwZSkgPT4gKHZhbHVlKSA9PiBnZXRPYmplY3RUeXBlKHZhbHVlKSA9PT0gdHlwZTtcbmZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAnbnVsbCc7XG4gICAgfVxuICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgICAgICByZXR1cm4gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICByZXR1cm4gJ3N0cmluZyc7XG4gICAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgICAgICByZXR1cm4gJ251bWJlcic7XG4gICAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICAgICAgcmV0dXJuICdib29sZWFuJztcbiAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICAgICAgcmV0dXJuICdGdW5jdGlvbic7XG4gICAgICAgIGNhc2UgJ2JpZ2ludCc6XG4gICAgICAgICAgICByZXR1cm4gJ2JpZ2ludCc7XG4gICAgICAgIGNhc2UgJ3N5bWJvbCc6XG4gICAgICAgICAgICByZXR1cm4gJ3N5bWJvbCc7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgfVxuICAgIGlmIChpcy5vYnNlcnZhYmxlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gJ09ic2VydmFibGUnO1xuICAgIH1cbiAgICBpZiAoaXMuYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAnQXJyYXknO1xuICAgIH1cbiAgICBpZiAoaXMuYnVmZmVyKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gJ0J1ZmZlcic7XG4gICAgfVxuICAgIGNvbnN0IHRhZ1R5cGUgPSBnZXRPYmplY3RUeXBlKHZhbHVlKTtcbiAgICBpZiAodGFnVHlwZSkge1xuICAgICAgICByZXR1cm4gdGFnVHlwZTtcbiAgICB9XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgU3RyaW5nIHx8IHZhbHVlIGluc3RhbmNlb2YgQm9vbGVhbiB8fCB2YWx1ZSBpbnN0YW5jZW9mIE51bWJlcikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQbGVhc2UgZG9uXFwndCB1c2Ugb2JqZWN0IHdyYXBwZXJzIGZvciBwcmltaXRpdmUgdHlwZXMnKTtcbiAgICB9XG4gICAgcmV0dXJuICdPYmplY3QnO1xufVxuaXMudW5kZWZpbmVkID0gaXNPZlR5cGUoJ3VuZGVmaW5lZCcpO1xuaXMuc3RyaW5nID0gaXNPZlR5cGUoJ3N0cmluZycpO1xuY29uc3QgaXNOdW1iZXJUeXBlID0gaXNPZlR5cGUoJ251bWJlcicpO1xuaXMubnVtYmVyID0gKHZhbHVlKSA9PiBpc051bWJlclR5cGUodmFsdWUpICYmICFpcy5uYW4odmFsdWUpO1xuaXMuYmlnaW50ID0gaXNPZlR5cGUoJ2JpZ2ludCcpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbmlzLmZ1bmN0aW9uXyA9IGlzT2ZUeXBlKCdmdW5jdGlvbicpO1xuaXMubnVsbF8gPSAodmFsdWUpID0+IHZhbHVlID09PSBudWxsO1xuaXMuY2xhc3NfID0gKHZhbHVlKSA9PiBpcy5mdW5jdGlvbl8odmFsdWUpICYmIHZhbHVlLnRvU3RyaW5nKCkuc3RhcnRzV2l0aCgnY2xhc3MgJyk7XG5pcy5ib29sZWFuID0gKHZhbHVlKSA9PiB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2U7XG5pcy5zeW1ib2wgPSBpc09mVHlwZSgnc3ltYm9sJyk7XG5pcy5udW1lcmljU3RyaW5nID0gKHZhbHVlKSA9PiBpcy5zdHJpbmcodmFsdWUpICYmICFpcy5lbXB0eVN0cmluZ09yV2hpdGVzcGFjZSh2YWx1ZSkgJiYgIU51bWJlci5pc05hTihOdW1iZXIodmFsdWUpKTtcbmlzLmFycmF5ID0gKHZhbHVlLCBhc3NlcnRpb24pID0+IHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFpcy5mdW5jdGlvbl8oYXNzZXJ0aW9uKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlLmV2ZXJ5KGFzc2VydGlvbik7XG59O1xuaXMuYnVmZmVyID0gKHZhbHVlKSA9PiB7IHZhciBfYSwgX2IsIF9jLCBfZDsgcmV0dXJuIChfZCA9IChfYyA9IChfYiA9IChfYSA9IHZhbHVlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29uc3RydWN0b3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5pc0J1ZmZlcikgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmNhbGwoX2IsIHZhbHVlKSkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogZmFsc2U7IH07XG5pcy5udWxsT3JVbmRlZmluZWQgPSAodmFsdWUpID0+IGlzLm51bGxfKHZhbHVlKSB8fCBpcy51bmRlZmluZWQodmFsdWUpO1xuaXMub2JqZWN0ID0gKHZhbHVlKSA9PiAhaXMubnVsbF8odmFsdWUpICYmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnIHx8IGlzLmZ1bmN0aW9uXyh2YWx1ZSkpO1xuaXMuaXRlcmFibGUgPSAodmFsdWUpID0+IHsgdmFyIF9hOyByZXR1cm4gaXMuZnVuY3Rpb25fKChfYSA9IHZhbHVlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbU3ltYm9sLml0ZXJhdG9yXSk7IH07XG5pcy5hc3luY0l0ZXJhYmxlID0gKHZhbHVlKSA9PiB7IHZhciBfYTsgcmV0dXJuIGlzLmZ1bmN0aW9uXygoX2EgPSB2YWx1ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSk7IH07XG5pcy5nZW5lcmF0b3IgPSAodmFsdWUpID0+IGlzLml0ZXJhYmxlKHZhbHVlKSAmJiBpcy5mdW5jdGlvbl8odmFsdWUubmV4dCkgJiYgaXMuZnVuY3Rpb25fKHZhbHVlLnRocm93KTtcbmlzLmFzeW5jR2VuZXJhdG9yID0gKHZhbHVlKSA9PiBpcy5hc3luY0l0ZXJhYmxlKHZhbHVlKSAmJiBpcy5mdW5jdGlvbl8odmFsdWUubmV4dCkgJiYgaXMuZnVuY3Rpb25fKHZhbHVlLnRocm93KTtcbmlzLm5hdGl2ZVByb21pc2UgPSAodmFsdWUpID0+IGlzT2JqZWN0T2ZUeXBlKCdQcm9taXNlJykodmFsdWUpO1xuY29uc3QgaGFzUHJvbWlzZUFQSSA9ICh2YWx1ZSkgPT4ge1xuICAgIHZhciBfYSwgX2I7XG4gICAgcmV0dXJuIGlzLmZ1bmN0aW9uXygoX2EgPSB2YWx1ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRoZW4pICYmXG4gICAgICAgIGlzLmZ1bmN0aW9uXygoX2IgPSB2YWx1ZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhdGNoKTtcbn07XG5pcy5wcm9taXNlID0gKHZhbHVlKSA9PiBpcy5uYXRpdmVQcm9taXNlKHZhbHVlKSB8fCBoYXNQcm9taXNlQVBJKHZhbHVlKTtcbmlzLmdlbmVyYXRvckZ1bmN0aW9uID0gaXNPYmplY3RPZlR5cGUoJ0dlbmVyYXRvckZ1bmN0aW9uJyk7XG5pcy5hc3luY0dlbmVyYXRvckZ1bmN0aW9uID0gKHZhbHVlKSA9PiBnZXRPYmplY3RUeXBlKHZhbHVlKSA9PT0gJ0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24nO1xuaXMuYXN5bmNGdW5jdGlvbiA9ICh2YWx1ZSkgPT4gZ2V0T2JqZWN0VHlwZSh2YWx1ZSkgPT09ICdBc3luY0Z1bmN0aW9uJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMsIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbmlzLmJvdW5kRnVuY3Rpb24gPSAodmFsdWUpID0+IGlzLmZ1bmN0aW9uXyh2YWx1ZSkgJiYgIXZhbHVlLmhhc093blByb3BlcnR5KCdwcm90b3R5cGUnKTtcbmlzLnJlZ0V4cCA9IGlzT2JqZWN0T2ZUeXBlKCdSZWdFeHAnKTtcbmlzLmRhdGUgPSBpc09iamVjdE9mVHlwZSgnRGF0ZScpO1xuaXMuZXJyb3IgPSBpc09iamVjdE9mVHlwZSgnRXJyb3InKTtcbmlzLm1hcCA9ICh2YWx1ZSkgPT4gaXNPYmplY3RPZlR5cGUoJ01hcCcpKHZhbHVlKTtcbmlzLnNldCA9ICh2YWx1ZSkgPT4gaXNPYmplY3RPZlR5cGUoJ1NldCcpKHZhbHVlKTtcbmlzLndlYWtNYXAgPSAodmFsdWUpID0+IGlzT2JqZWN0T2ZUeXBlKCdXZWFrTWFwJykodmFsdWUpO1xuaXMud2Vha1NldCA9ICh2YWx1ZSkgPT4gaXNPYmplY3RPZlR5cGUoJ1dlYWtTZXQnKSh2YWx1ZSk7XG5pcy5pbnQ4QXJyYXkgPSBpc09iamVjdE9mVHlwZSgnSW50OEFycmF5Jyk7XG5pcy51aW50OEFycmF5ID0gaXNPYmplY3RPZlR5cGUoJ1VpbnQ4QXJyYXknKTtcbmlzLnVpbnQ4Q2xhbXBlZEFycmF5ID0gaXNPYmplY3RPZlR5cGUoJ1VpbnQ4Q2xhbXBlZEFycmF5Jyk7XG5pcy5pbnQxNkFycmF5ID0gaXNPYmplY3RPZlR5cGUoJ0ludDE2QXJyYXknKTtcbmlzLnVpbnQxNkFycmF5ID0gaXNPYmplY3RPZlR5cGUoJ1VpbnQxNkFycmF5Jyk7XG5pcy5pbnQzMkFycmF5ID0gaXNPYmplY3RPZlR5cGUoJ0ludDMyQXJyYXknKTtcbmlzLnVpbnQzMkFycmF5ID0gaXNPYmplY3RPZlR5cGUoJ1VpbnQzMkFycmF5Jyk7XG5pcy5mbG9hdDMyQXJyYXkgPSBpc09iamVjdE9mVHlwZSgnRmxvYXQzMkFycmF5Jyk7XG5pcy5mbG9hdDY0QXJyYXkgPSBpc09iamVjdE9mVHlwZSgnRmxvYXQ2NEFycmF5Jyk7XG5pcy5iaWdJbnQ2NEFycmF5ID0gaXNPYmplY3RPZlR5cGUoJ0JpZ0ludDY0QXJyYXknKTtcbmlzLmJpZ1VpbnQ2NEFycmF5ID0gaXNPYmplY3RPZlR5cGUoJ0JpZ1VpbnQ2NEFycmF5Jyk7XG5pcy5hcnJheUJ1ZmZlciA9IGlzT2JqZWN0T2ZUeXBlKCdBcnJheUJ1ZmZlcicpO1xuaXMuc2hhcmVkQXJyYXlCdWZmZXIgPSBpc09iamVjdE9mVHlwZSgnU2hhcmVkQXJyYXlCdWZmZXInKTtcbmlzLmRhdGFWaWV3ID0gaXNPYmplY3RPZlR5cGUoJ0RhdGFWaWV3Jyk7XG5pcy5kaXJlY3RJbnN0YW5jZU9mID0gKGluc3RhbmNlLCBjbGFzc18pID0+IE9iamVjdC5nZXRQcm90b3R5cGVPZihpbnN0YW5jZSkgPT09IGNsYXNzXy5wcm90b3R5cGU7XG5pcy51cmxJbnN0YW5jZSA9ICh2YWx1ZSkgPT4gaXNPYmplY3RPZlR5cGUoJ1VSTCcpKHZhbHVlKTtcbmlzLnVybFN0cmluZyA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICghaXMuc3RyaW5nKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIG5ldyBVUkwodmFsdWUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59O1xuLy8gVE9ETzogVXNlIHRoZSBgbm90YCBvcGVyYXRvciB3aXRoIGEgdHlwZSBndWFyZCBoZXJlIHdoZW4gaXQncyBhdmFpbGFibGUuXG4vLyBFeGFtcGxlOiBgaXMudHJ1dGh5ID0gKHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgKG5vdCBmYWxzZSB8IG5vdCAwIHwgbm90ICcnIHwgbm90IHVuZGVmaW5lZCB8IG5vdCBudWxsKSA9PiBCb29sZWFuKHZhbHVlKTtgXG5pcy50cnV0aHkgPSAodmFsdWUpID0+IEJvb2xlYW4odmFsdWUpO1xuLy8gRXhhbXBsZTogYGlzLmZhbHN5ID0gKHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgKG5vdCB0cnVlIHwgMCB8ICcnIHwgdW5kZWZpbmVkIHwgbnVsbCkgPT4gQm9vbGVhbih2YWx1ZSk7YFxuaXMuZmFsc3kgPSAodmFsdWUpID0+ICF2YWx1ZTtcbmlzLm5hbiA9ICh2YWx1ZSkgPT4gTnVtYmVyLmlzTmFOKHZhbHVlKTtcbmlzLnByaW1pdGl2ZSA9ICh2YWx1ZSkgPT4gaXMubnVsbF8odmFsdWUpIHx8IGlzUHJpbWl0aXZlVHlwZU5hbWUodHlwZW9mIHZhbHVlKTtcbmlzLmludGVnZXIgPSAodmFsdWUpID0+IE51bWJlci5pc0ludGVnZXIodmFsdWUpO1xuaXMuc2FmZUludGVnZXIgPSAodmFsdWUpID0+IE51bWJlci5pc1NhZmVJbnRlZ2VyKHZhbHVlKTtcbmlzLnBsYWluT2JqZWN0ID0gKHZhbHVlKSA9PiB7XG4gICAgLy8gRnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9pcy1wbGFpbi1vYmovYmxvYi9tYXN0ZXIvaW5kZXguanNcbiAgICBpZiAodG9TdHJpbmcuY2FsbCh2YWx1ZSkgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKTtcbiAgICByZXR1cm4gcHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHt9KTtcbn07XG5pcy50eXBlZEFycmF5ID0gKHZhbHVlKSA9PiBpc1R5cGVkQXJyYXlOYW1lKGdldE9iamVjdFR5cGUodmFsdWUpKTtcbmNvbnN0IGlzVmFsaWRMZW5ndGggPSAodmFsdWUpID0+IGlzLnNhZmVJbnRlZ2VyKHZhbHVlKSAmJiB2YWx1ZSA+PSAwO1xuaXMuYXJyYXlMaWtlID0gKHZhbHVlKSA9PiAhaXMubnVsbE9yVW5kZWZpbmVkKHZhbHVlKSAmJiAhaXMuZnVuY3Rpb25fKHZhbHVlKSAmJiBpc1ZhbGlkTGVuZ3RoKHZhbHVlLmxlbmd0aCk7XG5pcy5pblJhbmdlID0gKHZhbHVlLCByYW5nZSkgPT4ge1xuICAgIGlmIChpcy5udW1iZXIocmFuZ2UpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA+PSBNYXRoLm1pbigwLCByYW5nZSkgJiYgdmFsdWUgPD0gTWF0aC5tYXgocmFuZ2UsIDApO1xuICAgIH1cbiAgICBpZiAoaXMuYXJyYXkocmFuZ2UpICYmIHJhbmdlLmxlbmd0aCA9PT0gMikge1xuICAgICAgICByZXR1cm4gdmFsdWUgPj0gTWF0aC5taW4oLi4ucmFuZ2UpICYmIHZhbHVlIDw9IE1hdGgubWF4KC4uLnJhbmdlKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCByYW5nZTogJHtKU09OLnN0cmluZ2lmeShyYW5nZSl9YCk7XG59O1xuY29uc3QgTk9ERV9UWVBFX0VMRU1FTlQgPSAxO1xuY29uc3QgRE9NX1BST1BFUlRJRVNfVE9fQ0hFQ0sgPSBbXG4gICAgJ2lubmVySFRNTCcsXG4gICAgJ293bmVyRG9jdW1lbnQnLFxuICAgICdzdHlsZScsXG4gICAgJ2F0dHJpYnV0ZXMnLFxuICAgICdub2RlVmFsdWUnXG5dO1xuaXMuZG9tRWxlbWVudCA9ICh2YWx1ZSkgPT4ge1xuICAgIHJldHVybiBpcy5vYmplY3QodmFsdWUpICYmXG4gICAgICAgIHZhbHVlLm5vZGVUeXBlID09PSBOT0RFX1RZUEVfRUxFTUVOVCAmJlxuICAgICAgICBpcy5zdHJpbmcodmFsdWUubm9kZU5hbWUpICYmXG4gICAgICAgICFpcy5wbGFpbk9iamVjdCh2YWx1ZSkgJiZcbiAgICAgICAgRE9NX1BST1BFUlRJRVNfVE9fQ0hFQ0suZXZlcnkocHJvcGVydHkgPT4gcHJvcGVydHkgaW4gdmFsdWUpO1xufTtcbmlzLm9ic2VydmFibGUgPSAodmFsdWUpID0+IHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtZXh0ZW5kLW5hdGl2ZS9uby11c2UtZXh0ZW5kLW5hdGl2ZVxuICAgIGlmICh2YWx1ZSA9PT0gKChfYiA9IChfYSA9IHZhbHVlKVtTeW1ib2wub2JzZXJ2YWJsZV0pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hKSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gKChfZCA9IChfYyA9IHZhbHVlKVsnQEBvYnNlcnZhYmxlJ10pID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5jYWxsKF9jKSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG5pcy5ub2RlU3RyZWFtID0gKHZhbHVlKSA9PiBpcy5vYmplY3QodmFsdWUpICYmIGlzLmZ1bmN0aW9uXyh2YWx1ZS5waXBlKSAmJiAhaXMub2JzZXJ2YWJsZSh2YWx1ZSk7XG5pcy5pbmZpbml0ZSA9ICh2YWx1ZSkgPT4gdmFsdWUgPT09IEluZmluaXR5IHx8IHZhbHVlID09PSAtSW5maW5pdHk7XG5jb25zdCBpc0Fic29sdXRlTW9kMiA9IChyZW1haW5kZXIpID0+ICh2YWx1ZSkgPT4gaXMuaW50ZWdlcih2YWx1ZSkgJiYgTWF0aC5hYnModmFsdWUgJSAyKSA9PT0gcmVtYWluZGVyO1xuaXMuZXZlbkludGVnZXIgPSBpc0Fic29sdXRlTW9kMigwKTtcbmlzLm9kZEludGVnZXIgPSBpc0Fic29sdXRlTW9kMigxKTtcbmlzLmVtcHR5QXJyYXkgPSAodmFsdWUpID0+IGlzLmFycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDA7XG5pcy5ub25FbXB0eUFycmF5ID0gKHZhbHVlKSA9PiBpcy5hcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID4gMDtcbmlzLmVtcHR5U3RyaW5nID0gKHZhbHVlKSA9PiBpcy5zdHJpbmcodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMDtcbi8vIFRPRE86IFVzZSBgbm90ICcnYCB3aGVuIHRoZSBgbm90YCBvcGVyYXRvciBpcyBhdmFpbGFibGUuXG5pcy5ub25FbXB0eVN0cmluZyA9ICh2YWx1ZSkgPT4gaXMuc3RyaW5nKHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPiAwO1xuY29uc3QgaXNXaGl0ZVNwYWNlU3RyaW5nID0gKHZhbHVlKSA9PiBpcy5zdHJpbmcodmFsdWUpICYmICEvXFxTLy50ZXN0KHZhbHVlKTtcbmlzLmVtcHR5U3RyaW5nT3JXaGl0ZXNwYWNlID0gKHZhbHVlKSA9PiBpcy5lbXB0eVN0cmluZyh2YWx1ZSkgfHwgaXNXaGl0ZVNwYWNlU3RyaW5nKHZhbHVlKTtcbmlzLmVtcHR5T2JqZWN0ID0gKHZhbHVlKSA9PiBpcy5vYmplY3QodmFsdWUpICYmICFpcy5tYXAodmFsdWUpICYmICFpcy5zZXQodmFsdWUpICYmIE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4vLyBUT0RPOiBVc2UgYG5vdGAgb3BlcmF0b3IgaGVyZSB0byByZW1vdmUgYE1hcGAgYW5kIGBTZXRgIGZyb20gdHlwZSBndWFyZDpcbi8vIC0gaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0L3B1bGwvMjkzMTdcbmlzLm5vbkVtcHR5T2JqZWN0ID0gKHZhbHVlKSA9PiBpcy5vYmplY3QodmFsdWUpICYmICFpcy5tYXAodmFsdWUpICYmICFpcy5zZXQodmFsdWUpICYmIE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPiAwO1xuaXMuZW1wdHlTZXQgPSAodmFsdWUpID0+IGlzLnNldCh2YWx1ZSkgJiYgdmFsdWUuc2l6ZSA9PT0gMDtcbmlzLm5vbkVtcHR5U2V0ID0gKHZhbHVlKSA9PiBpcy5zZXQodmFsdWUpICYmIHZhbHVlLnNpemUgPiAwO1xuaXMuZW1wdHlNYXAgPSAodmFsdWUpID0+IGlzLm1hcCh2YWx1ZSkgJiYgdmFsdWUuc2l6ZSA9PT0gMDtcbmlzLm5vbkVtcHR5TWFwID0gKHZhbHVlKSA9PiBpcy5tYXAodmFsdWUpICYmIHZhbHVlLnNpemUgPiAwO1xuY29uc3QgcHJlZGljYXRlT25BcnJheSA9IChtZXRob2QsIHByZWRpY2F0ZSwgdmFsdWVzKSA9PiB7XG4gICAgaWYgKCFpcy5mdW5jdGlvbl8ocHJlZGljYXRlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIHByZWRpY2F0ZTogJHtKU09OLnN0cmluZ2lmeShwcmVkaWNhdGUpfWApO1xuICAgIH1cbiAgICBpZiAodmFsdWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG51bWJlciBvZiB2YWx1ZXMnKTtcbiAgICB9XG4gICAgcmV0dXJuIG1ldGhvZC5jYWxsKHZhbHVlcywgcHJlZGljYXRlKTtcbn07XG5pcy5hbnkgPSAocHJlZGljYXRlLCAuLi52YWx1ZXMpID0+IHtcbiAgICBjb25zdCBwcmVkaWNhdGVzID0gaXMuYXJyYXkocHJlZGljYXRlKSA/IHByZWRpY2F0ZSA6IFtwcmVkaWNhdGVdO1xuICAgIHJldHVybiBwcmVkaWNhdGVzLnNvbWUoc2luZ2xlUHJlZGljYXRlID0+IHByZWRpY2F0ZU9uQXJyYXkoQXJyYXkucHJvdG90eXBlLnNvbWUsIHNpbmdsZVByZWRpY2F0ZSwgdmFsdWVzKSk7XG59O1xuaXMuYWxsID0gKHByZWRpY2F0ZSwgLi4udmFsdWVzKSA9PiBwcmVkaWNhdGVPbkFycmF5KEFycmF5LnByb3RvdHlwZS5ldmVyeSwgcHJlZGljYXRlLCB2YWx1ZXMpO1xuY29uc3QgYXNzZXJ0VHlwZSA9IChjb25kaXRpb24sIGRlc2NyaXB0aW9uLCB2YWx1ZSkgPT4ge1xuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIHZhbHVlIHdoaWNoIGlzIFxcYCR7ZGVzY3JpcHRpb259XFxgLCByZWNlaXZlZCB2YWx1ZSBvZiB0eXBlIFxcYCR7aXModmFsdWUpfVxcYC5gKTtcbiAgICB9XG59O1xuZXhwb3J0cy5hc3NlcnQgPSB7XG4gICAgLy8gVW5rbm93bnMuXG4gICAgdW5kZWZpbmVkOiAodmFsdWUpID0+IGFzc2VydFR5cGUoaXMudW5kZWZpbmVkKHZhbHVlKSwgJ3VuZGVmaW5lZCcsIHZhbHVlKSxcbiAgICBzdHJpbmc6ICh2YWx1ZSkgPT4gYXNzZXJ0VHlwZShpcy5zdHJpbmcodmFsdWUpLCAnc3RyaW5nJywgdmFsdWUpLFxuICAgIG51bWJlcjogKHZhbHVlKSA9PiBhc3NlcnRUeXBlKGlzLm51bWJlcih2YWx1ZSksICdudW1iZXInLCB2YWx1ZSksXG4gICAgYmlnaW50OiAodmFsdWUpID0+IGFzc2VydFR5cGUoaXMuYmlnaW50KHZhbHVlKSwgJ2JpZ2ludCcsIHZhbHVlKSxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xuICAgIGZ1bmN0aW9uXzogKHZhbHVlKSA9PiBhc3NlcnRUeXBlKGlzLmZ1bmN0aW9uXyh2YWx1ZSksICdGdW5jdGlvbicsIHZhbHVlKSxcbiAgICBudWxsXzogKHZhbHVlKSA9PiBhc3NlcnRUeXBlKGlzLm51bGxfKHZhbHVlKSwgJ251bGwnLCB2YWx1ZSksXG4gICAgY2xhc3NfOiAodmFsdWUpID0+IGFzc2VydFR5cGUoaXMuY2xhc3NfKHZhbHVlKSwgXCJDbGFzc1wiIC8qIGNsYXNzXyAqLywgdmFsdWUpLFxuICAgIGJvb2xlYW46ICh2YWx1ZSkgPT4gYXNzZXJ0VHlwZShpcy5ib29sZWFuKHZhbHVlKSwgJ2Jvb2xlYW4nLCB2YWx1ZSksXG4gICAgc3ltYm9sOiAodmFsdWUpID0+IGFzc2VydFR5cGUoaXMuc3ltYm9sKHZhbHVlKSwgJ3N5bWJvbCcsIHZhbHVlKSxcbiAgICBudW1lcmljU3RyaW5nOiAodmFsdWUpID0+IGFzc2VydFR5cGUoaXMubnVtZXJpY1N0cmluZyh2YWx1ZSksIFwic3RyaW5nIHdpdGggYSBudW1iZXJcIiAvKiBudW1lcmljU3RyaW5nICovLCB2YWx1ZSksXG4gICAgYXJyYXk6ICh2YWx1ZSwgYXNzZXJ0aW9uKSA9PiB7XG4gICAgICAgIGNvbnN0IGFzc2VydCA9IGFzc2VydFR5cGU7XG4gICAgICAgIGFzc2VydChpcy5hcnJheSh2YWx1ZSksICdBcnJheScsIHZhbHVlKTtcbiAgICAgICAgaWYgKGFzc2VydGlvbikge1xuICAgICAgICAgICAgdmFsdWUuZm9yRWFjaChhc3NlcnRpb24pO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBidWZmZXI6ICh2YWx1ZSkgPT4gYXNzZXJ0VHlwZShpcy5idWZmZXIodmFsdWUpLCAnQnVmZmVyJywgdmFsdWUpLFxuICAgIG51bGxPclVuZGVmaW5lZDogKHZhbHVlKSA9PiBhc3NlcnRUeXBlKGlzLm51bGxPclVuZGVmaW5lZCh2YWx1ZSksIFwibnVsbCBvciB1bmRlZmluZWRcIiAvKiBudWxsT3JVbmRlZmluZWQgKi8sIHZhbHVlKSxcbiAgICBvYmplY3Q6ICh2YWx1ZSkgPT4gYXNzZXJ0VHlwZShpcy5vYmplY3QodmFsdWUpLCAnT2JqZWN0JywgdmFsdWUpLFxuICAgIGl0ZXJhYmxlOiAodmFsdWUpID0+IGFzc2VydFR5cGUoaXMuaXRlcmFibGUodmFsdWUpLCBcIkl0ZXJhYmxlXCIgLyogaXRlcmFibGUgKi8sIHZhbHVlKSxcbiAgICBhc3luY0l0ZXJhYmxlOiAodmFsdWUpID0+IGFzc2VydFR5cGUoaXMuYXN5bmNJdGVyYWJsZSh2YWx1ZSksIFwiQXN5bmNJdGVyYWJsZVwiIC8qIGFzeW5jSXRlcmFibGUgKi8sIHZhbHVlKSxcbiAgICBnZW5lcmF0b3I6ICh2YWx1ZSkgPT4gYXNzZXJ0VHlwZShpcy5nZW5lcmF0b3IodmFsdWUpLCAnR2VuZXJhdG9yJywgdmFsdWUpLFxuICAgIGFzeW5jR2VuZXJhdG9yOiAodmFsdWUpID0+IGFzc2VydFR5cGUoaXMuYXN5bmNHZW5lcmF0b3IodmFsdWUpLCAnQXN5bmNHZW5lcmF0b3InLCB2YWx1ZSksXG4gICAgbmF0aXZlUHJvbWlzZTogKHZhbHVlKSA9PiBhc3NlcnRUeXBlKGlzLm5hdGl2ZVByb21pc2UodmFsdWUpLCBcIm5hdGl2ZSBQcm9taXNlXCIgLyogbmF0aXZlUHJvbWlzZSAqLywgdmFsdWUpLFxuICAgIHByb21pc2U6ICh2YWx1ZSkgPT4gYXNzZXJ0VHlwZShpcy5wcm9taXNlKHZhbHVlKSwgJ1Byb21pc2UnLCB2YWx1ZSksXG4gICAgZ2VuZXJhdG9yRnVuY3Rpb246ICh2YWx1ZSkgPT4gYXNzZXJ0VHlwZShpcy5nZW5lcmF0b3JGdW5jdGlvbih2YWx1ZSksICdHZW5lcmF0b3JGdW5jdGlvbicsIHZhbHVlKSxcbiAgICBhc3luY0dlbmVyYXRvckZ1bmN0aW9uOiAodmFsdWUpID0+IGFzc2VydFR5cGUoaXMuYXN5bmNHZW5lcmF0b3JGdW5jdGlvbih2YWx1ZSksICdBc3luY0dlbmVyYXRvckZ1bmN0aW9uJywgdmFsdWUpLFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG4gICAgYXN5bmNGdW5jdGlvbjogKHZhbHVlKSA9PiBhc3NlcnRUeXBlKGlzLmFzeW5jRnVuY3Rpb24odmFsdWUpLCAnQXN5bmNGdW5jdGlvbicsIHZhbHVlKSxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xuICAgIGJvdW5kRnVuY3Rpb246ICh2YWx1ZSkgPT4gYXNzZXJ0VHlwZShpcy5ib3VuZEZ1bmN0aW9uKHZhbHVlKSwgJ0Z1bmN0aW9uJywgdmFsdWUpLFxuICAgIHJlZ0V4cDogKHZhbHVlKSA9PiBhc3NlcnRUeXBlKGlzLnJlZ0V4cCh2YWx1ZSksICdSZWdFeHAnLCB2YWx1ZSksXG4gICAgZGF0ZTogKHZhbHVlKSA9PiBhc3NlcnRUeXBlKGlzLmRhdGUodmFsdWUpLCAnRGF0ZScsIHZhbHVlKSxcbiAgICBlcnJvcjogKHZhbHVlKSA9PiBhc3NlcnRUeXBlKGlzLmVycm9yKHZhbHVlKSwgJ0Vycm9yJywgdmFsdWUpLFxuICAgIG1hcDogKHZhbHVlKSA9PiBhc3NlcnRUeXBlKGlzLm1hcCh2YWx1ZSksICdNYXAnLCB2YWx1ZSksXG4gICAgc2V0OiAodmFsdWUpID0+IGFzc2VydFR5cGUoaXMuc2V0KHZhbHVlKSwgJ1NldCcsIHZhbHVlKSxcbiAgICB3ZWFrTWFwOiAodmFsdWUpID0+IGFzc2VydFR5cGUoaXMud2Vha01hcCh2YWx1ZSksICdXZWFrTWFwJywgdmFsdWUpLFxuICAgIHdlYWtTZXQ6ICh2YWx1ZSkgPT4gYXNzZXJ0VHlwZShpcy53ZWFrU2V0KHZhbHVlKSwgJ1dlYWtTZXQnLCB2YWx1ZSksXG4gICAgaW50OEFycmF5OiAodmFsdWUpID0+IGFzc2VydFR5cGUoaXMuaW50OEFycmF5KHZhbHVlKSwgJ0ludDhBcnJheScsIHZhbHVlKSxcbiAgICB1aW50OEFycmF5OiAodmFsdWUpID0+IGFzc2VydFR5cGUoaXMudWludDhBcnJheSh2YWx1ZSksICdVaW50OEFycmF5JywgdmFsdWUpLFxuICAgIHVpbnQ4Q2xhbXBlZEFycmF5OiAodmFsdWUpID0+IGFzc2VydFR5cGUoaXMudWludDhDbGFtcGVkQXJyYXkodmFsdWUpLCAnVWludDhDbGFtcGVkQXJyYXknLCB2YWx1ZSksXG4gICAgaW50MTZBcnJheTogKHZhbHVlKSA9PiBhc3NlcnRUeXBlKGlzLmludDE2QXJyYXkodmFsdWUpLCAnSW50MTZBcnJheScsIHZhbHVlKSxcbiAgICB1aW50MTZBcnJheTogKHZhbHVlKSA9PiBhc3NlcnRUeXBlKGlzLnVpbnQxNkFycmF5KHZhbHVlKSwgJ1VpbnQxNkFycmF5JywgdmFsdWUpLFxuICAgIGludDMyQXJyYXk6ICh2YWx1ZSkgPT4gYXNzZXJ0VHlwZShpcy5pbnQzMkFycmF5KHZhbHVlKSwgJ0ludDMyQXJyYXknLCB2YWx1ZSksXG4gICAgdWludDMyQXJyYXk6ICh2YWx1ZSkgPT4gYXNzZXJ0VHlwZShpcy51aW50MzJBcnJheSh2YWx1ZSksICdVaW50MzJBcnJheScsIHZhbHVlKSxcbiAgICBmbG9hdDMyQXJyYXk6ICh2YWx1ZSkgPT4gYXNzZXJ0VHlwZShpcy5mbG9hdDMyQXJyYXkodmFsdWUpLCAnRmxvYXQzMkFycmF5JywgdmFsdWUpLFxuICAgIGZsb2F0NjRBcnJheTogKHZhbHVlKSA9PiBhc3NlcnRUeXBlKGlzLmZsb2F0NjRBcnJheSh2YWx1ZSksICdGbG9hdDY0QXJyYXknLCB2YWx1ZSksXG4gICAgYmlnSW50NjRBcnJheTogKHZhbHVlKSA9PiBhc3NlcnRUeXBlKGlzLmJpZ0ludDY0QXJyYXkodmFsdWUpLCAnQmlnSW50NjRBcnJheScsIHZhbHVlKSxcbiAgICBiaWdVaW50NjRBcnJheTogKHZhbHVlKSA9PiBhc3NlcnRUeXBlKGlzLmJpZ1VpbnQ2NEFycmF5KHZhbHVlKSwgJ0JpZ1VpbnQ2NEFycmF5JywgdmFsdWUpLFxuICAgIGFycmF5QnVmZmVyOiAodmFsdWUpID0+IGFzc2VydFR5cGUoaXMuYXJyYXlCdWZmZXIodmFsdWUpLCAnQXJyYXlCdWZmZXInLCB2YWx1ZSksXG4gICAgc2hhcmVkQXJyYXlCdWZmZXI6ICh2YWx1ZSkgPT4gYXNzZXJ0VHlwZShpcy5zaGFyZWRBcnJheUJ1ZmZlcih2YWx1ZSksICdTaGFyZWRBcnJheUJ1ZmZlcicsIHZhbHVlKSxcbiAgICBkYXRhVmlldzogKHZhbHVlKSA9PiBhc3NlcnRUeXBlKGlzLmRhdGFWaWV3KHZhbHVlKSwgJ0RhdGFWaWV3JywgdmFsdWUpLFxuICAgIHVybEluc3RhbmNlOiAodmFsdWUpID0+IGFzc2VydFR5cGUoaXMudXJsSW5zdGFuY2UodmFsdWUpLCAnVVJMJywgdmFsdWUpLFxuICAgIHVybFN0cmluZzogKHZhbHVlKSA9PiBhc3NlcnRUeXBlKGlzLnVybFN0cmluZyh2YWx1ZSksIFwic3RyaW5nIHdpdGggYSBVUkxcIiAvKiB1cmxTdHJpbmcgKi8sIHZhbHVlKSxcbiAgICB0cnV0aHk6ICh2YWx1ZSkgPT4gYXNzZXJ0VHlwZShpcy50cnV0aHkodmFsdWUpLCBcInRydXRoeVwiIC8qIHRydXRoeSAqLywgdmFsdWUpLFxuICAgIGZhbHN5OiAodmFsdWUpID0+IGFzc2VydFR5cGUoaXMuZmFsc3kodmFsdWUpLCBcImZhbHN5XCIgLyogZmFsc3kgKi8sIHZhbHVlKSxcbiAgICBuYW46ICh2YWx1ZSkgPT4gYXNzZXJ0VHlwZShpcy5uYW4odmFsdWUpLCBcIk5hTlwiIC8qIG5hbiAqLywgdmFsdWUpLFxuICAgIHByaW1pdGl2ZTogKHZhbHVlKSA9PiBhc3NlcnRUeXBlKGlzLnByaW1pdGl2ZSh2YWx1ZSksIFwicHJpbWl0aXZlXCIgLyogcHJpbWl0aXZlICovLCB2YWx1ZSksXG4gICAgaW50ZWdlcjogKHZhbHVlKSA9PiBhc3NlcnRUeXBlKGlzLmludGVnZXIodmFsdWUpLCBcImludGVnZXJcIiAvKiBpbnRlZ2VyICovLCB2YWx1ZSksXG4gICAgc2FmZUludGVnZXI6ICh2YWx1ZSkgPT4gYXNzZXJ0VHlwZShpcy5zYWZlSW50ZWdlcih2YWx1ZSksIFwiaW50ZWdlclwiIC8qIHNhZmVJbnRlZ2VyICovLCB2YWx1ZSksXG4gICAgcGxhaW5PYmplY3Q6ICh2YWx1ZSkgPT4gYXNzZXJ0VHlwZShpcy5wbGFpbk9iamVjdCh2YWx1ZSksIFwicGxhaW4gb2JqZWN0XCIgLyogcGxhaW5PYmplY3QgKi8sIHZhbHVlKSxcbiAgICB0eXBlZEFycmF5OiAodmFsdWUpID0+IGFzc2VydFR5cGUoaXMudHlwZWRBcnJheSh2YWx1ZSksIFwiVHlwZWRBcnJheVwiIC8qIHR5cGVkQXJyYXkgKi8sIHZhbHVlKSxcbiAgICBhcnJheUxpa2U6ICh2YWx1ZSkgPT4gYXNzZXJ0VHlwZShpcy5hcnJheUxpa2UodmFsdWUpLCBcImFycmF5LWxpa2VcIiAvKiBhcnJheUxpa2UgKi8sIHZhbHVlKSxcbiAgICBkb21FbGVtZW50OiAodmFsdWUpID0+IGFzc2VydFR5cGUoaXMuZG9tRWxlbWVudCh2YWx1ZSksIFwiSFRNTEVsZW1lbnRcIiAvKiBkb21FbGVtZW50ICovLCB2YWx1ZSksXG4gICAgb2JzZXJ2YWJsZTogKHZhbHVlKSA9PiBhc3NlcnRUeXBlKGlzLm9ic2VydmFibGUodmFsdWUpLCAnT2JzZXJ2YWJsZScsIHZhbHVlKSxcbiAgICBub2RlU3RyZWFtOiAodmFsdWUpID0+IGFzc2VydFR5cGUoaXMubm9kZVN0cmVhbSh2YWx1ZSksIFwiTm9kZS5qcyBTdHJlYW1cIiAvKiBub2RlU3RyZWFtICovLCB2YWx1ZSksXG4gICAgaW5maW5pdGU6ICh2YWx1ZSkgPT4gYXNzZXJ0VHlwZShpcy5pbmZpbml0ZSh2YWx1ZSksIFwiaW5maW5pdGUgbnVtYmVyXCIgLyogaW5maW5pdGUgKi8sIHZhbHVlKSxcbiAgICBlbXB0eUFycmF5OiAodmFsdWUpID0+IGFzc2VydFR5cGUoaXMuZW1wdHlBcnJheSh2YWx1ZSksIFwiZW1wdHkgYXJyYXlcIiAvKiBlbXB0eUFycmF5ICovLCB2YWx1ZSksXG4gICAgbm9uRW1wdHlBcnJheTogKHZhbHVlKSA9PiBhc3NlcnRUeXBlKGlzLm5vbkVtcHR5QXJyYXkodmFsdWUpLCBcIm5vbi1lbXB0eSBhcnJheVwiIC8qIG5vbkVtcHR5QXJyYXkgKi8sIHZhbHVlKSxcbiAgICBlbXB0eVN0cmluZzogKHZhbHVlKSA9PiBhc3NlcnRUeXBlKGlzLmVtcHR5U3RyaW5nKHZhbHVlKSwgXCJlbXB0eSBzdHJpbmdcIiAvKiBlbXB0eVN0cmluZyAqLywgdmFsdWUpLFxuICAgIG5vbkVtcHR5U3RyaW5nOiAodmFsdWUpID0+IGFzc2VydFR5cGUoaXMubm9uRW1wdHlTdHJpbmcodmFsdWUpLCBcIm5vbi1lbXB0eSBzdHJpbmdcIiAvKiBub25FbXB0eVN0cmluZyAqLywgdmFsdWUpLFxuICAgIGVtcHR5U3RyaW5nT3JXaGl0ZXNwYWNlOiAodmFsdWUpID0+IGFzc2VydFR5cGUoaXMuZW1wdHlTdHJpbmdPcldoaXRlc3BhY2UodmFsdWUpLCBcImVtcHR5IHN0cmluZyBvciB3aGl0ZXNwYWNlXCIgLyogZW1wdHlTdHJpbmdPcldoaXRlc3BhY2UgKi8sIHZhbHVlKSxcbiAgICBlbXB0eU9iamVjdDogKHZhbHVlKSA9PiBhc3NlcnRUeXBlKGlzLmVtcHR5T2JqZWN0KHZhbHVlKSwgXCJlbXB0eSBvYmplY3RcIiAvKiBlbXB0eU9iamVjdCAqLywgdmFsdWUpLFxuICAgIG5vbkVtcHR5T2JqZWN0OiAodmFsdWUpID0+IGFzc2VydFR5cGUoaXMubm9uRW1wdHlPYmplY3QodmFsdWUpLCBcIm5vbi1lbXB0eSBvYmplY3RcIiAvKiBub25FbXB0eU9iamVjdCAqLywgdmFsdWUpLFxuICAgIGVtcHR5U2V0OiAodmFsdWUpID0+IGFzc2VydFR5cGUoaXMuZW1wdHlTZXQodmFsdWUpLCBcImVtcHR5IHNldFwiIC8qIGVtcHR5U2V0ICovLCB2YWx1ZSksXG4gICAgbm9uRW1wdHlTZXQ6ICh2YWx1ZSkgPT4gYXNzZXJ0VHlwZShpcy5ub25FbXB0eVNldCh2YWx1ZSksIFwibm9uLWVtcHR5IHNldFwiIC8qIG5vbkVtcHR5U2V0ICovLCB2YWx1ZSksXG4gICAgZW1wdHlNYXA6ICh2YWx1ZSkgPT4gYXNzZXJ0VHlwZShpcy5lbXB0eU1hcCh2YWx1ZSksIFwiZW1wdHkgbWFwXCIgLyogZW1wdHlNYXAgKi8sIHZhbHVlKSxcbiAgICBub25FbXB0eU1hcDogKHZhbHVlKSA9PiBhc3NlcnRUeXBlKGlzLm5vbkVtcHR5TWFwKHZhbHVlKSwgXCJub24tZW1wdHkgbWFwXCIgLyogbm9uRW1wdHlNYXAgKi8sIHZhbHVlKSxcbiAgICAvLyBOdW1iZXJzLlxuICAgIGV2ZW5JbnRlZ2VyOiAodmFsdWUpID0+IGFzc2VydFR5cGUoaXMuZXZlbkludGVnZXIodmFsdWUpLCBcImV2ZW4gaW50ZWdlclwiIC8qIGV2ZW5JbnRlZ2VyICovLCB2YWx1ZSksXG4gICAgb2RkSW50ZWdlcjogKHZhbHVlKSA9PiBhc3NlcnRUeXBlKGlzLm9kZEludGVnZXIodmFsdWUpLCBcIm9kZCBpbnRlZ2VyXCIgLyogb2RkSW50ZWdlciAqLywgdmFsdWUpLFxuICAgIC8vIFR3byBhcmd1bWVudHMuXG4gICAgZGlyZWN0SW5zdGFuY2VPZjogKGluc3RhbmNlLCBjbGFzc18pID0+IGFzc2VydFR5cGUoaXMuZGlyZWN0SW5zdGFuY2VPZihpbnN0YW5jZSwgY2xhc3NfKSwgXCJUXCIgLyogZGlyZWN0SW5zdGFuY2VPZiAqLywgaW5zdGFuY2UpLFxuICAgIGluUmFuZ2U6ICh2YWx1ZSwgcmFuZ2UpID0+IGFzc2VydFR5cGUoaXMuaW5SYW5nZSh2YWx1ZSwgcmFuZ2UpLCBcImluIHJhbmdlXCIgLyogaW5SYW5nZSAqLywgdmFsdWUpLFxuICAgIC8vIFZhcmlhZGljIGZ1bmN0aW9ucy5cbiAgICBhbnk6IChwcmVkaWNhdGUsIC4uLnZhbHVlcykgPT4gYXNzZXJ0VHlwZShpcy5hbnkocHJlZGljYXRlLCAuLi52YWx1ZXMpLCBcInByZWRpY2F0ZSByZXR1cm5zIHRydXRoeSBmb3IgYW55IHZhbHVlXCIgLyogYW55ICovLCB2YWx1ZXMpLFxuICAgIGFsbDogKHByZWRpY2F0ZSwgLi4udmFsdWVzKSA9PiBhc3NlcnRUeXBlKGlzLmFsbChwcmVkaWNhdGUsIC4uLnZhbHVlcyksIFwicHJlZGljYXRlIHJldHVybnMgdHJ1dGh5IGZvciBhbGwgdmFsdWVzXCIgLyogYWxsICovLCB2YWx1ZXMpXG59O1xuLy8gU29tZSBmZXcga2V5d29yZHMgYXJlIHJlc2VydmVkLCBidXQgd2UnbGwgcG9wdWxhdGUgdGhlbSBmb3IgTm9kZS5qcyB1c2Vyc1xuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMjUzNlxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoaXMsIHtcbiAgICBjbGFzczoge1xuICAgICAgICB2YWx1ZTogaXMuY2xhc3NfXG4gICAgfSxcbiAgICBmdW5jdGlvbjoge1xuICAgICAgICB2YWx1ZTogaXMuZnVuY3Rpb25fXG4gICAgfSxcbiAgICBudWxsOiB7XG4gICAgICAgIHZhbHVlOiBpcy5udWxsX1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZXhwb3J0cy5hc3NlcnQsIHtcbiAgICBjbGFzczoge1xuICAgICAgICB2YWx1ZTogZXhwb3J0cy5hc3NlcnQuY2xhc3NfXG4gICAgfSxcbiAgICBmdW5jdGlvbjoge1xuICAgICAgICB2YWx1ZTogZXhwb3J0cy5hc3NlcnQuZnVuY3Rpb25fXG4gICAgfSxcbiAgICBudWxsOiB7XG4gICAgICAgIHZhbHVlOiBleHBvcnRzLmFzc2VydC5udWxsX1xuICAgIH1cbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXM7XG4vLyBGb3IgQ29tbW9uSlMgZGVmYXVsdCBleHBvcnQgc3VwcG9ydFxubW9kdWxlLmV4cG9ydHMgPSBpcztcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBpcztcbm1vZHVsZS5leHBvcnRzLmFzc2VydCA9IGV4cG9ydHMuYXNzZXJ0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBkZWZlcl90b19jb25uZWN0XzEgPSByZXF1aXJlKFwiZGVmZXItdG8tY29ubmVjdFwiKTtcbmNvbnN0IG5vZGVqc01ham9yVmVyc2lvbiA9IE51bWJlcihwcm9jZXNzLnZlcnNpb25zLm5vZGUuc3BsaXQoJy4nKVswXSk7XG5jb25zdCB0aW1lciA9IChyZXF1ZXN0KSA9PiB7XG4gICAgY29uc3QgdGltaW5ncyA9IHtcbiAgICAgICAgc3RhcnQ6IERhdGUubm93KCksXG4gICAgICAgIHNvY2tldDogdW5kZWZpbmVkLFxuICAgICAgICBsb29rdXA6IHVuZGVmaW5lZCxcbiAgICAgICAgY29ubmVjdDogdW5kZWZpbmVkLFxuICAgICAgICBzZWN1cmVDb25uZWN0OiB1bmRlZmluZWQsXG4gICAgICAgIHVwbG9hZDogdW5kZWZpbmVkLFxuICAgICAgICByZXNwb25zZTogdW5kZWZpbmVkLFxuICAgICAgICBlbmQ6IHVuZGVmaW5lZCxcbiAgICAgICAgZXJyb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgYWJvcnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgcGhhc2VzOiB7XG4gICAgICAgICAgICB3YWl0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBkbnM6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHRjcDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgdGxzOiB1bmRlZmluZWQsXG4gICAgICAgICAgICByZXF1ZXN0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBmaXJzdEJ5dGU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGRvd25sb2FkOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB0b3RhbDogdW5kZWZpbmVkXG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJlcXVlc3QudGltaW5ncyA9IHRpbWluZ3M7XG4gICAgY29uc3QgaGFuZGxlRXJyb3IgPSAob3JpZ2luKSA9PiB7XG4gICAgICAgIGNvbnN0IGVtaXQgPSBvcmlnaW4uZW1pdC5iaW5kKG9yaWdpbik7XG4gICAgICAgIG9yaWdpbi5lbWl0ID0gKGV2ZW50LCAuLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAvLyBDYXRjaGVzIHRoZSBgZXJyb3JgIGV2ZW50XG4gICAgICAgICAgICBpZiAoZXZlbnQgPT09ICdlcnJvcicpIHtcbiAgICAgICAgICAgICAgICB0aW1pbmdzLmVycm9yID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICB0aW1pbmdzLnBoYXNlcy50b3RhbCA9IHRpbWluZ3MuZXJyb3IgLSB0aW1pbmdzLnN0YXJ0O1xuICAgICAgICAgICAgICAgIG9yaWdpbi5lbWl0ID0gZW1pdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFNhdmVzIHRoZSBvcmlnaW5hbCBiZWhhdmlvclxuICAgICAgICAgICAgcmV0dXJuIGVtaXQoZXZlbnQsIC4uLmFyZ3MpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgaGFuZGxlRXJyb3IocmVxdWVzdCk7XG4gICAgcmVxdWVzdC5wcmVwZW5kT25jZUxpc3RlbmVyKCdhYm9ydCcsICgpID0+IHtcbiAgICAgICAgdGltaW5ncy5hYm9ydCA9IERhdGUubm93KCk7XG4gICAgICAgIC8vIExldCB0aGUgYGVuZGAgcmVzcG9uc2UgZXZlbnQgYmUgcmVzcG9uc2libGUgZm9yIHNldHRpbmcgdGhlIHRvdGFsIHBoYXNlLFxuICAgICAgICAvLyB1bmxlc3MgdGhlIE5vZGUuanMgbWFqb3IgdmVyc2lvbiBpcyA+PSAxMy5cbiAgICAgICAgaWYgKCF0aW1pbmdzLnJlc3BvbnNlIHx8IG5vZGVqc01ham9yVmVyc2lvbiA+PSAxMykge1xuICAgICAgICAgICAgdGltaW5ncy5waGFzZXMudG90YWwgPSBEYXRlLm5vdygpIC0gdGltaW5ncy5zdGFydDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IG9uU29ja2V0ID0gKHNvY2tldCkgPT4ge1xuICAgICAgICB0aW1pbmdzLnNvY2tldCA9IERhdGUubm93KCk7XG4gICAgICAgIHRpbWluZ3MucGhhc2VzLndhaXQgPSB0aW1pbmdzLnNvY2tldCAtIHRpbWluZ3Muc3RhcnQ7XG4gICAgICAgIGNvbnN0IGxvb2t1cExpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgICAgICAgdGltaW5ncy5sb29rdXAgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgdGltaW5ncy5waGFzZXMuZG5zID0gdGltaW5ncy5sb29rdXAgLSB0aW1pbmdzLnNvY2tldDtcbiAgICAgICAgfTtcbiAgICAgICAgc29ja2V0LnByZXBlbmRPbmNlTGlzdGVuZXIoJ2xvb2t1cCcsIGxvb2t1cExpc3RlbmVyKTtcbiAgICAgICAgZGVmZXJfdG9fY29ubmVjdF8xLmRlZmF1bHQoc29ja2V0LCB7XG4gICAgICAgICAgICBjb25uZWN0OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGltaW5ncy5jb25uZWN0ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICBpZiAodGltaW5ncy5sb29rdXAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBzb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ2xvb2t1cCcsIGxvb2t1cExpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgdGltaW5ncy5sb29rdXAgPSB0aW1pbmdzLmNvbm5lY3Q7XG4gICAgICAgICAgICAgICAgICAgIHRpbWluZ3MucGhhc2VzLmRucyA9IHRpbWluZ3MubG9va3VwIC0gdGltaW5ncy5zb2NrZXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRpbWluZ3MucGhhc2VzLnRjcCA9IHRpbWluZ3MuY29ubmVjdCAtIHRpbWluZ3MubG9va3VwO1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgY2FsbGJhY2sgaXMgY2FsbGVkIGJlZm9yZSBmbHVzaGluZyBhbnkgZGF0YSxcbiAgICAgICAgICAgICAgICAvLyBzbyB3ZSBkb24ndCBuZWVkIHRvIHNldCBgdGltaW5ncy5waGFzZXMucmVxdWVzdGAgaGVyZS5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZWN1cmVDb25uZWN0OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGltaW5ncy5zZWN1cmVDb25uZWN0ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICB0aW1pbmdzLnBoYXNlcy50bHMgPSB0aW1pbmdzLnNlY3VyZUNvbm5lY3QgLSB0aW1pbmdzLmNvbm5lY3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKHJlcXVlc3Quc29ja2V0KSB7XG4gICAgICAgIG9uU29ja2V0KHJlcXVlc3Quc29ja2V0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlcXVlc3QucHJlcGVuZE9uY2VMaXN0ZW5lcignc29ja2V0Jywgb25Tb2NrZXQpO1xuICAgIH1cbiAgICBjb25zdCBvblVwbG9hZCA9ICgpID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aW1pbmdzLnVwbG9hZCA9IERhdGUubm93KCk7XG4gICAgICAgIHRpbWluZ3MucGhhc2VzLnJlcXVlc3QgPSB0aW1pbmdzLnVwbG9hZCAtIChfYSA9IHRpbWluZ3Muc2VjdXJlQ29ubmVjdCwgKF9hICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRpbWluZ3MuY29ubmVjdCkpO1xuICAgIH07XG4gICAgY29uc3Qgd3JpdGFibGVGaW5pc2hlZCA9ICgpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0LndyaXRhYmxlRmluaXNoZWQgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3Qud3JpdGFibGVGaW5pc2hlZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBOb2RlLmpzIGRvZXNuJ3QgaGF2ZSBgcmVxdWVzdC53cml0YWJsZUZpbmlzaGVkYCBwcm9wZXJ0eVxuICAgICAgICByZXR1cm4gcmVxdWVzdC5maW5pc2hlZCAmJiByZXF1ZXN0Lm91dHB1dFNpemUgPT09IDAgJiYgKCFyZXF1ZXN0LnNvY2tldCB8fCByZXF1ZXN0LnNvY2tldC53cml0YWJsZUxlbmd0aCA9PT0gMCk7XG4gICAgfTtcbiAgICBpZiAod3JpdGFibGVGaW5pc2hlZCgpKSB7XG4gICAgICAgIG9uVXBsb2FkKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXF1ZXN0LnByZXBlbmRPbmNlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uVXBsb2FkKTtcbiAgICB9XG4gICAgcmVxdWVzdC5wcmVwZW5kT25jZUxpc3RlbmVyKCdyZXNwb25zZScsIChyZXNwb25zZSkgPT4ge1xuICAgICAgICB0aW1pbmdzLnJlc3BvbnNlID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdGltaW5ncy5waGFzZXMuZmlyc3RCeXRlID0gdGltaW5ncy5yZXNwb25zZSAtIHRpbWluZ3MudXBsb2FkO1xuICAgICAgICByZXNwb25zZS50aW1pbmdzID0gdGltaW5ncztcbiAgICAgICAgaGFuZGxlRXJyb3IocmVzcG9uc2UpO1xuICAgICAgICByZXNwb25zZS5wcmVwZW5kT25jZUxpc3RlbmVyKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aW1pbmdzLmVuZCA9IERhdGUubm93KCk7XG4gICAgICAgICAgICB0aW1pbmdzLnBoYXNlcy5kb3dubG9hZCA9IHRpbWluZ3MuZW5kIC0gdGltaW5ncy5yZXNwb25zZTtcbiAgICAgICAgICAgIHRpbWluZ3MucGhhc2VzLnRvdGFsID0gdGltaW5ncy5lbmQgLSB0aW1pbmdzLnN0YXJ0O1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGltaW5ncztcbn07XG5leHBvcnRzLmRlZmF1bHQgPSB0aW1lcjtcbi8vIEZvciBDb21tb25KUyBkZWZhdWx0IGV4cG9ydCBzdXBwb3J0XG5tb2R1bGUuZXhwb3J0cyA9IHRpbWVyO1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IHRpbWVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuY29uc3Qge1xuXHRWNE1BUFBFRCxcblx0QUREUkNPTkZJRyxcblx0QUxMLFxuXHRwcm9taXNlczoge1xuXHRcdFJlc29sdmVyOiBBc3luY1Jlc29sdmVyXG5cdH0sXG5cdGxvb2t1cDogZG5zTG9va3VwXG59ID0gcmVxdWlyZSgnZG5zJyk7XG5jb25zdCB7cHJvbWlzaWZ5fSA9IHJlcXVpcmUoJ3V0aWwnKTtcbmNvbnN0IG9zID0gcmVxdWlyZSgnb3MnKTtcblxuY29uc3Qga0NhY2hlYWJsZUxvb2t1cENyZWF0ZUNvbm5lY3Rpb24gPSBTeW1ib2woJ2NhY2hlYWJsZUxvb2t1cENyZWF0ZUNvbm5lY3Rpb24nKTtcbmNvbnN0IGtDYWNoZWFibGVMb29rdXBJbnN0YW5jZSA9IFN5bWJvbCgnY2FjaGVhYmxlTG9va3VwSW5zdGFuY2UnKTtcbmNvbnN0IGtFeHBpcmVzID0gU3ltYm9sKCdleHBpcmVzJyk7XG5cbmNvbnN0IHN1cHBvcnRzQUxMID0gdHlwZW9mIEFMTCA9PT0gJ251bWJlcic7XG5cbmNvbnN0IHZlcmlmeUFnZW50ID0gYWdlbnQgPT4ge1xuXHRpZiAoIShhZ2VudCAmJiB0eXBlb2YgYWdlbnQuY3JlYXRlQ29ubmVjdGlvbiA9PT0gJ2Z1bmN0aW9uJykpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGFuIEFnZW50IGluc3RhbmNlIGFzIHRoZSBmaXJzdCBhcmd1bWVudCcpO1xuXHR9XG59O1xuXG5jb25zdCBtYXA0dG82ID0gZW50cmllcyA9PiB7XG5cdGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuXHRcdGlmIChlbnRyeS5mYW1pbHkgPT09IDYpIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGVudHJ5LmFkZHJlc3MgPSBgOjpmZmZmOiR7ZW50cnkuYWRkcmVzc31gO1xuXHRcdGVudHJ5LmZhbWlseSA9IDY7XG5cdH1cbn07XG5cbmNvbnN0IGdldElmYWNlSW5mbyA9ICgpID0+IHtcblx0bGV0IGhhczQgPSBmYWxzZTtcblx0bGV0IGhhczYgPSBmYWxzZTtcblxuXHRmb3IgKGNvbnN0IGRldmljZSBvZiBPYmplY3QudmFsdWVzKG9zLm5ldHdvcmtJbnRlcmZhY2VzKCkpKSB7XG5cdFx0Zm9yIChjb25zdCBpZmFjZSBvZiBkZXZpY2UpIHtcblx0XHRcdGlmIChpZmFjZS5pbnRlcm5hbCkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGlmYWNlLmZhbWlseSA9PT0gJ0lQdjYnKSB7XG5cdFx0XHRcdGhhczYgPSB0cnVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFzNCA9IHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChoYXM0ICYmIGhhczYpIHtcblx0XHRcdFx0cmV0dXJuIHtoYXM0LCBoYXM2fTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4ge2hhczQsIGhhczZ9O1xufTtcblxuY29uc3QgaXNJdGVyYWJsZSA9IG1hcCA9PiB7XG5cdHJldHVybiBTeW1ib2wuaXRlcmF0b3IgaW4gbWFwO1xufTtcblxuY29uc3QgdHRsID0ge3R0bDogdHJ1ZX07XG5jb25zdCBhbGwgPSB7YWxsOiB0cnVlfTtcblxuY2xhc3MgQ2FjaGVhYmxlTG9va3VwIHtcblx0Y29uc3RydWN0b3Ioe1xuXHRcdGNhY2hlID0gbmV3IE1hcCgpLFxuXHRcdG1heFR0bCA9IEluZmluaXR5LFxuXHRcdGZhbGxiYWNrRHVyYXRpb24gPSAzNjAwLFxuXHRcdGVycm9yVHRsID0gMC4xNSxcblx0XHRyZXNvbHZlciA9IG5ldyBBc3luY1Jlc29sdmVyKCksXG5cdFx0bG9va3VwID0gZG5zTG9va3VwXG5cdH0gPSB7fSkge1xuXHRcdHRoaXMubWF4VHRsID0gbWF4VHRsO1xuXHRcdHRoaXMuZXJyb3JUdGwgPSBlcnJvclR0bDtcblxuXHRcdHRoaXMuX2NhY2hlID0gY2FjaGU7XG5cdFx0dGhpcy5fcmVzb2x2ZXIgPSByZXNvbHZlcjtcblx0XHR0aGlzLl9kbnNMb29rdXAgPSBwcm9taXNpZnkobG9va3VwKTtcblxuXHRcdGlmICh0aGlzLl9yZXNvbHZlciBpbnN0YW5jZW9mIEFzeW5jUmVzb2x2ZXIpIHtcblx0XHRcdHRoaXMuX3Jlc29sdmU0ID0gdGhpcy5fcmVzb2x2ZXIucmVzb2x2ZTQuYmluZCh0aGlzLl9yZXNvbHZlcik7XG5cdFx0XHR0aGlzLl9yZXNvbHZlNiA9IHRoaXMuX3Jlc29sdmVyLnJlc29sdmU2LmJpbmQodGhpcy5fcmVzb2x2ZXIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9yZXNvbHZlNCA9IHByb21pc2lmeSh0aGlzLl9yZXNvbHZlci5yZXNvbHZlNC5iaW5kKHRoaXMuX3Jlc29sdmVyKSk7XG5cdFx0XHR0aGlzLl9yZXNvbHZlNiA9IHByb21pc2lmeSh0aGlzLl9yZXNvbHZlci5yZXNvbHZlNi5iaW5kKHRoaXMuX3Jlc29sdmVyKSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5faWZhY2UgPSBnZXRJZmFjZUluZm8oKTtcblxuXHRcdHRoaXMuX3BlbmRpbmcgPSB7fTtcblx0XHR0aGlzLl9uZXh0UmVtb3ZhbFRpbWUgPSBmYWxzZTtcblx0XHR0aGlzLl9ob3N0bmFtZXNUb0ZhbGxiYWNrID0gbmV3IFNldCgpO1xuXG5cdFx0aWYgKGZhbGxiYWNrRHVyYXRpb24gPCAxKSB7XG5cdFx0XHR0aGlzLl9mYWxsYmFjayA9IGZhbHNlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9mYWxsYmFjayA9IHRydWU7XG5cblx0XHRcdGNvbnN0IGludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdFx0XHR0aGlzLl9ob3N0bmFtZXNUb0ZhbGxiYWNrLmNsZWFyKCk7XG5cdFx0XHR9LCBmYWxsYmFja0R1cmF0aW9uICogMTAwMCk7XG5cblx0XHRcdC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBUaGVyZSBpcyBubyBgaW50ZXJ2YWwudW5yZWYoKWAgd2hlbiBydW5uaW5nIGluc2lkZSBhbiBFbGVjdHJvbiByZW5kZXJlciAqL1xuXHRcdFx0aWYgKGludGVydmFsLnVucmVmKSB7XG5cdFx0XHRcdGludGVydmFsLnVucmVmKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5sb29rdXAgPSB0aGlzLmxvb2t1cC5iaW5kKHRoaXMpO1xuXHRcdHRoaXMubG9va3VwQXN5bmMgPSB0aGlzLmxvb2t1cEFzeW5jLmJpbmQodGhpcyk7XG5cdH1cblxuXHRzZXQgc2VydmVycyhzZXJ2ZXJzKSB7XG5cdFx0dGhpcy5jbGVhcigpO1xuXG5cdFx0dGhpcy5fcmVzb2x2ZXIuc2V0U2VydmVycyhzZXJ2ZXJzKTtcblx0fVxuXG5cdGdldCBzZXJ2ZXJzKCkge1xuXHRcdHJldHVybiB0aGlzLl9yZXNvbHZlci5nZXRTZXJ2ZXJzKCk7XG5cdH1cblxuXHRsb29rdXAoaG9zdG5hbWUsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG5cdFx0aWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRjYWxsYmFjayA9IG9wdGlvbnM7XG5cdFx0XHRvcHRpb25zID0ge307XG5cdFx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ251bWJlcicpIHtcblx0XHRcdG9wdGlvbnMgPSB7XG5cdFx0XHRcdGZhbWlseTogb3B0aW9uc1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRpZiAoIWNhbGxiYWNrKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0NhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcblx0XHR9XG5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJvbWlzZS9wcmVmZXItYXdhaXQtdG8tdGhlblxuXHRcdHRoaXMubG9va3VwQXN5bmMoaG9zdG5hbWUsIG9wdGlvbnMpLnRoZW4ocmVzdWx0ID0+IHtcblx0XHRcdGlmIChvcHRpb25zLmFsbCkge1xuXHRcdFx0XHRjYWxsYmFjayhudWxsLCByZXN1bHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2FsbGJhY2sobnVsbCwgcmVzdWx0LmFkZHJlc3MsIHJlc3VsdC5mYW1pbHksIHJlc3VsdC5leHBpcmVzLCByZXN1bHQudHRsKTtcblx0XHRcdH1cblx0XHR9LCBjYWxsYmFjayk7XG5cdH1cblxuXHRhc3luYyBsb29rdXBBc3luYyhob3N0bmFtZSwgb3B0aW9ucyA9IHt9KSB7XG5cdFx0aWYgKHR5cGVvZiBvcHRpb25zID09PSAnbnVtYmVyJykge1xuXHRcdFx0b3B0aW9ucyA9IHtcblx0XHRcdFx0ZmFtaWx5OiBvcHRpb25zXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdGxldCBjYWNoZWQgPSBhd2FpdCB0aGlzLnF1ZXJ5KGhvc3RuYW1lKTtcblxuXHRcdGlmIChvcHRpb25zLmZhbWlseSA9PT0gNikge1xuXHRcdFx0Y29uc3QgZmlsdGVyZWQgPSBjYWNoZWQuZmlsdGVyKGVudHJ5ID0+IGVudHJ5LmZhbWlseSA9PT0gNik7XG5cblx0XHRcdGlmIChvcHRpb25zLmhpbnRzICYgVjRNQVBQRUQpIHtcblx0XHRcdFx0aWYgKChzdXBwb3J0c0FMTCAmJiBvcHRpb25zLmhpbnRzICYgQUxMKSB8fCBmaWx0ZXJlZC5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0XHRtYXA0dG82KGNhY2hlZCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y2FjaGVkID0gZmlsdGVyZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNhY2hlZCA9IGZpbHRlcmVkO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAob3B0aW9ucy5mYW1pbHkgPT09IDQpIHtcblx0XHRcdGNhY2hlZCA9IGNhY2hlZC5maWx0ZXIoZW50cnkgPT4gZW50cnkuZmFtaWx5ID09PSA0KTtcblx0XHR9XG5cblx0XHRpZiAob3B0aW9ucy5oaW50cyAmIEFERFJDT05GSUcpIHtcblx0XHRcdGNvbnN0IHtfaWZhY2V9ID0gdGhpcztcblx0XHRcdGNhY2hlZCA9IGNhY2hlZC5maWx0ZXIoZW50cnkgPT4gZW50cnkuZmFtaWx5ID09PSA2ID8gX2lmYWNlLmhhczYgOiBfaWZhY2UuaGFzNCk7XG5cdFx0fVxuXG5cdFx0aWYgKGNhY2hlZC5sZW5ndGggPT09IDApIHtcblx0XHRcdGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBjYWNoZWFibGVMb29rdXAgRU5PVEZPVU5EICR7aG9zdG5hbWV9YCk7XG5cdFx0XHRlcnJvci5jb2RlID0gJ0VOT1RGT1VORCc7XG5cdFx0XHRlcnJvci5ob3N0bmFtZSA9IGhvc3RuYW1lO1xuXG5cdFx0XHR0aHJvdyBlcnJvcjtcblx0XHR9XG5cblx0XHRpZiAob3B0aW9ucy5hbGwpIHtcblx0XHRcdHJldHVybiBjYWNoZWQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNhY2hlZFswXTtcblx0fVxuXG5cdGFzeW5jIHF1ZXJ5KGhvc3RuYW1lKSB7XG5cdFx0bGV0IGNhY2hlZCA9IGF3YWl0IHRoaXMuX2NhY2hlLmdldChob3N0bmFtZSk7XG5cblx0XHRpZiAoIWNhY2hlZCkge1xuXHRcdFx0Y29uc3QgcGVuZGluZyA9IHRoaXMuX3BlbmRpbmdbaG9zdG5hbWVdO1xuXG5cdFx0XHRpZiAocGVuZGluZykge1xuXHRcdFx0XHRjYWNoZWQgPSBhd2FpdCBwZW5kaW5nO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc3QgbmV3UHJvbWlzZSA9IHRoaXMucXVlcnlBbmRDYWNoZShob3N0bmFtZSk7XG5cdFx0XHRcdHRoaXMuX3BlbmRpbmdbaG9zdG5hbWVdID0gbmV3UHJvbWlzZTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGNhY2hlZCA9IGF3YWl0IG5ld1Byb21pc2U7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0ZGVsZXRlIHRoaXMuX3BlbmRpbmdbaG9zdG5hbWVdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Y2FjaGVkID0gY2FjaGVkLm1hcChlbnRyeSA9PiB7XG5cdFx0XHRyZXR1cm4gey4uLmVudHJ5fTtcblx0XHR9KTtcblxuXHRcdHJldHVybiBjYWNoZWQ7XG5cdH1cblxuXHRhc3luYyBfcmVzb2x2ZShob3N0bmFtZSkge1xuXHRcdGNvbnN0IHdyYXAgPSBhc3luYyBwcm9taXNlID0+IHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHJldHVybiBhd2FpdCBwcm9taXNlO1xuXHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0aWYgKGVycm9yLmNvZGUgPT09ICdFTk9EQVRBJyB8fCBlcnJvci5jb2RlID09PSAnRU5PVEZPVU5EJykge1xuXHRcdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRocm93IGVycm9yO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQvLyBBTlkgaXMgdW5zYWZlIGFzIGl0IGRvZXNuJ3QgdHJpZ2dlciBuZXcgcXVlcmllcyBpbiB0aGUgdW5kZXJseWluZyBzZXJ2ZXIuXG5cdFx0Y29uc3QgW0EsIEFBQUFdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuXHRcdFx0dGhpcy5fcmVzb2x2ZTQoaG9zdG5hbWUsIHR0bCksXG5cdFx0XHR0aGlzLl9yZXNvbHZlNihob3N0bmFtZSwgdHRsKVxuXHRcdF0ubWFwKHByb21pc2UgPT4gd3JhcChwcm9taXNlKSkpO1xuXG5cdFx0bGV0IGFUdGwgPSAwO1xuXHRcdGxldCBhYWFhVHRsID0gMDtcblx0XHRsZXQgY2FjaGVUdGwgPSAwO1xuXG5cdFx0Y29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuXHRcdGZvciAoY29uc3QgZW50cnkgb2YgQSkge1xuXHRcdFx0ZW50cnkuZmFtaWx5ID0gNDtcblx0XHRcdGVudHJ5LmV4cGlyZXMgPSBub3cgKyAoZW50cnkudHRsICogMTAwMCk7XG5cblx0XHRcdGFUdGwgPSBNYXRoLm1heChhVHRsLCBlbnRyeS50dGwpO1xuXHRcdH1cblxuXHRcdGZvciAoY29uc3QgZW50cnkgb2YgQUFBQSkge1xuXHRcdFx0ZW50cnkuZmFtaWx5ID0gNjtcblx0XHRcdGVudHJ5LmV4cGlyZXMgPSBub3cgKyAoZW50cnkudHRsICogMTAwMCk7XG5cblx0XHRcdGFhYWFUdGwgPSBNYXRoLm1heChhYWFhVHRsLCBlbnRyeS50dGwpO1xuXHRcdH1cblxuXHRcdGlmIChBLmxlbmd0aCA+IDApIHtcblx0XHRcdGlmIChBQUFBLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0Y2FjaGVUdGwgPSBNYXRoLm1pbihhVHRsLCBhYWFhVHRsKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNhY2hlVHRsID0gYVR0bDtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y2FjaGVUdGwgPSBhYWFhVHRsO1xuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRlbnRyaWVzOiBbXG5cdFx0XHRcdC4uLkEsXG5cdFx0XHRcdC4uLkFBQUFcblx0XHRcdF0sXG5cdFx0XHRjYWNoZVR0bFxuXHRcdH07XG5cdH1cblxuXHRhc3luYyBfbG9va3VwKGhvc3RuYW1lKSB7XG5cdFx0dHJ5IHtcblx0XHRcdGNvbnN0IGVudHJpZXMgPSBhd2FpdCB0aGlzLl9kbnNMb29rdXAoaG9zdG5hbWUsIHtcblx0XHRcdFx0YWxsOiB0cnVlXG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0ZW50cmllcyxcblx0XHRcdFx0Y2FjaGVUdGw6IDBcblx0XHRcdH07XG5cdFx0fSBjYXRjaCAoXykge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0ZW50cmllczogW10sXG5cdFx0XHRcdGNhY2hlVHRsOiAwXG5cdFx0XHR9O1xuXHRcdH1cblx0fVxuXG5cdGFzeW5jIF9zZXQoaG9zdG5hbWUsIGRhdGEsIGNhY2hlVHRsKSB7XG5cdFx0aWYgKHRoaXMubWF4VHRsID4gMCAmJiBjYWNoZVR0bCA+IDApIHtcblx0XHRcdGNhY2hlVHRsID0gTWF0aC5taW4oY2FjaGVUdGwsIHRoaXMubWF4VHRsKSAqIDEwMDA7XG5cdFx0XHRkYXRhW2tFeHBpcmVzXSA9IERhdGUubm93KCkgKyBjYWNoZVR0bDtcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0YXdhaXQgdGhpcy5fY2FjaGUuc2V0KGhvc3RuYW1lLCBkYXRhLCBjYWNoZVR0bCk7XG5cdFx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0XHR0aGlzLmxvb2t1cEFzeW5jID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IGNhY2hlRXJyb3IgPSBuZXcgRXJyb3IoJ0NhY2hlIEVycm9yLiBQbGVhc2UgcmVjcmVhdGUgdGhlIENhY2hlYWJsZUxvb2t1cCBpbnN0YW5jZS4nKTtcblx0XHRcdFx0XHRjYWNoZUVycm9yLmNhdXNlID0gZXJyb3I7XG5cblx0XHRcdFx0XHR0aHJvdyBjYWNoZUVycm9yO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaXNJdGVyYWJsZSh0aGlzLl9jYWNoZSkpIHtcblx0XHRcdFx0dGhpcy5fdGljayhjYWNoZVR0bCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0YXN5bmMgcXVlcnlBbmRDYWNoZShob3N0bmFtZSkge1xuXHRcdGlmICh0aGlzLl9ob3N0bmFtZXNUb0ZhbGxiYWNrLmhhcyhob3N0bmFtZSkpIHtcblx0XHRcdHJldHVybiB0aGlzLl9kbnNMb29rdXAoaG9zdG5hbWUsIGFsbCk7XG5cdFx0fVxuXG5cdFx0bGV0IHF1ZXJ5ID0gYXdhaXQgdGhpcy5fcmVzb2x2ZShob3N0bmFtZSk7XG5cblx0XHRpZiAocXVlcnkuZW50cmllcy5sZW5ndGggPT09IDAgJiYgdGhpcy5fZmFsbGJhY2spIHtcblx0XHRcdHF1ZXJ5ID0gYXdhaXQgdGhpcy5fbG9va3VwKGhvc3RuYW1lKTtcblxuXHRcdFx0aWYgKHF1ZXJ5LmVudHJpZXMubGVuZ3RoICE9PSAwKSB7XG5cdFx0XHRcdC8vIFVzZSBgZG5zLmxvb2t1cCguLi4pYCBmb3IgdGhhdCBwYXJ0aWN1bGFyIGhvc3RuYW1lXG5cdFx0XHRcdHRoaXMuX2hvc3RuYW1lc1RvRmFsbGJhY2suYWRkKGhvc3RuYW1lKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRjb25zdCBjYWNoZVR0bCA9IHF1ZXJ5LmVudHJpZXMubGVuZ3RoID09PSAwID8gdGhpcy5lcnJvclR0bCA6IHF1ZXJ5LmNhY2hlVHRsO1xuXHRcdGF3YWl0IHRoaXMuX3NldChob3N0bmFtZSwgcXVlcnkuZW50cmllcywgY2FjaGVUdGwpO1xuXG5cdFx0cmV0dXJuIHF1ZXJ5LmVudHJpZXM7XG5cdH1cblxuXHRfdGljayhtcykge1xuXHRcdGNvbnN0IG5leHRSZW1vdmFsVGltZSA9IHRoaXMuX25leHRSZW1vdmFsVGltZTtcblxuXHRcdGlmICghbmV4dFJlbW92YWxUaW1lIHx8IG1zIDwgbmV4dFJlbW92YWxUaW1lKSB7XG5cdFx0XHRjbGVhclRpbWVvdXQodGhpcy5fcmVtb3ZhbFRpbWVvdXQpO1xuXG5cdFx0XHR0aGlzLl9uZXh0UmVtb3ZhbFRpbWUgPSBtcztcblxuXHRcdFx0dGhpcy5fcmVtb3ZhbFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0dGhpcy5fbmV4dFJlbW92YWxUaW1lID0gZmFsc2U7XG5cblx0XHRcdFx0bGV0IG5leHRFeHBpcnkgPSBJbmZpbml0eTtcblxuXHRcdFx0XHRjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuXG5cdFx0XHRcdGZvciAoY29uc3QgW2hvc3RuYW1lLCBlbnRyaWVzXSBvZiB0aGlzLl9jYWNoZSkge1xuXHRcdFx0XHRcdGNvbnN0IGV4cGlyZXMgPSBlbnRyaWVzW2tFeHBpcmVzXTtcblxuXHRcdFx0XHRcdGlmIChub3cgPj0gZXhwaXJlcykge1xuXHRcdFx0XHRcdFx0dGhpcy5fY2FjaGUuZGVsZXRlKGhvc3RuYW1lKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGV4cGlyZXMgPCBuZXh0RXhwaXJ5KSB7XG5cdFx0XHRcdFx0XHRuZXh0RXhwaXJ5ID0gZXhwaXJlcztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAobmV4dEV4cGlyeSAhPT0gSW5maW5pdHkpIHtcblx0XHRcdFx0XHR0aGlzLl90aWNrKG5leHRFeHBpcnkgLSBub3cpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCBtcyk7XG5cblx0XHRcdC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBUaGVyZSBpcyBubyBgdGltZW91dC51bnJlZigpYCB3aGVuIHJ1bm5pbmcgaW5zaWRlIGFuIEVsZWN0cm9uIHJlbmRlcmVyICovXG5cdFx0XHRpZiAodGhpcy5fcmVtb3ZhbFRpbWVvdXQudW5yZWYpIHtcblx0XHRcdFx0dGhpcy5fcmVtb3ZhbFRpbWVvdXQudW5yZWYoKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpbnN0YWxsKGFnZW50KSB7XG5cdFx0dmVyaWZ5QWdlbnQoYWdlbnQpO1xuXG5cdFx0aWYgKGtDYWNoZWFibGVMb29rdXBDcmVhdGVDb25uZWN0aW9uIGluIGFnZW50KSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0NhY2hlYWJsZUxvb2t1cCBoYXMgYmVlbiBhbHJlYWR5IGluc3RhbGxlZCcpO1xuXHRcdH1cblxuXHRcdGFnZW50W2tDYWNoZWFibGVMb29rdXBDcmVhdGVDb25uZWN0aW9uXSA9IGFnZW50LmNyZWF0ZUNvbm5lY3Rpb247XG5cdFx0YWdlbnRba0NhY2hlYWJsZUxvb2t1cEluc3RhbmNlXSA9IHRoaXM7XG5cblx0XHRhZ2VudC5jcmVhdGVDb25uZWN0aW9uID0gKG9wdGlvbnMsIGNhbGxiYWNrKSA9PiB7XG5cdFx0XHRpZiAoISgnbG9va3VwJyBpbiBvcHRpb25zKSkge1xuXHRcdFx0XHRvcHRpb25zLmxvb2t1cCA9IHRoaXMubG9va3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gYWdlbnRba0NhY2hlYWJsZUxvb2t1cENyZWF0ZUNvbm5lY3Rpb25dKG9wdGlvbnMsIGNhbGxiYWNrKTtcblx0XHR9O1xuXHR9XG5cblx0dW5pbnN0YWxsKGFnZW50KSB7XG5cdFx0dmVyaWZ5QWdlbnQoYWdlbnQpO1xuXG5cdFx0aWYgKGFnZW50W2tDYWNoZWFibGVMb29rdXBDcmVhdGVDb25uZWN0aW9uXSkge1xuXHRcdFx0aWYgKGFnZW50W2tDYWNoZWFibGVMb29rdXBJbnN0YW5jZV0gIT09IHRoaXMpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdUaGUgYWdlbnQgaXMgbm90IG93bmVkIGJ5IHRoaXMgQ2FjaGVhYmxlTG9va3VwIGluc3RhbmNlJyk7XG5cdFx0XHR9XG5cblx0XHRcdGFnZW50LmNyZWF0ZUNvbm5lY3Rpb24gPSBhZ2VudFtrQ2FjaGVhYmxlTG9va3VwQ3JlYXRlQ29ubmVjdGlvbl07XG5cblx0XHRcdGRlbGV0ZSBhZ2VudFtrQ2FjaGVhYmxlTG9va3VwQ3JlYXRlQ29ubmVjdGlvbl07XG5cdFx0XHRkZWxldGUgYWdlbnRba0NhY2hlYWJsZUxvb2t1cEluc3RhbmNlXTtcblx0XHR9XG5cdH1cblxuXHR1cGRhdGVJbnRlcmZhY2VJbmZvKCkge1xuXHRcdGNvbnN0IHtfaWZhY2V9ID0gdGhpcztcblxuXHRcdHRoaXMuX2lmYWNlID0gZ2V0SWZhY2VJbmZvKCk7XG5cblx0XHRpZiAoKF9pZmFjZS5oYXM0ICYmICF0aGlzLl9pZmFjZS5oYXM0KSB8fCAoX2lmYWNlLmhhczYgJiYgIXRoaXMuX2lmYWNlLmhhczYpKSB7XG5cdFx0XHR0aGlzLl9jYWNoZS5jbGVhcigpO1xuXHRcdH1cblx0fVxuXG5cdGNsZWFyKGhvc3RuYW1lKSB7XG5cdFx0aWYgKGhvc3RuYW1lKSB7XG5cdFx0XHR0aGlzLl9jYWNoZS5kZWxldGUoaG9zdG5hbWUpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuX2NhY2hlLmNsZWFyKCk7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDYWNoZWFibGVMb29rdXA7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gQ2FjaGVhYmxlTG9va3VwO1xuIiwiJ3VzZSBzdHJpY3QnO1xuY29uc3Qge1Bhc3NUaHJvdWdoOiBQYXNzVGhyb3VnaFN0cmVhbX0gPSByZXF1aXJlKCdzdHJlYW0nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBvcHRpb25zID0+IHtcblx0b3B0aW9ucyA9IHsuLi5vcHRpb25zfTtcblxuXHRjb25zdCB7YXJyYXl9ID0gb3B0aW9ucztcblx0bGV0IHtlbmNvZGluZ30gPSBvcHRpb25zO1xuXHRjb25zdCBpc0J1ZmZlciA9IGVuY29kaW5nID09PSAnYnVmZmVyJztcblx0bGV0IG9iamVjdE1vZGUgPSBmYWxzZTtcblxuXHRpZiAoYXJyYXkpIHtcblx0XHRvYmplY3RNb2RlID0gIShlbmNvZGluZyB8fCBpc0J1ZmZlcik7XG5cdH0gZWxzZSB7XG5cdFx0ZW5jb2RpbmcgPSBlbmNvZGluZyB8fCAndXRmOCc7XG5cdH1cblxuXHRpZiAoaXNCdWZmZXIpIHtcblx0XHRlbmNvZGluZyA9IG51bGw7XG5cdH1cblxuXHRjb25zdCBzdHJlYW0gPSBuZXcgUGFzc1Rocm91Z2hTdHJlYW0oe29iamVjdE1vZGV9KTtcblxuXHRpZiAoZW5jb2RpbmcpIHtcblx0XHRzdHJlYW0uc2V0RW5jb2RpbmcoZW5jb2RpbmcpO1xuXHR9XG5cblx0bGV0IGxlbmd0aCA9IDA7XG5cdGNvbnN0IGNodW5rcyA9IFtdO1xuXG5cdHN0cmVhbS5vbignZGF0YScsIGNodW5rID0+IHtcblx0XHRjaHVua3MucHVzaChjaHVuayk7XG5cblx0XHRpZiAob2JqZWN0TW9kZSkge1xuXHRcdFx0bGVuZ3RoID0gY2h1bmtzLmxlbmd0aDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bGVuZ3RoICs9IGNodW5rLmxlbmd0aDtcblx0XHR9XG5cdH0pO1xuXG5cdHN0cmVhbS5nZXRCdWZmZXJlZFZhbHVlID0gKCkgPT4ge1xuXHRcdGlmIChhcnJheSkge1xuXHRcdFx0cmV0dXJuIGNodW5rcztcblx0XHR9XG5cblx0XHRyZXR1cm4gaXNCdWZmZXIgPyBCdWZmZXIuY29uY2F0KGNodW5rcywgbGVuZ3RoKSA6IGNodW5rcy5qb2luKCcnKTtcblx0fTtcblxuXHRzdHJlYW0uZ2V0QnVmZmVyZWRMZW5ndGggPSAoKSA9PiBsZW5ndGg7XG5cblx0cmV0dXJuIHN0cmVhbTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5jb25zdCB7Y29uc3RhbnRzOiBCdWZmZXJDb25zdGFudHN9ID0gcmVxdWlyZSgnYnVmZmVyJyk7XG5jb25zdCBwdW1wID0gcmVxdWlyZSgncHVtcCcpO1xuY29uc3QgYnVmZmVyU3RyZWFtID0gcmVxdWlyZSgnLi9idWZmZXItc3RyZWFtJyk7XG5cbmNsYXNzIE1heEJ1ZmZlckVycm9yIGV4dGVuZHMgRXJyb3Ige1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcignbWF4QnVmZmVyIGV4Y2VlZGVkJyk7XG5cdFx0dGhpcy5uYW1lID0gJ01heEJ1ZmZlckVycm9yJztcblx0fVxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRTdHJlYW0oaW5wdXRTdHJlYW0sIG9wdGlvbnMpIHtcblx0aWYgKCFpbnB1dFN0cmVhbSkge1xuXHRcdHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ0V4cGVjdGVkIGEgc3RyZWFtJykpO1xuXHR9XG5cblx0b3B0aW9ucyA9IHtcblx0XHRtYXhCdWZmZXI6IEluZmluaXR5LFxuXHRcdC4uLm9wdGlvbnNcblx0fTtcblxuXHRjb25zdCB7bWF4QnVmZmVyfSA9IG9wdGlvbnM7XG5cblx0bGV0IHN0cmVhbTtcblx0YXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdGNvbnN0IHJlamVjdFByb21pc2UgPSBlcnJvciA9PiB7XG5cdFx0XHQvLyBEb24ndCByZXRyaWV2ZSBhbiBvdmVyc2l6ZWQgYnVmZmVyLlxuXHRcdFx0aWYgKGVycm9yICYmIHN0cmVhbS5nZXRCdWZmZXJlZExlbmd0aCgpIDw9IEJ1ZmZlckNvbnN0YW50cy5NQVhfTEVOR1RIKSB7XG5cdFx0XHRcdGVycm9yLmJ1ZmZlcmVkRGF0YSA9IHN0cmVhbS5nZXRCdWZmZXJlZFZhbHVlKCk7XG5cdFx0XHR9XG5cblx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0fTtcblxuXHRcdHN0cmVhbSA9IHB1bXAoaW5wdXRTdHJlYW0sIGJ1ZmZlclN0cmVhbShvcHRpb25zKSwgZXJyb3IgPT4ge1xuXHRcdFx0aWYgKGVycm9yKSB7XG5cdFx0XHRcdHJlamVjdFByb21pc2UoZXJyb3IpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHJlc29sdmUoKTtcblx0XHR9KTtcblxuXHRcdHN0cmVhbS5vbignZGF0YScsICgpID0+IHtcblx0XHRcdGlmIChzdHJlYW0uZ2V0QnVmZmVyZWRMZW5ndGgoKSA+IG1heEJ1ZmZlcikge1xuXHRcdFx0XHRyZWplY3RQcm9taXNlKG5ldyBNYXhCdWZmZXJFcnJvcigpKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG5cblx0cmV0dXJuIHN0cmVhbS5nZXRCdWZmZXJlZFZhbHVlKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0U3RyZWFtO1xuLy8gVE9ETzogUmVtb3ZlIHRoaXMgZm9yIHRoZSBuZXh0IG1ham9yIHJlbGVhc2Vcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBnZXRTdHJlYW07XG5tb2R1bGUuZXhwb3J0cy5idWZmZXIgPSAoc3RyZWFtLCBvcHRpb25zKSA9PiBnZXRTdHJlYW0oc3RyZWFtLCB7Li4ub3B0aW9ucywgZW5jb2Rpbmc6ICdidWZmZXInfSk7XG5tb2R1bGUuZXhwb3J0cy5hcnJheSA9IChzdHJlYW0sIG9wdGlvbnMpID0+IGdldFN0cmVhbShzdHJlYW0sIHsuLi5vcHRpb25zLCBhcnJheTogdHJ1ZX0pO1xubW9kdWxlLmV4cG9ydHMuTWF4QnVmZmVyRXJyb3IgPSBNYXhCdWZmZXJFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5jb25zdCB1cmxMaWIgPSByZXF1aXJlKCd1cmwnKTtcbmNvbnN0IG5vcm1hbGl6ZVVybCA9IHJlcXVpcmUoJ25vcm1hbGl6ZS11cmwnKTtcbmNvbnN0IGdldFN0cmVhbSA9IHJlcXVpcmUoJ2dldC1zdHJlYW0nKTtcbmNvbnN0IENhY2hlUG9saWN5ID0gcmVxdWlyZSgnaHR0cC1jYWNoZS1zZW1hbnRpY3MnKTtcbmNvbnN0IFJlc3BvbnNlID0gcmVxdWlyZSgncmVzcG9uc2VsaWtlJyk7XG5jb25zdCBsb3dlcmNhc2VLZXlzID0gcmVxdWlyZSgnbG93ZXJjYXNlLWtleXMnKTtcbmNvbnN0IGNsb25lUmVzcG9uc2UgPSByZXF1aXJlKCdjbG9uZS1yZXNwb25zZScpO1xuY29uc3QgS2V5diA9IHJlcXVpcmUoJ2tleXYnKTtcblxuY2xhc3MgQ2FjaGVhYmxlUmVxdWVzdCB7XG5cdGNvbnN0cnVjdG9yKHJlcXVlc3QsIGNhY2hlQWRhcHRlcikge1xuXHRcdGlmICh0eXBlb2YgcmVxdWVzdCAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignUGFyYW1ldGVyIGByZXF1ZXN0YCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblx0XHR9XG5cblx0XHR0aGlzLmNhY2hlID0gbmV3IEtleXYoe1xuXHRcdFx0dXJpOiB0eXBlb2YgY2FjaGVBZGFwdGVyID09PSAnc3RyaW5nJyAmJiBjYWNoZUFkYXB0ZXIsXG5cdFx0XHRzdG9yZTogdHlwZW9mIGNhY2hlQWRhcHRlciAhPT0gJ3N0cmluZycgJiYgY2FjaGVBZGFwdGVyLFxuXHRcdFx0bmFtZXNwYWNlOiAnY2FjaGVhYmxlLXJlcXVlc3QnXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gdGhpcy5jcmVhdGVDYWNoZWFibGVSZXF1ZXN0KHJlcXVlc3QpO1xuXHR9XG5cblx0Y3JlYXRlQ2FjaGVhYmxlUmVxdWVzdChyZXF1ZXN0KSB7XG5cdFx0cmV0dXJuIChvcHRzLCBjYikgPT4ge1xuXHRcdFx0bGV0IHVybDtcblx0XHRcdGlmICh0eXBlb2Ygb3B0cyA9PT0gJ3N0cmluZycpIHtcblx0XHRcdFx0dXJsID0gbm9ybWFsaXplVXJsT2JqZWN0KHVybExpYi5wYXJzZShvcHRzKSk7XG5cdFx0XHRcdG9wdHMgPSB7fTtcblx0XHRcdH0gZWxzZSBpZiAob3B0cyBpbnN0YW5jZW9mIHVybExpYi5VUkwpIHtcblx0XHRcdFx0dXJsID0gbm9ybWFsaXplVXJsT2JqZWN0KHVybExpYi5wYXJzZShvcHRzLnRvU3RyaW5nKCkpKTtcblx0XHRcdFx0b3B0cyA9IHt9O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc3QgW3BhdGhuYW1lLCAuLi5zZWFyY2hQYXJ0c10gPSAob3B0cy5wYXRoIHx8ICcnKS5zcGxpdCgnPycpO1xuXHRcdFx0XHRjb25zdCBzZWFyY2ggPSBzZWFyY2hQYXJ0cy5sZW5ndGggPiAwID9cblx0XHRcdFx0XHRgPyR7c2VhcmNoUGFydHMuam9pbignPycpfWAgOlxuXHRcdFx0XHRcdCcnO1xuXHRcdFx0XHR1cmwgPSBub3JtYWxpemVVcmxPYmplY3QoeyAuLi5vcHRzLCBwYXRobmFtZSwgc2VhcmNoIH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRvcHRzID0ge1xuXHRcdFx0XHRoZWFkZXJzOiB7fSxcblx0XHRcdFx0bWV0aG9kOiAnR0VUJyxcblx0XHRcdFx0Y2FjaGU6IHRydWUsXG5cdFx0XHRcdHN0cmljdFR0bDogZmFsc2UsXG5cdFx0XHRcdGF1dG9tYXRpY0ZhaWxvdmVyOiBmYWxzZSxcblx0XHRcdFx0Li4ub3B0cyxcblx0XHRcdFx0Li4udXJsT2JqZWN0VG9SZXF1ZXN0T3B0aW9ucyh1cmwpXG5cdFx0XHR9O1xuXHRcdFx0b3B0cy5oZWFkZXJzID0gbG93ZXJjYXNlS2V5cyhvcHRzLmhlYWRlcnMpO1xuXG5cdFx0XHRjb25zdCBlZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblx0XHRcdGNvbnN0IG5vcm1hbGl6ZWRVcmxTdHJpbmcgPSBub3JtYWxpemVVcmwoXG5cdFx0XHRcdHVybExpYi5mb3JtYXQodXJsKSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHN0cmlwV1dXOiBmYWxzZSxcblx0XHRcdFx0XHRyZW1vdmVUcmFpbGluZ1NsYXNoOiBmYWxzZSxcblx0XHRcdFx0XHRzdHJpcEF1dGhlbnRpY2F0aW9uOiBmYWxzZVxuXHRcdFx0XHR9XG5cdFx0XHQpO1xuXHRcdFx0Y29uc3Qga2V5ID0gYCR7b3B0cy5tZXRob2R9OiR7bm9ybWFsaXplZFVybFN0cmluZ31gO1xuXHRcdFx0bGV0IHJldmFsaWRhdGUgPSBmYWxzZTtcblx0XHRcdGxldCBtYWRlUmVxdWVzdCA9IGZhbHNlO1xuXG5cdFx0XHRjb25zdCBtYWtlUmVxdWVzdCA9IG9wdHMgPT4ge1xuXHRcdFx0XHRtYWRlUmVxdWVzdCA9IHRydWU7XG5cdFx0XHRcdGxldCByZXF1ZXN0RXJyb3JlZCA9IGZhbHNlO1xuXHRcdFx0XHRsZXQgcmVxdWVzdEVycm9yQ2FsbGJhY2s7XG5cblx0XHRcdFx0Y29uc3QgcmVxdWVzdEVycm9yUHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuXHRcdFx0XHRcdHJlcXVlc3RFcnJvckNhbGxiYWNrID0gKCkgPT4ge1xuXHRcdFx0XHRcdFx0aWYgKCFyZXF1ZXN0RXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0RXJyb3JlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRjb25zdCBoYW5kbGVyID0gcmVzcG9uc2UgPT4ge1xuXHRcdFx0XHRcdGlmIChyZXZhbGlkYXRlICYmICFvcHRzLmZvcmNlUmVmcmVzaCkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2Uuc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzQ29kZTtcblx0XHRcdFx0XHRcdGNvbnN0IHJldmFsaWRhdGVkUG9saWN5ID0gQ2FjaGVQb2xpY3kuZnJvbU9iamVjdChyZXZhbGlkYXRlLmNhY2hlUG9saWN5KS5yZXZhbGlkYXRlZFBvbGljeShvcHRzLCByZXNwb25zZSk7XG5cdFx0XHRcdFx0XHRpZiAoIXJldmFsaWRhdGVkUG9saWN5Lm1vZGlmaWVkKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IGhlYWRlcnMgPSByZXZhbGlkYXRlZFBvbGljeS5wb2xpY3kucmVzcG9uc2VIZWFkZXJzKCk7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKHJldmFsaWRhdGUuc3RhdHVzQ29kZSwgaGVhZGVycywgcmV2YWxpZGF0ZS5ib2R5LCByZXZhbGlkYXRlLnVybCk7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlLmNhY2hlUG9saWN5ID0gcmV2YWxpZGF0ZWRQb2xpY3kucG9saWN5O1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZS5mcm9tQ2FjaGUgPSB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICghcmVzcG9uc2UuZnJvbUNhY2hlKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZS5jYWNoZVBvbGljeSA9IG5ldyBDYWNoZVBvbGljeShvcHRzLCByZXNwb25zZSwgb3B0cyk7XG5cdFx0XHRcdFx0XHRyZXNwb25zZS5mcm9tQ2FjaGUgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRsZXQgY2xvbmVkUmVzcG9uc2U7XG5cdFx0XHRcdFx0aWYgKG9wdHMuY2FjaGUgJiYgcmVzcG9uc2UuY2FjaGVQb2xpY3kuc3RvcmFibGUoKSkge1xuXHRcdFx0XHRcdFx0Y2xvbmVkUmVzcG9uc2UgPSBjbG9uZVJlc3BvbnNlKHJlc3BvbnNlKTtcblxuXHRcdFx0XHRcdFx0KGFzeW5jICgpID0+IHtcblx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRjb25zdCBib2R5UHJvbWlzZSA9IGdldFN0cmVhbS5idWZmZXIocmVzcG9uc2UpO1xuXG5cdFx0XHRcdFx0XHRcdFx0YXdhaXQgUHJvbWlzZS5yYWNlKFtcblx0XHRcdFx0XHRcdFx0XHRcdHJlcXVlc3RFcnJvclByb21pc2UsXG5cdFx0XHRcdFx0XHRcdFx0XHRuZXcgUHJvbWlzZShyZXNvbHZlID0+IHJlc3BvbnNlLm9uY2UoJ2VuZCcsIHJlc29sdmUpKVxuXHRcdFx0XHRcdFx0XHRcdF0pO1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKHJlcXVlc3RFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgYm9keSA9IGF3YWl0IGJvZHlQcm9taXNlO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgdmFsdWUgPSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjYWNoZVBvbGljeTogcmVzcG9uc2UuY2FjaGVQb2xpY3kudG9PYmplY3QoKSxcblx0XHRcdFx0XHRcdFx0XHRcdHVybDogcmVzcG9uc2UudXJsLFxuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZTogcmVzcG9uc2UuZnJvbUNhY2hlID8gcmV2YWxpZGF0ZS5zdGF0dXNDb2RlIDogcmVzcG9uc2Uuc3RhdHVzQ29kZSxcblx0XHRcdFx0XHRcdFx0XHRcdGJvZHlcblx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdFx0bGV0IHR0bCA9IG9wdHMuc3RyaWN0VHRsID8gcmVzcG9uc2UuY2FjaGVQb2xpY3kudGltZVRvTGl2ZSgpIDogdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdGlmIChvcHRzLm1heFR0bCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dHRsID0gdHRsID8gTWF0aC5taW4odHRsLCBvcHRzLm1heFR0bCkgOiBvcHRzLm1heFR0bDtcblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRhd2FpdCB0aGlzLmNhY2hlLnNldChrZXksIHZhbHVlLCB0dGwpO1xuXHRcdFx0XHRcdFx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0XHRcdFx0XHRcdGVlLmVtaXQoJ2Vycm9yJywgbmV3IENhY2hlYWJsZVJlcXVlc3QuQ2FjaGVFcnJvcihlcnJvcikpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KSgpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAob3B0cy5jYWNoZSAmJiByZXZhbGlkYXRlKSB7XG5cdFx0XHRcdFx0XHQoYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdGF3YWl0IHRoaXMuY2FjaGUuZGVsZXRlKGtleSk7XG5cdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdFx0XHRcdFx0ZWUuZW1pdCgnZXJyb3InLCBuZXcgQ2FjaGVhYmxlUmVxdWVzdC5DYWNoZUVycm9yKGVycm9yKSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0pKCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWUuZW1pdCgncmVzcG9uc2UnLCBjbG9uZWRSZXNwb25zZSB8fCByZXNwb25zZSk7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdFx0Y2IoY2xvbmVkUmVzcG9uc2UgfHwgcmVzcG9uc2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGNvbnN0IHJlcSA9IHJlcXVlc3Qob3B0cywgaGFuZGxlcik7XG5cdFx0XHRcdFx0cmVxLm9uY2UoJ2Vycm9yJywgcmVxdWVzdEVycm9yQ2FsbGJhY2spO1xuXHRcdFx0XHRcdHJlcS5vbmNlKCdhYm9ydCcsIHJlcXVlc3RFcnJvckNhbGxiYWNrKTtcblx0XHRcdFx0XHRlZS5lbWl0KCdyZXF1ZXN0JywgcmVxKTtcblx0XHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0XHRlZS5lbWl0KCdlcnJvcicsIG5ldyBDYWNoZWFibGVSZXF1ZXN0LlJlcXVlc3RFcnJvcihlcnJvcikpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0XHQoYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRjb25zdCBnZXQgPSBhc3luYyBvcHRzID0+IHtcblx0XHRcdFx0XHRhd2FpdCBQcm9taXNlLnJlc29sdmUoKTtcblxuXHRcdFx0XHRcdGNvbnN0IGNhY2hlRW50cnkgPSBvcHRzLmNhY2hlID8gYXdhaXQgdGhpcy5jYWNoZS5nZXQoa2V5KSA6IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRpZiAodHlwZW9mIGNhY2hlRW50cnkgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gbWFrZVJlcXVlc3Qob3B0cyk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y29uc3QgcG9saWN5ID0gQ2FjaGVQb2xpY3kuZnJvbU9iamVjdChjYWNoZUVudHJ5LmNhY2hlUG9saWN5KTtcblx0XHRcdFx0XHRpZiAocG9saWN5LnNhdGlzZmllc1dpdGhvdXRSZXZhbGlkYXRpb24ob3B0cykgJiYgIW9wdHMuZm9yY2VSZWZyZXNoKSB7XG5cdFx0XHRcdFx0XHRjb25zdCBoZWFkZXJzID0gcG9saWN5LnJlc3BvbnNlSGVhZGVycygpO1xuXHRcdFx0XHRcdFx0Y29uc3QgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UoY2FjaGVFbnRyeS5zdGF0dXNDb2RlLCBoZWFkZXJzLCBjYWNoZUVudHJ5LmJvZHksIGNhY2hlRW50cnkudXJsKTtcblx0XHRcdFx0XHRcdHJlc3BvbnNlLmNhY2hlUG9saWN5ID0gcG9saWN5O1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UuZnJvbUNhY2hlID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0ZWUuZW1pdCgncmVzcG9uc2UnLCByZXNwb25zZSk7XG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0XHRcdGNiKHJlc3BvbnNlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV2YWxpZGF0ZSA9IGNhY2hlRW50cnk7XG5cdFx0XHRcdFx0XHRvcHRzLmhlYWRlcnMgPSBwb2xpY3kucmV2YWxpZGF0aW9uSGVhZGVycyhvcHRzKTtcblx0XHRcdFx0XHRcdG1ha2VSZXF1ZXN0KG9wdHMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblxuXHRcdFx0XHRjb25zdCBlcnJvckhhbmRsZXIgPSBlcnJvciA9PiBlZS5lbWl0KCdlcnJvcicsIG5ldyBDYWNoZWFibGVSZXF1ZXN0LkNhY2hlRXJyb3IoZXJyb3IpKTtcblx0XHRcdFx0dGhpcy5jYWNoZS5vbmNlKCdlcnJvcicsIGVycm9ySGFuZGxlcik7XG5cdFx0XHRcdGVlLm9uKCdyZXNwb25zZScsICgpID0+IHRoaXMuY2FjaGUucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgZXJyb3JIYW5kbGVyKSk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRhd2FpdCBnZXQob3B0cyk7XG5cdFx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdFx0aWYgKG9wdHMuYXV0b21hdGljRmFpbG92ZXIgJiYgIW1hZGVSZXF1ZXN0KSB7XG5cdFx0XHRcdFx0XHRtYWtlUmVxdWVzdChvcHRzKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlZS5lbWl0KCdlcnJvcicsIG5ldyBDYWNoZWFibGVSZXF1ZXN0LkNhY2hlRXJyb3IoZXJyb3IpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSkoKTtcblxuXHRcdFx0cmV0dXJuIGVlO1xuXHRcdH07XG5cdH1cbn1cblxuZnVuY3Rpb24gdXJsT2JqZWN0VG9SZXF1ZXN0T3B0aW9ucyh1cmwpIHtcblx0Y29uc3Qgb3B0aW9ucyA9IHsgLi4udXJsIH07XG5cdG9wdGlvbnMucGF0aCA9IGAke3VybC5wYXRobmFtZSB8fCAnLyd9JHt1cmwuc2VhcmNoIHx8ICcnfWA7XG5cdGRlbGV0ZSBvcHRpb25zLnBhdGhuYW1lO1xuXHRkZWxldGUgb3B0aW9ucy5zZWFyY2g7XG5cdHJldHVybiBvcHRpb25zO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVVcmxPYmplY3QodXJsKSB7XG5cdC8vIElmIHVybCB3YXMgcGFyc2VkIGJ5IHVybC5wYXJzZSBvciBuZXcgVVJMOlxuXHQvLyAtIGhvc3RuYW1lIHdpbGwgYmUgc2V0XG5cdC8vIC0gaG9zdCB3aWxsIGJlIGhvc3RuYW1lWzpwb3J0XVxuXHQvLyAtIHBvcnQgd2lsbCBiZSBzZXQgaWYgaXQgd2FzIGV4cGxpY2l0IGluIHRoZSBwYXJzZWQgc3RyaW5nXG5cdC8vIE90aGVyd2lzZSwgdXJsIHdhcyBmcm9tIHJlcXVlc3Qgb3B0aW9uczpcblx0Ly8gLSBob3N0bmFtZSBvciBob3N0IG1heSBiZSBzZXRcblx0Ly8gLSBob3N0IHNoYWxsIG5vdCBoYXZlIHBvcnQgZW5jb2RlZFxuXHRyZXR1cm4ge1xuXHRcdHByb3RvY29sOiB1cmwucHJvdG9jb2wsXG5cdFx0YXV0aDogdXJsLmF1dGgsXG5cdFx0aG9zdG5hbWU6IHVybC5ob3N0bmFtZSB8fCB1cmwuaG9zdCB8fCAnbG9jYWxob3N0Jyxcblx0XHRwb3J0OiB1cmwucG9ydCxcblx0XHRwYXRobmFtZTogdXJsLnBhdGhuYW1lLFxuXHRcdHNlYXJjaDogdXJsLnNlYXJjaFxuXHR9O1xufVxuXG5DYWNoZWFibGVSZXF1ZXN0LlJlcXVlc3RFcnJvciA9IGNsYXNzIGV4dGVuZHMgRXJyb3Ige1xuXHRjb25zdHJ1Y3RvcihlcnJvcikge1xuXHRcdHN1cGVyKGVycm9yLm1lc3NhZ2UpO1xuXHRcdHRoaXMubmFtZSA9ICdSZXF1ZXN0RXJyb3InO1xuXHRcdE9iamVjdC5hc3NpZ24odGhpcywgZXJyb3IpO1xuXHR9XG59O1xuXG5DYWNoZWFibGVSZXF1ZXN0LkNhY2hlRXJyb3IgPSBjbGFzcyBleHRlbmRzIEVycm9yIHtcblx0Y29uc3RydWN0b3IoZXJyb3IpIHtcblx0XHRzdXBlcihlcnJvci5tZXNzYWdlKTtcblx0XHR0aGlzLm5hbWUgPSAnQ2FjaGVFcnJvcic7XG5cdFx0T2JqZWN0LmFzc2lnbih0aGlzLCBlcnJvcik7XG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FjaGVhYmxlUmVxdWVzdDtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gV2UgZGVmaW5lIHRoZXNlIG1hbnVhbGx5IHRvIGVuc3VyZSB0aGV5J3JlIGFsd2F5cyBjb3BpZWRcbi8vIGV2ZW4gaWYgdGhleSB3b3VsZCBtb3ZlIHVwIHRoZSBwcm90b3R5cGUgY2hhaW5cbi8vIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfY2xhc3NfaHR0cF9pbmNvbWluZ21lc3NhZ2VcbmNvbnN0IGtub3duUHJvcHMgPSBbXG5cdCdkZXN0cm95Jyxcblx0J3NldFRpbWVvdXQnLFxuXHQnc29ja2V0Jyxcblx0J2hlYWRlcnMnLFxuXHQndHJhaWxlcnMnLFxuXHQncmF3SGVhZGVycycsXG5cdCdzdGF0dXNDb2RlJyxcblx0J2h0dHBWZXJzaW9uJyxcblx0J2h0dHBWZXJzaW9uTWlub3InLFxuXHQnaHR0cFZlcnNpb25NYWpvcicsXG5cdCdyYXdUcmFpbGVycycsXG5cdCdzdGF0dXNNZXNzYWdlJ1xuXTtcblxubW9kdWxlLmV4cG9ydHMgPSAoZnJvbVN0cmVhbSwgdG9TdHJlYW0pID0+IHtcblx0Y29uc3QgZnJvbVByb3BzID0gbmV3IFNldChPYmplY3Qua2V5cyhmcm9tU3RyZWFtKS5jb25jYXQoa25vd25Qcm9wcykpO1xuXG5cdGZvciAoY29uc3QgcHJvcCBvZiBmcm9tUHJvcHMpIHtcblx0XHQvLyBEb24ndCBvdmVyd3JpdGUgZXhpc3RpbmcgcHJvcGVydGllc1xuXHRcdGlmIChwcm9wIGluIHRvU3RyZWFtKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHR0b1N0cmVhbVtwcm9wXSA9IHR5cGVvZiBmcm9tU3RyZWFtW3Byb3BdID09PSAnZnVuY3Rpb24nID8gZnJvbVN0cmVhbVtwcm9wXS5iaW5kKGZyb21TdHJlYW0pIDogZnJvbVN0cmVhbVtwcm9wXTtcblx0fVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgUGFzc1Rocm91Z2ggPSByZXF1aXJlKCdzdHJlYW0nKS5QYXNzVGhyb3VnaDtcbmNvbnN0IG1pbWljUmVzcG9uc2UgPSByZXF1aXJlKCdtaW1pYy1yZXNwb25zZScpO1xuXG5jb25zdCBjbG9uZVJlc3BvbnNlID0gcmVzcG9uc2UgPT4ge1xuXHRpZiAoIShyZXNwb25zZSAmJiByZXNwb25zZS5waXBlKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1BhcmFtZXRlciBgcmVzcG9uc2VgIG11c3QgYmUgYSByZXNwb25zZSBzdHJlYW0uJyk7XG5cdH1cblxuXHRjb25zdCBjbG9uZSA9IG5ldyBQYXNzVGhyb3VnaCgpO1xuXHRtaW1pY1Jlc3BvbnNlKHJlc3BvbnNlLCBjbG9uZSk7XG5cblx0cmV0dXJuIHJlc3BvbnNlLnBpcGUoY2xvbmUpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZVJlc3BvbnNlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuY29uc3Qge1RyYW5zZm9ybSwgUGFzc1Rocm91Z2h9ID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5jb25zdCB6bGliID0gcmVxdWlyZSgnemxpYicpO1xuY29uc3QgbWltaWNSZXNwb25zZSA9IHJlcXVpcmUoJ21pbWljLXJlc3BvbnNlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVzcG9uc2UgPT4ge1xuXHRjb25zdCBjb250ZW50RW5jb2RpbmcgPSAocmVzcG9uc2UuaGVhZGVyc1snY29udGVudC1lbmNvZGluZyddIHx8ICcnKS50b0xvd2VyQ2FzZSgpO1xuXG5cdGlmICghWydnemlwJywgJ2RlZmxhdGUnLCAnYnInXS5pbmNsdWRlcyhjb250ZW50RW5jb2RpbmcpKSB7XG5cdFx0cmV0dXJuIHJlc3BvbnNlO1xuXHR9XG5cblx0Ly8gVE9ETzogUmVtb3ZlIHRoaXMgd2hlbiB0YXJnZXRpbmcgTm9kZS5qcyAxMi5cblx0Y29uc3QgaXNCcm90bGkgPSBjb250ZW50RW5jb2RpbmcgPT09ICdicic7XG5cdGlmIChpc0Jyb3RsaSAmJiB0eXBlb2YgemxpYi5jcmVhdGVCcm90bGlEZWNvbXByZXNzICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0cmVzcG9uc2UuZGVzdHJveShuZXcgRXJyb3IoJ0Jyb3RsaSBpcyBub3Qgc3VwcG9ydGVkIG9uIE5vZGUuanMgPCAxMicpKTtcblx0XHRyZXR1cm4gcmVzcG9uc2U7XG5cdH1cblxuXHRsZXQgaXNFbXB0eSA9IHRydWU7XG5cblx0Y29uc3QgY2hlY2tlciA9IG5ldyBUcmFuc2Zvcm0oe1xuXHRcdHRyYW5zZm9ybShkYXRhLCBfZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG5cdFx0XHRpc0VtcHR5ID0gZmFsc2U7XG5cblx0XHRcdGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuXHRcdH0sXG5cblx0XHRmbHVzaChjYWxsYmFjaykge1xuXHRcdFx0Y2FsbGJhY2soKTtcblx0XHR9XG5cdH0pO1xuXG5cdGNvbnN0IGZpbmFsU3RyZWFtID0gbmV3IFBhc3NUaHJvdWdoKHtcblx0XHRhdXRvRGVzdHJveTogZmFsc2UsXG5cdFx0ZGVzdHJveShlcnJvciwgY2FsbGJhY2spIHtcblx0XHRcdHJlc3BvbnNlLmRlc3Ryb3koKTtcblxuXHRcdFx0Y2FsbGJhY2soZXJyb3IpO1xuXHRcdH1cblx0fSk7XG5cblx0Y29uc3QgZGVjb21wcmVzc1N0cmVhbSA9IGlzQnJvdGxpID8gemxpYi5jcmVhdGVCcm90bGlEZWNvbXByZXNzKCkgOiB6bGliLmNyZWF0ZVVuemlwKCk7XG5cblx0ZGVjb21wcmVzc1N0cmVhbS5vbmNlKCdlcnJvcicsIGVycm9yID0+IHtcblx0XHRpZiAoaXNFbXB0eSAmJiAhcmVzcG9uc2UucmVhZGFibGUpIHtcblx0XHRcdGZpbmFsU3RyZWFtLmVuZCgpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGZpbmFsU3RyZWFtLmRlc3Ryb3koZXJyb3IpO1xuXHR9KTtcblxuXHRtaW1pY1Jlc3BvbnNlKHJlc3BvbnNlLCBmaW5hbFN0cmVhbSk7XG5cdHJlc3BvbnNlLnBpcGUoY2hlY2tlcikucGlwZShkZWNvbXByZXNzU3RyZWFtKS5waXBlKGZpbmFsU3RyZWFtKTtcblxuXHRyZXR1cm4gZmluYWxTdHJlYW07XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0bHNfMSA9IHJlcXVpcmUoXCJ0bHNcIik7XG5jb25zdCBkZWZlclRvQ29ubmVjdCA9IChzb2NrZXQsIGZuKSA9PiB7XG4gICAgbGV0IGxpc3RlbmVycztcbiAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IGNvbm5lY3QgPSBmbjtcbiAgICAgICAgbGlzdGVuZXJzID0geyBjb25uZWN0IH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsaXN0ZW5lcnMgPSBmbjtcbiAgICB9XG4gICAgY29uc3QgaGFzQ29ubmVjdExpc3RlbmVyID0gdHlwZW9mIGxpc3RlbmVycy5jb25uZWN0ID09PSAnZnVuY3Rpb24nO1xuICAgIGNvbnN0IGhhc1NlY3VyZUNvbm5lY3RMaXN0ZW5lciA9IHR5cGVvZiBsaXN0ZW5lcnMuc2VjdXJlQ29ubmVjdCA9PT0gJ2Z1bmN0aW9uJztcbiAgICBjb25zdCBoYXNDbG9zZUxpc3RlbmVyID0gdHlwZW9mIGxpc3RlbmVycy5jbG9zZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICBjb25zdCBvbkNvbm5lY3QgPSAoKSA9PiB7XG4gICAgICAgIGlmIChoYXNDb25uZWN0TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGxpc3RlbmVycy5jb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNvY2tldCBpbnN0YW5jZW9mIHRsc18xLlRMU1NvY2tldCAmJiBoYXNTZWN1cmVDb25uZWN0TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGlmIChzb2NrZXQuYXV0aG9yaXplZCkge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVycy5zZWN1cmVDb25uZWN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghc29ja2V0LmF1dGhvcml6YXRpb25FcnJvcikge1xuICAgICAgICAgICAgICAgIHNvY2tldC5vbmNlKCdzZWN1cmVDb25uZWN0JywgbGlzdGVuZXJzLnNlY3VyZUNvbm5lY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNDbG9zZUxpc3RlbmVyKSB7XG4gICAgICAgICAgICBzb2NrZXQub25jZSgnY2xvc2UnLCBsaXN0ZW5lcnMuY2xvc2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBpZiAoc29ja2V0LndyaXRhYmxlICYmICFzb2NrZXQuY29ubmVjdGluZykge1xuICAgICAgICBvbkNvbm5lY3QoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc29ja2V0LmNvbm5lY3RpbmcpIHtcbiAgICAgICAgc29ja2V0Lm9uY2UoJ2Nvbm5lY3QnLCBvbkNvbm5lY3QpO1xuICAgIH1cbiAgICBlbHNlIGlmIChzb2NrZXQuZGVzdHJveWVkICYmIGhhc0Nsb3NlTGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXJzLmNsb3NlKHNvY2tldC5faGFkRXJyb3IpO1xuICAgIH1cbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWZlclRvQ29ubmVjdDtcbi8vIEZvciBDb21tb25KUyBkZWZhdWx0IGV4cG9ydCBzdXBwb3J0XG5tb2R1bGUuZXhwb3J0cyA9IGRlZmVyVG9Db25uZWN0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGRlZmVyVG9Db25uZWN0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkh0dHBNZXRob2RzID0gdm9pZCAwO1xudmFyIEh0dHBNZXRob2RzO1xuKGZ1bmN0aW9uIChIdHRwTWV0aG9kcykge1xuICAgIEh0dHBNZXRob2RzW1wiR0VUXCJdID0gXCJHRVRcIjtcbiAgICBIdHRwTWV0aG9kc1tcIlBPU1RcIl0gPSBcIlBPU1RcIjtcbiAgICBIdHRwTWV0aG9kc1tcIlBVVFwiXSA9IFwiUFVUXCI7XG4gICAgSHR0cE1ldGhvZHNbXCJQQVRDSFwiXSA9IFwiUEFUQ0hcIjtcbiAgICBIdHRwTWV0aG9kc1tcIkRFTEVURVwiXSA9IFwiREVMRVRFXCI7XG59KShIdHRwTWV0aG9kcyA9IGV4cG9ydHMuSHR0cE1ldGhvZHMgfHwgKGV4cG9ydHMuSHR0cE1ldGhvZHMgPSB7fSkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgcmVxdWVzdF9oZWxwZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9yZXF1ZXN0LWhlbHBlclwiKSk7XG52YXIgYWNjb3VudF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21vZHVsZXMvYWNjb3VudFwiKSk7XG52YXIgYWN0aW9uc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21vZHVsZXMvYWN0aW9uc1wiKSk7XG52YXIgY2RuXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbW9kdWxlcy9jZG5cIikpO1xudmFyIGNlcnRpZmljYXRlc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21vZHVsZXMvY2VydGlmaWNhdGVzXCIpKTtcbnZhciBkYXRhYmFzZXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9tb2R1bGVzL2RhdGFiYXNlc1wiKSk7XG52YXIgZG9tYWluc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21vZHVsZXMvZG9tYWluc1wiKSk7XG52YXIgZHJvcGxldHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9tb2R1bGVzL2Ryb3BsZXRzXCIpKTtcbnZhciBmaXJld2FsbHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9tb2R1bGVzL2ZpcmV3YWxsc1wiKSk7XG52YXIgZmxvYXRpbmdfaXBfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9tb2R1bGVzL2Zsb2F0aW5nLWlwXCIpKTtcbnZhciBpbWFnZXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9tb2R1bGVzL2ltYWdlc1wiKSk7XG52YXIga2V5c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21vZHVsZXMva2V5c1wiKSk7XG52YXIga3ViZXJuZXRlc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21vZHVsZXMva3ViZXJuZXRlc1wiKSk7XG52YXIgbG9hZF9iYWxhbmNlcnNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9tb2R1bGVzL2xvYWQtYmFsYW5jZXJzXCIpKTtcbnZhciBwcm9qZWN0c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21vZHVsZXMvcHJvamVjdHNcIikpO1xudmFyIHJlZ2lvbnNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9tb2R1bGVzL3JlZ2lvbnNcIikpO1xudmFyIHJlcG9ydHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9tb2R1bGVzL3JlcG9ydHNcIikpO1xudmFyIHNpemVzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbW9kdWxlcy9zaXplc1wiKSk7XG52YXIgc25hcHNob3RzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbW9kdWxlcy9zbmFwc2hvdHNcIikpO1xudmFyIHRhZ3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9tb2R1bGVzL3RhZ3NcIikpO1xudmFyIHZvbHVtZXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9tb2R1bGVzL3ZvbHVtZXNcIikpO1xudmFyIERpZ2l0YWxPY2VhbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEaWdpdGFsT2NlYW4odG9rZW4sIHBhZ2VTaXplKSB7XG4gICAgICAgIGlmIChwYWdlU2l6ZSA9PT0gdm9pZCAwKSB7IHBhZ2VTaXplID0gMTA7IH1cbiAgICAgICAgdmFyIHJlcXVlc3RIZWxwZXIgPSBuZXcgcmVxdWVzdF9oZWxwZXJfMS5kZWZhdWx0KHRva2VuKTtcbiAgICAgICAgdGhpcy5hY2NvdW50ID0gbmV3IGFjY291bnRfMS5kZWZhdWx0KHBhZ2VTaXplLCByZXF1ZXN0SGVscGVyKTtcbiAgICAgICAgdGhpcy5hY3Rpb25zID0gbmV3IGFjdGlvbnNfMS5kZWZhdWx0KHBhZ2VTaXplLCByZXF1ZXN0SGVscGVyKTtcbiAgICAgICAgdGhpcy5jZG4gPSBuZXcgY2RuXzEuZGVmYXVsdChwYWdlU2l6ZSwgcmVxdWVzdEhlbHBlcik7XG4gICAgICAgIHRoaXMuY2VydGlmaWNhdGVzID0gbmV3IGNlcnRpZmljYXRlc18xLmRlZmF1bHQocGFnZVNpemUsIHJlcXVlc3RIZWxwZXIpO1xuICAgICAgICB0aGlzLmRhdGFiYXNlcyA9IG5ldyBkYXRhYmFzZXNfMS5kZWZhdWx0KHBhZ2VTaXplLCByZXF1ZXN0SGVscGVyKTtcbiAgICAgICAgdGhpcy5kb21haW5zID0gbmV3IGRvbWFpbnNfMS5kZWZhdWx0KHBhZ2VTaXplLCByZXF1ZXN0SGVscGVyKTtcbiAgICAgICAgdGhpcy5kcm9wbGV0cyA9IG5ldyBkcm9wbGV0c18xLmRlZmF1bHQocGFnZVNpemUsIHJlcXVlc3RIZWxwZXIpO1xuICAgICAgICB0aGlzLmZpcmV3YWxscyA9IG5ldyBmaXJld2FsbHNfMS5kZWZhdWx0KHBhZ2VTaXplLCByZXF1ZXN0SGVscGVyKTtcbiAgICAgICAgdGhpcy5mbG9hdGluZ0lQcyA9IG5ldyBmbG9hdGluZ19pcF8xLmRlZmF1bHQocGFnZVNpemUsIHJlcXVlc3RIZWxwZXIpO1xuICAgICAgICB0aGlzLmltYWdlcyA9IG5ldyBpbWFnZXNfMS5kZWZhdWx0KHBhZ2VTaXplLCByZXF1ZXN0SGVscGVyKTtcbiAgICAgICAgdGhpcy5rZXlzID0gbmV3IGtleXNfMS5kZWZhdWx0KHBhZ2VTaXplLCByZXF1ZXN0SGVscGVyKTtcbiAgICAgICAgdGhpcy5rdWJlcm5ldGVzID0gbmV3IGt1YmVybmV0ZXNfMS5kZWZhdWx0KHBhZ2VTaXplLCByZXF1ZXN0SGVscGVyKTtcbiAgICAgICAgdGhpcy5sb2FkQmFsYW5jZXJzID0gbmV3IGxvYWRfYmFsYW5jZXJzXzEuZGVmYXVsdChwYWdlU2l6ZSwgcmVxdWVzdEhlbHBlcik7XG4gICAgICAgIHRoaXMucHJvamVjdHMgPSBuZXcgcHJvamVjdHNfMS5kZWZhdWx0KHBhZ2VTaXplLCByZXF1ZXN0SGVscGVyKTtcbiAgICAgICAgdGhpcy5yZWdpb25zID0gbmV3IHJlZ2lvbnNfMS5kZWZhdWx0KHBhZ2VTaXplLCByZXF1ZXN0SGVscGVyKTtcbiAgICAgICAgdGhpcy5yZXBvcnRzID0gbmV3IHJlcG9ydHNfMS5kZWZhdWx0KHBhZ2VTaXplLCByZXF1ZXN0SGVscGVyKTtcbiAgICAgICAgdGhpcy5zaXplcyA9IG5ldyBzaXplc18xLmRlZmF1bHQocGFnZVNpemUsIHJlcXVlc3RIZWxwZXIpO1xuICAgICAgICB0aGlzLnNuYXBzaG90cyA9IG5ldyBzbmFwc2hvdHNfMS5kZWZhdWx0KHBhZ2VTaXplLCByZXF1ZXN0SGVscGVyKTtcbiAgICAgICAgdGhpcy50YWdzID0gbmV3IHRhZ3NfMS5kZWZhdWx0KHBhZ2VTaXplLCByZXF1ZXN0SGVscGVyKTtcbiAgICAgICAgdGhpcy52b2x1bWVzID0gbmV3IHZvbHVtZXNfMS5kZWZhdWx0KHBhZ2VTaXplLCByZXF1ZXN0SGVscGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIERpZ2l0YWxPY2Vhbjtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBEaWdpdGFsT2NlYW47XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYmFzZV9tb2R1bGVfMSA9IHJlcXVpcmUoXCIuL2Jhc2UtbW9kdWxlXCIpO1xudmFyIEFjY291bnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFjY291bnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQWNjb3VudChwYWdlU2l6ZSwgcmVxdWVzdEhlbHBlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwYWdlU2l6ZSwgcmVxdWVzdEhlbHBlcikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYmFzZU9wdGlvbnMgPSB7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiAnYWNjb3VudCcsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBhY2NvdW50IGluZm9ybWF0aW9uIGZvciB0aGUgdG9rZW5cbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIG9mIHRoZSByZXF1ZXN0XG4gICAgICovXG4gICAgQWNjb3VudC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh0aGlzLmJhc2VPcHRpb25zKTtcbiAgICB9O1xuICAgIHJldHVybiBBY2NvdW50O1xufShiYXNlX21vZHVsZV8xLkJhc2VNb2R1bGUpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IEFjY291bnQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYmFzZV9tb2R1bGVfMSA9IHJlcXVpcmUoXCIuL2Jhc2UtbW9kdWxlXCIpO1xudmFyIEFjdGlvbnMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFjdGlvbnMsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQWN0aW9ucyhwYWdlU2l6ZSwgcmVxdWVzdEhlbHBlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwYWdlU2l6ZSwgcmVxdWVzdEhlbHBlcikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYmFzZVBhdGggPSAnYWN0aW9ucyc7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBBY3Rpb25zXG4gICAgICogQHBhcmFtIHRhZ05hbWUgZmlsdGVyIHRvIG9ubHkgcmV0dXJuIGFjdGlvbnMgd2l0aCBhIGdpdmVuIHRhZ1xuICAgICAqIEBwYXJhbSBbaW5jbHVkZUFsbF0gcmV0dXJuIGFsbCBhY3Rpb25zLCBwYWdpbmF0ZWQgKG9wdGlvbmFsKVxuICAgICAqIEBwYXJhbSBbcGFnZV0gdGhlIHNwZWNpZmljIHBhZ2Ugb2YgYWN0aW9ucyB0byByZXR1cm4gKG9wdGlvbmFsKVxuICAgICAqIEBwYXJhbSBbcGFnZVNpemVdIHRoZSBudW1iZXIgb2YgYWN0aW9ucyB0byByZXR1cm4gcGVyIHBhZ2UgKG9wdGlvbmFsKVxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBBY3Rpb25zLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAodGFnTmFtZSwgaW5jbHVkZUFsbCwgcGFnZSwgcGFnZVNpemUpIHtcbiAgICAgICAgaWYgKGluY2x1ZGVBbGwgPT09IHZvaWQgMCkgeyBpbmNsdWRlQWxsID0gZmFsc2U7IH1cbiAgICAgICAgaWYgKHBhZ2UgPT09IHZvaWQgMCkgeyBwYWdlID0gMTsgfVxuICAgICAgICBpZiAocGFnZVNpemUgPT09IHZvaWQgMCkgeyBwYWdlU2l6ZSA9IHRoaXMucGFnZVNpemU7IH1cbiAgICAgICAgdmFyIHJlcXVlc3RPcHRpb25zID0gdGhpcy5fZ2V0QmFzZVBhZ2luYXRlZFJlcXVlc3RPcHRpb25zKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGgsXG4gICAgICAgICAgICBrZXk6ICdhY3Rpb25zJyxcbiAgICAgICAgICAgIHRhZ05hbWU6IHRhZ05hbWUsXG4gICAgICAgICAgICBwYWdlU2l6ZTogcGFnZVNpemUsXG4gICAgICAgICAgICBwYWdlOiBwYWdlLFxuICAgICAgICAgICAgaW5jbHVkZUFsbDogaW5jbHVkZUFsbFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUocmVxdWVzdE9wdGlvbnMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IGEgc3BlY2lmaWMgQWN0aW9uIHVzaW5nIGl0cyBpZGVudGlmaWVyXG4gICAgICogQHBhcmFtIGFjdGlvbklkIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBBY3Rpb25cbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgQWN0aW9ucy5wcm90b3R5cGUuZ2V0QnlJZCA9IGZ1bmN0aW9uIChhY3Rpb25JZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoYWN0aW9uSWQpXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEFjdGlvbnM7XG59KGJhc2VfbW9kdWxlXzEuQmFzZU1vZHVsZSkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gQWN0aW9ucztcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQmFzZU1vZHVsZSA9IHZvaWQgMDtcbnZhciBCYXNlTW9kdWxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJhc2VNb2R1bGUocGFnZVNpemUsIHJlcXVlc3RIZWxwZXIpIHtcbiAgICAgICAgdGhpcy5wYWdlU2l6ZSA9IHBhZ2VTaXplO1xuICAgICAgICB0aGlzLnJlcXVlc3RIZWxwZXIgPSByZXF1ZXN0SGVscGVyO1xuICAgIH1cbiAgICBCYXNlTW9kdWxlLnByb3RvdHlwZS5fZ2V0QmFzZVBhZ2luYXRlZFJlcXVlc3RPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IG9wdGlvbnMuYWN0aW9uUGF0aCxcbiAgICAgICAgICAgIGtleTogb3B0aW9ucy5rZXksXG4gICAgICAgICAgICBxczogX19hc3NpZ24oX19hc3NpZ24oe30sIChvcHRpb25zLnRhZ05hbWUgJiYgeyB0YWdfbmFtZTogb3B0aW9ucy50YWdOYW1lIH0pKSwgeyBwZXJfcGFnZTogb3B0aW9ucy5wYWdlU2l6ZSB8fCB0aGlzLnBhZ2VTaXplLCBwYWdlOiBvcHRpb25zLnBhZ2UgfHwgMSB9KSxcbiAgICAgICAgICAgIGluY2x1ZGVBbGw6IG9wdGlvbnMuaW5jbHVkZUFsbCB8fCBmYWxzZSxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIEJhc2VNb2R1bGUucHJvdG90eXBlLl9leGVjdXRlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdEhlbHBlci5yZXF1ZXN0KG9wdGlvbnMpO1xuICAgIH07XG4gICAgcmV0dXJuIEJhc2VNb2R1bGU7XG59KCkpO1xuZXhwb3J0cy5CYXNlTW9kdWxlID0gQmFzZU1vZHVsZTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBiYXNlX21vZHVsZV8xID0gcmVxdWlyZShcIi4vYmFzZS1tb2R1bGVcIik7XG52YXIgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uXCIpO1xudmFyIENETiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ0ROLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENETihwYWdlU2l6ZSwgcmVxdWVzdEhlbHBlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwYWdlU2l6ZSwgcmVxdWVzdEhlbHBlcikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYmFzZVBhdGggPSAnY2RuL2VuZHBvaW50cyc7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBDRE4gRW5kcG9pbnRzXG4gICAgICogQHBhcmFtIHRhZ05hbWUgZmlsdGVyIHRvIG9ubHkgcmV0dXJuIENETiBFbmRwb2ludHMgd2l0aCBhIGdpdmVuIHRhZ1xuICAgICAqIEBwYXJhbSBbaW5jbHVkZUFsbF0gcmV0dXJuIGFsbCBDRE4gRW5kcG9pbnRzLCBwYWdpbmF0ZWQgKG9wdGlvbmFsKVxuICAgICAqIEBwYXJhbSBbcGFnZV0gdGhlIHNwZWNpZmljIHBhZ2Ugb2YgQ0ROIEVuZHBvaW50cyB0byByZXR1cm4gKG9wdGlvbmFsKVxuICAgICAqIEBwYXJhbSBbcGFnZVNpemVdIHRoZSBudW1iZXIgb2YgQ0ROIEVuZHBvaW50cyB0byByZXR1cm4gcGVyIHBhZ2UgKG9wdGlvbmFsKVxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBDRE4ucHJvdG90eXBlLmdldEFsbEVuZHBvaW50cyA9IGZ1bmN0aW9uICh0YWdOYW1lLCBpbmNsdWRlQWxsLCBwYWdlLCBwYWdlU2l6ZSkge1xuICAgICAgICBpZiAoaW5jbHVkZUFsbCA9PT0gdm9pZCAwKSB7IGluY2x1ZGVBbGwgPSBmYWxzZTsgfVxuICAgICAgICBpZiAocGFnZSA9PT0gdm9pZCAwKSB7IHBhZ2UgPSAxOyB9XG4gICAgICAgIGlmIChwYWdlU2l6ZSA9PT0gdm9pZCAwKSB7IHBhZ2VTaXplID0gdGhpcy5wYWdlU2l6ZTsgfVxuICAgICAgICB2YXIgcmVxdWVzdE9wdGlvbnMgPSB0aGlzLl9nZXRCYXNlUGFnaW5hdGVkUmVxdWVzdE9wdGlvbnMoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCxcbiAgICAgICAgICAgIGtleTogJ2VuZHBvaW50cycsXG4gICAgICAgICAgICB0YWdOYW1lOiB0YWdOYW1lLFxuICAgICAgICAgICAgcGFnZVNpemU6IHBhZ2VTaXplLFxuICAgICAgICAgICAgcGFnZTogcGFnZSxcbiAgICAgICAgICAgIGluY2x1ZGVBbGw6IGluY2x1ZGVBbGwsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZShyZXF1ZXN0T3B0aW9ucyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgYSBDRE4gRW5kcG9pbnQgdmlhIGl0cyBJZFxuICAgICAqXG4gICAgICogQHBhcmFtIGVuZHBvaW50SWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIGVuZHBvaW50IHRvIHJldHJpZXZlXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIENETi5wcm90b3R5cGUuZ2V0RW5kcG9pbnRCeUlkID0gZnVuY3Rpb24gKGVuZHBvaW50SWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGVuZHBvaW50SWQpLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBDRE4gRW5kcG9pbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcmlnaW4gVGhlIG9yaWdpbiBzZXJ2ZXIgYWRkcmVzcyAoRlFETikgd2hpY2ggcHJvdmlkZXMgdGhlIGNvbnRlbnQgZm9yIHRoZSBDRE5cbiAgICAgKiBAcGFyYW0gdHRsIFRoZSBhbW91bnQgb2YgdGltZSAoc2Vjb25kcykgdGhlIGNvbnRlbnQgaXMgY2FjaGVkIGJ5IHRoZSBDRE4ncyBlZGdlIHNlcnZlcnMuIERlZmF1bHRzIHRvIDM2MDAgKG9uZSBob3VyKVxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBDRE4ucHJvdG90eXBlLmNyZWF0ZUVuZHBvaW50ID0gZnVuY3Rpb24gKG9yaWdpbiwgdHRsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGgsXG4gICAgICAgICAgICBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLlBPU1QsXG4gICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgb3JpZ2luOiBvcmlnaW4sXG4gICAgICAgICAgICAgICAgdHRsOiB0dGwsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgVFRMIG9mIGFuIGV4aXN0aW5nIENETiBFbmRwb2ludFxuICAgICAqXG4gICAgICogQHBhcmFtIGVuZHBvaW50SWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIENETiBFbmRwb2ludCB5b3Ugd2lzaCB0byB1cGRhdGVcbiAgICAgKiBAcGFyYW0gdHRsIHRoZSBhbW91bnQgb2YgdGltZSAoc2Vjb25kcykgdGhlIGNvbnRlbnQgaXMgY2FjaGVkIGJ5IHRoZSBDRE4ncyBlZGdlIHNlcnZlcnNcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgQ0ROLnByb3RvdHlwZS51cGRhdGVFbmRwb2ludFR0bCA9IGZ1bmN0aW9uIChlbmRwb2ludElkLCB0dGwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGVuZHBvaW50SWQpLFxuICAgICAgICAgICAgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5QVVQsXG4gICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgdHRsOiB0dGwsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhbiBleGlzdGluZyBDRE4gRW5kcG9pbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBlbmRwb2ludElkIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBDRE4gRW5kcG9pbnQgeW91IHdpc2ggdG8gdXBkYXRlXG4gICAgICovXG4gICAgQ0ROLnByb3RvdHlwZS5kZWxldGVFbmRwb2ludCA9IGZ1bmN0aW9uIChlbmRwb2ludElkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGggKyBcIi9cIiArIGVuY29kZVVSSUNvbXBvbmVudChlbmRwb2ludElkKSxcbiAgICAgICAgICAgIG1ldGhvZDogY29tbW9uXzEuSHR0cE1ldGhvZHMuREVMRVRFLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFB1cmdlIGNhY2hlZCBjb250ZW50IGZyb20gYW4gZXhpc3RpbmcgQ0ROIEVuZHBvaW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gZW5kcG9pbnRJZCB0aGUgaWRlbnRpZmllciBvZiB0aGUgQ0ROIEVuZHBvaW50IHRvIHB1cmdlIHRoZSBjYWNoZSBvblxuICAgICAqIEBwYXJhbSBmaWxlTmFtZXMgYW4gYXJyYXkgb2YgcGF0aCBzdHJpbmdzIHRvIGNsZWFyIHB1cmdlIGZyb20gdGhlIGNhY2hlXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIENETi5wcm90b3R5cGUucHVyZ2VFbmRwb2ludENhY2hlID0gZnVuY3Rpb24gKGVuZHBvaW50SWQsIGZpbGVOYW1lcykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoZW5kcG9pbnRJZCkgKyBcIi9jYWNoZVwiLFxuICAgICAgICAgICAgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5ERUxFVEUsXG4gICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgZmlsZXM6IGZpbGVOYW1lcyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIENETjtcbn0oYmFzZV9tb2R1bGVfMS5CYXNlTW9kdWxlKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBDRE47XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGJhc2VfbW9kdWxlXzEgPSByZXF1aXJlKFwiLi9iYXNlLW1vZHVsZVwiKTtcbnZhciBjb21tb25fMSA9IHJlcXVpcmUoXCIuLi9jb21tb25cIik7XG52YXIgQ2VydGlmaWNhdGVzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDZXJ0aWZpY2F0ZXMsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ2VydGlmaWNhdGVzKHBhZ2VTaXplLCByZXF1ZXN0SGVscGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHBhZ2VTaXplLCByZXF1ZXN0SGVscGVyKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5iYXNlUGF0aCA9ICdjZXJ0aWZpY2F0ZXMnO1xuICAgICAgICBfdGhpcy5iYXNlT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IF90aGlzLmJhc2VQYXRoICsgXCIvXCIsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBDZXJ0aWZpY2F0ZXNcbiAgICAgKiBAcGFyYW0gW3RhZ05hbWVdIGZpbHRlciB0byBvbmx5IHJldHVybiBDZXJ0aWZpY2F0ZXMgd2l0aCBhIGdpdmVuIHRhZ1xuICAgICAqIEBwYXJhbSBbaW5jbHVkZUFsbF0gcmV0dXJuIGFsbCBDZXJ0aWZpY2F0ZXMsIHBhZ2luYXRlZCAob3B0aW9uYWwpXG4gICAgICogQHBhcmFtIFtwYWdlXSB0aGUgc3BlY2lmaWMgcGFnZSBvZiBDZXJ0aWZpY2F0ZXMgdG8gcmV0dXJuIChvcHRpb25hbClcbiAgICAgKiBAcGFyYW0gW3BhZ2VTaXplXSB0aGUgbnVtYmVyIG9mIENlcnRpZmljYXRlcyB0byByZXR1cm4gcGVyIHBhZ2UgKG9wdGlvbmFsKVxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBDZXJ0aWZpY2F0ZXMucHJvdG90eXBlLmdldEFsbCA9IGZ1bmN0aW9uICh0YWdOYW1lLCBpbmNsdWRlQWxsLCBwYWdlLCBwYWdlU2l6ZSkge1xuICAgICAgICBpZiAoaW5jbHVkZUFsbCA9PT0gdm9pZCAwKSB7IGluY2x1ZGVBbGwgPSBmYWxzZTsgfVxuICAgICAgICBpZiAocGFnZSA9PT0gdm9pZCAwKSB7IHBhZ2UgPSAxOyB9XG4gICAgICAgIGlmIChwYWdlU2l6ZSA9PT0gdm9pZCAwKSB7IHBhZ2VTaXplID0gdGhpcy5wYWdlU2l6ZTsgfVxuICAgICAgICB2YXIgcmVxdWVzdE9wdGlvbnMgPSB0aGlzLl9nZXRCYXNlUGFnaW5hdGVkUmVxdWVzdE9wdGlvbnMoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCxcbiAgICAgICAgICAgIGtleTogJ2NlcnRpZmljYXRlcycsXG4gICAgICAgICAgICBwYWdlU2l6ZTogcGFnZVNpemUsXG4gICAgICAgICAgICB0YWdOYW1lOiB0YWdOYW1lLFxuICAgICAgICAgICAgcGFnZTogcGFnZSxcbiAgICAgICAgICAgIGluY2x1ZGVBbGw6IGluY2x1ZGVBbGwsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZShyZXF1ZXN0T3B0aW9ucyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgQ2VydGlmaWNhdGVcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyB0aGUgb3B0aW9ucyBmb3IgdGhlIENlcnRpZmljYXRlXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIENlcnRpZmljYXRlcy5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuYmFzZU9wdGlvbnMpLCB7IG1ldGhvZDogY29tbW9uXzEuSHR0cE1ldGhvZHMuUE9TVCwgYm9keTogb3B0aW9ucyB9KSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgYSBDZXJ0aWZpY2F0ZVxuICAgICAqIEBwYXJhbSBjZXJ0aWZpY2F0ZUlkIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBDZXJ0aWZpY2F0ZVxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBDZXJ0aWZpY2F0ZXMucHJvdG90eXBlLmdldEJ5SWQgPSBmdW5jdGlvbiAoY2VydGlmaWNhdGVJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoY2VydGlmaWNhdGVJZCksXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGVsZXRlIGEgQ2VydGlmaWNhdGVcbiAgICAgKiBAcGFyYW0gY2VydGlmaWNhdGVJZCB0aGUgaWRlbnRpZmllciBvZiB0aGUgQ2VydGlmaWNhdGVcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgQ2VydGlmaWNhdGVzLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAoY2VydGlmaWNhdGVJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoY2VydGlmaWNhdGVJZCksXG4gICAgICAgICAgICBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLkRFTEVURSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gQ2VydGlmaWNhdGVzO1xufShiYXNlX21vZHVsZV8xLkJhc2VNb2R1bGUpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IENlcnRpZmljYXRlcztcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBiYXNlX21vZHVsZV8xID0gcmVxdWlyZShcIi4vYmFzZS1tb2R1bGVcIik7XG52YXIgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uXCIpO1xudmFyIERhdGFiYXNlcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGF0YWJhc2VzLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERhdGFiYXNlcyhwYWdlU2l6ZSwgcmVxdWVzdEhlbHBlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwYWdlU2l6ZSwgcmVxdWVzdEhlbHBlcikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYmFzZVBhdGggPSAnZGF0YWJhc2VzJztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIERhdGFiYXNlIENsdXN0ZXJzXG4gICAgICogQHBhcmFtIFt0YWdOYW1lXSBmaWx0ZXIgdG8gb25seSByZXR1cm4gRGF0YWJhc2UgQ2x1c3RlcnMgd2l0aCBhIGdpdmVuIHRhZ1xuICAgICAqIEBwYXJhbSBbaW5jbHVkZUFsbF0gcmV0dXJuIGFsbCBEYXRhYmFzZSBDbHVzdGVycywgcGFnaW5hdGVkIChvcHRpb25hbClcbiAgICAgKiBAcGFyYW0gW3BhZ2VdIHRoZSBzcGVjaWZpYyBwYWdlIG9mIERhdGFiYXNlIENsdXN0ZXJzIHRvIHJldHVybiAob3B0aW9uYWwpXG4gICAgICogQHBhcmFtIFtwYWdlU2l6ZV0gdGhlIG51bWJlciBvZiBEYXRhYmFzZSBDbHVzdGVycyB0byByZXR1cm4gcGVyIHBhZ2UgKG9wdGlvbmFsKVxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBEYXRhYmFzZXMucHJvdG90eXBlLmdldEFsbENsdXN0ZXJzID0gZnVuY3Rpb24gKHRhZ05hbWUsIGluY2x1ZGVBbGwsIHBhZ2UsIHBhZ2VTaXplKSB7XG4gICAgICAgIGlmIChpbmNsdWRlQWxsID09PSB2b2lkIDApIHsgaW5jbHVkZUFsbCA9IGZhbHNlOyB9XG4gICAgICAgIGlmIChwYWdlID09PSB2b2lkIDApIHsgcGFnZSA9IDE7IH1cbiAgICAgICAgaWYgKHBhZ2VTaXplID09PSB2b2lkIDApIHsgcGFnZVNpemUgPSB0aGlzLnBhZ2VTaXplOyB9XG4gICAgICAgIHZhciByZXF1ZXN0T3B0aW9ucyA9IHRoaXMuX2dldEJhc2VQYWdpbmF0ZWRSZXF1ZXN0T3B0aW9ucyh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoLFxuICAgICAgICAgICAga2V5OiAnZGF0YWJhc2VzJyxcbiAgICAgICAgICAgIHRhZ05hbWU6IHRhZ05hbWUsXG4gICAgICAgICAgICBwYWdlU2l6ZTogcGFnZVNpemUsXG4gICAgICAgICAgICBwYWdlOiBwYWdlLFxuICAgICAgICAgICAgaW5jbHVkZUFsbDogaW5jbHVkZUFsbCxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHJlcXVlc3RPcHRpb25zKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBEYXRhYmFzZSBDbHVzdGVyXG4gICAgICogQHBhcmFtIGNsdXN0ZXJPcHRpb25zIHRoZSBvcHRpb25zIGZvciB0aGUgRGF0YWJhc2UgQ2x1c3RlclxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBEYXRhYmFzZXMucHJvdG90eXBlLmNyZWF0ZUNsdXN0ZXIgPSBmdW5jdGlvbiAoY2x1c3Rlck9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCxcbiAgICAgICAgICAgIG1ldGhvZDogY29tbW9uXzEuSHR0cE1ldGhvZHMuUE9TVCxcbiAgICAgICAgICAgIGJvZHk6IGNsdXN0ZXJPcHRpb25zLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIGEgc2luZ2xlIERhdGFiYXNlIENsdXN0ZXIgdXNpbmcgaXRzIGlkZW50aWZpZXJcbiAgICAgKiBAcGFyYW0gY2x1c3RlcklkIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBEYXRhYmFzZSBDbHVzdGVyIHRvIHJldHJpZXZlXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIERhdGFiYXNlcy5wcm90b3R5cGUuZ2V0Q2x1c3RlckJ5SWQgPSBmdW5jdGlvbiAoY2x1c3RlcklkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGggKyBcIi9cIiArIGVuY29kZVVSSUNvbXBvbmVudChjbHVzdGVySWQpLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlc2l6ZSBhbiBleGlzdGluZyBEYXRhYmFzZSBDbHVzdGVyXG4gICAgICogQHBhcmFtIGNsdXN0ZXJJZCB0aGUgaWRlbnRpZmllciBvZiB0aGUgRGF0YWJhc2UgQ2x1c3RlciB0byByZXNpemVcbiAgICAgKiBAcGFyYW0gY29uZmlndXJhdGlvbiB0aGUgcmVzaXppbmcgY29uZmlndXJhdGlvblxuICAgICAqL1xuICAgIERhdGFiYXNlcy5wcm90b3R5cGUucmVzaXplQ2x1c3RlciA9IGZ1bmN0aW9uIChjbHVzdGVySWQsIGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGNsdXN0ZXJJZCkgKyBcIi9yZXNpemVcIixcbiAgICAgICAgICAgIG1ldGhvZDogY29tbW9uXzEuSHR0cE1ldGhvZHMuUFVULFxuICAgICAgICAgICAgYm9keTogY29uZmlndXJhdGlvbixcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgVXNlciBvbiBhbiBleGlzdGluZyBEYXRhYmFzZSBDbHVzdGVyXG4gICAgICogQHBhcmFtIGNsdXN0ZXJJZCB0aGUgaWRlbnRpZmllciBvZiB0aGUgRGF0YWJhc2UgQ2x1c3RlclxuICAgICAqIEBwYXJhbSB1c2VybmFtZSB0aGUgbmFtZSBvZiB0aGUgVXNlciB0byBjcmVhdGVcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgRGF0YWJhc2VzLnByb3RvdHlwZS5jcmVhdGVVc2VyID0gZnVuY3Rpb24gKGNsdXN0ZXJJZCwgdXNlcm5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGNsdXN0ZXJJZCkgKyBcIi91c2Vyc1wiLFxuICAgICAgICAgICAgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5QT1NULFxuICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgIG5hbWU6IHVzZXJuYW1lLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBVc2VyIGZyb20gYSBEYXRhYmFzZSBDbHVzdGVyXG4gICAgICogQHBhcmFtIGNsdXN0ZXJJZCB0aGUgaWRlbnRpZmllciBvZiB0aGUgRGF0YWJhc2UgQ2x1c3RlclxuICAgICAqIEBwYXJhbSB1c2VybmFtZSB0aGUgdXNlcm5hbWUgb2YgdGhlIFVzZXIgdG8gZGVsZXRlXG4gICAgICovXG4gICAgRGF0YWJhc2VzLnByb3RvdHlwZS5kZWxldGVVc2VyID0gZnVuY3Rpb24gKGNsdXN0ZXJJZCwgdXNlcm5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGNsdXN0ZXJJZCkgKyBcIi91c2Vycy9cIiArIGVuY29kZVVSSUNvbXBvbmVudCh1c2VybmFtZSksXG4gICAgICAgICAgICBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLkRFTEVURSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZSBhIHNpbmdsZSBVc2VyIGZvciBhIERhdGFiYXNlIENsdXN0ZXJcbiAgICAgKiBAcGFyYW0gY2x1c3RlcklkIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBEYXRhYmFzZSBDbHVzdGVyXG4gICAgICogQHBhcmFtIHVzZXJuYW1lIHRoZSB1c2VybmFtZSBvZiB0aGUgVXNlciB0byByZXRyaWV2ZVxuICAgICAqL1xuICAgIERhdGFiYXNlcy5wcm90b3R5cGUuZ2V0VXNlciA9IGZ1bmN0aW9uIChjbHVzdGVySWQsIHVzZXJuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGggKyBcIi9cIiArIGVuY29kZVVSSUNvbXBvbmVudChjbHVzdGVySWQpICsgXCIvdXNlcnMvXCIgKyBlbmNvZGVVUklDb21wb25lbnQodXNlcm5hbWUpLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIGEgbGlzdCBvZiBhbGwgdGhlIFVzZXJzIGZvciBhIGdpdmVuIERhdGFiYXNlIENsdXN0ZXJcbiAgICAgKiBAcGFyYW0gY2x1c3RlcklkIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBEYXRhYmFzZSBDbHVzdGVyXG4gICAgICovXG4gICAgRGF0YWJhc2VzLnByb3RvdHlwZS5nZXRBbGxVc2VycyA9IGZ1bmN0aW9uIChjbHVzdGVySWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGNsdXN0ZXJJZCkgKyBcIi91c2Vyc1wiLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCBhbGwgUG9vbHMgZm9yIGEgQ2x1c3RlclxuICAgICAqIEBwYXJhbSBjbHVzdGVySWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIENsdXN0ZXJcbiAgICAgKiBAcGFyYW0gcG9vbE9wdGlvbnMgdGhlIFBvb2wgb3B0aW9uc1xuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBEYXRhYmFzZXMucHJvdG90eXBlLmFkZFBvb2wgPSBmdW5jdGlvbiAoY2x1c3RlcklkLCBwb29sT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoY2x1c3RlcklkKSArIFwiL3Bvb2xzXCIsXG4gICAgICAgICAgICBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLlBPU1QsXG4gICAgICAgICAgICBib2R5OiBwb29sT3B0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIFBvb2xzIGZvciBhIENsdXN0ZXJcbiAgICAgKiBAcGFyYW0gY2x1c3RlcklkIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBDbHVzdGVyXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIERhdGFiYXNlcy5wcm90b3R5cGUuZ2V0QWxsUG9vbHMgPSBmdW5jdGlvbiAoY2x1c3RlcklkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGggKyBcIi9cIiArIGVuY29kZVVSSUNvbXBvbmVudChjbHVzdGVySWQpICsgXCIvcG9vbHNcIixcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgYSBQb29sIGZvciBhbiBleGlzdGluZyBDbHVzdGVyXG4gICAgICogQHBhcmFtIGNsdXN0ZXJJZCB0aGUgaWRlbnRpZmllciBvZiB0aGUgQ2x1c3RlclxuICAgICAqIEBwYXJhbSBwb29sTmFtZSB0aGUgbmFtZSBvZiB0aGUgUG9vbFxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBEYXRhYmFzZXMucHJvdG90eXBlLmdldFBvb2wgPSBmdW5jdGlvbiAoY2x1c3RlcklkLCBwb29sTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoY2x1c3RlcklkKSArIFwiL3Bvb2xzL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KHBvb2xOYW1lKSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBQb29sIGZyb20gYW4gZXhpc3RpbmcgQ2x1c3RlclxuICAgICAqIEBwYXJhbSBjbHVzdGVySWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIENsdXN0ZXJcbiAgICAgKiBAcGFyYW0gcG9vbE5hbWUgdGhlIG5hbWUgb2YgdGhlIFBvb2xcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgRGF0YWJhc2VzLnByb3RvdHlwZS5kZWxldGVQb29sID0gZnVuY3Rpb24gKGNsdXN0ZXJJZCwgcG9vbE5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGNsdXN0ZXJJZCkgKyBcIi9wb29scy9cIiArIGVuY29kZVVSSUNvbXBvbmVudChwb29sTmFtZSksXG4gICAgICAgICAgICBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLkRFTEVURSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gRGF0YWJhc2VzO1xufShiYXNlX21vZHVsZV8xLkJhc2VNb2R1bGUpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IERhdGFiYXNlcztcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYmFzZV9tb2R1bGVfMSA9IHJlcXVpcmUoXCIuL2Jhc2UtbW9kdWxlXCIpO1xudmFyIGNvbW1vbl8xID0gcmVxdWlyZShcIi4uL2NvbW1vblwiKTtcbnZhciBEb21haW5zID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhEb21haW5zLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERvbWFpbnMocGFnZVNpemUsIHJlcXVlc3RIZWxwZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcGFnZVNpemUsIHJlcXVlc3RIZWxwZXIpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmJhc2VQYXRoID0gJ2RvbWFpbnMnO1xuICAgICAgICBfdGhpcy5iYXNlT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IF90aGlzLmJhc2VQYXRoICsgXCIvXCIsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBEb21haW5zXG4gICAgICogQHBhcmFtIFt0YWdOYW1lXSBmaWx0ZXIgdG8gb25seSByZXR1cm4gRG9tYWlucyB3aXRoIGEgZ2l2ZW4gdGFnXG4gICAgICogQHBhcmFtIFtpbmNsdWRlQWxsXSByZXR1cm4gYWxsIERvbWFpbnMsIHBhZ2luYXRlZCAob3B0aW9uYWwpXG4gICAgICogQHBhcmFtIFtwYWdlXSB0aGUgc3BlY2lmaWMgcGFnZSBvZiBEb21haW5zIHRvIHJldHVybiAob3B0aW9uYWwpXG4gICAgICogQHBhcmFtIFtwYWdlU2l6ZV0gdGhlIG51bWJlciBvZiBEb21haW5zIHRvIHJldHVybiBwZXIgcGFnZSAob3B0aW9uYWwpXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIERvbWFpbnMucHJvdG90eXBlLmdldEFsbCA9IGZ1bmN0aW9uICh0YWdOYW1lLCBpbmNsdWRlQWxsLCBwYWdlLCBwYWdlU2l6ZSkge1xuICAgICAgICBpZiAoaW5jbHVkZUFsbCA9PT0gdm9pZCAwKSB7IGluY2x1ZGVBbGwgPSBmYWxzZTsgfVxuICAgICAgICBpZiAocGFnZSA9PT0gdm9pZCAwKSB7IHBhZ2UgPSAxOyB9XG4gICAgICAgIGlmIChwYWdlU2l6ZSA9PT0gdm9pZCAwKSB7IHBhZ2VTaXplID0gdGhpcy5wYWdlU2l6ZTsgfVxuICAgICAgICB2YXIgcmVxdWVzdE9wdGlvbnMgPSB0aGlzLl9nZXRCYXNlUGFnaW5hdGVkUmVxdWVzdE9wdGlvbnMoX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuYmFzZU9wdGlvbnMpLCB7IGtleTogJ2RvbWFpbnMnLCB0YWdOYW1lOiB0YWdOYW1lLCBwYWdlU2l6ZTogcGFnZVNpemUsIHBhZ2U6IHBhZ2UsIGluY2x1ZGVBbGw6IGluY2x1ZGVBbGwgfSkpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZShyZXF1ZXN0T3B0aW9ucyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgRG9tYWluXG4gICAgICogQHBhcmFtIG9wdGlvbnMgdGhlIG9wdGlvbnMgZm9yIHRoZSBuZXcgRG9tYWluXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIERvbWFpbnMucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLmJhc2VPcHRpb25zKSwgeyBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLlBPU1QsIGJvZHk6IG9wdGlvbnMgfSkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IGEgRG9tYWluXG4gICAgICogQHBhcmFtcyBkb21haW5OYW1lIHRoZSBuYW1lIG9mIHRoZSBEb21haW4gdG8gcmV0cmlldmVcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgRG9tYWlucy5wcm90b3R5cGUuZ2V0QnlOYW1lID0gZnVuY3Rpb24gKGRvbWFpbk5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGRvbWFpbk5hbWUpLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhIERvbWFpblxuICAgICAqIEBwYXJhbXMgZG9tYWluTmFtZSB0aGUgbmFtZSBvZiB0aGUgRG9tYWluIHRvIGRlbGV0ZVxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBEb21haW5zLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAoZG9tYWluTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoZG9tYWluTmFtZSksXG4gICAgICAgICAgICBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLkRFTEVURSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIERvbWFpbiBSZWNvcmRzXG4gICAgICogQHBhcmFtIGRvbWFpbk5hbWUgdGhlIERvbWFpbiB0byBnZXQgdGhlIHJlY29yZHMgZm9yXG4gICAgICogQHBhcmFtIFt0YWdOYW1lXSBmaWx0ZXIgdG8gb25seSByZXR1cm4gRG9tYWlucyB3aXRoIGEgZ2l2ZW4gdGFnXG4gICAgICogQHBhcmFtIFtpbmNsdWRlQWxsXSByZXR1cm4gYWxsIERvbWFpbnMsIHBhZ2luYXRlZCAob3B0aW9uYWwpXG4gICAgICogQHBhcmFtIFtwYWdlXSB0aGUgc3BlY2lmaWMgcGFnZSBvZiBEb21haW5zIHRvIHJldHVybiAob3B0aW9uYWwpXG4gICAgICogQHBhcmFtIFtwYWdlU2l6ZV0gdGhlIG51bWJlciBvZiBEb21haW5zIHRvIHJldHVybiBwZXIgcGFnZSAob3B0aW9uYWwpXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIERvbWFpbnMucHJvdG90eXBlLmdldEFsbFJlY29yZHMgPSBmdW5jdGlvbiAoZG9tYWluTmFtZSwgdGFnTmFtZSwgaW5jbHVkZUFsbCwgcGFnZSwgcGFnZVNpemUpIHtcbiAgICAgICAgaWYgKGluY2x1ZGVBbGwgPT09IHZvaWQgMCkgeyBpbmNsdWRlQWxsID0gZmFsc2U7IH1cbiAgICAgICAgaWYgKHBhZ2UgPT09IHZvaWQgMCkgeyBwYWdlID0gMTsgfVxuICAgICAgICBpZiAocGFnZVNpemUgPT09IHZvaWQgMCkgeyBwYWdlU2l6ZSA9IHRoaXMucGFnZVNpemU7IH1cbiAgICAgICAgdmFyIHJlcXVlc3RPcHRpb25zID0gdGhpcy5fZ2V0QmFzZVBhZ2luYXRlZFJlcXVlc3RPcHRpb25zKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGggKyBcIi9cIiArIGVuY29kZVVSSUNvbXBvbmVudChkb21haW5OYW1lKSArIFwiL3JlY29yZHNcIixcbiAgICAgICAgICAgIGtleTogJ2RvbWFpbl9yZWNvcmRzJyxcbiAgICAgICAgICAgIHRhZ05hbWU6IHRhZ05hbWUsXG4gICAgICAgICAgICBwYWdlU2l6ZTogcGFnZVNpemUsXG4gICAgICAgICAgICBwYWdlOiBwYWdlLFxuICAgICAgICAgICAgaW5jbHVkZUFsbDogaW5jbHVkZUFsbCxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHJlcXVlc3RPcHRpb25zKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZCBhIG5ldyBSZWNvcmQgdG8gYSBEb21haW5cbiAgICAgKiBAcGFyYW0gZG9tYWluTmFtZSB0aGUgbmFtZSBvZiB0aGUgRG9tYWluIHRvIGFkZCBpdCB0b1xuICAgICAqIEBwYXJhbSBvcHRpb25zIHRoZSBEb21haW4gUmVjb3JkIG9wdGlvbnNcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgRG9tYWlucy5wcm90b3R5cGUuY3JlYXRlUmVjb3JkID0gZnVuY3Rpb24gKGRvbWFpbk5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGRvbWFpbk5hbWUpICsgXCIvcmVjb3Jkc1wiLFxuICAgICAgICAgICAgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5QT1NULFxuICAgICAgICAgICAgYm9keTogb3B0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgYSBEb21haW4gUmVjb3JkXG4gICAgICogQHBhcmFtIGRvbWFpbk5hbWUgdGhlIG5hbWUgb2YgdGhlIERvbWFpbiB0byByZXRyaWV2ZSBpdCBmcm9tXG4gICAgICogQHBhcmFtIHJlY29yZElkIHRoZSBSZWNvcmQgaWRlbnRpZmllciB0byByZXRyaWV2ZVxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBEb21haW5zLnByb3RvdHlwZS5nZXRSZWNvcmQgPSBmdW5jdGlvbiAoZG9tYWluTmFtZSwgcmVjb3JkSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGRvbWFpbk5hbWUpICsgXCIvcmVjb3Jkcy9cIiArIGVuY29kZVVSSUNvbXBvbmVudChyZWNvcmRJZCksXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGVsZXRlIGEgRG9tYWluIFJlY29yZFxuICAgICAqIEBwYXJhbSBkb21haW5OYW1lIHRoZSBuYW1lIG9mIHRoZSBEb21haW4gdG8gcmV0cmlldmUgaXQgZnJvbVxuICAgICAqIEBwYXJhbSByZWNvcmRJZCB0aGUgUmVjb3JkIGlkZW50aWZpZXIgdG8gcmV0cmlldmVcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgRG9tYWlucy5wcm90b3R5cGUuZGVsZXRlUmVjb3JkID0gZnVuY3Rpb24gKGRvbWFpbk5hbWUsIHJlY29yZElkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGggKyBcIi9cIiArIGVuY29kZVVSSUNvbXBvbmVudChkb21haW5OYW1lKSArIFwiL3JlY29yZHMvXCIgKyBlbmNvZGVVUklDb21wb25lbnQocmVjb3JkSWQpLFxuICAgICAgICAgICAgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5ERUxFVEUsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVXBkYXRlIGEgRG9tYWluIFJlY29yZFxuICAgICAqIEBwYXJhbSBkb21haW5OYW1lIHRoZSBuYW1lIG9mIHRoZSBEb21haW4gdG8gdXBkYXRlXG4gICAgICogQHBhcmFtIHJlY29yZElkIHRoZSBSZWNvcmQgaWRlbnRpZmllciB0byB1cGRhdGVcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyB0aGUgdXBkYXRlIG9wdGlvbnNcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgRG9tYWlucy5wcm90b3R5cGUudXBkYXRlUmVjb3JkID0gZnVuY3Rpb24gKGRvbWFpbk5hbWUsIHJlY29yZElkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGggKyBcIi9cIiArIGVuY29kZVVSSUNvbXBvbmVudChkb21haW5OYW1lKSArIFwiL3JlY29yZHMvXCIgKyBlbmNvZGVVUklDb21wb25lbnQocmVjb3JkSWQpLFxuICAgICAgICAgICAgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5QVVQsXG4gICAgICAgICAgICBib2R5OiBvcHRpb25zLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBEb21haW5zO1xufShiYXNlX21vZHVsZV8xLkJhc2VNb2R1bGUpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IERvbWFpbnM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGJhc2VfbW9kdWxlXzEgPSByZXF1aXJlKFwiLi9iYXNlLW1vZHVsZVwiKTtcbnZhciBjb21tb25fMSA9IHJlcXVpcmUoXCIuLi9jb21tb25cIik7XG52YXIgRHJvcGxldHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKERyb3BsZXRzLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERyb3BsZXRzKHBhZ2VTaXplLCByZXF1ZXN0SGVscGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHBhZ2VTaXplLCByZXF1ZXN0SGVscGVyKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5iYXNlUGF0aCA9ICdkcm9wbGV0cyc7XG4gICAgICAgIF90aGlzLmJhc2VPcHRpb25zID0ge1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogX3RoaXMuYmFzZVBhdGggKyBcIi9cIixcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIERyb3BsZXRzXG4gICAgICogQHBhcmFtIFt0YWdOYW1lXSBmaWx0ZXIgdG8gb25seSByZXR1cm4gRHJvcGxldHMgd2l0aCBhIGdpdmVuIHRhZ1xuICAgICAqIEBwYXJhbSBbaW5jbHVkZUFsbF0gcmV0dXJuIGFsbCBEcm9wbGV0cywgcGFnaW5hdGVkIChvcHRpb25hbClcbiAgICAgKiBAcGFyYW0gW3BhZ2VdIHRoZSBzcGVjaWZpYyBwYWdlIG9mIERyb3BsZXRzIHRvIHJldHVybiAob3B0aW9uYWwpXG4gICAgICogQHBhcmFtIFtwYWdlU2l6ZV0gdGhlIG51bWJlciBvZiBEcm9wbGV0cyB0byByZXR1cm4gcGVyIHBhZ2UgKG9wdGlvbmFsKVxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBEcm9wbGV0cy5wcm90b3R5cGUuZ2V0QWxsID0gZnVuY3Rpb24gKHRhZ05hbWUsIGluY2x1ZGVBbGwsIHBhZ2UsIHBhZ2VTaXplKSB7XG4gICAgICAgIGlmIChpbmNsdWRlQWxsID09PSB2b2lkIDApIHsgaW5jbHVkZUFsbCA9IGZhbHNlOyB9XG4gICAgICAgIGlmIChwYWdlID09PSB2b2lkIDApIHsgcGFnZSA9IDE7IH1cbiAgICAgICAgaWYgKHBhZ2VTaXplID09PSB2b2lkIDApIHsgcGFnZVNpemUgPSB0aGlzLnBhZ2VTaXplOyB9XG4gICAgICAgIHZhciByZXF1ZXN0T3B0aW9ucyA9IHRoaXMuX2dldEJhc2VQYWdpbmF0ZWRSZXF1ZXN0T3B0aW9ucyhfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5iYXNlT3B0aW9ucyksIHsga2V5OiAnZHJvcGxldHMnLCB0YWdOYW1lOiB0YWdOYW1lLCBwYWdlU2l6ZTogcGFnZVNpemUsIHBhZ2U6IHBhZ2UsIGluY2x1ZGVBbGw6IGluY2x1ZGVBbGwgfSkpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZShyZXF1ZXN0T3B0aW9ucyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIEtlcm5lbHMgZm9yIGEgRHJvcGxldFxuICAgICAqIEBwYXJhbSBkcm9wbGV0SWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIERyb3BsZXRcbiAgICAgKiBAcGFyYW0gW3RhZ05hbWVdIGZpbHRlciB0byBvbmx5IHJldHVybiBLZXJuZWxzIHdpdGggYSBnaXZlbiB0YWdcbiAgICAgKiBAcGFyYW0gW2luY2x1ZGVBbGxdIHJldHVybiBhbGwgS2VybmVscywgcGFnaW5hdGVkIChvcHRpb25hbClcbiAgICAgKiBAcGFyYW0gW3BhZ2VdIHRoZSBzcGVjaWZpYyBwYWdlIG9mIEtlcm5lbHMgdG8gcmV0dXJuIChvcHRpb25hbClcbiAgICAgKiBAcGFyYW0gW3BhZ2VTaXplXSB0aGUgbnVtYmVyIG9mIEtlcm5lbHMgdG8gcmV0dXJuIHBlciBwYWdlIChvcHRpb25hbClcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgRHJvcGxldHMucHJvdG90eXBlLmdldEtlcm5lbHMgPSBmdW5jdGlvbiAoZHJvcGxldElkLCB0YWdOYW1lLCBpbmNsdWRlQWxsLCBwYWdlLCBwYWdlU2l6ZSkge1xuICAgICAgICBpZiAoaW5jbHVkZUFsbCA9PT0gdm9pZCAwKSB7IGluY2x1ZGVBbGwgPSBmYWxzZTsgfVxuICAgICAgICBpZiAocGFnZSA9PT0gdm9pZCAwKSB7IHBhZ2UgPSAxOyB9XG4gICAgICAgIGlmIChwYWdlU2l6ZSA9PT0gdm9pZCAwKSB7IHBhZ2VTaXplID0gdGhpcy5wYWdlU2l6ZTsgfVxuICAgICAgICB2YXIgcmVxdWVzdE9wdGlvbnMgPSB0aGlzLl9nZXRCYXNlUGFnaW5hdGVkUmVxdWVzdE9wdGlvbnMoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGRyb3BsZXRJZCkgKyBcIi9rZXJuZWxzXCIsXG4gICAgICAgICAgICBrZXk6ICdrZXJuZWxzJyxcbiAgICAgICAgICAgIHRhZ05hbWU6IHRhZ05hbWUsXG4gICAgICAgICAgICBwYWdlU2l6ZTogcGFnZVNpemUsXG4gICAgICAgICAgICBwYWdlOiBwYWdlLFxuICAgICAgICAgICAgaW5jbHVkZUFsbDogaW5jbHVkZUFsbCxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHJlcXVlc3RPcHRpb25zKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCBhbGwgU25hcHNob3RzIGZvciBhIERyb3BsZXRcbiAgICAgKiBAcGFyYW0gZHJvcGxldElkIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBEcm9wbGV0XG4gICAgICogQHBhcmFtIFt0YWdOYW1lXSBmaWx0ZXIgdG8gb25seSByZXR1cm4gU25hcHNob3RzIHdpdGggYSBnaXZlbiB0YWdcbiAgICAgKiBAcGFyYW0gW2luY2x1ZGVBbGxdIHJldHVybiBhbGwgU25hcHNob3RzLCBwYWdpbmF0ZWQgKG9wdGlvbmFsKVxuICAgICAqIEBwYXJhbSBbcGFnZV0gdGhlIHNwZWNpZmljIHBhZ2Ugb2YgU25hcHNob3RzIHRvIHJldHVybiAob3B0aW9uYWwpXG4gICAgICogQHBhcmFtIFtwYWdlU2l6ZV0gdGhlIG51bWJlciBvZiBTbmFwc2hvdHMgdG8gcmV0dXJuIHBlciBwYWdlIChvcHRpb25hbClcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgRHJvcGxldHMucHJvdG90eXBlLmdldFNuYXBzaG90cyA9IGZ1bmN0aW9uIChkcm9wbGV0SWQsIHRhZ05hbWUsIGluY2x1ZGVBbGwsIHBhZ2UsIHBhZ2VTaXplKSB7XG4gICAgICAgIGlmIChpbmNsdWRlQWxsID09PSB2b2lkIDApIHsgaW5jbHVkZUFsbCA9IGZhbHNlOyB9XG4gICAgICAgIGlmIChwYWdlID09PSB2b2lkIDApIHsgcGFnZSA9IDE7IH1cbiAgICAgICAgaWYgKHBhZ2VTaXplID09PSB2b2lkIDApIHsgcGFnZVNpemUgPSB0aGlzLnBhZ2VTaXplOyB9XG4gICAgICAgIHZhciByZXF1ZXN0T3B0aW9ucyA9IHRoaXMuX2dldEJhc2VQYWdpbmF0ZWRSZXF1ZXN0T3B0aW9ucyh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoZHJvcGxldElkKSArIFwiL3NuYXBzaG90c1wiLFxuICAgICAgICAgICAga2V5OiAnc25hcHNob3RzJyxcbiAgICAgICAgICAgIHRhZ05hbWU6IHRhZ05hbWUsXG4gICAgICAgICAgICBwYWdlU2l6ZTogcGFnZVNpemUsXG4gICAgICAgICAgICBwYWdlOiBwYWdlLFxuICAgICAgICAgICAgaW5jbHVkZUFsbDogaW5jbHVkZUFsbCxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHJlcXVlc3RPcHRpb25zKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCBhbGwgQmFja3VwcyBmb3IgYSBEcm9wbGV0XG4gICAgICogQHBhcmFtIGRyb3BsZXRJZCB0aGUgaWRlbnRpZmllciBvZiB0aGUgRHJvcGxldFxuICAgICAqIEBwYXJhbSBbdGFnTmFtZV0gZmlsdGVyIHRvIG9ubHkgcmV0dXJuIEJhY2t1cHMgd2l0aCBhIGdpdmVuIHRhZ1xuICAgICAqIEBwYXJhbSBbaW5jbHVkZUFsbF0gcmV0dXJuIGFsbCBCYWNrdXBzLCBwYWdpbmF0ZWQgKG9wdGlvbmFsKVxuICAgICAqIEBwYXJhbSBbcGFnZV0gdGhlIHNwZWNpZmljIHBhZ2Ugb2YgQmFja3VwcyB0byByZXR1cm4gKG9wdGlvbmFsKVxuICAgICAqIEBwYXJhbSBbcGFnZVNpemVdIHRoZSBudW1iZXIgb2YgQmFja3VwcyB0byByZXR1cm4gcGVyIHBhZ2UgKG9wdGlvbmFsKVxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBEcm9wbGV0cy5wcm90b3R5cGUuZ2V0QmFja3VwcyA9IGZ1bmN0aW9uIChkcm9wbGV0SWQsIHRhZ05hbWUsIGluY2x1ZGVBbGwsIHBhZ2UsIHBhZ2VTaXplKSB7XG4gICAgICAgIGlmIChpbmNsdWRlQWxsID09PSB2b2lkIDApIHsgaW5jbHVkZUFsbCA9IGZhbHNlOyB9XG4gICAgICAgIGlmIChwYWdlID09PSB2b2lkIDApIHsgcGFnZSA9IDE7IH1cbiAgICAgICAgaWYgKHBhZ2VTaXplID09PSB2b2lkIDApIHsgcGFnZVNpemUgPSB0aGlzLnBhZ2VTaXplOyB9XG4gICAgICAgIHZhciByZXF1ZXN0T3B0aW9ucyA9IHRoaXMuX2dldEJhc2VQYWdpbmF0ZWRSZXF1ZXN0T3B0aW9ucyh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoZHJvcGxldElkKSArIFwiL2JhY2t1cHNcIixcbiAgICAgICAgICAgIGtleTogJ2JhY2t1cHMnLFxuICAgICAgICAgICAgdGFnTmFtZTogdGFnTmFtZSxcbiAgICAgICAgICAgIHBhZ2VTaXplOiBwYWdlU2l6ZSxcbiAgICAgICAgICAgIHBhZ2U6IHBhZ2UsXG4gICAgICAgICAgICBpbmNsdWRlQWxsOiBpbmNsdWRlQWxsLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUocmVxdWVzdE9wdGlvbnMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBBY3Rpb25zIGZvciBhIERyb3BsZXRcbiAgICAgKiBAcGFyYW0gZHJvcGxldElkIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBEcm9wbGV0XG4gICAgICogQHBhcmFtIFt0YWdOYW1lXSBmaWx0ZXIgdG8gb25seSByZXR1cm4gQWN0aW9ucyB3aXRoIGEgZ2l2ZW4gdGFnXG4gICAgICogQHBhcmFtIFtpbmNsdWRlQWxsXSByZXR1cm4gYWxsIEFjdGlvbnMsIHBhZ2luYXRlZCAob3B0aW9uYWwpXG4gICAgICogQHBhcmFtIFtwYWdlXSB0aGUgc3BlY2lmaWMgcGFnZSBvZiBBY3Rpb25zIHRvIHJldHVybiAob3B0aW9uYWwpXG4gICAgICogQHBhcmFtIFtwYWdlU2l6ZV0gdGhlIG51bWJlciBvZiBBY3Rpb25zIHRvIHJldHVybiBwZXIgcGFnZSAob3B0aW9uYWwpXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIERyb3BsZXRzLnByb3RvdHlwZS5nZXRBY3Rpb25zID0gZnVuY3Rpb24gKGRyb3BsZXRJZCwgdGFnTmFtZSwgaW5jbHVkZUFsbCwgcGFnZSwgcGFnZVNpemUpIHtcbiAgICAgICAgaWYgKGluY2x1ZGVBbGwgPT09IHZvaWQgMCkgeyBpbmNsdWRlQWxsID0gZmFsc2U7IH1cbiAgICAgICAgaWYgKHBhZ2UgPT09IHZvaWQgMCkgeyBwYWdlID0gMTsgfVxuICAgICAgICBpZiAocGFnZVNpemUgPT09IHZvaWQgMCkgeyBwYWdlU2l6ZSA9IHRoaXMucGFnZVNpemU7IH1cbiAgICAgICAgdmFyIHJlcXVlc3RPcHRpb25zID0gdGhpcy5fZ2V0QmFzZVBhZ2luYXRlZFJlcXVlc3RPcHRpb25zKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGggKyBcIi9cIiArIGVuY29kZVVSSUNvbXBvbmVudChkcm9wbGV0SWQpICsgXCIvYWN0aW9uc1wiLFxuICAgICAgICAgICAga2V5OiAnYWN0aW9ucycsXG4gICAgICAgICAgICB0YWdOYW1lOiB0YWdOYW1lLFxuICAgICAgICAgICAgcGFnZVNpemU6IHBhZ2VTaXplLFxuICAgICAgICAgICAgcGFnZTogcGFnZSxcbiAgICAgICAgICAgIGluY2x1ZGVBbGw6IGluY2x1ZGVBbGwsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZShyZXF1ZXN0T3B0aW9ucyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgRHJvcGxldFxuICAgICAqIEBwYXJhbSBvcHRpb25zIHRoZSBvcHRpb25zIGZvciB0aGUgbmV3IERyb3BsZXRcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgRHJvcGxldHMucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLmJhc2VPcHRpb25zKSwgeyBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLlBPU1QsIGJvZHk6IG9wdGlvbnMgfSkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IGEgRHJvcGxldCBieSBpdHMgaWRlbnRpZmllclxuICAgICAqIEBwYXJhbSBkcm9wbGV0SWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIERyb3BsZXRcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgRHJvcGxldHMucHJvdG90eXBlLmdldEJ5SWQgPSBmdW5jdGlvbiAoZHJvcGxldElkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGggKyBcIi9cIiArIGVuY29kZVVSSUNvbXBvbmVudChkcm9wbGV0SWQpLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhIERyb3BsZXQgYnkgaXRzIGlkZW50aWZpZXJcbiAgICAgKiBAcGFyYW0gZHJvcGxldElkIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBEcm9wbGV0XG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIERyb3BsZXRzLnByb3RvdHlwZS5kZWxldGVCeUlkID0gZnVuY3Rpb24gKGRyb3BsZXRJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoZHJvcGxldElkKSxcbiAgICAgICAgICAgIG1ldGhvZDogY29tbW9uXzEuSHR0cE1ldGhvZHMuREVMRVRFLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhbGwgRHJvcGxldHMgd2l0aCBhIGdpdmVuIFRhZ1xuICAgICAqIEBwYXJhbSB0YWdOYW1lIHRoZSBUYWcgdG8gZGVsZXRlIERyb3BsZXRzIGZvclxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBEcm9wbGV0cy5wcm90b3R5cGUuZGVsZXRlQnlUYWcgPSBmdW5jdGlvbiAodGFnTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZShfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5iYXNlT3B0aW9ucyksIHsgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5ERUxFVEUsIHFzOiB7XG4gICAgICAgICAgICAgICAgdGFnX25hbWU6IHRhZ05hbWUsXG4gICAgICAgICAgICB9IH0pKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbmVpZ2hib3JzIG9mIGEgRHJvcGxldCBieSBpdHMgaWRlbnRpZmllclxuICAgICAqIEBwYXJhbSBkcm9wbGV0SWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIERyb3BsZXRcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgRHJvcGxldHMucHJvdG90eXBlLmdldE5laWdoYm9ycyA9IGZ1bmN0aW9uIChkcm9wbGV0SWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGRyb3BsZXRJZCkgKyBcIi9uZWlnaGJvcnNcIixcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgRHJvcGxldCBVcGdyYWRlc1xuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBEcm9wbGV0cy5wcm90b3R5cGUuZ2V0VXBncmFkZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6ICdkcm9wbGV0X3VwZ3JhZGVzJyxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXF1ZXN0IGFuIEFjdGlvbiBvbiBhIERyb3BsZXRcbiAgICAgKiBAcGFyYW0gZHJvcGxldElkIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBEcm9wbGV0XG4gICAgICogQHBhcmFtIGFjdGlvbiB0aGUgQWN0aW9uIHRvIHJlcXVlc3RcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgRHJvcGxldHMucHJvdG90eXBlLnJlcXVlc3RBY3Rpb24gPSBmdW5jdGlvbiAoZHJvcGxldElkLCBhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGRyb3BsZXRJZCkgKyBcIi9hY3Rpb25zXCIsXG4gICAgICAgICAgICBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLlBPU1QsXG4gICAgICAgICAgICBib2R5OiBhY3Rpb24sXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVxdWVzdCBhbiBBY3Rpb24gb24gYWxsIERyb3BsZXRzIHdpdGggYSBnaXZlbiBUYWdcbiAgICAgKiBAcGFyYW0gdGFnTmFtZSB0aGUgVGFnIG5hbWUgdG8gZmlsdGVyIERyb3BsZXRzIHdpdGhcbiAgICAgKiBAcGFyYW0gYWN0aW9uIHRoZSBBY3Rpb24gdG8gcmVxdWVzdFxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBEcm9wbGV0cy5wcm90b3R5cGUucmVxdWVzdEFjdGlvbkJ5VGFnID0gZnVuY3Rpb24gKHRhZ05hbWUsIGFjdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvYWN0aW9uc1wiLFxuICAgICAgICAgICAgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5QT1NULFxuICAgICAgICAgICAgcXM6IHtcbiAgICAgICAgICAgICAgICB0YWdfbmFtZTogdGFnTmFtZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBib2R5OiBhY3Rpb24sXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkZXRhaWxzIG9mIGFuIEFjdGlvbiBvbiBhIERyb3BsZXRcbiAgICAgKiBAcGFyYW0gZHJvcGxldElkIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBEcm9wbGV0XG4gICAgICogQHBhcmFtIGFjdGlvbklkIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBBY3Rpb25cbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgRHJvcGxldHMucHJvdG90eXBlLmdldEFjdGlvbiA9IGZ1bmN0aW9uIChkcm9wbGV0SWQsIGFjdGlvbklkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGggKyBcIi9cIiArIGVuY29kZVVSSUNvbXBvbmVudChkcm9wbGV0SWQpICsgXCIvYWN0aW9ucy9cIiArIGVuY29kZVVSSUNvbXBvbmVudChhY3Rpb25JZCksXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIERyb3BsZXRzO1xufShiYXNlX21vZHVsZV8xLkJhc2VNb2R1bGUpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IERyb3BsZXRzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBiYXNlX21vZHVsZV8xID0gcmVxdWlyZShcIi4vYmFzZS1tb2R1bGVcIik7XG52YXIgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uXCIpO1xudmFyIEZpcmV3YWxscyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRmlyZXdhbGxzLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZpcmV3YWxscyhwYWdlU2l6ZSwgcmVxdWVzdEhlbHBlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwYWdlU2l6ZSwgcmVxdWVzdEhlbHBlcikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYmFzZVBhdGggPSAnZmlyZXdhbGxzJztcbiAgICAgICAgX3RoaXMuYmFzZU9wdGlvbnMgPSB7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiBfdGhpcy5iYXNlUGF0aCArIFwiL1wiLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBGaXJld2FsbFxuICAgICAqIEBwYXJhbSBvcHRpb25zIHRoZSBvcHRpb25zIGZvciB0aGUgbmV3IEZpcmV3YWxsXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIEZpcmV3YWxscy5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuYmFzZU9wdGlvbnMpLCB7IG1ldGhvZDogY29tbW9uXzEuSHR0cE1ldGhvZHMuUE9TVCwgYm9keTogb3B0aW9ucyB9KSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBGaXJld2FsbCBieSBpdHMgaWRlbnRpZmllclxuICAgICAqIEBwYXJhbSBmaXJld2FsbElkIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBGaXJld2FsbCB0byBkZWxldGVcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgRmlyZXdhbGxzLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAoZmlyZXdhbGxJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoZmlyZXdhbGxJZCksXG4gICAgICAgICAgICBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLkRFTEVURSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZSBhIEZpcmV3YWxsIHVzaW5nIGl0cyBpZGVudGlmaWVyXG4gICAgICogQHBhcmFtIGZpcmV3YWxsSWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIEZpcmV3YWxsIHRvIHJldHJpZXZlXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIEZpcmV3YWxscy5wcm90b3R5cGUuZ2V0QnlJZCA9IGZ1bmN0aW9uIChmaXJld2FsbElkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGggKyBcIi9cIiArIGVuY29kZVVSSUNvbXBvbmVudChmaXJld2FsbElkKSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAqIFJldHJpZXZlIGFsbCBmaXJld2FsbHNcbiAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAqL1xuICAgIEZpcmV3YWxscy5wcm90b3R5cGUuZ2V0QWxsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVXBkYXRlIGEgRmlyZXdhbGwgdXNpbmcgaXRzIGlkZW50aWZpZXJcbiAgICAgKiBAcGFyYW0gZmlyZXdhbGxJZCB0aGUgaWRlbnRpZmllciBvZiB0aGUgRmlyZXdhbGwgdG8gdXBkYXRlXG4gICAgICogQHBhcmFtIG9wdGlvbnMgdGhlIEZpcmV3YWxsIGRldGFpbHNcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgRmlyZXdhbGxzLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZmlyZXdhbGxJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoZmlyZXdhbGxJZCksXG4gICAgICAgICAgICBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLlBVVCxcbiAgICAgICAgICAgIGJvZHk6IG9wdGlvbnMsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkIERyb3BsZXRzIHRvIGFuIGV4aXN0aW5nIEZpcmV3YWxsXG4gICAgICogQHBhcmFtIGZpcmV3YWxsSWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIEZpcmV3YWxsIHRvIGFkZCB0aGUgRHJvcGxldHMgdG9cbiAgICAgKiBAcGFyYW0gZHJvcGxldElkcyB0aGUgaWRlbnRpZmllcnMgb2YgdGhlIERyb3BsZXRzXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIEZpcmV3YWxscy5wcm90b3R5cGUuYWRkRHJvcGxldHMgPSBmdW5jdGlvbiAoZmlyZXdhbGxJZCwgZHJvcGxldElkcykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoZmlyZXdhbGxJZCkgKyBcIi9kcm9wbGV0c1wiLFxuICAgICAgICAgICAgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5QT1NULFxuICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgIGRyb3BsZXRfaWRzOiBkcm9wbGV0SWRzLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgRHJvcGxldHMgZnJvbSBhbiBleGlzdGluZyBGaXJld2FsbFxuICAgICAqIEBwYXJhbSBmaXJld2FsbElkIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBGaXJld2FsbCB0byByZW1vdmUgdGhlIERyb3BsZXRzIGZyb21cbiAgICAgKiBAcGFyYW0gZHJvcGxldElkcyB0aGUgaWRlbnRpZmllcnMgb2YgdGhlIERyb3BsZXRzXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIEZpcmV3YWxscy5wcm90b3R5cGUucmVtb3ZlRHJvcGxldHMgPSBmdW5jdGlvbiAoZmlyZXdhbGxJZCwgZHJvcGxldElkcykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoZmlyZXdhbGxJZCkgKyBcIi9kcm9wbGV0c1wiLFxuICAgICAgICAgICAgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5ERUxFVEUsXG4gICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgZHJvcGxldF9pZHM6IGRyb3BsZXRJZHMsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZCBUYWdzIHRvIGFuIGV4aXN0aW5nIEZpcmV3YWxsXG4gICAgICogQHBhcmFtIGZpcmV3YWxsSWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIEZpcmV3YWxsIHRvIGFkZCB0aGUgVGFncyB0b1xuICAgICAqIEBwYXJhbSB0YWdzIHRoZSBUYWdzIHRvIGFkZFxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBGaXJld2FsbHMucHJvdG90eXBlLmFkZFRhZ3MgPSBmdW5jdGlvbiAoZmlyZXdhbGxJZCwgdGFncykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoZmlyZXdhbGxJZCkgKyBcIi90YWdzXCIsXG4gICAgICAgICAgICBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLlBPU1QsXG4gICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgdGFnczogdGFncyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIFRhZ3MgZnJvbSBhbiBleGlzdGluZyBGaXJld2FsbFxuICAgICAqIEBwYXJhbSBmaXJld2FsbElkIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBGaXJld2FsbCB0byByZW1vdmUgdGhlIFRhZ3MgZnJvbVxuICAgICAqIEBwYXJhbSB0YWdzIHRoZSBUYWdzIHRvIHJlbW92ZVxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBGaXJld2FsbHMucHJvdG90eXBlLnJlbW92ZVRhZ3MgPSBmdW5jdGlvbiAoZmlyZXdhbGxJZCwgdGFncykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoZmlyZXdhbGxJZCkgKyBcIi90YWdzXCIsXG4gICAgICAgICAgICBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLkRFTEVURSxcbiAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICB0YWdzOiB0YWdzLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBZGQgUnVsZXMgdG8gYW4gZXhpc3RpbmcgRmlyZXdhbGxcbiAgICAgKiBAcGFyYW0gZmlyZXdhbGxJZCB0aGUgaWRlbnRpZmllciBvZiB0aGUgRmlyZXdhbGwgdG8gYWRkIHRoZSBSdWxlcyB0b1xuICAgICAqIEBwYXJhbSBvcHRpb25zIHRoZSBSdWxlcyB0byBhZGRcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgRmlyZXdhbGxzLnByb3RvdHlwZS5hZGRSdWxlcyA9IGZ1bmN0aW9uIChmaXJld2FsbElkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGggKyBcIi9cIiArIGVuY29kZVVSSUNvbXBvbmVudChmaXJld2FsbElkKSArIFwiL3J1bGVzXCIsXG4gICAgICAgICAgICBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLlBPU1QsXG4gICAgICAgICAgICBib2R5OiBvcHRpb25zLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZSBSdWxlcyBmcm9tIGFuIGV4aXN0aW5nIEZpcmV3YWxsXG4gICAgICogQHBhcmFtIGZpcmV3YWxsSWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIEZpcmV3YWxsIHRvIHJlbW92ZSB0aGUgUnVsZXMgZnJvbVxuICAgICAqIEBwYXJhbSBvcHRpb25zIHRoZSBSdWxlcyB0byByZW1vdmVcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgRmlyZXdhbGxzLnByb3RvdHlwZS5yZW1vdmVSdWxlcyA9IGZ1bmN0aW9uIChmaXJld2FsbElkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGggKyBcIi9cIiArIGVuY29kZVVSSUNvbXBvbmVudChmaXJld2FsbElkKSArIFwiL3J1bGVzXCIsXG4gICAgICAgICAgICBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLkRFTEVURSxcbiAgICAgICAgICAgIGJvZHk6IG9wdGlvbnMsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEZpcmV3YWxscztcbn0oYmFzZV9tb2R1bGVfMS5CYXNlTW9kdWxlKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBGaXJld2FsbHM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGJhc2VfbW9kdWxlXzEgPSByZXF1aXJlKFwiLi9iYXNlLW1vZHVsZVwiKTtcbnZhciBjb21tb25fMSA9IHJlcXVpcmUoXCIuLi9jb21tb25cIik7XG52YXIgRmxvYXRpbmdJUHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEZsb2F0aW5nSVBzLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZsb2F0aW5nSVBzKHBhZ2VTaXplLCByZXF1ZXN0SGVscGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHBhZ2VTaXplLCByZXF1ZXN0SGVscGVyKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5iYXNlUGF0aCA9ICdmbG9hdGluZ19pcHMnO1xuICAgICAgICBfdGhpcy5iYXNlT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IF90aGlzLmJhc2VQYXRoICsgXCIvXCIsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBGbG9hdGluZyBJUHNcbiAgICAgKiBAcGFyYW0gW3RhZ05hbWVdIHJldHVybiBhbGwgRmxvYXRpbmcgSVBzIHdpdGggYSBnaXZlbiBUYWcgKG9wdGlvbmFsKVxuICAgICAqIEBwYXJhbSBbaW5jbHVkZUFsbF0gcmV0dXJuIGFsbCBGbG9hdGluZyBJUHMsIHBhZ2luYXRlZCAob3B0aW9uYWwpXG4gICAgICogQHBhcmFtIFtwYWdlXSB0aGUgc3BlY2lmaWMgcGFnZSBvZiBGbG9hdGluZyBJUHMgdG8gcmV0dXJuIChvcHRpb25hbClcbiAgICAgKiBAcGFyYW0gW3BhZ2VTaXplXSB0aGUgbnVtYmVyIG9mIEZsb2F0aW5nIElQcyB0byByZXR1cm4gcGVyIHBhZ2UgKG9wdGlvbmFsKVxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBGbG9hdGluZ0lQcy5wcm90b3R5cGUuZ2V0QWxsID0gZnVuY3Rpb24gKHRhZ05hbWUsIGluY2x1ZGVBbGwsIHBhZ2UsIHBhZ2VTaXplKSB7XG4gICAgICAgIGlmIChpbmNsdWRlQWxsID09PSB2b2lkIDApIHsgaW5jbHVkZUFsbCA9IGZhbHNlOyB9XG4gICAgICAgIGlmIChwYWdlID09PSB2b2lkIDApIHsgcGFnZSA9IDE7IH1cbiAgICAgICAgaWYgKHBhZ2VTaXplID09PSB2b2lkIDApIHsgcGFnZVNpemUgPSB0aGlzLnBhZ2VTaXplOyB9XG4gICAgICAgIHZhciByZXF1ZXN0T3B0aW9ucyA9IHRoaXMuX2dldEJhc2VQYWdpbmF0ZWRSZXF1ZXN0T3B0aW9ucyhfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5iYXNlT3B0aW9ucyksIHsga2V5OiAnZmxvYXRpbmdfaXBzJywgdGFnTmFtZTogdGFnTmFtZSwgcGFnZVNpemU6IHBhZ2VTaXplLCBwYWdlOiBwYWdlLCBpbmNsdWRlQWxsOiBpbmNsdWRlQWxsIH0pKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUocmVxdWVzdE9wdGlvbnMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQXNzaWduIGEgRHJvcGxldFxuICAgICAqIEBwYXJhbSBkcm9wbGV0SWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIERyb3BsZXRcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgRmxvYXRpbmdJUHMucHJvdG90eXBlLmFzc2lnbkRyb3BsZXQgPSBmdW5jdGlvbiAoZHJvcGxldElkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLmJhc2VPcHRpb25zKSwgeyBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLlBPU1QsIGJvZHk6IHtcbiAgICAgICAgICAgICAgICBkcm9wbGV0X2lkOiBkcm9wbGV0SWQsXG4gICAgICAgICAgICB9IH0pKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFzc2lnbiBhIFJlZ2lvblxuICAgICAqIEBwYXJhbSByZWdpb24gdGhlIHJlZ2lvbiB0byBhc3NpZ25cbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgRmxvYXRpbmdJUHMucHJvdG90eXBlLmFzc2lnblJlZ2lvbiA9IGZ1bmN0aW9uIChyZWdpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuYmFzZU9wdGlvbnMpLCB7IG1ldGhvZDogY29tbW9uXzEuSHR0cE1ldGhvZHMuUE9TVCwgYm9keToge1xuICAgICAgICAgICAgICAgIHJlZ2lvbjogcmVnaW9uLFxuICAgICAgICAgICAgfSB9KSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgYSBGbG9hdGluZyBJUFxuICAgICAqIEBwYXJhbSBpcEFkZHJlc3MgdGhlIEZsb2F0aW5nIElQIHRvIHJldHJpZXZlXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIEZsb2F0aW5nSVBzLnByb3RvdHlwZS5nZXRCeUlwID0gZnVuY3Rpb24gKGlwQWRkcmVzcykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoaXBBZGRyZXNzKSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBGbG9hdGluZyBJUFxuICAgICAqIEBwYXJhbSBpcEFkZHJlc3MgdGhlIEZsb2F0aW5nIElQIHRvIGRlbGV0ZVxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBGbG9hdGluZ0lQcy5wcm90b3R5cGUuZGVsZXRlQnlJcCA9IGZ1bmN0aW9uIChpcEFkZHJlc3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGlwQWRkcmVzcyksXG4gICAgICAgICAgICBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLkRFTEVURSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXF1ZXN0IGFuIGFjdGlvbiBvbiBhIEZsb2F0aW5nIElQXG4gICAgICogQHBhcmFtIGlwQWRkcmVzcyB0aGUgRmxvYXRpbmcgSVAgdG8gcmVxdWVzdCBhZ2FpbnN0XG4gICAgICogQHBhcmFtIGFjdGlvbiB0aGUgYWN0aW9uIHRvIHJlcXVlc3RcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgRmxvYXRpbmdJUHMucHJvdG90eXBlLnJlcXVlc3RBY3Rpb24gPSBmdW5jdGlvbiAoaXBBZGRyZXNzLCBhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGlwQWRkcmVzcykgKyBcIi9hY3Rpb25zXCIsXG4gICAgICAgICAgICBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLlBPU1QsXG4gICAgICAgICAgICBib2R5OiBhY3Rpb24sXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgYW4gYWN0aW9uIGZyb20gYSBGbG9hdGluZyBJUFxuICAgICAqIEBwYXJhbSBpcEFkZHJlc3MgdGhlIEZsb2F0aW5nIElQIHRvIHJldHJpZXZlXG4gICAgICogQHBhcmFtIGFjdGlvbklkIHRoZSBhY3Rpb24gdG8gcmV0cmlldmVcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgRmxvYXRpbmdJUHMucHJvdG90eXBlLmdldEFjdGlvbiA9IGZ1bmN0aW9uIChpcEFkZHJlc3MsIGFjdGlvbklkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGggKyBcIi9cIiArIGVuY29kZVVSSUNvbXBvbmVudChpcEFkZHJlc3MpICsgXCIvYWN0aW9ucy9cIiArIGVuY29kZVVSSUNvbXBvbmVudChhY3Rpb25JZCksXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBBY3Rpb25zIGZvciBhIEZsb2F0aW5nIElQXG4gICAgICogQHBhcmFtIGlwQWRkcmVzcyB0aGUgRmxvYXRpbmcgSVAgdG8gcmV0cmlldmUgYWN0aW9ucyBmb3JcbiAgICAgKiBAcGFyYW0gW3RhZ05hbWVdIHJldHVybiBhbGwgQWN0aW9ucyB3aXRoIGEgZ2l2ZW4gVGFnIChvcHRpb25hbClcbiAgICAgKiBAcGFyYW0gW2luY2x1ZGVBbGxdIHJldHVybiBhbGwgQWN0aW9ucywgcGFnaW5hdGVkIChvcHRpb25hbClcbiAgICAgKiBAcGFyYW0gW3BhZ2VdIHRoZSBzcGVjaWZpYyBwYWdlIG9mIEFjdGlvbnMgdG8gcmV0dXJuIChvcHRpb25hbClcbiAgICAgKiBAcGFyYW0gW3BhZ2VTaXplXSB0aGUgbnVtYmVyIG9mIEFjdGlvbnMgdG8gcmV0dXJuIHBlciBwYWdlIChvcHRpb25hbClcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgRmxvYXRpbmdJUHMucHJvdG90eXBlLmdldEFsbEFjdGlvbnMgPSBmdW5jdGlvbiAoaXBBZGRyZXNzLCB0YWdOYW1lLCBpbmNsdWRlQWxsLCBwYWdlLCBwYWdlU2l6ZSkge1xuICAgICAgICBpZiAoaW5jbHVkZUFsbCA9PT0gdm9pZCAwKSB7IGluY2x1ZGVBbGwgPSBmYWxzZTsgfVxuICAgICAgICBpZiAocGFnZSA9PT0gdm9pZCAwKSB7IHBhZ2UgPSAxOyB9XG4gICAgICAgIGlmIChwYWdlU2l6ZSA9PT0gdm9pZCAwKSB7IHBhZ2VTaXplID0gdGhpcy5wYWdlU2l6ZTsgfVxuICAgICAgICB2YXIgcmVxdWVzdE9wdGlvbnMgPSB0aGlzLl9nZXRCYXNlUGFnaW5hdGVkUmVxdWVzdE9wdGlvbnMoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGlwQWRkcmVzcykgKyBcIi9hY3Rpb25zXCIsXG4gICAgICAgICAgICBrZXk6ICdhY3Rpb25zJyxcbiAgICAgICAgICAgIHRhZ05hbWU6IHRhZ05hbWUsXG4gICAgICAgICAgICBwYWdlU2l6ZTogcGFnZVNpemUsXG4gICAgICAgICAgICBwYWdlOiBwYWdlLFxuICAgICAgICAgICAgaW5jbHVkZUFsbDogaW5jbHVkZUFsbCxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHJlcXVlc3RPcHRpb25zKTtcbiAgICB9O1xuICAgIHJldHVybiBGbG9hdGluZ0lQcztcbn0oYmFzZV9tb2R1bGVfMS5CYXNlTW9kdWxlKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBGbG9hdGluZ0lQcztcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBiYXNlX21vZHVsZV8xID0gcmVxdWlyZShcIi4vYmFzZS1tb2R1bGVcIik7XG52YXIgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uXCIpO1xudmFyIEltYWdlcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSW1hZ2VzLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEltYWdlcyhwYWdlU2l6ZSwgcmVxdWVzdEhlbHBlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwYWdlU2l6ZSwgcmVxdWVzdEhlbHBlcikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYmFzZVBhdGggPSAnaW1hZ2VzJztcbiAgICAgICAgX3RoaXMuYmFzZU9wdGlvbnMgPSB7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiBfdGhpcy5iYXNlUGF0aCArIFwiL1wiLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhbGwgSW1hZ2VzXG4gICAgICogQHBhcmFtIFt0YWdOYW1lXSBmaWx0ZXIgdG8gb25seSByZXR1cm4gSW1hZ2VzIHdpdGggYSBnaXZlbiB0YWdcbiAgICAgKiBAcGFyYW0gW2luY2x1ZGVBbGxdIHJldHVybiBhbGwgSW1hZ2VzLCBwYWdpbmF0ZWQgKG9wdGlvbmFsKVxuICAgICAqIEBwYXJhbSBbcGFnZV0gdGhlIHNwZWNpZmljIHBhZ2Ugb2YgSW1hZ2VzIHRvIHJldHVybiAob3B0aW9uYWwpXG4gICAgICogQHBhcmFtIFtwYWdlU2l6ZV0gdGhlIG51bWJlciBvZiBJbWFnZXMgdG8gcmV0dXJuIHBlciBwYWdlIChvcHRpb25hbClcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgSW1hZ2VzLnByb3RvdHlwZS5nZXRBbGwgPSBmdW5jdGlvbiAodGFnTmFtZSwgaW5jbHVkZUFsbCwgcGFnZSwgcGFnZVNpemUpIHtcbiAgICAgICAgaWYgKGluY2x1ZGVBbGwgPT09IHZvaWQgMCkgeyBpbmNsdWRlQWxsID0gZmFsc2U7IH1cbiAgICAgICAgaWYgKHBhZ2UgPT09IHZvaWQgMCkgeyBwYWdlID0gMTsgfVxuICAgICAgICBpZiAocGFnZVNpemUgPT09IHZvaWQgMCkgeyBwYWdlU2l6ZSA9IHRoaXMucGFnZVNpemU7IH1cbiAgICAgICAgdmFyIHJlcXVlc3RPcHRpb25zID0gdGhpcy5fZ2V0QmFzZVBhZ2luYXRlZFJlcXVlc3RPcHRpb25zKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGgsXG4gICAgICAgICAgICBrZXk6ICdpbWFnZXMnLFxuICAgICAgICAgICAgdGFnTmFtZTogdGFnTmFtZSxcbiAgICAgICAgICAgIHBhZ2VTaXplOiBwYWdlU2l6ZSxcbiAgICAgICAgICAgIHBhZ2U6IHBhZ2UsXG4gICAgICAgICAgICBpbmNsdWRlQWxsOiBpbmNsdWRlQWxsLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUocmVxdWVzdE9wdGlvbnMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IGFuIEltYWdlIHVzaW5nIGl0cyBpZGVudGlmaWVyIG9yIHNsdWdcbiAgICAgKiBAcGFyYW0gaW1hZ2VJZE9yU2x1ZyB0aGUgaWRlbnRpZmllciBvciBzbHVnIG9mIHRoZSBJbWFnZVxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBJbWFnZXMucHJvdG90eXBlLmdldEJ5SWRPclNsdWcgPSBmdW5jdGlvbiAoaW1hZ2VJZE9yU2x1Zykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoaW1hZ2VJZE9yU2x1ZyksXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGVsZXRlIGFuIEltYWdlIHVzaW5nIGl0cyBpZGVudGlmaWVyXG4gICAgICogQHBhcmFtIGltYWdlSWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIEltYWdlXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIEltYWdlcy5wcm90b3R5cGUuZGVsZXRlQnlJZCA9IGZ1bmN0aW9uIChpbWFnZUlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGggKyBcIi9cIiArIGVuY29kZVVSSUNvbXBvbmVudChpbWFnZUlkKSxcbiAgICAgICAgICAgIG1ldGhvZDogY29tbW9uXzEuSHR0cE1ldGhvZHMuREVMRVRFLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlbmFtZSBhbiBJbWFnZVxuICAgICAqIEBwYXJhbSBpbWFnZUlkIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBJbWFnZVxuICAgICAqIEBwYXJhbSBuZXdOYW1lIHRoZSBuZXcgbmFtZSB0byB1c2VcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgSW1hZ2VzLnByb3RvdHlwZS5yZW5hbWUgPSBmdW5jdGlvbiAoaW1hZ2VJZCwgbmV3TmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoaW1hZ2VJZCksXG4gICAgICAgICAgICBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLlBVVCxcbiAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBuZXdOYW1lLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIGFjdGlvbnMgZm9yIGFuIEltYWdlXG4gICAgICogQHBhcmFtIGltYWdlSWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIEltYWdlIHRvIHJldHJpZXZlIGFjdGlvbnMgZm9yXG4gICAgICogQHBhcmFtIFtpbmNsdWRlQWxsXSByZXR1cm4gYWxsIEltYWdlcywgcGFnaW5hdGVkIChvcHRpb25hbClcbiAgICAgKiBAcGFyYW0gW3BhZ2VdIHRoZSBzcGVjaWZpYyBwYWdlIG9mIEltYWdlcyB0byByZXR1cm4gKG9wdGlvbmFsKVxuICAgICAqIEBwYXJhbSBbcGFnZVNpemVdIHRoZSBudW1iZXIgb2YgSW1hZ2VzIHRvIHJldHVybiBwZXIgcGFnZSAob3B0aW9uYWwpXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIEltYWdlcy5wcm90b3R5cGUuZ2V0QWN0aW9ucyA9IGZ1bmN0aW9uIChpbWFnZUlkLCBpbmNsdWRlQWxsLCBwYWdlLCBwYWdlU2l6ZSkge1xuICAgICAgICBpZiAoaW5jbHVkZUFsbCA9PT0gdm9pZCAwKSB7IGluY2x1ZGVBbGwgPSBmYWxzZTsgfVxuICAgICAgICBpZiAocGFnZSA9PT0gdm9pZCAwKSB7IHBhZ2UgPSAxOyB9XG4gICAgICAgIGlmIChwYWdlU2l6ZSA9PT0gdm9pZCAwKSB7IHBhZ2VTaXplID0gdGhpcy5wYWdlU2l6ZTsgfVxuICAgICAgICB2YXIgcmVxdWVzdE9wdGlvbnMgPSB0aGlzLl9nZXRCYXNlUGFnaW5hdGVkUmVxdWVzdE9wdGlvbnMoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGltYWdlSWQpICsgXCIvYWN0aW9uc1wiLFxuICAgICAgICAgICAga2V5OiAnYWN0aW9ucycsXG4gICAgICAgICAgICBwYWdlU2l6ZTogcGFnZVNpemUsXG4gICAgICAgICAgICBwYWdlOiBwYWdlLFxuICAgICAgICAgICAgaW5jbHVkZUFsbDogaW5jbHVkZUFsbCxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHJlcXVlc3RPcHRpb25zKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZGV0YWlscyBvZiBhbiBBY3Rpb24gZm9yIGFuIEltYWdlXG4gICAgICogQHBhcmFtIGltYWdlSWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIEltYWdlXG4gICAgICogQHBhcmFtIGFjdGlvbklkIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBBY3Rpb25cbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgSW1hZ2VzLnByb3RvdHlwZS5nZXRBY3Rpb25CeUlkID0gZnVuY3Rpb24gKGltYWdlSWQsIGFjdGlvbklkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGggKyBcIi9cIiArIGVuY29kZVVSSUNvbXBvbmVudChpbWFnZUlkKSArIFwiL2FjdGlvbnMvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoYWN0aW9uSWQpLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlcXVlc3QgYW4gQWN0aW9uIG9uIGFuIEltYWdlXG4gICAgICogQHBhcmFtIGltYWdlSWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIEltYWdlXG4gICAgICogQHBhcmFtIGFjdGlvbiB0aGUgQWN0aW9uIHRvIHJlcXVlc3Qgb24gdGhlIEltYWdlXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIEltYWdlcy5wcm90b3R5cGUucmVxdWVzdEFjdGlvbiA9IGZ1bmN0aW9uIChpbWFnZUlkLCBhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGltYWdlSWQpICsgXCIvYWN0aW9uc1wiLFxuICAgICAgICAgICAgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5QT1NULFxuICAgICAgICAgICAgYm9keTogYWN0aW9uLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBJbWFnZXM7XG59KGJhc2VfbW9kdWxlXzEuQmFzZU1vZHVsZSkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gSW1hZ2VzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBiYXNlX21vZHVsZV8xID0gcmVxdWlyZShcIi4vYmFzZS1tb2R1bGVcIik7XG52YXIgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uXCIpO1xudmFyIEtleXMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEtleXMsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gS2V5cyhwYWdlU2l6ZSwgcmVxdWVzdEhlbHBlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwYWdlU2l6ZSwgcmVxdWVzdEhlbHBlcikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYmFzZVBhdGggPSAnYWNjb3VudC9rZXlzJztcbiAgICAgICAgX3RoaXMuYmFzZU9wdGlvbnMgPSB7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiBfdGhpcy5iYXNlUGF0aCArIFwiL1wiLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhbGwgU1NIIEtleXNcbiAgICAgKiBAcGFyYW0gW3RhZ05hbWVdIGZpbHRlciB0byBvbmx5IHJldHVybiBTU0ggS2V5cyB3aXRoIGEgZ2l2ZW4gdGFnXG4gICAgICogQHBhcmFtIFtpbmNsdWRlQWxsXSByZXR1cm4gYWxsIFNTSCBLZXlzLCBwYWdpbmF0ZWQgKG9wdGlvbmFsKVxuICAgICAqIEBwYXJhbSBbcGFnZV0gdGhlIHNwZWNpZmljIHBhZ2Ugb2YgU1NIIEtleXMgdG8gcmV0dXJuIChvcHRpb25hbClcbiAgICAgKiBAcGFyYW0gW3BhZ2VTaXplXSB0aGUgbnVtYmVyIG9mIFNTSCBLZXlzIHRvIHJldHVybiBwZXIgcGFnZSAob3B0aW9uYWwpXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIEtleXMucHJvdG90eXBlLmdldEFsbCA9IGZ1bmN0aW9uICh0YWdOYW1lLCBpbmNsdWRlQWxsLCBwYWdlLCBwYWdlU2l6ZSkge1xuICAgICAgICBpZiAoaW5jbHVkZUFsbCA9PT0gdm9pZCAwKSB7IGluY2x1ZGVBbGwgPSBmYWxzZTsgfVxuICAgICAgICBpZiAocGFnZSA9PT0gdm9pZCAwKSB7IHBhZ2UgPSAxOyB9XG4gICAgICAgIGlmIChwYWdlU2l6ZSA9PT0gdm9pZCAwKSB7IHBhZ2VTaXplID0gdGhpcy5wYWdlU2l6ZTsgfVxuICAgICAgICB2YXIgcmVxdWVzdE9wdGlvbnMgPSB0aGlzLl9nZXRCYXNlUGFnaW5hdGVkUmVxdWVzdE9wdGlvbnMoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCxcbiAgICAgICAgICAgIGtleTogJ3NzaF9rZXlzJyxcbiAgICAgICAgICAgIHRhZ05hbWU6IHRhZ05hbWUsXG4gICAgICAgICAgICBwYWdlU2l6ZTogcGFnZVNpemUsXG4gICAgICAgICAgICBwYWdlOiBwYWdlLFxuICAgICAgICAgICAgaW5jbHVkZUFsbDogaW5jbHVkZUFsbCxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHJlcXVlc3RPcHRpb25zKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCBhIHNwZWNpZmljIFNTSCBLZXkgdXNpbmcgaXRzIGlkZW50aWZpZXJcbiAgICAgKiBAcGFyYW0ga2V5SWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIFNTSCBLZXlcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgS2V5cy5wcm90b3R5cGUuZ2V0QnlJZCA9IGZ1bmN0aW9uIChrZXlJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoa2V5SWQpXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IGEgc3BlY2lmaWMgU1NIIEtleSB1c2luZyBpdHMgZmluZ2VycHJpbnRcbiAgICAgKiBAcGFyYW0gZmluZ2VycHJpbnQgdGhlIGZpbmdlcnByaW50IG9mIHRoZSBTU0ggS2V5IHRvIHJldHJpZXZlXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIEtleXMucHJvdG90eXBlLmdldEJ5RmluZ2VycHJpbnQgPSBmdW5jdGlvbiAoZmluZ2VycHJpbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGZpbmdlcnByaW50KVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZCBhIG5ldyBTU0ggS2V5IHRvIGFuIGFjY291bnRcbiAgICAgKiBAcGFyYW0gYWRkS2V5UmVxdWVzdCB0aGUgY29uZmlndXJhdGlvbiBvZiB0aGUgU1NIIEtleVxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBLZXlzLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoYWRkS2V5UmVxdWVzdCkge1xuICAgICAgICB2YXIgcmVxdWVzdE9wdGlvbnMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5iYXNlT3B0aW9ucyksIHsgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5QT1NULCBib2R5OiBhZGRLZXlSZXF1ZXN0IH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZShyZXF1ZXN0T3B0aW9ucyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZW5hbWUgYW4gU1NIIEtleVxuICAgICAqIEBwYXJhbSBpZGVudGlmaWVyIHRoZSBJRCBvciBGaW5nZXJwcmludCBvZiB0aGUgU1NIIEtleSB0byByZW5hbWVcbiAgICAgKiBAcGFyYW0gbmV3TmFtZSB0aGUgbmV3IG5hbWUgdG8gc2V0IG9uIHRoZSBTU0ggS2V5XG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIEtleXMucHJvdG90eXBlLnJlbmFtZSA9IGZ1bmN0aW9uIChpZGVudGlmaWVyLCBuZXdOYW1lKSB7XG4gICAgICAgIHZhciByZXF1ZXN0T3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGggKyBcIi9cIiArIGVuY29kZVVSSUNvbXBvbmVudChpZGVudGlmaWVyKSxcbiAgICAgICAgICAgIG1ldGhvZDogY29tbW9uXzEuSHR0cE1ldGhvZHMuUFVULFxuICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgIG5hbWU6IG5ld05hbWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZShyZXF1ZXN0T3B0aW9ucyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZWxldGUgYW4gU1NIIEtleVxuICAgICAqIEBwYXJhbSBpZGVudGlmaWVyIHRoZSBJRCBvciBGaW5nZXJwcmludCBvZiB0aGUgU1NIIEtleSB5b3Ugd2lzaCB0byBkZWxldGVcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgS2V5cy5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGlkZW50aWZpZXIpIHtcbiAgICAgICAgdmFyIHJlcXVlc3RPcHRpb25zID0ge1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGlkZW50aWZpZXIpLFxuICAgICAgICAgICAgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5ERUxFVEUsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHJlcXVlc3RPcHRpb25zKTtcbiAgICB9O1xuICAgIHJldHVybiBLZXlzO1xufShiYXNlX21vZHVsZV8xLkJhc2VNb2R1bGUpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IEtleXM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGJhc2VfbW9kdWxlXzEgPSByZXF1aXJlKFwiLi9iYXNlLW1vZHVsZVwiKTtcbnZhciBjb21tb25fMSA9IHJlcXVpcmUoXCIuLi9jb21tb25cIik7XG52YXIgS3ViZXJuZXRlcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoS3ViZXJuZXRlcywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBLdWJlcm5ldGVzKHBhZ2VTaXplLCByZXF1ZXN0SGVscGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHBhZ2VTaXplLCByZXF1ZXN0SGVscGVyKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5iYXNlUGF0aCA9ICdrdWJlcm5ldGVzL2NsdXN0ZXJzJztcbiAgICAgICAgX3RoaXMuYmFzZU9wdGlvbnMgPSB7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiBfdGhpcy5iYXNlUGF0aCArIFwiL1wiLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgS3ViZXJuZXRlcyBGZWF0dXJlIEF2YWlsYWJpbGl0eVxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBLdWJlcm5ldGVzLnByb3RvdHlwZS5nZXRBdmFpbGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IFwia3ViZXJuZXRlcy9vcHRpb25zXCIsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBLdWJlcm5ldGVzIENsdXN0ZXJzXG4gICAgICogQHBhcmFtIFtpbmNsdWRlQWxsXSByZXR1cm4gYWxsIEt1YmVybmV0ZXMgQ2x1c3RlcnMsIHBhZ2luYXRlZCAob3B0aW9uYWwpXG4gICAgICogQHBhcmFtIFtwYWdlXSB0aGUgc3BlY2lmaWMgcGFnZSBvZiBLdWJlcm5ldGVzIENsdXN0ZXJzIHRvIHJldHVybiAob3B0aW9uYWwpXG4gICAgICogQHBhcmFtIFtwYWdlU2l6ZV0gdGhlIG51bWJlciBvZiBLdWJlcm5ldGVzIENsdXN0ZXJzIHRvIHJldHVybiBwZXIgcGFnZSAob3B0aW9uYWwpXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIEt1YmVybmV0ZXMucHJvdG90eXBlLmdldENsdXN0ZXJzID0gZnVuY3Rpb24gKGluY2x1ZGVBbGwsIHBhZ2UsIHBhZ2VTaXplKSB7XG4gICAgICAgIGlmIChpbmNsdWRlQWxsID09PSB2b2lkIDApIHsgaW5jbHVkZUFsbCA9IGZhbHNlOyB9XG4gICAgICAgIGlmIChwYWdlID09PSB2b2lkIDApIHsgcGFnZSA9IDE7IH1cbiAgICAgICAgaWYgKHBhZ2VTaXplID09PSB2b2lkIDApIHsgcGFnZVNpemUgPSB0aGlzLnBhZ2VTaXplOyB9XG4gICAgICAgIHZhciByZXF1ZXN0T3B0aW9ucyA9IHRoaXMuX2dldEJhc2VQYWdpbmF0ZWRSZXF1ZXN0T3B0aW9ucyhfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5iYXNlT3B0aW9ucyksIHsga2V5OiAna3ViZXJuZXRlcycsIHBhZ2VTaXplOiBwYWdlU2l6ZSwgcGFnZTogcGFnZSwgaW5jbHVkZUFsbDogaW5jbHVkZUFsbCB9KSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHJlcXVlc3RPcHRpb25zKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBLdWJlcm5ldGVzIENsdXN0ZXJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyB0aGUgb3B0aW9ucyBmb3IgdGhlIG5ldyBLdWJlcm5ldGVzIENsdXN0ZXJcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgS3ViZXJuZXRlcy5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuYmFzZU9wdGlvbnMpLCB7IG1ldGhvZDogY29tbW9uXzEuSHR0cE1ldGhvZHMuUE9TVCwgYm9keTogb3B0aW9ucyB9KSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgYSBLdWJlcm5ldGVzIENsdXN0ZXIgYnkgaXRzIGlkZW50aWZpZXJcbiAgICAgKiBAcGFyYW0gY2x1c3RlcklkIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBDbHVzdGVyXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIEt1YmVybmV0ZXMucHJvdG90eXBlLmdldEJ5SWQgPSBmdW5jdGlvbiAoY2x1c3RlcklkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGggKyBcIi9cIiArIGVuY29kZVVSSUNvbXBvbmVudChjbHVzdGVySWQpLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUga3ViZWNvbmZpZyBmb3IgYSAgS3ViZXJuZXRlcyBDbHVzdGVyXG4gICAgICogQHBhcmFtIGNsdXN0ZXJJZCB0aGUgaWRlbnRpZmllciBvZiB0aGUgQ2x1c3RlclxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBLdWJlcm5ldGVzLnByb3RvdHlwZS5nZXRLdWJlY29uZmlnID0gZnVuY3Rpb24gKGNsdXN0ZXJJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoY2x1c3RlcklkKSArIFwiL2t1YmVjb25maWdcIixcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBLdWJlcm5ldGVzIENsdXN0ZXIgYnkgaXRzIGlkZW50aWZpZXJcbiAgICAgKiBAcGFyYW0gY2x1c3RlcklkIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBDbHVzdGVyXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIEt1YmVybmV0ZXMucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChjbHVzdGVySWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGNsdXN0ZXJJZCksXG4gICAgICAgICAgICBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLkRFTEVURSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIE5vZGUgUG9vbHMgZm9yIGEgS3ViZXJuZXRlcyBDbHVzdGVyXG4gICAgICogQHBhcmFtIGNsdXN0ZXJJZCB0aGUgQ2x1c3RlciBpZGVudGlmaWVyXG4gICAgICogQHBhcmFtIFtpbmNsdWRlQWxsXSByZXR1cm4gYWxsIE5vZGUgUG9vbHMsIHBhZ2luYXRlZCAob3B0aW9uYWwpXG4gICAgICogQHBhcmFtIFtwYWdlXSB0aGUgc3BlY2lmaWMgcGFnZSBvZiBOb2RlIFBvb2xzIHRvIHJldHVybiAob3B0aW9uYWwpXG4gICAgICogQHBhcmFtIFtwYWdlU2l6ZV0gdGhlIG51bWJlciBvZiBOb2RlIFBvb2xzIHRvIHJldHVybiBwZXIgcGFnZSAob3B0aW9uYWwpXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIEt1YmVybmV0ZXMucHJvdG90eXBlLmdldE5vZGVQb29scyA9IGZ1bmN0aW9uIChjbHVzdGVySWQsIGluY2x1ZGVBbGwsIHBhZ2UsIHBhZ2VTaXplKSB7XG4gICAgICAgIGlmIChpbmNsdWRlQWxsID09PSB2b2lkIDApIHsgaW5jbHVkZUFsbCA9IGZhbHNlOyB9XG4gICAgICAgIGlmIChwYWdlID09PSB2b2lkIDApIHsgcGFnZSA9IDE7IH1cbiAgICAgICAgaWYgKHBhZ2VTaXplID09PSB2b2lkIDApIHsgcGFnZVNpemUgPSB0aGlzLnBhZ2VTaXplOyB9XG4gICAgICAgIHZhciByZXF1ZXN0T3B0aW9ucyA9IHRoaXMuX2dldEJhc2VQYWdpbmF0ZWRSZXF1ZXN0T3B0aW9ucyh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoY2x1c3RlcklkKSArIFwiL25vZGVfcG9vbHNcIixcbiAgICAgICAgICAgIGtleTogJ2t1YmVybmV0ZXMnLFxuICAgICAgICAgICAgcGFnZVNpemU6IHBhZ2VTaXplLFxuICAgICAgICAgICAgcGFnZTogcGFnZSxcbiAgICAgICAgICAgIGluY2x1ZGVBbGw6IGluY2x1ZGVBbGwsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZShyZXF1ZXN0T3B0aW9ucyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgYSBzcGVjaWZpYyBOb2RlIFBvb2wgZm9yIGEgS3ViZXJuZXRlcyBDbHVzdGVyXG4gICAgICogQHBhcmFtIGNsdXN0ZXJJZCB0aGUgaWRlbnRpZmllciBvZiB0aGUgQ2x1c3RlclxuICAgICAqIEBwYXJhbSBub2RlUG9vbElkIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBOb2RlIFBvb2xcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgS3ViZXJuZXRlcy5wcm90b3R5cGUuZ2V0Tm9kZVBvb2xCeUlkID0gZnVuY3Rpb24gKGNsdXN0ZXJJZCwgbm9kZVBvb2xJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoY2x1c3RlcklkKSArIFwiL25vZGVfcG9vbHMvXCIgKyBlbmNvZGVVUklDb21wb25lbnQobm9kZVBvb2xJZCksXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkIGEgTm9kZSBQb29sIHRvIGEgS3ViZXJuZXRlcyBDbHVzdGVyXG4gICAgICogQHBhcmFtIGNsdXN0ZXJJZCB0aGUgaWRlbnRpZmllciBvZiB0aGUgQ2x1c3RlclxuICAgICAqIEBwYXJhbSBub2RlUG9vbCB0aGUgTm9kZSBQb29sIGNvbmZpZ3VyYXRpb24gb3B0aW9uc1xuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBLdWJlcm5ldGVzLnByb3RvdHlwZS5hZGROb2RlUG9vbCA9IGZ1bmN0aW9uIChjbHVzdGVySWQsIG5vZGVQb29sKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGggKyBcIi9cIiArIGVuY29kZVVSSUNvbXBvbmVudChjbHVzdGVySWQpICsgXCIvbm9kZV9wb29sc1wiLFxuICAgICAgICAgICAgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5QT1NULFxuICAgICAgICAgICAgYm9keTogbm9kZVBvb2wsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVXBkYXRlIGEgc3BlY2lmaWMgTm9kZSBQb29sIGZvciBhIEt1YmVybmV0ZXMgQ2x1c3RlclxuICAgICAqIEBwYXJhbSBjbHVzdGVySWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIENsdXN0ZXJcbiAgICAgKiBAcGFyYW0gbm9kZVBvb2xJZCB0aGUgaWRlbnRpZmllciBvZiB0aGUgTm9kZSBQb29sXG4gICAgICogQHBhcmFtIG5vZGVQb29sT3B0aW9ucyB0aGUgTm9kZSBQb29sIG9wdGlvbnNcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgS3ViZXJuZXRlcy5wcm90b3R5cGUudXBkYXRlTm9kZVBvb2wgPSBmdW5jdGlvbiAoY2x1c3RlcklkLCBub2RlUG9vbElkLCBub2RlUG9vbE9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGNsdXN0ZXJJZCkgKyBcIi9ub2RlX3Bvb2xzL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KG5vZGVQb29sSWQpLFxuICAgICAgICAgICAgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5QVVQsXG4gICAgICAgICAgICBib2R5OiBub2RlUG9vbE9wdGlvbnMsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGVsZXRlIGEgTm9kZSBQb29sIGZvciBhIEt1YmVybmV0ZXMgQ2x1c3RlclxuICAgICAqIEBwYXJhbSBjbHVzdGVySWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIENsdXN0ZXJcbiAgICAgKiBAcGFyYW0gbm9kZVBvb2xJZCB0aGUgaWRlbnRpZmllciBvZiB0aGUgTm9kZSBQb29sXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIEt1YmVybmV0ZXMucHJvdG90eXBlLmRlbGV0ZU5vZGVQb29sID0gZnVuY3Rpb24gKGNsdXN0ZXJJZCwgbm9kZVBvb2xJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoY2x1c3RlcklkKSArIFwiL25vZGVfcG9vbHMvXCIgKyBlbmNvZGVVUklDb21wb25lbnQobm9kZVBvb2xJZCksXG4gICAgICAgICAgICBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLkRFTEVURSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZWN5Y2xlIGEgTm9kZSBQb29sIG9uIGEgQ2x1c3RlclxuICAgICAqIEBwYXJhbSBjbHVzdGVySWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIENsdXN0ZXJcbiAgICAgKiBAcGFyYW0gbm9kZVBvb2xJZCB0aGUgaWRlbnRpZmllciBvZiB0aGUgTm9kZSBQb29sXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIEt1YmVybmV0ZXMucHJvdG90eXBlLnJlY3ljbGVOb2RlUG9vbCA9IGZ1bmN0aW9uIChjbHVzdGVySWQsIG5vZGVQb29sSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGNsdXN0ZXJJZCkgKyBcIi9ub2RlX3Bvb2xzL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KG5vZGVQb29sSWQpICsgXCIvcmVjeWNsZVwiLFxuICAgICAgICAgICAgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5QT1NULFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBLdWJlcm5ldGVzO1xufShiYXNlX21vZHVsZV8xLkJhc2VNb2R1bGUpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IEt1YmVybmV0ZXM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGJhc2VfbW9kdWxlXzEgPSByZXF1aXJlKFwiLi9iYXNlLW1vZHVsZVwiKTtcbnZhciBjb21tb25fMSA9IHJlcXVpcmUoXCIuLi9jb21tb25cIik7XG52YXIgTG9hZEJhbGFuY2VycyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTG9hZEJhbGFuY2VycywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBMb2FkQmFsYW5jZXJzKHBhZ2VTaXplLCByZXF1ZXN0SGVscGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHBhZ2VTaXplLCByZXF1ZXN0SGVscGVyKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5iYXNlUGF0aCA9ICdsb2FkX2JhbGFuY2Vycyc7XG4gICAgICAgIF90aGlzLmJhc2VPcHRpb25zID0ge1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogX3RoaXMuYmFzZVBhdGggKyBcIi9cIixcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgTG9hZCBCYWxhbmNlclxuICAgICAqIEBwYXJhbSBvcHRpb25zIHRoZSBvcHRpb25zIGZvciB0aGUgTG9hZCBCYWxhbmNlclxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBMb2FkQmFsYW5jZXJzLnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZShfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5iYXNlT3B0aW9ucyksIHsgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5QT1NULCBib2R5OiBvcHRpb25zIH0pKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCBhbGwgTG9hZCBCYWxhbmNlcnNcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgTG9hZEJhbGFuY2Vycy5wcm90b3R5cGUuZ2V0QWxsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZShfX2Fzc2lnbih7fSwgdGhpcy5iYXNlT3B0aW9ucykpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IGEgTG9hZCBCYWxhbmNlciB1c2luZyBpdHMgaWRlbnRpZmllclxuICAgICAqIEBwYXJhbSBsb2FkQmFsYW5jZXJJZCB0aGUgaWRlbnRpZmllciBvZiB0aGUgTG9hZCBCYWxhbmNlclxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBMb2FkQmFsYW5jZXJzLnByb3RvdHlwZS5nZXRCeUlkID0gZnVuY3Rpb24gKGxvYWRCYWxhbmNlcklkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGggKyBcIi9cIiArIGxvYWRCYWxhbmNlcklkLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBhIExvYWQgQmFsYW5jZXJcbiAgICAgKiBAcGFyYW0gbG9hZEJhbGFuY2VySWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIExvYWQgQmFsYW5jZXJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyB0aGUgb3B0aW9ucyB0byB1cGRhdGUgdGhlIExvYWQgQmFsYW5jZXJcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgTG9hZEJhbGFuY2Vycy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGxvYWRCYWxhbmNlcklkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGggKyBcIi9cIiArIGxvYWRCYWxhbmNlcklkLFxuICAgICAgICAgICAgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5QVVQsXG4gICAgICAgICAgICBib2R5OiBvcHRpb25zLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhIExvYWQgQmFsYW5jZXJcbiAgICAgKiBAcGFyYW0gbG9hZEJhbGFuY2VySWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIExvYWQgQmFsYW5jZXJcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgTG9hZEJhbGFuY2Vycy5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGxvYWRCYWxhbmNlcklkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGggKyBcIi9cIiArIGxvYWRCYWxhbmNlcklkLFxuICAgICAgICAgICAgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5ERUxFVEUsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkIERyb3BsZXRzIHRvIGEgTG9hZCBCYWxhbmNlclxuICAgICAqIEBwYXJhbSBsb2FkQmFsYW5jZXJJZCB0aGUgaWRlbnRpZmllciBvZiB0aGUgTG9hZCBCYWxhbmNlclxuICAgICAqIEBwYXJhbSBkcm9wbGV0SWRzIHRoZSBpZGVudGlmaWVycyBvZiB0aGUgRHJvcGxldHMgdG8gYWRkXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIExvYWRCYWxhbmNlcnMucHJvdG90eXBlLmFkZERyb3BsZXRzID0gZnVuY3Rpb24gKGxvYWRCYWxhbmNlcklkLCBkcm9wbGV0SWRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGggKyBcIi9cIiArIGxvYWRCYWxhbmNlcklkICsgXCIvZHJvcGxldHNcIixcbiAgICAgICAgICAgIG1ldGhvZDogY29tbW9uXzEuSHR0cE1ldGhvZHMuUE9TVCxcbiAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICBkcm9wbGV0X2lkczogZHJvcGxldElkcyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIERyb3BsZXRzIGZyb20gYSBMb2FkIEJhbGFuY2VyXG4gICAgICogQHBhcmFtIGxvYWRCYWxhbmNlcklkIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBMb2FkIEJhbGFuY2VyXG4gICAgICogQHBhcmFtIGRyb3BsZXRJZHMgdGhlIGlkZW50aWZpZXJzIG9mIHRoZSBEcm9wbGV0cyB0byByZW1vdmVcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgTG9hZEJhbGFuY2Vycy5wcm90b3R5cGUucmVtb3ZlRHJvcGxldHMgPSBmdW5jdGlvbiAobG9hZEJhbGFuY2VySWQsIGRyb3BsZXRJZHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgbG9hZEJhbGFuY2VySWQgKyBcIi9kcm9wbGV0c1wiLFxuICAgICAgICAgICAgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5ERUxFVEUsXG4gICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgZHJvcGxldF9pZHM6IGRyb3BsZXRJZHMsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZCBGb3J3YXJkaW5nIFJ1bGVzIHRvIGEgTG9hZCBCYWxhbmNlclxuICAgICAqIEBwYXJhbSBsb2FkQmFsYW5jZXJJZCB0aGUgaWRlbnRpZmllciBvZiB0aGUgTG9hZCBCYWxhbmNlclxuICAgICAqIEBwYXJhbSBydWxlcyB0aGUgRm9yd2FyZGluZyBSdWxlcyB0byBhZGRcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgTG9hZEJhbGFuY2Vycy5wcm90b3R5cGUuYWRkRm9yd2FyZGluZ1J1bGVzID0gZnVuY3Rpb24gKGxvYWRCYWxhbmNlcklkLCBydWxlcykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBsb2FkQmFsYW5jZXJJZCArIFwiL2ZvcndhcmRpbmdfcnVsZXNcIixcbiAgICAgICAgICAgIG1ldGhvZDogY29tbW9uXzEuSHR0cE1ldGhvZHMuUE9TVCxcbiAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICBmb3J3YXJkaW5nX3J1bGVzOiBydWxlcyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIEZvcndhcmRpbmcgUnVsZXMgZnJvbSBhIExvYWQgQmFsYW5jZXJcbiAgICAgKiBAcGFyYW0gbG9hZEJhbGFuY2VySWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIExvYWQgQmFsYW5jZXJcbiAgICAgKiBAcGFyYW0gcnVsZXMgdGhlIEZvcndhcmRpbmcgUnVsZXMgdG8gcmVtb3ZlXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIExvYWRCYWxhbmNlcnMucHJvdG90eXBlLnJlbW92ZUZvcndhcmRpbmdSdWxlcyA9IGZ1bmN0aW9uIChsb2FkQmFsYW5jZXJJZCwgcnVsZXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgbG9hZEJhbGFuY2VySWQgKyBcIi9mb3J3YXJkaW5nX3J1bGVzXCIsXG4gICAgICAgICAgICBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLkRFTEVURSxcbiAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICBmb3J3YXJkaW5nX3J1bGVzOiBydWxlcyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIExvYWRCYWxhbmNlcnM7XG59KGJhc2VfbW9kdWxlXzEuQmFzZU1vZHVsZSkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gTG9hZEJhbGFuY2VycztcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYmFzZV9tb2R1bGVfMSA9IHJlcXVpcmUoXCIuL2Jhc2UtbW9kdWxlXCIpO1xudmFyIGNvbW1vbl8xID0gcmVxdWlyZShcIi4uL2NvbW1vblwiKTtcbnZhciBQcm9qZWN0cyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUHJvamVjdHMsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUHJvamVjdHMocGFnZVNpemUsIHJlcXVlc3RIZWxwZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcGFnZVNpemUsIHJlcXVlc3RIZWxwZXIpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmJhc2VQYXRoID0gJ3Byb2plY3RzJztcbiAgICAgICAgX3RoaXMuYmFzZU9wdGlvbnMgPSB7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiBcIlwiICsgX3RoaXMuYmFzZVBhdGgsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBQcm9qZWN0c1xuICAgICAqIEBwYXJhbSBbaW5jbHVkZUFsbF0gcmV0dXJuIGFsbCBQcm9qZWN0cywgcGFnaW5hdGVkIChvcHRpb25hbClcbiAgICAgKiBAcGFyYW0gW3BhZ2VdIHRoZSBzcGVjaWZpYyBwYWdlIG9mIFByb2plY3RzIHRvIHJldHVybiAob3B0aW9uYWwpXG4gICAgICogQHBhcmFtIFtwYWdlU2l6ZV0gdGhlIG51bWJlciBvZiBQcm9qZWN0cyB0byByZXR1cm4gcGVyIHBhZ2UgKG9wdGlvbmFsKVxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBQcm9qZWN0cy5wcm90b3R5cGUuZ2V0QWxsID0gZnVuY3Rpb24gKGluY2x1ZGVBbGwsIHBhZ2UsIHBhZ2VTaXplKSB7XG4gICAgICAgIGlmIChpbmNsdWRlQWxsID09PSB2b2lkIDApIHsgaW5jbHVkZUFsbCA9IGZhbHNlOyB9XG4gICAgICAgIGlmIChwYWdlID09PSB2b2lkIDApIHsgcGFnZSA9IDE7IH1cbiAgICAgICAgaWYgKHBhZ2VTaXplID09PSB2b2lkIDApIHsgcGFnZVNpemUgPSB0aGlzLnBhZ2VTaXplOyB9XG4gICAgICAgIHZhciByZXF1ZXN0T3B0aW9ucyA9IHRoaXMuX2dldEJhc2VQYWdpbmF0ZWRSZXF1ZXN0T3B0aW9ucyhfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5iYXNlT3B0aW9ucyksIHsga2V5OiAncHJvamVjdHMnLCBwYWdlU2l6ZTogcGFnZVNpemUsIHBhZ2U6IHBhZ2UsIGluY2x1ZGVBbGw6IGluY2x1ZGVBbGwgfSkpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZShyZXF1ZXN0T3B0aW9ucyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgUHJvamVjdFxuICAgICAqIEBwYXJhbSBwcm9qZWN0T3B0aW9ucyB0aGUgb3B0aW9ucyBmb3IgdGhlIFByb2plY3RcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgUHJvamVjdHMucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIChwcm9qZWN0T3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZShfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5iYXNlT3B0aW9ucyksIHsgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5QT1NULCBib2R5OiBwcm9qZWN0T3B0aW9ucyB9KSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgYSBQcm9qZWN0IHVzaW5nIGl0cyBpZGVudGlmaWVyXG4gICAgICogQHBhcmFtIHByb2plY3RJZCB0aGUgaWRlbnRpZmllciBvZiB0aGUgUHJvamVjdFxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBQcm9qZWN0cy5wcm90b3R5cGUuZ2V0QnlJZCA9IGZ1bmN0aW9uIChwcm9qZWN0SWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KHByb2plY3RJZCksXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVXBkYXRlIGEgUHJvamVjdFxuICAgICAqIEBwYXJhbSBwcm9qZWN0SWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIFByb2plY3RcbiAgICAgKiBAcGFyYW0gcHJvamVjdE9wdGlvbnMgdGhlIG9wdGlvbnMgZm9yIHRoZSBQcm9qZWN0XG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIFByb2plY3RzLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAocHJvamVjdElkLCBwcm9qZWN0T3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQocHJvamVjdElkKSxcbiAgICAgICAgICAgIG1ldGhvZDogY29tbW9uXzEuSHR0cE1ldGhvZHMuUFVULFxuICAgICAgICAgICAgYm9keTogcHJvamVjdE9wdGlvbnMsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUGF0Y2ggYSBQcm9qZWN0XG4gICAgICogQHBhcmFtIHByb2plY3RJZCB0aGUgaWRlbnRpZmllciBvZiB0aGUgUHJvamVjdFxuICAgICAqIEBwYXJhbSBwcm9qZWN0T3B0aW9ucyB0aGUgb3B0aW9ucyBmb3IgdGhlIFByb2plY3RcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgUHJvamVjdHMucHJvdG90eXBlLnBhdGNoID0gZnVuY3Rpb24gKHByb2plY3RJZCwgcHJvamVjdE9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KHByb2plY3RJZCksXG4gICAgICAgICAgICBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLlBBVENILFxuICAgICAgICAgICAgYm9keTogcHJvamVjdE9wdGlvbnMsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSByZXNvdXJjZXMgZm9yIGEgUHJvamVjdCB1c2luZyBpdHMgaWRlbnRpZmllclxuICAgICAqIEBwYXJhbSBwcm9qZWN0SWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIFByb2plY3RcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgUHJvamVjdHMucHJvdG90eXBlLmdldFJlc291cmNlcyA9IGZ1bmN0aW9uIChwcm9qZWN0SWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KHByb2plY3RJZCkgKyBcIi9yZXNvdXJjZXNcIixcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBZGQgcmVzb3VyY2VzIHRvIGEgUHJvamVjdCB1c2luZyBpdHMgaWRlbnRpZmllclxuICAgICAqIEBwYXJhbSBwcm9qZWN0SWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIFByb2plY3RcbiAgICAgKiBAcGFyYW0gcmVzb3VyY2VzIHRoZSByZXNvdXJjZXMgdG8gYWRkIHRvIHRoZSBQcm9qZWN0XG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIFByb2plY3RzLnByb3RvdHlwZS5hZGRSZXNvdXJjZXMgPSBmdW5jdGlvbiAocHJvamVjdElkLCByZXNvdXJjZXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KHByb2plY3RJZCkgKyBcIi9yZXNvdXJjZXNcIixcbiAgICAgICAgICAgIG1ldGhvZDogY29tbW9uXzEuSHR0cE1ldGhvZHMuUE9TVCxcbiAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICByZXNvdXJjZXM6IHJlc291cmNlcyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkZWZhdWx0IFByb2plY3RcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgUHJvamVjdHMucHJvdG90eXBlLmdldERlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGggKyBcIi9kZWZhdWx0XCIsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSByZXNvdXJjZXMgb2YgdGhlIGRlZmF1bHQgUHJvamVjdFxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBQcm9qZWN0cy5wcm90b3R5cGUuZ2V0RGVmYXVsdFJlc291cmNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL2RlZmF1bHQvcmVzb3VyY2VzXCIsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkIHJlc291cmNlcyB0byB0aGUgZGVmYXVsdCBQcm9qZWN0XG4gICAgICogQHBhcmFtIHJlc291cmNlcyB0aGUgcmVzb3VyY2VzIHRvIGFkZFxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBQcm9qZWN0cy5wcm90b3R5cGUuYWRkRGVmYXVsdFJlc291cmNlcyA9IGZ1bmN0aW9uIChyZXNvdXJjZXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL2RlZmF1bHQvcmVzb3VyY2VzXCIsXG4gICAgICAgICAgICBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLlBPU1QsXG4gICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgcmVzb3VyY2VzOiByZXNvdXJjZXMsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgZGVmYXVsdCBQcm9qZWN0XG4gICAgICogQHBhcmFtIHByb2plY3RPcHRpb25zIHRoZSBvcHRpb25zIGZvciB0aGUgUHJvamVjdFxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBQcm9qZWN0cy5wcm90b3R5cGUudXBkYXRlRGVmYXVsdCA9IGZ1bmN0aW9uIChwcm9qZWN0T3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvZGVmYXVsdFwiLFxuICAgICAgICAgICAgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5QVVQsXG4gICAgICAgICAgICBib2R5OiBwcm9qZWN0T3B0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQYXRjaCB0aGUgZGVmYXVsdCBQcm9qZWN0XG4gICAgICogQHBhcmFtIHByb2plY3RPcHRpb25zIHRoZSBvcHRpb25zIGZvciB0aGUgUHJvamVjdFxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBQcm9qZWN0cy5wcm90b3R5cGUucGF0Y2hEZWZhdWx0ID0gZnVuY3Rpb24gKHByb2plY3RPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGggKyBcIi9kZWZhdWx0XCIsXG4gICAgICAgICAgICBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLlBBVENILFxuICAgICAgICAgICAgYm9keTogcHJvamVjdE9wdGlvbnMsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFByb2plY3RzO1xufShiYXNlX21vZHVsZV8xLkJhc2VNb2R1bGUpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFByb2plY3RzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGJhc2VfbW9kdWxlXzEgPSByZXF1aXJlKFwiLi9iYXNlLW1vZHVsZVwiKTtcbnZhciBSZWdpb25zID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhSZWdpb25zLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFJlZ2lvbnMocGFnZVNpemUsIHJlcXVlc3RIZWxwZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcGFnZVNpemUsIHJlcXVlc3RIZWxwZXIpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmJhc2VQYXRoID0gJ3JlZ2lvbnMnO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhbGwgUmVnaW9uc1xuICAgICAqIEBwYXJhbSBbdGFnTmFtZV0gZmlsdGVyIHRvIG9ubHkgcmV0dXJuIFJlZ2lvbnMgd2l0aCBhIGdpdmVuIHRhZ1xuICAgICAqIEBwYXJhbSBbaW5jbHVkZUFsbF0gcmV0dXJuIGFsbCBSZWdpb25zLCBwYWdpbmF0ZWQgKG9wdGlvbmFsKVxuICAgICAqIEBwYXJhbSBbcGFnZV0gdGhlIHNwZWNpZmljIHBhZ2Ugb2YgUmVnaW9ucyB0byByZXR1cm4gKG9wdGlvbmFsKVxuICAgICAqIEBwYXJhbSBbcGFnZVNpemVdIHRoZSBudW1iZXIgb2YgUmVnaW9ucyB0byByZXR1cm4gcGVyIHBhZ2UgKG9wdGlvbmFsKVxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBSZWdpb25zLnByb3RvdHlwZS5nZXRBbGwgPSBmdW5jdGlvbiAodGFnTmFtZSwgaW5jbHVkZUFsbCwgcGFnZSwgcGFnZVNpemUpIHtcbiAgICAgICAgaWYgKGluY2x1ZGVBbGwgPT09IHZvaWQgMCkgeyBpbmNsdWRlQWxsID0gZmFsc2U7IH1cbiAgICAgICAgaWYgKHBhZ2UgPT09IHZvaWQgMCkgeyBwYWdlID0gMTsgfVxuICAgICAgICBpZiAocGFnZVNpemUgPT09IHZvaWQgMCkgeyBwYWdlU2l6ZSA9IHRoaXMucGFnZVNpemU7IH1cbiAgICAgICAgdmFyIHJlcXVlc3RPcHRpb25zID0gdGhpcy5fZ2V0QmFzZVBhZ2luYXRlZFJlcXVlc3RPcHRpb25zKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGgsXG4gICAgICAgICAgICBrZXk6ICdyZWdpb25zJyxcbiAgICAgICAgICAgIHRhZ05hbWU6IHRhZ05hbWUsXG4gICAgICAgICAgICBwYWdlU2l6ZTogcGFnZVNpemUsXG4gICAgICAgICAgICBwYWdlOiBwYWdlLFxuICAgICAgICAgICAgaW5jbHVkZUFsbDogaW5jbHVkZUFsbCxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHJlcXVlc3RPcHRpb25zKTtcbiAgICB9O1xuICAgIHJldHVybiBSZWdpb25zO1xufShiYXNlX21vZHVsZV8xLkJhc2VNb2R1bGUpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFJlZ2lvbnM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYmFzZV9tb2R1bGVfMSA9IHJlcXVpcmUoXCIuL2Jhc2UtbW9kdWxlXCIpO1xudmFyIFJlcG9ydHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFJlcG9ydHMsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVwb3J0cyhwYWdlU2l6ZSwgcmVxdWVzdEhlbHBlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwYWdlU2l6ZSwgcmVxdWVzdEhlbHBlcikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYmFzZVBhdGggPSAncmVwb3J0cyc7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBEcm9wbGV0IG5laWdoYm9ycyByZXBvcnRcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgUmVwb3J0cy5wcm90b3R5cGUuZ2V0RHJvcGxldE5laWdoYm9ycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL2Ryb3BsZXRfbmVpZ2hib3JzX2lkc1wiLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBSZXBvcnRzO1xufShiYXNlX21vZHVsZV8xLkJhc2VNb2R1bGUpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFJlcG9ydHM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYmFzZV9tb2R1bGVfMSA9IHJlcXVpcmUoXCIuL2Jhc2UtbW9kdWxlXCIpO1xudmFyIFNpemVzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTaXplcywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTaXplcyhwYWdlU2l6ZSwgcmVxdWVzdEhlbHBlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwYWdlU2l6ZSwgcmVxdWVzdEhlbHBlcikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYmFzZVBhdGggPSAnc2l6ZXMnO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhbGwgU2l6ZSBjb25maWd1cmF0aW9uc1xuICAgICAqIEBwYXJhbSBbdGFnTmFtZV0gZmlsdGVyIHRvIG9ubHkgcmV0dXJuIERyb3BsZXQgU2l6ZXMgd2l0aCBhIGdpdmVuIHRhZ1xuICAgICAqIEBwYXJhbSBbaW5jbHVkZUFsbF0gcmV0dXJuIGFsbCBEcm9wbGV0IFNpemVzLCBwYWdpbmF0ZWQgKG9wdGlvbmFsKVxuICAgICAqIEBwYXJhbSBbcGFnZV0gdGhlIHNwZWNpZmljIHBhZ2Ugb2YgRHJvcGxldCBTaXplcyB0byByZXR1cm4gKG9wdGlvbmFsKVxuICAgICAqIEBwYXJhbSBbcGFnZVNpemVdIHRoZSBudW1iZXIgb2YgRHJvcGxldCBTaXplcyB0byByZXR1cm4gcGVyIHBhZ2UgKG9wdGlvbmFsKVxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBTaXplcy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHRhZ05hbWUsIGluY2x1ZGVBbGwsIHBhZ2UsIHBhZ2VTaXplKSB7XG4gICAgICAgIGlmIChpbmNsdWRlQWxsID09PSB2b2lkIDApIHsgaW5jbHVkZUFsbCA9IGZhbHNlOyB9XG4gICAgICAgIGlmIChwYWdlID09PSB2b2lkIDApIHsgcGFnZSA9IDE7IH1cbiAgICAgICAgaWYgKHBhZ2VTaXplID09PSB2b2lkIDApIHsgcGFnZVNpemUgPSB0aGlzLnBhZ2VTaXplOyB9XG4gICAgICAgIHZhciByZXF1ZXN0T3B0aW9ucyA9IHRoaXMuX2dldEJhc2VQYWdpbmF0ZWRSZXF1ZXN0T3B0aW9ucyh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoLFxuICAgICAgICAgICAga2V5OiAnc2l6ZXMnLFxuICAgICAgICAgICAgdGFnTmFtZTogdGFnTmFtZSxcbiAgICAgICAgICAgIHBhZ2VTaXplOiBwYWdlU2l6ZSxcbiAgICAgICAgICAgIHBhZ2U6IHBhZ2UsXG4gICAgICAgICAgICBpbmNsdWRlQWxsOiBpbmNsdWRlQWxsLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUocmVxdWVzdE9wdGlvbnMpO1xuICAgIH07XG4gICAgcmV0dXJuIFNpemVzO1xufShiYXNlX21vZHVsZV8xLkJhc2VNb2R1bGUpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFNpemVzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBiYXNlX21vZHVsZV8xID0gcmVxdWlyZShcIi4vYmFzZS1tb2R1bGVcIik7XG52YXIgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uXCIpO1xudmFyIFNuYXBzaG90cyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU25hcHNob3RzLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNuYXBzaG90cyhwYWdlU2l6ZSwgcmVxdWVzdEhlbHBlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwYWdlU2l6ZSwgcmVxdWVzdEhlbHBlcikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYmFzZVBhdGggPSAnc25hcHNob3RzJztcbiAgICAgICAgX3RoaXMuYmFzZU9wdGlvbnMgPSB7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiBfdGhpcy5iYXNlUGF0aCxcbiAgICAgICAgICAgIGtleTogJ3NuYXBzaG90cycsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBTbmFwc2hvdHMsIHJlZ2FyZGxlc3Mgb2YgdHlwZVxuICAgICAqIEBwYXJhbSBbdGFnTmFtZV0gZmlsdGVyIHRvIG9ubHkgcmV0dXJuIFNuYXBzaG90cyB3aXRoIGEgZ2l2ZW4gdGFnXG4gICAgICogQHBhcmFtIFtpbmNsdWRlQWxsXSByZXR1cm4gYWxsIFNuYXBzaG90cywgcGFnaW5hdGVkIChvcHRpb25hbClcbiAgICAgKiBAcGFyYW0gW3BhZ2VdIHRoZSBzcGVjaWZpYyBwYWdlIG9mIFNuYXBzaG90cyB0byByZXR1cm4gKG9wdGlvbmFsKVxuICAgICAqIEBwYXJhbSBbcGFnZVNpemVdIHRoZSBudW1iZXIgb2YgU25hcHNob3RzIHRvIHJldHVybiBwZXIgcGFnZSAob3B0aW9uYWwpXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIFNuYXBzaG90cy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHRhZ05hbWUsIGluY2x1ZGVBbGwsIHBhZ2UsIHBhZ2VTaXplKSB7XG4gICAgICAgIGlmIChpbmNsdWRlQWxsID09PSB2b2lkIDApIHsgaW5jbHVkZUFsbCA9IGZhbHNlOyB9XG4gICAgICAgIGlmIChwYWdlID09PSB2b2lkIDApIHsgcGFnZSA9IDE7IH1cbiAgICAgICAgaWYgKHBhZ2VTaXplID09PSB2b2lkIDApIHsgcGFnZVNpemUgPSB0aGlzLnBhZ2VTaXplOyB9XG4gICAgICAgIHZhciByZXF1ZXN0T3B0aW9ucyA9IHRoaXMuX2dldEJhc2VQYWdpbmF0ZWRSZXF1ZXN0T3B0aW9ucyhfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5iYXNlT3B0aW9ucyksIHsgdGFnTmFtZTogdGFnTmFtZSwgcGFnZVNpemU6IHBhZ2VTaXplLCBwYWdlOiBwYWdlLCBpbmNsdWRlQWxsOiBpbmNsdWRlQWxsIH0pKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUocmVxdWVzdE9wdGlvbnMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IGEgU25hcHNob3QgdXNpbmcgaXRzIGlkZW50aWZpZXJcbiAgICAgKiBAcGFyYW0gc25hcHNob3RJZCB0aGUgaWRlbnRpZmllciBvZiB0aGUgU25hcHNob3QgdG8gcmV0cmlldmVcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgU25hcHNob3RzLnByb3RvdHlwZS5nZXRCeUlkID0gZnVuY3Rpb24gKHNuYXBzaG90SWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KHNuYXBzaG90SWQpLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCBhbGwgU25hcHNob3RzLCBvbmx5IGZvciBWb2x1bWVzXG4gICAgICogQHBhcmFtIFt0YWdOYW1lXSBmaWx0ZXIgdG8gb25seSByZXR1cm4gU25hcHNob3RzIHdpdGggYSBnaXZlbiB0YWdcbiAgICAgKiBAcGFyYW0gW2luY2x1ZGVBbGxdIHJldHVybiBhbGwgU25hcHNob3RzLCBwYWdpbmF0ZWQgKG9wdGlvbmFsKVxuICAgICAqIEBwYXJhbSBbcGFnZV0gdGhlIHNwZWNpZmljIHBhZ2Ugb2YgU25hcHNob3RzIHRvIHJldHVybiAob3B0aW9uYWwpXG4gICAgICogQHBhcmFtIFtwYWdlU2l6ZV0gdGhlIG51bWJlciBvZiBTbmFwc2hvdHMgdG8gcmV0dXJuIHBlciBwYWdlIChvcHRpb25hbClcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgU25hcHNob3RzLnByb3RvdHlwZS5nZXRGb3JWb2x1bWVzID0gZnVuY3Rpb24gKHRhZ05hbWUsIGluY2x1ZGVBbGwsIHBhZ2UsIHBhZ2VTaXplKSB7XG4gICAgICAgIGlmIChpbmNsdWRlQWxsID09PSB2b2lkIDApIHsgaW5jbHVkZUFsbCA9IGZhbHNlOyB9XG4gICAgICAgIGlmIChwYWdlID09PSB2b2lkIDApIHsgcGFnZSA9IDE7IH1cbiAgICAgICAgaWYgKHBhZ2VTaXplID09PSB2b2lkIDApIHsgcGFnZVNpemUgPSB0aGlzLnBhZ2VTaXplOyB9XG4gICAgICAgIHZhciByZXF1ZXN0T3B0aW9ucyA9IHRoaXMuX2dldEJhc2VQYWdpbmF0ZWRSZXF1ZXN0T3B0aW9ucyhfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5iYXNlT3B0aW9ucyksIHsgdGFnTmFtZTogdGFnTmFtZSwgcGFnZVNpemU6IHBhZ2VTaXplLCBwYWdlOiBwYWdlLCBpbmNsdWRlQWxsOiBpbmNsdWRlQWxsLCBxczoge1xuICAgICAgICAgICAgICAgIHJlc291cmNlX3R5cGU6ICd2b2x1bWUnLFxuICAgICAgICAgICAgfSB9KSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHJlcXVlc3RPcHRpb25zKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCBhbGwgU25hcHNob3RzLCBvbmx5IGZvciBEcm9wbGV0c1xuICAgICAqIEBwYXJhbSBbdGFnTmFtZV0gZmlsdGVyIHRvIG9ubHkgcmV0dXJuIFNuYXBzaG90cyB3aXRoIGEgZ2l2ZW4gdGFnXG4gICAgICogQHBhcmFtIFtpbmNsdWRlQWxsXSByZXR1cm4gYWxsIFNuYXBzaG90cywgcGFnaW5hdGVkIChvcHRpb25hbClcbiAgICAgKiBAcGFyYW0gW3BhZ2VdIHRoZSBzcGVjaWZpYyBwYWdlIG9mIFNuYXBzaG90cyB0byByZXR1cm4gKG9wdGlvbmFsKVxuICAgICAqIEBwYXJhbSBbcGFnZVNpemVdIHRoZSBudW1iZXIgb2YgU25hcHNob3RzIHRvIHJldHVybiBwZXIgcGFnZSAob3B0aW9uYWwpXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIFNuYXBzaG90cy5wcm90b3R5cGUuZ2V0Rm9yRHJvcGxldHMgPSBmdW5jdGlvbiAodGFnTmFtZSwgaW5jbHVkZUFsbCwgcGFnZSwgcGFnZVNpemUpIHtcbiAgICAgICAgaWYgKGluY2x1ZGVBbGwgPT09IHZvaWQgMCkgeyBpbmNsdWRlQWxsID0gZmFsc2U7IH1cbiAgICAgICAgaWYgKHBhZ2UgPT09IHZvaWQgMCkgeyBwYWdlID0gMTsgfVxuICAgICAgICBpZiAocGFnZVNpemUgPT09IHZvaWQgMCkgeyBwYWdlU2l6ZSA9IHRoaXMucGFnZVNpemU7IH1cbiAgICAgICAgdmFyIHJlcXVlc3RPcHRpb25zID0gdGhpcy5fZ2V0QmFzZVBhZ2luYXRlZFJlcXVlc3RPcHRpb25zKF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLmJhc2VPcHRpb25zKSwgeyB0YWdOYW1lOiB0YWdOYW1lLCBwYWdlU2l6ZTogcGFnZVNpemUsIHBhZ2U6IHBhZ2UsIGluY2x1ZGVBbGw6IGluY2x1ZGVBbGwsIHFzOiB7XG4gICAgICAgICAgICAgICAgcmVzb3VyY2VfdHlwZTogJ2Ryb3BsZXQnLFxuICAgICAgICAgICAgfSB9KSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHJlcXVlc3RPcHRpb25zKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhIFNuYXBzaG90XG4gICAgICogQHBhcmFtIHNuYXBzaG90SWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIFNuYXBzaG90IHRvIGRlbGV0ZVxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBTbmFwc2hvdHMucHJvdG90eXBlLmRlbGV0ZUJ5SWQgPSBmdW5jdGlvbiAoc25hcHNob3RJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoc25hcHNob3RJZCksXG4gICAgICAgICAgICBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLkRFTEVURSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gU25hcHNob3RzO1xufShiYXNlX21vZHVsZV8xLkJhc2VNb2R1bGUpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFNuYXBzaG90cztcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYmFzZV9tb2R1bGVfMSA9IHJlcXVpcmUoXCIuL2Jhc2UtbW9kdWxlXCIpO1xudmFyIGNvbW1vbl8xID0gcmVxdWlyZShcIi4uL2NvbW1vblwiKTtcbnZhciBUYWdzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhUYWdzLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRhZ3MocGFnZVNpemUsIHJlcXVlc3RIZWxwZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcGFnZVNpemUsIHJlcXVlc3RIZWxwZXIpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmJhc2VQYXRoID0gJ3RhZ3MnO1xuICAgICAgICBfdGhpcy5iYXNlT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IF90aGlzLmJhc2VQYXRoLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhbGwgVGFnc1xuICAgICAqIEBwYXJhbSB0YWdOYW1lIGZpbHRlciB0byBvbmx5IHJldHVybiBUYWdzIHdpdGggYSBnaXZlbiB0YWdcbiAgICAgKiBAcGFyYW0gW2luY2x1ZGVBbGxdIHJldHVybiBhbGwgVGFncywgcGFnaW5hdGVkIChvcHRpb25hbClcbiAgICAgKiBAcGFyYW0gW3BhZ2VdIHRoZSBzcGVjaWZpYyBwYWdlIG9mIFRhZ3MgdG8gcmV0dXJuIChvcHRpb25hbClcbiAgICAgKiBAcGFyYW0gW3BhZ2VTaXplXSB0aGUgbnVtYmVyIG9mIFRhZ3MgdG8gcmV0dXJuIHBlciBwYWdlIChvcHRpb25hbClcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgVGFncy5wcm90b3R5cGUuZ2V0QWxsID0gZnVuY3Rpb24gKHRhZ05hbWUsIGluY2x1ZGVBbGwsIHBhZ2UsIHBhZ2VTaXplKSB7XG4gICAgICAgIGlmIChpbmNsdWRlQWxsID09PSB2b2lkIDApIHsgaW5jbHVkZUFsbCA9IGZhbHNlOyB9XG4gICAgICAgIGlmIChwYWdlID09PSB2b2lkIDApIHsgcGFnZSA9IDE7IH1cbiAgICAgICAgaWYgKHBhZ2VTaXplID09PSB2b2lkIDApIHsgcGFnZVNpemUgPSB0aGlzLnBhZ2VTaXplOyB9XG4gICAgICAgIHZhciByZXF1ZXN0T3B0aW9ucyA9IHRoaXMuX2dldEJhc2VQYWdpbmF0ZWRSZXF1ZXN0T3B0aW9ucyhfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5iYXNlT3B0aW9ucyksIHsga2V5OiAndGFncycsIHRhZ05hbWU6IHRhZ05hbWUsIHBhZ2VTaXplOiBwYWdlU2l6ZSwgcGFnZTogcGFnZSwgaW5jbHVkZUFsbDogaW5jbHVkZUFsbCB9KSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHJlcXVlc3RPcHRpb25zKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBUYWdcbiAgICAgKiBAcGFyYW0gdGFnTmFtZSB0aGUgVGFnIHRvIGNyZWF0ZVxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBUYWdzLnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAodGFnTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZShfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5iYXNlT3B0aW9ucyksIHsgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5QT1NULCBib2R5OiB7XG4gICAgICAgICAgICAgICAgbmFtZTogdGFnTmFtZSxcbiAgICAgICAgICAgIH0gfSkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IGEgVGFnXG4gICAgICogQHBhcmFtIHRhZ05hbWUgdGhlIFRhZyB0byByZXRyaWV2ZVxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBUYWdzLnByb3RvdHlwZS5nZXRCeU5hbWUgPSBmdW5jdGlvbiAodGFnTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQodGFnTmFtZSksXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGVsZXRlIGEgVGFnXG4gICAgICogQHBhcmFtIHRhZ05hbWUgdGhlIFRhZyB0byBkZWxldGVcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgVGFncy5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHRhZ05hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KHRhZ05hbWUpLFxuICAgICAgICAgICAgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5ERUxFVEUsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkIFJlc291cmNlcyB0byBhbiBleGlzdGluZyBUYWdcbiAgICAgKiBAcGFyYW0gdGFnTmFtZSB0aGUgVGFnIHRvIGFkZCB0aGVtIHRvXG4gICAgICogQHBhcmFtIHJlc291cmNlcyB0aGUgUmVzb3VyY2VzIHRvIGFkZFxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBUYWdzLnByb3RvdHlwZS5hZGRSZXNvdXJjZXMgPSBmdW5jdGlvbiAodGFnTmFtZSwgcmVzb3VyY2VzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgICAgICAgIGFjdGlvblBhdGg6IHRoaXMuYmFzZVBhdGggKyBcIi9cIiArIGVuY29kZVVSSUNvbXBvbmVudCh0YWdOYW1lKSArIFwiL3Jlc291cmNlc1wiLFxuICAgICAgICAgICAgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5QT1NULFxuICAgICAgICAgICAgYm9keTogcmVzb3VyY2VzLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZSBSZXNvdXJjZXMgZnJvbSBhbiBleGlzdGluZyBUYWdcbiAgICAgKiBAcGFyYW0gdGFnTmFtZSB0aGUgVGFnIHRvIHJlbW92ZSB0aGVtIGZyb21cbiAgICAgKiBAcGFyYW0gcmVzb3VyY2VzIHRoZSBSZXNvdXJjZXMgdG8gcmVtb3ZlXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIFRhZ3MucHJvdG90eXBlLnJlbW92ZVJlc291cmNlcyA9IGZ1bmN0aW9uICh0YWdOYW1lLCByZXNvdXJjZXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KHRhZ05hbWUpICsgXCIvcmVzb3VyY2VzXCIsXG4gICAgICAgICAgICBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLkRFTEVURSxcbiAgICAgICAgICAgIGJvZHk6IHJlc291cmNlcyxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gVGFncztcbn0oYmFzZV9tb2R1bGVfMS5CYXNlTW9kdWxlKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBUYWdzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBiYXNlX21vZHVsZV8xID0gcmVxdWlyZShcIi4vYmFzZS1tb2R1bGVcIik7XG52YXIgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uXCIpO1xudmFyIFZvbHVtZXMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFZvbHVtZXMsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVm9sdW1lcyhwYWdlU2l6ZSwgcmVxdWVzdEhlbHBlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwYWdlU2l6ZSwgcmVxdWVzdEhlbHBlcikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYmFzZVBhdGggPSAndm9sdW1lcyc7XG4gICAgICAgIF90aGlzLmJhc2VPcHRpb25zID0ge1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogX3RoaXMuYmFzZVBhdGggKyBcIi9cIixcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIFZvbHVtZXNcbiAgICAgKiBAcGFyYW0gW3JlZ2lvbl0gb3B0aW9uYWwgUmVnaW9uIE5hbWUgZmlsdGVyXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIFZvbHVtZXMucHJvdG90eXBlLmdldEFsbCA9IGZ1bmN0aW9uIChyZWdpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuYmFzZU9wdGlvbnMpLCB7IHFzOiB7XG4gICAgICAgICAgICAgICAgcmVnaW9uOiByZWdpb24gfHwgJycsXG4gICAgICAgICAgICB9IH0pKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBCbG9jayBTdG9yYWdlIFZvbHVtZVxuICAgICAqIEBwYXJhbSBvcHRpb25zIHRoZSBvcHRpb25zIHRvIGNyZWF0ZSB0aGUgbmV3IEJsb2NrIFN0b3JhZ2UgVm9sdW1lXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIFZvbHVtZXMucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlKF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLmJhc2VPcHRpb25zKSwgeyBtZXRob2Q6IGNvbW1vbl8xLkh0dHBNZXRob2RzLlBPU1QsIGJvZHk6IG9wdGlvbnMgfSkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IGEgQmxvY2sgU3RvcmFnZSBWb2x1bWUgdXNpbmcgaXRzIGlkZW50aWZpZXJcbiAgICAgKiBAcGFyYW0gdm9sdW1lSWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIEJsb2NrIFN0b3JhZ2UgVm9sdW1lXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIFZvbHVtZXMucHJvdG90eXBlLmdldEJ5SWQgPSBmdW5jdGlvbiAodm9sdW1lSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgdm9sdW1lSWQsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IGEgQmxvY2sgU3RvcmFnZSBWb2x1bWUgdXNpbmcgaXRzIG5hbWUgYW5kIHJlZ2lvblxuICAgICAqIEBwYXJhbSB2b2x1bWVOYW1lIHRoZSBuYW1lIG9mIHRoZSBCbG9jayBTdG9yYWdlIFZvbHVtZVxuICAgICAqIEBwYXJhbSByZWdpb24gdGhlIHJlZ2lvbiBvZiB0aGUgQmxvY2sgU3RvcmFnZSBWb2x1bWVcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgVm9sdW1lcy5wcm90b3R5cGUuZ2V0QnlOYW1lQW5kUmVnaW9uID0gZnVuY3Rpb24gKHZvbHVtZU5hbWUsIHJlZ2lvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZShfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5iYXNlT3B0aW9ucyksIHsgcXM6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiB2b2x1bWVOYW1lLFxuICAgICAgICAgICAgICAgIHJlZ2lvbjogcmVnaW9uLFxuICAgICAgICAgICAgfSB9KSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBCbG9jayBTdG9yYWdlIFZvbHVtZSB1c2luZyBpdHMgaWRlbnRpZmllclxuICAgICAqIEBwYXJhbSB2b2x1bWVJZCB0aGUgaWRlbnRpZmllciBvZiB0aGUgQmxvY2sgU3RvcmFnZSBWb2x1bWVcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICovXG4gICAgVm9sdW1lcy5wcm90b3R5cGUuZGVsZXRlQnlJZCA9IGZ1bmN0aW9uICh2b2x1bWVJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyB2b2x1bWVJZCxcbiAgICAgICAgICAgIG1ldGhvZDogY29tbW9uXzEuSHR0cE1ldGhvZHMuREVMRVRFLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhIEJsb2NrIFN0b3JhZ2UgVm9sdW1lIHVzaW5nIGl0cyBuYW1lIGFuZCByZWdpb25cbiAgICAgKiBAcGFyYW0gdm9sdW1lTmFtZSB0aGUgbmFtZSBvZiB0aGUgQmxvY2sgU3RvcmFnZSBWb2x1bWVcbiAgICAgKiBAcGFyYW0gcmVnaW9uIHRoZSByZWdpb24gb2YgdGhlIEJsb2NrIFN0b3JhZ2UgVm9sdW1lXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIFZvbHVtZXMucHJvdG90eXBlLmRlbGV0ZUJ5TmFtZUFuZFJlZ2lvbiA9IGZ1bmN0aW9uICh2b2x1bWVOYW1lLCByZWdpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuYmFzZU9wdGlvbnMpLCB7IG1ldGhvZDogY29tbW9uXzEuSHR0cE1ldGhvZHMuREVMRVRFLCBxczoge1xuICAgICAgICAgICAgICAgIG5hbWU6IHZvbHVtZU5hbWUsXG4gICAgICAgICAgICAgICAgcmVnaW9uOiByZWdpb24sXG4gICAgICAgICAgICB9IH0pKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlcXVlc3QgYW4gYWN0aW9uIGFnYWluc3QgYSBzcGVjaWZpYyBCbG9jayBTdG9yYWdlIFZvbHVtZVxuICAgICAqIEBwYXJhbSB2b2x1bWVJZCB0aGUgaWRlbnRpZmllciBvZiB0aGUgQmxvY2sgU3RvcmFnZSBWb2x1bWVcbiAgICAgKiBAcGFyYW0gYWN0aW9uIHRoZSBhY3Rpb24gZGV0YWlscyB0byByZXF1ZXN0XG4gICAgICogQHJldHVybnMgUHJvbWlzZVxuICAgICAqL1xuICAgIFZvbHVtZXMucHJvdG90eXBlLnJlcXVlc3RBY3Rpb24gPSBmdW5jdGlvbiAodm9sdW1lSWQsIGFjdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyBlbmNvZGVVUklDb21wb25lbnQodm9sdW1lSWQpICsgXCIvYWN0aW9uc1wiLFxuICAgICAgICAgICAgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5QT1NULFxuICAgICAgICAgICAgYm9keTogYWN0aW9uLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgc25hcHNob3RzIGZvciBhIHNwZWNpZmljIEJsb2NrIFN0b3JhZ2UgVm9sdW1lXG4gICAgICogQHBhcmFtIHZvbHVtZUlkIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBCbG9jayBTdG9yYWdlIFZvbHVtZVxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBWb2x1bWVzLnByb3RvdHlwZS5nZXRTbmFwc2hvdHMgPSBmdW5jdGlvbiAodm9sdW1lSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgICAgICAgYWN0aW9uUGF0aDogdGhpcy5iYXNlUGF0aCArIFwiL1wiICsgdm9sdW1lSWQgKyBcIi9zbmFwc2hvdHNcIixcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgc25hcHNob3QgZm9yIGEgQmxvY2sgU3RvcmFnZSBWb2x1bWVcbiAgICAgKiBAcGFyYW0gdm9sdW1lSWQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIEJsb2NrIFN0b3JhZ2UgVm9sdW1lXG4gICAgICogQHBhcmFtIG9wdGlvbnMgdGhlIG9wdGlvbnMgdG8gY3JlYXRlIHRoZSBzbmFwc2hvdFxuICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgKi9cbiAgICBWb2x1bWVzLnByb3RvdHlwZS5jcmVhdGVTbmFwc2hvdCA9IGZ1bmN0aW9uICh2b2x1bWVJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICAgICAgICBhY3Rpb25QYXRoOiB0aGlzLmJhc2VQYXRoICsgXCIvXCIgKyB2b2x1bWVJZCArIFwiL3NuYXBzaG90c1wiLFxuICAgICAgICAgICAgbWV0aG9kOiBjb21tb25fMS5IdHRwTWV0aG9kcy5QT1NULFxuICAgICAgICAgICAgYm9keTogb3B0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gVm9sdW1lcztcbn0oYmFzZV9tb2R1bGVfMS5CYXNlTW9kdWxlKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBWb2x1bWVzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGdvdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJnb3RcIikpO1xudmFyIGNvbW1vbl8xID0gcmVxdWlyZShcIi4vY29tbW9uXCIpO1xudmFyIFJlcXVlc3RIZWxwZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogUmVxdWVzdCBIZWxwZXJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdG9rZW4gLSBZb3VyIFByaXZhdGUgQVBJIFRva2VuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgZnVuY3Rpb24gUmVxdWVzdEhlbHBlcih0b2tlbikge1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSB7XG4gICAgICAgICAgICAnYXV0aG9yaXphdGlvbic6IFwiQmVhcmVyIFwiICsgdG9rZW4sXG4gICAgICAgICAgICAnY29udGVudF90eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYXBpVXJsID0gJ2h0dHBzOi8vYXBpLmRpZ2l0YWxvY2Vhbi5jb20vdjIvJztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgdGhlIHJlcXVpcmVkIFJlcXVlc3QgJiBUcmlnZ2VyXG4gICAgICogQHBhcmFtIHsqfSBvcHRpb25zIC0gUmVxdWVzdCBPcHRpb25zXG4gICAgICogQHJldHVybnMge1Byb21pc2V9IC0gUmV0dXJucyBhIHByb21pc2VcbiAgICAgKi9cbiAgICBSZXF1ZXN0SGVscGVyLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrO1xuICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24gKGJvZHksIGVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGJvZHkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBvcHRpb25zLmluY2x1ZGVBbGwgPyB0aGlzLmdldEFsbFBhZ2VzKG9wdGlvbnMua2V5LCBvcHRpb25zLCBjYWxsYmFjaykgOiB0aGlzLnN1Ym1pdFJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFN1Ym1pdCB0aGUgUmVxdWVzdFxuICAgICAqIEBwYXJhbSB7Kn0gb3B0aW9ucyAtIFJlcXVlc3QgT3B0aW9ucyBPYmplY3RcbiAgICAgKiBAcGFyYW0geyp9IGNhbGxiYWNrIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZSBvbiBjb21wbGV0aW9uXG4gICAgICovXG4gICAgUmVxdWVzdEhlbHBlci5wcm90b3R5cGUuc3VibWl0UmVxdWVzdCA9IGZ1bmN0aW9uIChvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgcmVxdWVzdE9wdGlvbnMgPSB0aGlzLnJlcXVlc3RCdWlsZGVyKG9wdGlvbnMpO1xuICAgICAgICBnb3RfMS5kZWZhdWx0KHRoaXMuYXBpVXJsICsgb3B0aW9ucy5hY3Rpb25QYXRoLCByZXF1ZXN0T3B0aW9ucylcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgY2FsbGJhY2socmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gMjA0ID8gbnVsbCA6IEpTT04ucGFyc2UocmVzcG9uc2UuYm9keSksIG51bGwpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCBBbGwgUGFnZXNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVHlwZSBvZiBJdGVtXG4gICAgICogQHBhcmFtIHsqfSBvcHRpb25zIC0gUmVxdWVzdCBPcHRpb25zXG4gICAgICogQHBhcmFtIHsqfSBjYWxsYmFjayAtIEZ1bmN0aW9uIHRvIGV4ZWN1dGUgb24gY29tcGxldGlvblxuICAgICAqL1xuICAgIFJlcXVlc3RIZWxwZXIucHJvdG90eXBlLmdldEFsbFBhZ2VzID0gZnVuY3Rpb24gKGtleSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGl0ZW1zID0gW10sIHRvdGFsID0gMCwgcmVxdWlyZWQgPSAwLCBjb21wbGV0ZWQgPSAxO1xuICAgICAgICBvcHRpb25zLnFzLnBhZ2UgPSAxO1xuICAgICAgICAvLyBPdmVycmlkZSB0aGUgcGVyX3BhZ2UgYW1vdW50IHRvIGF2b2lkIEhUVFAgNDI5IFRPT19NQU5ZX1JFUVVFU1RTXG4gICAgICAgIG9wdGlvbnMucXMucGVyX3BhZ2UgPSAyNTtcbiAgICAgICAgdGhpcy5zdWJtaXRSZXF1ZXN0KG9wdGlvbnMsIGZ1bmN0aW9uIChib2R5LCBlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRvdGFsID0gYm9keS5tZXRhLnRvdGFsO1xuICAgICAgICAgICAgaXRlbXMgPSBpdGVtcy5jb25jYXQoYm9keVtrZXldKTtcbiAgICAgICAgICAgIHJlcXVpcmVkID0gTWF0aC5jZWlsKHRvdGFsIC8gb3B0aW9ucy5xcy5wZXJfcGFnZSk7XG4gICAgICAgICAgICBpZiAoaXRlbXMubGVuZ3RoID49IHRvdGFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGl0ZW1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzLmdldFJlbWFpbmluZ1BhZ2VzKG9wdGlvbnMsIDIsIHJlcXVpcmVkLCBmdW5jdGlvbiAoYm9keSwgZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlZCsrO1xuICAgICAgICAgICAgICAgICAgICBpdGVtcyA9IGl0ZW1zLmNvbmNhdChib2R5W2tleV0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29tcGxldGVkID09PSByZXF1aXJlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGl0ZW1zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgUmVtYWluaW5nIFBhZ2VzXG4gICAgICogQHBhcmFtIHsqfSBvcHRpb25zIC0gUmVxdWVzdCBPcHRpb25zXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGZpcnN0IC0gVGhlIGZpcnN0IHBhZ2UgdG8gcmV0cmlldmVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGFzdCAtIFRoZSBsYXN0IHBhZ2UgdG8gcmV0cmlldmVcbiAgICAgKiBAcGFyYW0geyp9IGNhbGxiYWNrIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZSBvbiBjb21wbGV0aW9uXG4gICAgICovXG4gICAgUmVxdWVzdEhlbHBlci5wcm90b3R5cGUuZ2V0UmVtYWluaW5nUGFnZXMgPSBmdW5jdGlvbiAob3B0aW9ucywgZmlyc3QsIGxhc3QsIGNhbGxiYWNrKSB7XG4gICAgICAgIGZvciAodmFyIGN1cnJlbnQgPSBmaXJzdDsgY3VycmVudCA8PSBsYXN0OyBjdXJyZW50KyspIHtcbiAgICAgICAgICAgIG9wdGlvbnMucXMucGFnZSA9IGN1cnJlbnQ7XG4gICAgICAgICAgICB0aGlzLnN1Ym1pdFJlcXVlc3Qob3B0aW9ucywgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBCdWlsZCBPcHRpb25zIGZvciBSZXF1ZXN0XG4gICAgICogQHBhcmFtIHsqfSBvcHRpb25zIC0gT3B0aW9ucyBPYmplY3RcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBSZXF1ZXN0SGVscGVyLnByb3RvdHlwZS5yZXF1ZXN0QnVpbGRlciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbih7IG1ldGhvZDogb3B0aW9ucy5tZXRob2QgfHwgY29tbW9uXzEuSHR0cE1ldGhvZHMuR0VULCBoZWFkZXJzOiBvcHRpb25zLmhlYWRlcnMgfHwgdGhpcy5oZWFkZXJzLCBzdHJpY3RTU0w6IHRydWUsIHNlYXJjaFBhcmFtczogb3B0aW9ucy5xcyB8fCB7fSwgcmV0cnk6IDAgfSwgKG9wdGlvbnMuYm9keSAmJiB7IGpzb246IG9wdGlvbnMuYm9keSB9KSk7XG4gICAgfTtcbiAgICByZXR1cm4gUmVxdWVzdEhlbHBlcjtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBSZXF1ZXN0SGVscGVyO1xuIiwiLyogQGZsb3cgKi9cbi8qOjpcblxudHlwZSBEb3RlbnZQYXJzZU9wdGlvbnMgPSB7XG4gIGRlYnVnPzogYm9vbGVhblxufVxuXG4vLyBrZXlzIGFuZCB2YWx1ZXMgZnJvbSBzcmNcbnR5cGUgRG90ZW52UGFyc2VPdXRwdXQgPSB7IFtzdHJpbmddOiBzdHJpbmcgfVxuXG50eXBlIERvdGVudkNvbmZpZ09wdGlvbnMgPSB7XG4gIHBhdGg/OiBzdHJpbmcsIC8vIHBhdGggdG8gLmVudiBmaWxlXG4gIGVuY29kaW5nPzogc3RyaW5nLCAvLyBlbmNvZGluZyBvZiAuZW52IGZpbGVcbiAgZGVidWc/OiBzdHJpbmcgLy8gdHVybiBvbiBsb2dnaW5nIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXNcbn1cblxudHlwZSBEb3RlbnZDb25maWdPdXRwdXQgPSB7XG4gIHBhcnNlZD86IERvdGVudlBhcnNlT3V0cHV0LFxuICBlcnJvcj86IEVycm9yXG59XG5cbiovXG5cbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKVxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxuXG5mdW5jdGlvbiBsb2cgKG1lc3NhZ2UgLyo6IHN0cmluZyAqLykge1xuICBjb25zb2xlLmxvZyhgW2RvdGVudl1bREVCVUddICR7bWVzc2FnZX1gKVxufVxuXG5jb25zdCBORVdMSU5FID0gJ1xcbidcbmNvbnN0IFJFX0lOSV9LRVlfVkFMID0gL15cXHMqKFtcXHcuLV0rKVxccyo9XFxzKiguKik/XFxzKiQvXG5jb25zdCBSRV9ORVdMSU5FUyA9IC9cXFxcbi9nXG5jb25zdCBORVdMSU5FU19NQVRDSCA9IC9cXG58XFxyfFxcclxcbi9cblxuLy8gUGFyc2VzIHNyYyBpbnRvIGFuIE9iamVjdFxuZnVuY3Rpb24gcGFyc2UgKHNyYyAvKjogc3RyaW5nIHwgQnVmZmVyICovLCBvcHRpb25zIC8qOiA/RG90ZW52UGFyc2VPcHRpb25zICovKSAvKjogRG90ZW52UGFyc2VPdXRwdXQgKi8ge1xuICBjb25zdCBkZWJ1ZyA9IEJvb2xlYW4ob3B0aW9ucyAmJiBvcHRpb25zLmRlYnVnKVxuICBjb25zdCBvYmogPSB7fVxuXG4gIC8vIGNvbnZlcnQgQnVmZmVycyBiZWZvcmUgc3BsaXR0aW5nIGludG8gbGluZXMgYW5kIHByb2Nlc3NpbmdcbiAgc3JjLnRvU3RyaW5nKCkuc3BsaXQoTkVXTElORVNfTUFUQ0gpLmZvckVhY2goZnVuY3Rpb24gKGxpbmUsIGlkeCkge1xuICAgIC8vIG1hdGNoaW5nIFwiS0VZJyBhbmQgJ1ZBTCcgaW4gJ0tFWT1WQUwnXG4gICAgY29uc3Qga2V5VmFsdWVBcnIgPSBsaW5lLm1hdGNoKFJFX0lOSV9LRVlfVkFMKVxuICAgIC8vIG1hdGNoZWQ/XG4gICAgaWYgKGtleVZhbHVlQXJyICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleVZhbHVlQXJyWzFdXG4gICAgICAvLyBkZWZhdWx0IHVuZGVmaW5lZCBvciBtaXNzaW5nIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdcbiAgICAgIGxldCB2YWwgPSAoa2V5VmFsdWVBcnJbMl0gfHwgJycpXG4gICAgICBjb25zdCBlbmQgPSB2YWwubGVuZ3RoIC0gMVxuICAgICAgY29uc3QgaXNEb3VibGVRdW90ZWQgPSB2YWxbMF0gPT09ICdcIicgJiYgdmFsW2VuZF0gPT09ICdcIidcbiAgICAgIGNvbnN0IGlzU2luZ2xlUXVvdGVkID0gdmFsWzBdID09PSBcIidcIiAmJiB2YWxbZW5kXSA9PT0gXCInXCJcblxuICAgICAgLy8gaWYgc2luZ2xlIG9yIGRvdWJsZSBxdW90ZWQsIHJlbW92ZSBxdW90ZXNcbiAgICAgIGlmIChpc1NpbmdsZVF1b3RlZCB8fCBpc0RvdWJsZVF1b3RlZCkge1xuICAgICAgICB2YWwgPSB2YWwuc3Vic3RyaW5nKDEsIGVuZClcblxuICAgICAgICAvLyBpZiBkb3VibGUgcXVvdGVkLCBleHBhbmQgbmV3bGluZXNcbiAgICAgICAgaWYgKGlzRG91YmxlUXVvdGVkKSB7XG4gICAgICAgICAgdmFsID0gdmFsLnJlcGxhY2UoUkVfTkVXTElORVMsIE5FV0xJTkUpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHJlbW92ZSBzdXJyb3VuZGluZyB3aGl0ZXNwYWNlXG4gICAgICAgIHZhbCA9IHZhbC50cmltKClcbiAgICAgIH1cblxuICAgICAgb2JqW2tleV0gPSB2YWxcbiAgICB9IGVsc2UgaWYgKGRlYnVnKSB7XG4gICAgICBsb2coYGRpZCBub3QgbWF0Y2gga2V5IGFuZCB2YWx1ZSB3aGVuIHBhcnNpbmcgbGluZSAke2lkeCArIDF9OiAke2xpbmV9YClcbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIG9ialxufVxuXG4vLyBQb3B1bGF0ZXMgcHJvY2Vzcy5lbnYgZnJvbSAuZW52IGZpbGVcbmZ1bmN0aW9uIGNvbmZpZyAob3B0aW9ucyAvKjogP0RvdGVudkNvbmZpZ09wdGlvbnMgKi8pIC8qOiBEb3RlbnZDb25maWdPdXRwdXQgKi8ge1xuICBsZXQgZG90ZW52UGF0aCA9IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCAnLmVudicpXG4gIGxldCBlbmNvZGluZyAvKjogc3RyaW5nICovID0gJ3V0ZjgnXG4gIGxldCBkZWJ1ZyA9IGZhbHNlXG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5wYXRoICE9IG51bGwpIHtcbiAgICAgIGRvdGVudlBhdGggPSBvcHRpb25zLnBhdGhcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuZW5jb2RpbmcgIT0gbnVsbCkge1xuICAgICAgZW5jb2RpbmcgPSBvcHRpb25zLmVuY29kaW5nXG4gICAgfVxuICAgIGlmIChvcHRpb25zLmRlYnVnICE9IG51bGwpIHtcbiAgICAgIGRlYnVnID0gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIHRyeSB7XG4gICAgLy8gc3BlY2lmeWluZyBhbiBlbmNvZGluZyByZXR1cm5zIGEgc3RyaW5nIGluc3RlYWQgb2YgYSBidWZmZXJcbiAgICBjb25zdCBwYXJzZWQgPSBwYXJzZShmcy5yZWFkRmlsZVN5bmMoZG90ZW52UGF0aCwgeyBlbmNvZGluZyB9KSwgeyBkZWJ1ZyB9KVxuXG4gICAgT2JqZWN0LmtleXMocGFyc2VkKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByb2Nlc3MuZW52LCBrZXkpKSB7XG4gICAgICAgIHByb2Nlc3MuZW52W2tleV0gPSBwYXJzZWRba2V5XVxuICAgICAgfSBlbHNlIGlmIChkZWJ1Zykge1xuICAgICAgICBsb2coYFwiJHtrZXl9XCIgaXMgYWxyZWFkeSBkZWZpbmVkIGluIFxcYHByb2Nlc3MuZW52XFxgIGFuZCB3aWxsIG5vdCBiZSBvdmVyd3JpdHRlbmApXG4gICAgICB9XG4gICAgfSlcblxuICAgIHJldHVybiB7IHBhcnNlZCB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlcnJvcjogZSB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMuY29uZmlnID0gY29uZmlnXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG4iLCJ2YXIgb25jZSA9IHJlcXVpcmUoJ29uY2UnKTtcblxudmFyIG5vb3AgPSBmdW5jdGlvbigpIHt9O1xuXG52YXIgaXNSZXF1ZXN0ID0gZnVuY3Rpb24oc3RyZWFtKSB7XG5cdHJldHVybiBzdHJlYW0uc2V0SGVhZGVyICYmIHR5cGVvZiBzdHJlYW0uYWJvcnQgPT09ICdmdW5jdGlvbic7XG59O1xuXG52YXIgaXNDaGlsZFByb2Nlc3MgPSBmdW5jdGlvbihzdHJlYW0pIHtcblx0cmV0dXJuIHN0cmVhbS5zdGRpbyAmJiBBcnJheS5pc0FycmF5KHN0cmVhbS5zdGRpbykgJiYgc3RyZWFtLnN0ZGlvLmxlbmd0aCA9PT0gM1xufTtcblxudmFyIGVvcyA9IGZ1bmN0aW9uKHN0cmVhbSwgb3B0cywgY2FsbGJhY2spIHtcblx0aWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSByZXR1cm4gZW9zKHN0cmVhbSwgbnVsbCwgb3B0cyk7XG5cdGlmICghb3B0cykgb3B0cyA9IHt9O1xuXG5cdGNhbGxiYWNrID0gb25jZShjYWxsYmFjayB8fCBub29wKTtcblxuXHR2YXIgd3MgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG5cdHZhciBycyA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcblx0dmFyIHJlYWRhYmxlID0gb3B0cy5yZWFkYWJsZSB8fCAob3B0cy5yZWFkYWJsZSAhPT0gZmFsc2UgJiYgc3RyZWFtLnJlYWRhYmxlKTtcblx0dmFyIHdyaXRhYmxlID0gb3B0cy53cml0YWJsZSB8fCAob3B0cy53cml0YWJsZSAhPT0gZmFsc2UgJiYgc3RyZWFtLndyaXRhYmxlKTtcblx0dmFyIGNhbmNlbGxlZCA9IGZhbHNlO1xuXG5cdHZhciBvbmxlZ2FjeWZpbmlzaCA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICghc3RyZWFtLndyaXRhYmxlKSBvbmZpbmlzaCgpO1xuXHR9O1xuXG5cdHZhciBvbmZpbmlzaCA9IGZ1bmN0aW9uKCkge1xuXHRcdHdyaXRhYmxlID0gZmFsc2U7XG5cdFx0aWYgKCFyZWFkYWJsZSkgY2FsbGJhY2suY2FsbChzdHJlYW0pO1xuXHR9O1xuXG5cdHZhciBvbmVuZCA9IGZ1bmN0aW9uKCkge1xuXHRcdHJlYWRhYmxlID0gZmFsc2U7XG5cdFx0aWYgKCF3cml0YWJsZSkgY2FsbGJhY2suY2FsbChzdHJlYW0pO1xuXHR9O1xuXG5cdHZhciBvbmV4aXQgPSBmdW5jdGlvbihleGl0Q29kZSkge1xuXHRcdGNhbGxiYWNrLmNhbGwoc3RyZWFtLCBleGl0Q29kZSA/IG5ldyBFcnJvcignZXhpdGVkIHdpdGggZXJyb3IgY29kZTogJyArIGV4aXRDb2RlKSA6IG51bGwpO1xuXHR9O1xuXG5cdHZhciBvbmVycm9yID0gZnVuY3Rpb24oZXJyKSB7XG5cdFx0Y2FsbGJhY2suY2FsbChzdHJlYW0sIGVycik7XG5cdH07XG5cblx0dmFyIG9uY2xvc2UgPSBmdW5jdGlvbigpIHtcblx0XHRwcm9jZXNzLm5leHRUaWNrKG9uY2xvc2VuZXh0dGljayk7XG5cdH07XG5cblx0dmFyIG9uY2xvc2VuZXh0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmIChjYW5jZWxsZWQpIHJldHVybjtcblx0XHRpZiAocmVhZGFibGUgJiYgIShycyAmJiAocnMuZW5kZWQgJiYgIXJzLmRlc3Ryb3llZCkpKSByZXR1cm4gY2FsbGJhY2suY2FsbChzdHJlYW0sIG5ldyBFcnJvcigncHJlbWF0dXJlIGNsb3NlJykpO1xuXHRcdGlmICh3cml0YWJsZSAmJiAhKHdzICYmICh3cy5lbmRlZCAmJiAhd3MuZGVzdHJveWVkKSkpIHJldHVybiBjYWxsYmFjay5jYWxsKHN0cmVhbSwgbmV3IEVycm9yKCdwcmVtYXR1cmUgY2xvc2UnKSk7XG5cdH07XG5cblx0dmFyIG9ucmVxdWVzdCA9IGZ1bmN0aW9uKCkge1xuXHRcdHN0cmVhbS5yZXEub24oJ2ZpbmlzaCcsIG9uZmluaXNoKTtcblx0fTtcblxuXHRpZiAoaXNSZXF1ZXN0KHN0cmVhbSkpIHtcblx0XHRzdHJlYW0ub24oJ2NvbXBsZXRlJywgb25maW5pc2gpO1xuXHRcdHN0cmVhbS5vbignYWJvcnQnLCBvbmNsb3NlKTtcblx0XHRpZiAoc3RyZWFtLnJlcSkgb25yZXF1ZXN0KCk7XG5cdFx0ZWxzZSBzdHJlYW0ub24oJ3JlcXVlc3QnLCBvbnJlcXVlc3QpO1xuXHR9IGVsc2UgaWYgKHdyaXRhYmxlICYmICF3cykgeyAvLyBsZWdhY3kgc3RyZWFtc1xuXHRcdHN0cmVhbS5vbignZW5kJywgb25sZWdhY3lmaW5pc2gpO1xuXHRcdHN0cmVhbS5vbignY2xvc2UnLCBvbmxlZ2FjeWZpbmlzaCk7XG5cdH1cblxuXHRpZiAoaXNDaGlsZFByb2Nlc3Moc3RyZWFtKSkgc3RyZWFtLm9uKCdleGl0Jywgb25leGl0KTtcblxuXHRzdHJlYW0ub24oJ2VuZCcsIG9uZW5kKTtcblx0c3RyZWFtLm9uKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG5cdGlmIChvcHRzLmVycm9yICE9PSBmYWxzZSkgc3RyZWFtLm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuXHRzdHJlYW0ub24oJ2Nsb3NlJywgb25jbG9zZSk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdGNhbmNlbGxlZCA9IHRydWU7XG5cdFx0c3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdjb21wbGV0ZScsIG9uZmluaXNoKTtcblx0XHRzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2Fib3J0Jywgb25jbG9zZSk7XG5cdFx0c3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdyZXF1ZXN0Jywgb25yZXF1ZXN0KTtcblx0XHRpZiAoc3RyZWFtLnJlcSkgc3RyZWFtLnJlcS5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuXHRcdHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25sZWdhY3lmaW5pc2gpO1xuXHRcdHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmxlZ2FjeWZpbmlzaCk7XG5cdFx0c3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG5cdFx0c3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdleGl0Jywgb25leGl0KTtcblx0XHRzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcblx0XHRzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG5cdFx0c3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuXHR9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlb3M7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbmZ1bmN0aW9uIGNyZWF0ZVJlamVjdGlvbihlcnJvciwgLi4uYmVmb3JlRXJyb3JHcm91cHMpIHtcbiAgICBjb25zdCBwcm9taXNlID0gKGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgdHlwZXNfMS5SZXF1ZXN0RXJyb3IpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBob29rcyBvZiBiZWZvcmVFcnJvckdyb3Vwcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaG9va3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaG9vayBvZiBob29rcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hd2FpdC1pbi1sb29wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBhd2FpdCBob29rKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcl8pIHtcbiAgICAgICAgICAgICAgICBlcnJvciA9IGVycm9yXztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9KSgpO1xuICAgIGNvbnN0IHJldHVyblByb21pc2UgPSAoKSA9PiBwcm9taXNlO1xuICAgIHByb21pc2UuanNvbiA9IHJldHVyblByb21pc2U7XG4gICAgcHJvbWlzZS50ZXh0ID0gcmV0dXJuUHJvbWlzZTtcbiAgICBwcm9taXNlLmJ1ZmZlciA9IHJldHVyblByb21pc2U7XG4gICAgcHJvbWlzZS5vbiA9IHJldHVyblByb21pc2U7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVSZWplY3Rpb247XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZXZlbnRzXzEgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xuY29uc3QgaXNfMSA9IHJlcXVpcmUoXCJAc2luZHJlc29yaHVzL2lzXCIpO1xuY29uc3QgUENhbmNlbGFibGUgPSByZXF1aXJlKFwicC1jYW5jZWxhYmxlXCIpO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuY29uc3QgcGFyc2VfYm9keV8xID0gcmVxdWlyZShcIi4vcGFyc2UtYm9keVwiKTtcbmNvbnN0IGNvcmVfMSA9IHJlcXVpcmUoXCIuLi9jb3JlXCIpO1xuY29uc3QgcHJveHlfZXZlbnRzXzEgPSByZXF1aXJlKFwiLi4vY29yZS91dGlscy9wcm94eS1ldmVudHNcIik7XG5jb25zdCBnZXRfYnVmZmVyXzEgPSByZXF1aXJlKFwiLi4vY29yZS91dGlscy9nZXQtYnVmZmVyXCIpO1xuY29uc3QgaXNfcmVzcG9uc2Vfb2tfMSA9IHJlcXVpcmUoXCIuLi9jb3JlL3V0aWxzL2lzLXJlc3BvbnNlLW9rXCIpO1xuY29uc3QgcHJveGllZFJlcXVlc3RFdmVudHMgPSBbXG4gICAgJ3JlcXVlc3QnLFxuICAgICdyZXNwb25zZScsXG4gICAgJ3JlZGlyZWN0JyxcbiAgICAndXBsb2FkUHJvZ3Jlc3MnLFxuICAgICdkb3dubG9hZFByb2dyZXNzJ1xuXTtcbmZ1bmN0aW9uIGFzUHJvbWlzZShub3JtYWxpemVkT3B0aW9ucykge1xuICAgIGxldCBnbG9iYWxSZXF1ZXN0O1xuICAgIGxldCBnbG9iYWxSZXNwb25zZTtcbiAgICBjb25zdCBlbWl0dGVyID0gbmV3IGV2ZW50c18xLkV2ZW50RW1pdHRlcigpO1xuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUENhbmNlbGFibGUoKHJlc29sdmUsIHJlamVjdCwgb25DYW5jZWwpID0+IHtcbiAgICAgICAgY29uc3QgbWFrZVJlcXVlc3QgPSAocmV0cnlDb3VudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBjb3JlXzEuZGVmYXVsdCh1bmRlZmluZWQsIG5vcm1hbGl6ZWRPcHRpb25zKTtcbiAgICAgICAgICAgIHJlcXVlc3QucmV0cnlDb3VudCA9IHJldHJ5Q291bnQ7XG4gICAgICAgICAgICByZXF1ZXN0Ll9ub1BpcGUgPSB0cnVlO1xuICAgICAgICAgICAgb25DYW5jZWwoKCkgPT4gcmVxdWVzdC5kZXN0cm95KCkpO1xuICAgICAgICAgICAgb25DYW5jZWwuc2hvdWxkUmVqZWN0ID0gZmFsc2U7XG4gICAgICAgICAgICBvbkNhbmNlbCgoKSA9PiByZWplY3QobmV3IHR5cGVzXzEuQ2FuY2VsRXJyb3IocmVxdWVzdCkpKTtcbiAgICAgICAgICAgIGdsb2JhbFJlcXVlc3QgPSByZXF1ZXN0O1xuICAgICAgICAgICAgcmVxdWVzdC5vbmNlKCdyZXNwb25zZScsIGFzeW5jIChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICByZXNwb25zZS5yZXRyeUNvdW50ID0gcmV0cnlDb3VudDtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UucmVxdWVzdC5hYm9ydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIENhbmNlbGVkIHdoaWxlIGRvd25sb2FkaW5nIC0gd2lsbCB0aHJvdyBhIGBDYW5jZWxFcnJvcmAgb3IgYFRpbWVvdXRFcnJvcmAgZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBEb3dubG9hZCBib2R5XG4gICAgICAgICAgICAgICAgbGV0IHJhd0JvZHk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmF3Qm9keSA9IGF3YWl0IGdldF9idWZmZXJfMS5kZWZhdWx0KHJlcXVlc3QpO1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5yYXdCb2R5ID0gcmF3Qm9keTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKF9iKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBzYW1lIGVycm9yIGlzIGNhdWdodCBiZWxvdy5cbiAgICAgICAgICAgICAgICAgICAgLy8gU2VlIHJlcXVlc3Qub25jZSgnZXJyb3InKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0Ll9pc0Fib3V0VG9FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFBhcnNlIGJvZHlcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50RW5jb2RpbmcgPSAoKF9hID0gcmVzcG9uc2UuaGVhZGVyc1snY29udGVudC1lbmNvZGluZyddKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnJykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBpc0NvbXByZXNzZWQgPSBbJ2d6aXAnLCAnZGVmbGF0ZScsICdiciddLmluY2x1ZGVzKGNvbnRlbnRFbmNvZGluZyk7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBvcHRpb25zIH0gPSByZXF1ZXN0O1xuICAgICAgICAgICAgICAgIGlmIChpc0NvbXByZXNzZWQgJiYgIW9wdGlvbnMuZGVjb21wcmVzcykge1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5ib2R5ID0gcmF3Qm9keTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5ib2R5ID0gcGFyc2VfYm9keV8xLmRlZmF1bHQocmVzcG9uc2UsIG9wdGlvbnMucmVzcG9uc2VUeXBlLCBvcHRpb25zLnBhcnNlSnNvbiwgb3B0aW9ucy5lbmNvZGluZyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGYWxsYmFjayB0byBgdXRmOGBcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmJvZHkgPSByYXdCb2R5LnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNfcmVzcG9uc2Vfb2tfMS5pc1Jlc3BvbnNlT2socmVzcG9uc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5fYmVmb3JlRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtpbmRleCwgaG9va10gb2Ygb3B0aW9ucy5ob29rcy5hZnRlclJlc3BvbnNlLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBUUyBkb2Vzbid0IG5vdGljZSB0aGF0IENhbmNlbGFibGVSZXF1ZXN0IGlzIGEgUHJvbWlzZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWF3YWl0LWluLWxvb3BcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gYXdhaXQgaG9vayhyZXNwb25zZSwgYXN5bmMgKHVwZGF0ZWRPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHlwZWRPcHRpb25zID0gY29yZV8xLmRlZmF1bHQubm9ybWFsaXplQXJndW1lbnRzKHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi51cGRhdGVkT3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0cnk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGN1bGF0ZURlbGF5OiAoKSA9PiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93SHR0cEVycm9yczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVCb2R5T25seTogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgYW55IGZ1cnRoZXIgaG9va3MgZm9yIHRoYXQgcmVxdWVzdCwgYmVjYXVzZSB3ZSdsbCBjYWxsIHRoZW0gYW55d2F5LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBsb29wIGNvbnRpbnVlcy4gV2UgZG9uJ3Qgd2FudCBkdXBsaWNhdGVzIChhc1Byb21pc2UgcmVjdXJzaW9uKS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlZE9wdGlvbnMuaG9va3MuYWZ0ZXJSZXNwb25zZSA9IHR5cGVkT3B0aW9ucy5ob29rcy5hZnRlclJlc3BvbnNlLnNsaWNlKDAsIGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGhvb2sgb2YgdHlwZWRPcHRpb25zLmhvb2tzLmJlZm9yZVJldHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hd2FpdC1pbi1sb29wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGhvb2sodHlwZWRPcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IGFzUHJvbWlzZSh0eXBlZE9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2FuY2VsKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5jYXRjaCgoKSA9PiB7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlLmNhbmNlbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuX2JlZm9yZUVycm9yKG5ldyB0eXBlc18xLlJlcXVlc3RFcnJvcihlcnJvci5tZXNzYWdlLCBlcnJvciwgcmVxdWVzdCkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghaXNfcmVzcG9uc2Vfb2tfMS5pc1Jlc3BvbnNlT2socmVzcG9uc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuX2JlZm9yZUVycm9yKG5ldyB0eXBlc18xLkhUVFBFcnJvcihyZXNwb25zZSkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGdsb2JhbFJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXF1ZXN0Lm9wdGlvbnMucmVzb2x2ZUJvZHlPbmx5ID8gcmVzcG9uc2UuYm9keSA6IHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3Qgb25FcnJvciA9IChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwcm9taXNlLmlzQ2FuY2VsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB7IG9wdGlvbnMgfSA9IHJlcXVlc3Q7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgdHlwZXNfMS5IVFRQRXJyb3IgJiYgIW9wdGlvbnMudGhyb3dIdHRwRXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgcmVzcG9uc2UgfSA9IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlcXVlc3Qub3B0aW9ucy5yZXNvbHZlQm9keU9ubHkgPyByZXNwb25zZS5ib2R5IDogcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVxdWVzdC5vbmNlKCdlcnJvcicsIG9uRXJyb3IpO1xuICAgICAgICAgICAgY29uc3QgcHJldmlvdXNCb2R5ID0gcmVxdWVzdC5vcHRpb25zLmJvZHk7XG4gICAgICAgICAgICByZXF1ZXN0Lm9uY2UoJ3JldHJ5JywgKG5ld1JldHJ5Q291bnQsIGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNCb2R5ID09PSAoKF9hID0gZXJyb3IucmVxdWVzdCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm9wdGlvbnMuYm9keSkgJiYgaXNfMS5kZWZhdWx0Lm5vZGVTdHJlYW0oKF9iID0gZXJyb3IucmVxdWVzdCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLm9wdGlvbnMuYm9keSkpIHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWFrZVJlcXVlc3QobmV3UmV0cnlDb3VudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHByb3h5X2V2ZW50c18xLmRlZmF1bHQocmVxdWVzdCwgZW1pdHRlciwgcHJveGllZFJlcXVlc3RFdmVudHMpO1xuICAgICAgICB9O1xuICAgICAgICBtYWtlUmVxdWVzdCgwKTtcbiAgICB9KTtcbiAgICBwcm9taXNlLm9uID0gKGV2ZW50LCBmbikgPT4ge1xuICAgICAgICBlbWl0dGVyLm9uKGV2ZW50LCBmbik7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH07XG4gICAgY29uc3Qgc2hvcnRjdXQgPSAocmVzcG9uc2VUeXBlKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1Byb21pc2UgPSAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgLy8gV2FpdCB1bnRpbCBkb3dubG9hZGluZyBoYXMgZW5kZWRcbiAgICAgICAgICAgIGF3YWl0IHByb21pc2U7XG4gICAgICAgICAgICBjb25zdCB7IG9wdGlvbnMgfSA9IGdsb2JhbFJlc3BvbnNlLnJlcXVlc3Q7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VfYm9keV8xLmRlZmF1bHQoZ2xvYmFsUmVzcG9uc2UsIHJlc3BvbnNlVHlwZSwgb3B0aW9ucy5wYXJzZUpzb24sIG9wdGlvbnMuZW5jb2RpbmcpO1xuICAgICAgICB9KSgpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhuZXdQcm9taXNlLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhwcm9taXNlKSk7XG4gICAgICAgIHJldHVybiBuZXdQcm9taXNlO1xuICAgIH07XG4gICAgcHJvbWlzZS5qc29uID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB7IGhlYWRlcnMgfSA9IGdsb2JhbFJlcXVlc3Qub3B0aW9ucztcbiAgICAgICAgaWYgKCFnbG9iYWxSZXF1ZXN0LndyaXRhYmxlRmluaXNoZWQgJiYgaGVhZGVycy5hY2NlcHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycy5hY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNob3J0Y3V0KCdqc29uJyk7XG4gICAgfTtcbiAgICBwcm9taXNlLmJ1ZmZlciA9ICgpID0+IHNob3J0Y3V0KCdidWZmZXInKTtcbiAgICBwcm9taXNlLnRleHQgPSAoKSA9PiBzaG9ydGN1dCgndGV4dCcpO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gYXNQcm9taXNlO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzXCIpLCBleHBvcnRzKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaXNfMSA9IHJlcXVpcmUoXCJAc2luZHJlc29yaHVzL2lzXCIpO1xuY29uc3Qgbm9ybWFsaXplQXJndW1lbnRzID0gKG9wdGlvbnMsIGRlZmF1bHRzKSA9PiB7XG4gICAgaWYgKGlzXzEuZGVmYXVsdC5udWxsXyhvcHRpb25zLmVuY29kaW5nKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUbyBnZXQgYSBCdWZmZXIsIHNldCBgb3B0aW9ucy5yZXNwb25zZVR5cGVgIHRvIGBidWZmZXJgIGluc3RlYWQnKTtcbiAgICB9XG4gICAgaXNfMS5hc3NlcnQuYW55KFtpc18xLmRlZmF1bHQuc3RyaW5nLCBpc18xLmRlZmF1bHQudW5kZWZpbmVkXSwgb3B0aW9ucy5lbmNvZGluZyk7XG4gICAgaXNfMS5hc3NlcnQuYW55KFtpc18xLmRlZmF1bHQuYm9vbGVhbiwgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZF0sIG9wdGlvbnMucmVzb2x2ZUJvZHlPbmx5KTtcbiAgICBpc18xLmFzc2VydC5hbnkoW2lzXzEuZGVmYXVsdC5ib29sZWFuLCBpc18xLmRlZmF1bHQudW5kZWZpbmVkXSwgb3B0aW9ucy5tZXRob2RSZXdyaXRpbmcpO1xuICAgIGlzXzEuYXNzZXJ0LmFueShbaXNfMS5kZWZhdWx0LmJvb2xlYW4sIGlzXzEuZGVmYXVsdC51bmRlZmluZWRdLCBvcHRpb25zLmlzU3RyZWFtKTtcbiAgICBpc18xLmFzc2VydC5hbnkoW2lzXzEuZGVmYXVsdC5zdHJpbmcsIGlzXzEuZGVmYXVsdC51bmRlZmluZWRdLCBvcHRpb25zLnJlc3BvbnNlVHlwZSk7XG4gICAgLy8gYG9wdGlvbnMucmVzcG9uc2VUeXBlYFxuICAgIGlmIChvcHRpb25zLnJlc3BvbnNlVHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG9wdGlvbnMucmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgIH1cbiAgICAvLyBgb3B0aW9ucy5yZXRyeWBcbiAgICBjb25zdCB7IHJldHJ5IH0gPSBvcHRpb25zO1xuICAgIGlmIChkZWZhdWx0cykge1xuICAgICAgICBvcHRpb25zLnJldHJ5ID0geyAuLi5kZWZhdWx0cy5yZXRyeSB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgb3B0aW9ucy5yZXRyeSA9IHtcbiAgICAgICAgICAgIGNhbGN1bGF0ZURlbGF5OiByZXRyeU9iamVjdCA9PiByZXRyeU9iamVjdC5jb21wdXRlZFZhbHVlLFxuICAgICAgICAgICAgbGltaXQ6IDAsXG4gICAgICAgICAgICBtZXRob2RzOiBbXSxcbiAgICAgICAgICAgIHN0YXR1c0NvZGVzOiBbXSxcbiAgICAgICAgICAgIGVycm9yQ29kZXM6IFtdLFxuICAgICAgICAgICAgbWF4UmV0cnlBZnRlcjogdW5kZWZpbmVkXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChpc18xLmRlZmF1bHQub2JqZWN0KHJldHJ5KSkge1xuICAgICAgICBvcHRpb25zLnJldHJ5ID0ge1xuICAgICAgICAgICAgLi4ub3B0aW9ucy5yZXRyeSxcbiAgICAgICAgICAgIC4uLnJldHJ5XG4gICAgICAgIH07XG4gICAgICAgIG9wdGlvbnMucmV0cnkubWV0aG9kcyA9IFsuLi5uZXcgU2V0KG9wdGlvbnMucmV0cnkubWV0aG9kcy5tYXAobWV0aG9kID0+IG1ldGhvZC50b1VwcGVyQ2FzZSgpKSldO1xuICAgICAgICBvcHRpb25zLnJldHJ5LnN0YXR1c0NvZGVzID0gWy4uLm5ldyBTZXQob3B0aW9ucy5yZXRyeS5zdGF0dXNDb2RlcyldO1xuICAgICAgICBvcHRpb25zLnJldHJ5LmVycm9yQ29kZXMgPSBbLi4ubmV3IFNldChvcHRpb25zLnJldHJ5LmVycm9yQ29kZXMpXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNfMS5kZWZhdWx0Lm51bWJlcihyZXRyeSkpIHtcbiAgICAgICAgb3B0aW9ucy5yZXRyeS5saW1pdCA9IHJldHJ5O1xuICAgIH1cbiAgICBpZiAoaXNfMS5kZWZhdWx0LnVuZGVmaW5lZChvcHRpb25zLnJldHJ5Lm1heFJldHJ5QWZ0ZXIpKSB7XG4gICAgICAgIG9wdGlvbnMucmV0cnkubWF4UmV0cnlBZnRlciA9IE1hdGgubWluKFxuICAgICAgICAvLyBUeXBlU2NyaXB0IGlzIG5vdCBzbWFydCBlbm91Z2ggdG8gaGFuZGxlIGAuZmlsdGVyKHggPT4gaXMubnVtYmVyKHgpKWAuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL25vLWZuLXJlZmVyZW5jZS1pbi1pdGVyYXRvclxuICAgICAgICAuLi5bb3B0aW9ucy50aW1lb3V0LnJlcXVlc3QsIG9wdGlvbnMudGltZW91dC5jb25uZWN0XS5maWx0ZXIoaXNfMS5kZWZhdWx0Lm51bWJlcikpO1xuICAgIH1cbiAgICAvLyBgb3B0aW9ucy5wYWdpbmF0aW9uYFxuICAgIGlmIChpc18xLmRlZmF1bHQub2JqZWN0KG9wdGlvbnMucGFnaW5hdGlvbikpIHtcbiAgICAgICAgaWYgKGRlZmF1bHRzKSB7XG4gICAgICAgICAgICBvcHRpb25zLnBhZ2luYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgLi4uZGVmYXVsdHMucGFnaW5hdGlvbixcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zLnBhZ2luYXRpb25cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBwYWdpbmF0aW9uIH0gPSBvcHRpb25zO1xuICAgICAgICBpZiAoIWlzXzEuZGVmYXVsdC5mdW5jdGlvbl8ocGFnaW5hdGlvbi50cmFuc2Zvcm0pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BvcHRpb25zLnBhZ2luYXRpb24udHJhbnNmb3JtYCBtdXN0IGJlIGltcGxlbWVudGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc18xLmRlZmF1bHQuZnVuY3Rpb25fKHBhZ2luYXRpb24uc2hvdWxkQ29udGludWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BvcHRpb25zLnBhZ2luYXRpb24uc2hvdWxkQ29udGludWVgIG11c3QgYmUgaW1wbGVtZW50ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzXzEuZGVmYXVsdC5mdW5jdGlvbl8ocGFnaW5hdGlvbi5maWx0ZXIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdgb3B0aW9ucy5wYWdpbmF0aW9uLmZpbHRlcmAgbXVzdCBiZSBpbXBsZW1lbnRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNfMS5kZWZhdWx0LmZ1bmN0aW9uXyhwYWdpbmF0aW9uLnBhZ2luYXRlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgb3B0aW9ucy5wYWdpbmF0aW9uLnBhZ2luYXRlYCBtdXN0IGJlIGltcGxlbWVudGVkJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gSlNPTiBtb2RlXG4gICAgaWYgKG9wdGlvbnMucmVzcG9uc2VUeXBlID09PSAnanNvbicgJiYgb3B0aW9ucy5oZWFkZXJzLmFjY2VwdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG9wdGlvbnMuaGVhZGVycy5hY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IG5vcm1hbGl6ZUFyZ3VtZW50cztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuY29uc3QgcGFyc2VCb2R5ID0gKHJlc3BvbnNlLCByZXNwb25zZVR5cGUsIHBhcnNlSnNvbiwgZW5jb2RpbmcpID0+IHtcbiAgICBjb25zdCB7IHJhd0JvZHkgfSA9IHJlc3BvbnNlO1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChyZXNwb25zZVR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHJhd0JvZHkudG9TdHJpbmcoZW5jb2RpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNwb25zZVR5cGUgPT09ICdqc29uJykge1xuICAgICAgICAgICAgcmV0dXJuIHJhd0JvZHkubGVuZ3RoID09PSAwID8gJycgOiBwYXJzZUpzb24ocmF3Qm9keS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzcG9uc2VUeXBlID09PSAnYnVmZmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIHJhd0JvZHk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IHR5cGVzXzEuUGFyc2VFcnJvcih7XG4gICAgICAgICAgICBtZXNzYWdlOiBgVW5rbm93biBib2R5IHR5cGUgJyR7cmVzcG9uc2VUeXBlfSdgLFxuICAgICAgICAgICAgbmFtZTogJ0Vycm9yJ1xuICAgICAgICB9LCByZXNwb25zZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgdHlwZXNfMS5QYXJzZUVycm9yKGVycm9yLCByZXNwb25zZSk7XG4gICAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IHBhcnNlQm9keTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNhbmNlbEVycm9yID0gZXhwb3J0cy5QYXJzZUVycm9yID0gdm9pZCAwO1xuY29uc3QgY29yZV8xID0gcmVxdWlyZShcIi4uL2NvcmVcIik7XG4vKipcbkFuIGVycm9yIHRvIGJlIHRocm93biB3aGVuIHNlcnZlciByZXNwb25zZSBjb2RlIGlzIDJ4eCwgYW5kIHBhcnNpbmcgYm9keSBmYWlscy5cbkluY2x1ZGVzIGEgYHJlc3BvbnNlYCBwcm9wZXJ0eS5cbiovXG5jbGFzcyBQYXJzZUVycm9yIGV4dGVuZHMgY29yZV8xLlJlcXVlc3RFcnJvciB7XG4gICAgY29uc3RydWN0b3IoZXJyb3IsIHJlc3BvbnNlKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gcmVzcG9uc2UucmVxdWVzdDtcbiAgICAgICAgc3VwZXIoYCR7ZXJyb3IubWVzc2FnZX0gaW4gXCIke29wdGlvbnMudXJsLnRvU3RyaW5nKCl9XCJgLCBlcnJvciwgcmVzcG9uc2UucmVxdWVzdCk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdQYXJzZUVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLlBhcnNlRXJyb3IgPSBQYXJzZUVycm9yO1xuLyoqXG5BbiBlcnJvciB0byBiZSB0aHJvd24gd2hlbiB0aGUgcmVxdWVzdCBpcyBhYm9ydGVkIHdpdGggYC5jYW5jZWwoKWAuXG4qL1xuY2xhc3MgQ2FuY2VsRXJyb3IgZXh0ZW5kcyBjb3JlXzEuUmVxdWVzdEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihyZXF1ZXN0KSB7XG4gICAgICAgIHN1cGVyKCdQcm9taXNlIHdhcyBjYW5jZWxlZCcsIHt9LCByZXF1ZXN0KTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ0NhbmNlbEVycm9yJztcbiAgICB9XG4gICAgZ2V0IGlzQ2FuY2VsZWQoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2FuY2VsRXJyb3IgPSBDYW5jZWxFcnJvcjtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi4vY29yZVwiKSwgZXhwb3J0cyk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmV0cnlBZnRlclN0YXR1c0NvZGVzID0gdm9pZCAwO1xuZXhwb3J0cy5yZXRyeUFmdGVyU3RhdHVzQ29kZXMgPSBuZXcgU2V0KFs0MTMsIDQyOSwgNTAzXSk7XG5jb25zdCBjYWxjdWxhdGVSZXRyeURlbGF5ID0gKHsgYXR0ZW1wdENvdW50LCByZXRyeU9wdGlvbnMsIGVycm9yLCByZXRyeUFmdGVyIH0pID0+IHtcbiAgICBpZiAoYXR0ZW1wdENvdW50ID4gcmV0cnlPcHRpb25zLmxpbWl0KSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBjb25zdCBoYXNNZXRob2QgPSByZXRyeU9wdGlvbnMubWV0aG9kcy5pbmNsdWRlcyhlcnJvci5vcHRpb25zLm1ldGhvZCk7XG4gICAgY29uc3QgaGFzRXJyb3JDb2RlID0gcmV0cnlPcHRpb25zLmVycm9yQ29kZXMuaW5jbHVkZXMoZXJyb3IuY29kZSk7XG4gICAgY29uc3QgaGFzU3RhdHVzQ29kZSA9IGVycm9yLnJlc3BvbnNlICYmIHJldHJ5T3B0aW9ucy5zdGF0dXNDb2Rlcy5pbmNsdWRlcyhlcnJvci5yZXNwb25zZS5zdGF0dXNDb2RlKTtcbiAgICBpZiAoIWhhc01ldGhvZCB8fCAoIWhhc0Vycm9yQ29kZSAmJiAhaGFzU3RhdHVzQ29kZSkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmIChlcnJvci5yZXNwb25zZSkge1xuICAgICAgICBpZiAocmV0cnlBZnRlcikge1xuICAgICAgICAgICAgaWYgKHJldHJ5T3B0aW9ucy5tYXhSZXRyeUFmdGVyID09PSB1bmRlZmluZWQgfHwgcmV0cnlBZnRlciA+IHJldHJ5T3B0aW9ucy5tYXhSZXRyeUFmdGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0cnlBZnRlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IucmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gNDEzKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBub2lzZSA9IE1hdGgucmFuZG9tKCkgKiAxMDA7XG4gICAgcmV0dXJuICgoMiAqKiAoYXR0ZW1wdENvdW50IC0gMSkpICogMTAwMCkgKyBub2lzZTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBjYWxjdWxhdGVSZXRyeURlbGF5O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlVuc3VwcG9ydGVkUHJvdG9jb2xFcnJvciA9IGV4cG9ydHMuUmVhZEVycm9yID0gZXhwb3J0cy5UaW1lb3V0RXJyb3IgPSBleHBvcnRzLlVwbG9hZEVycm9yID0gZXhwb3J0cy5DYWNoZUVycm9yID0gZXhwb3J0cy5IVFRQRXJyb3IgPSBleHBvcnRzLk1heFJlZGlyZWN0c0Vycm9yID0gZXhwb3J0cy5SZXF1ZXN0RXJyb3IgPSBleHBvcnRzLnNldE5vbkVudW1lcmFibGVQcm9wZXJ0aWVzID0gZXhwb3J0cy5rbm93bkhvb2tFdmVudHMgPSBleHBvcnRzLndpdGhvdXRCb2R5ID0gZXhwb3J0cy5rSXNOb3JtYWxpemVkQWxyZWFkeSA9IHZvaWQgMDtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xuY29uc3Qgc3RyZWFtXzEgPSByZXF1aXJlKFwic3RyZWFtXCIpO1xuY29uc3QgZnNfMSA9IHJlcXVpcmUoXCJmc1wiKTtcbmNvbnN0IHVybF8xID0gcmVxdWlyZShcInVybFwiKTtcbmNvbnN0IGh0dHAgPSByZXF1aXJlKFwiaHR0cFwiKTtcbmNvbnN0IGh0dHBfMSA9IHJlcXVpcmUoXCJodHRwXCIpO1xuY29uc3QgaHR0cHMgPSByZXF1aXJlKFwiaHR0cHNcIik7XG5jb25zdCBodHRwX3RpbWVyXzEgPSByZXF1aXJlKFwiQHN6bWFyY3phay9odHRwLXRpbWVyXCIpO1xuY29uc3QgY2FjaGVhYmxlX2xvb2t1cF8xID0gcmVxdWlyZShcImNhY2hlYWJsZS1sb29rdXBcIik7XG5jb25zdCBDYWNoZWFibGVSZXF1ZXN0ID0gcmVxdWlyZShcImNhY2hlYWJsZS1yZXF1ZXN0XCIpO1xuY29uc3QgZGVjb21wcmVzc1Jlc3BvbnNlID0gcmVxdWlyZShcImRlY29tcHJlc3MtcmVzcG9uc2VcIik7XG4vLyBAdHMtZXhwZWN0LWVycm9yIE1pc3NpbmcgdHlwZXNcbmNvbnN0IGh0dHAyd3JhcHBlciA9IHJlcXVpcmUoXCJodHRwMi13cmFwcGVyXCIpO1xuY29uc3QgbG93ZXJjYXNlS2V5cyA9IHJlcXVpcmUoXCJsb3dlcmNhc2Uta2V5c1wiKTtcbmNvbnN0IGlzXzEgPSByZXF1aXJlKFwiQHNpbmRyZXNvcmh1cy9pc1wiKTtcbmNvbnN0IGdldF9ib2R5X3NpemVfMSA9IHJlcXVpcmUoXCIuL3V0aWxzL2dldC1ib2R5LXNpemVcIik7XG5jb25zdCBpc19mb3JtX2RhdGFfMSA9IHJlcXVpcmUoXCIuL3V0aWxzL2lzLWZvcm0tZGF0YVwiKTtcbmNvbnN0IHByb3h5X2V2ZW50c18xID0gcmVxdWlyZShcIi4vdXRpbHMvcHJveHktZXZlbnRzXCIpO1xuY29uc3QgdGltZWRfb3V0XzEgPSByZXF1aXJlKFwiLi91dGlscy90aW1lZC1vdXRcIik7XG5jb25zdCB1cmxfdG9fb3B0aW9uc18xID0gcmVxdWlyZShcIi4vdXRpbHMvdXJsLXRvLW9wdGlvbnNcIik7XG5jb25zdCBvcHRpb25zX3RvX3VybF8xID0gcmVxdWlyZShcIi4vdXRpbHMvb3B0aW9ucy10by11cmxcIik7XG5jb25zdCB3ZWFrYWJsZV9tYXBfMSA9IHJlcXVpcmUoXCIuL3V0aWxzL3dlYWthYmxlLW1hcFwiKTtcbmNvbnN0IGdldF9idWZmZXJfMSA9IHJlcXVpcmUoXCIuL3V0aWxzL2dldC1idWZmZXJcIik7XG5jb25zdCBkbnNfaXBfdmVyc2lvbl8xID0gcmVxdWlyZShcIi4vdXRpbHMvZG5zLWlwLXZlcnNpb25cIik7XG5jb25zdCBpc19yZXNwb25zZV9va18xID0gcmVxdWlyZShcIi4vdXRpbHMvaXMtcmVzcG9uc2Utb2tcIik7XG5jb25zdCBkZXByZWNhdGlvbl93YXJuaW5nXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvZGVwcmVjYXRpb24td2FybmluZ1wiKTtcbmNvbnN0IG5vcm1hbGl6ZV9hcmd1bWVudHNfMSA9IHJlcXVpcmUoXCIuLi9hcy1wcm9taXNlL25vcm1hbGl6ZS1hcmd1bWVudHNcIik7XG5jb25zdCBjYWxjdWxhdGVfcmV0cnlfZGVsYXlfMSA9IHJlcXVpcmUoXCIuL2NhbGN1bGF0ZS1yZXRyeS1kZWxheVwiKTtcbmNvbnN0IGdsb2JhbERuc0NhY2hlID0gbmV3IGNhY2hlYWJsZV9sb29rdXBfMS5kZWZhdWx0KCk7XG5jb25zdCBrUmVxdWVzdCA9IFN5bWJvbCgncmVxdWVzdCcpO1xuY29uc3Qga1Jlc3BvbnNlID0gU3ltYm9sKCdyZXNwb25zZScpO1xuY29uc3Qga1Jlc3BvbnNlU2l6ZSA9IFN5bWJvbCgncmVzcG9uc2VTaXplJyk7XG5jb25zdCBrRG93bmxvYWRlZFNpemUgPSBTeW1ib2woJ2Rvd25sb2FkZWRTaXplJyk7XG5jb25zdCBrQm9keVNpemUgPSBTeW1ib2woJ2JvZHlTaXplJyk7XG5jb25zdCBrVXBsb2FkZWRTaXplID0gU3ltYm9sKCd1cGxvYWRlZFNpemUnKTtcbmNvbnN0IGtTZXJ2ZXJSZXNwb25zZXNQaXBlZCA9IFN5bWJvbCgnc2VydmVyUmVzcG9uc2VzUGlwZWQnKTtcbmNvbnN0IGtVbnByb3h5RXZlbnRzID0gU3ltYm9sKCd1bnByb3h5RXZlbnRzJyk7XG5jb25zdCBrSXNGcm9tQ2FjaGUgPSBTeW1ib2woJ2lzRnJvbUNhY2hlJyk7XG5jb25zdCBrQ2FuY2VsVGltZW91dHMgPSBTeW1ib2woJ2NhbmNlbFRpbWVvdXRzJyk7XG5jb25zdCBrU3RhcnRlZFJlYWRpbmcgPSBTeW1ib2woJ3N0YXJ0ZWRSZWFkaW5nJyk7XG5jb25zdCBrU3RvcFJlYWRpbmcgPSBTeW1ib2woJ3N0b3BSZWFkaW5nJyk7XG5jb25zdCBrVHJpZ2dlclJlYWQgPSBTeW1ib2woJ3RyaWdnZXJSZWFkJyk7XG5jb25zdCBrQm9keSA9IFN5bWJvbCgnYm9keScpO1xuY29uc3Qga0pvYnMgPSBTeW1ib2woJ2pvYnMnKTtcbmNvbnN0IGtPcmlnaW5hbFJlc3BvbnNlID0gU3ltYm9sKCdvcmlnaW5hbFJlc3BvbnNlJyk7XG5jb25zdCBrUmV0cnlUaW1lb3V0ID0gU3ltYm9sKCdyZXRyeVRpbWVvdXQnKTtcbmV4cG9ydHMua0lzTm9ybWFsaXplZEFscmVhZHkgPSBTeW1ib2woJ2lzTm9ybWFsaXplZEFscmVhZHknKTtcbmNvbnN0IHN1cHBvcnRzQnJvdGxpID0gaXNfMS5kZWZhdWx0LnN0cmluZyhwcm9jZXNzLnZlcnNpb25zLmJyb3RsaSk7XG5leHBvcnRzLndpdGhvdXRCb2R5ID0gbmV3IFNldChbJ0dFVCcsICdIRUFEJ10pO1xuZXhwb3J0cy5rbm93bkhvb2tFdmVudHMgPSBbXG4gICAgJ2luaXQnLFxuICAgICdiZWZvcmVSZXF1ZXN0JyxcbiAgICAnYmVmb3JlUmVkaXJlY3QnLFxuICAgICdiZWZvcmVFcnJvcicsXG4gICAgJ2JlZm9yZVJldHJ5JyxcbiAgICAvLyBQcm9taXNlLU9ubHlcbiAgICAnYWZ0ZXJSZXNwb25zZSdcbl07XG5mdW5jdGlvbiB2YWxpZGF0ZVNlYXJjaFBhcmFtZXRlcnMoc2VhcmNoUGFyYW1ldGVycykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzZWFyY2hQYXJhbWV0ZXJzKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gc2VhcmNoUGFyYW1ldGVyc1trZXldO1xuICAgICAgICBpZiAoIWlzXzEuZGVmYXVsdC5zdHJpbmcodmFsdWUpICYmICFpc18xLmRlZmF1bHQubnVtYmVyKHZhbHVlKSAmJiAhaXNfMS5kZWZhdWx0LmJvb2xlYW4odmFsdWUpICYmICFpc18xLmRlZmF1bHQubnVsbF8odmFsdWUpICYmICFpc18xLmRlZmF1bHQudW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgVGhlIFxcYHNlYXJjaFBhcmFtc1xcYCB2YWx1ZSAnJHtTdHJpbmcodmFsdWUpfScgbXVzdCBiZSBhIHN0cmluZywgbnVtYmVyLCBib29sZWFuIG9yIG51bGxgKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGlzQ2xpZW50UmVxdWVzdChjbGllbnRSZXF1ZXN0KSB7XG4gICAgcmV0dXJuIGlzXzEuZGVmYXVsdC5vYmplY3QoY2xpZW50UmVxdWVzdCkgJiYgISgnc3RhdHVzQ29kZScgaW4gY2xpZW50UmVxdWVzdCk7XG59XG5jb25zdCBjYWNoZWFibGVTdG9yZSA9IG5ldyB3ZWFrYWJsZV9tYXBfMS5kZWZhdWx0KCk7XG5jb25zdCB3YWl0Rm9yT3BlbkZpbGUgPSBhc3luYyAoZmlsZSkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IG9uRXJyb3IgPSAoZXJyb3IpID0+IHtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICB9O1xuICAgIC8vIE5vZGUuanMgMTIgaGFzIGluY29tcGxldGUgdHlwZXNcbiAgICBpZiAoIWZpbGUucGVuZGluZykge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgfVxuICAgIGZpbGUub25jZSgnZXJyb3InLCBvbkVycm9yKTtcbiAgICBmaWxlLm9uY2UoJ3JlYWR5JywgKCkgPT4ge1xuICAgICAgICBmaWxlLm9mZignZXJyb3InLCBvbkVycm9yKTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgIH0pO1xufSk7XG5jb25zdCByZWRpcmVjdENvZGVzID0gbmV3IFNldChbMzAwLCAzMDEsIDMwMiwgMzAzLCAzMDQsIDMwNywgMzA4XSk7XG5jb25zdCBub25FbnVtZXJhYmxlUHJvcGVydGllcyA9IFtcbiAgICAnY29udGV4dCcsXG4gICAgJ2JvZHknLFxuICAgICdqc29uJyxcbiAgICAnZm9ybSdcbl07XG5leHBvcnRzLnNldE5vbkVudW1lcmFibGVQcm9wZXJ0aWVzID0gKHNvdXJjZXMsIHRvKSA9PiB7XG4gICAgLy8gTm9uIGVudW1lcmFibGUgcHJvcGVydGllcyBzaGFsbCBub3QgYmUgbWVyZ2VkXG4gICAgY29uc3QgcHJvcGVydGllcyA9IHt9O1xuICAgIGZvciAoY29uc3Qgc291cmNlIG9mIHNvdXJjZXMpIHtcbiAgICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBub25FbnVtZXJhYmxlUHJvcGVydGllcykge1xuICAgICAgICAgICAgaWYgKCEobmFtZSBpbiBzb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcm9wZXJ0aWVzW25hbWVdID0ge1xuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFRTIGRvZXNuJ3Qgc2VlIHRoZSBjaGVjayBhYm92ZVxuICAgICAgICAgICAgICAgIHZhbHVlOiBzb3VyY2VbbmFtZV1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModG8sIHByb3BlcnRpZXMpO1xufTtcbi8qKlxuQW4gZXJyb3IgdG8gYmUgdGhyb3duIHdoZW4gYSByZXF1ZXN0IGZhaWxzLlxuQ29udGFpbnMgYSBgY29kZWAgcHJvcGVydHkgd2l0aCBlcnJvciBjbGFzcyBjb2RlLCBsaWtlIGBFQ09OTlJFRlVTRURgLlxuKi9cbmNsYXNzIFJlcXVlc3RFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBlcnJvciwgc2VsZikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ1JlcXVlc3RFcnJvcic7XG4gICAgICAgIHRoaXMuY29kZSA9IGVycm9yLmNvZGU7XG4gICAgICAgIGlmIChzZWxmIGluc3RhbmNlb2YgUmVxdWVzdCkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdyZXF1ZXN0Jywge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBzZWxmXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAncmVzcG9uc2UnLCB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHNlbGZba1Jlc3BvbnNlXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ29wdGlvbnMnLCB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBmYWlscyBiZWNhdXNlIG9mIFRTIDMuNy4yIHVzZURlZmluZUZvckNsYXNzRmllbGRzXG4gICAgICAgICAgICAgICAgLy8gUmVmOiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzM0OTcyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHNlbGYub3B0aW9uc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ29wdGlvbnMnLCB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBmYWlscyBiZWNhdXNlIG9mIFRTIDMuNy4yIHVzZURlZmluZUZvckNsYXNzRmllbGRzXG4gICAgICAgICAgICAgICAgLy8gUmVmOiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzM0OTcyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHNlbGZcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudGltaW5ncyA9IChfYSA9IHRoaXMucmVxdWVzdCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRpbWluZ3M7XG4gICAgICAgIC8vIFJlY292ZXIgdGhlIG9yaWdpbmFsIHN0YWNrdHJhY2VcbiAgICAgICAgaWYgKGlzXzEuZGVmYXVsdC5zdHJpbmcoZXJyb3Iuc3RhY2spICYmIGlzXzEuZGVmYXVsdC5zdHJpbmcodGhpcy5zdGFjaykpIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4T2ZNZXNzYWdlID0gdGhpcy5zdGFjay5pbmRleE9mKHRoaXMubWVzc2FnZSkgKyB0aGlzLm1lc3NhZ2UubGVuZ3RoO1xuICAgICAgICAgICAgY29uc3QgdGhpc1N0YWNrVHJhY2UgPSB0aGlzLnN0YWNrLnNsaWNlKGluZGV4T2ZNZXNzYWdlKS5zcGxpdCgnXFxuJykucmV2ZXJzZSgpO1xuICAgICAgICAgICAgY29uc3QgZXJyb3JTdGFja1RyYWNlID0gZXJyb3Iuc3RhY2suc2xpY2UoZXJyb3Iuc3RhY2suaW5kZXhPZihlcnJvci5tZXNzYWdlKSArIGVycm9yLm1lc3NhZ2UubGVuZ3RoKS5zcGxpdCgnXFxuJykucmV2ZXJzZSgpO1xuICAgICAgICAgICAgLy8gUmVtb3ZlIGR1cGxpY2F0ZWQgdHJhY2VzXG4gICAgICAgICAgICB3aGlsZSAoZXJyb3JTdGFja1RyYWNlLmxlbmd0aCAhPT0gMCAmJiBlcnJvclN0YWNrVHJhY2VbMF0gPT09IHRoaXNTdGFja1RyYWNlWzBdKSB7XG4gICAgICAgICAgICAgICAgdGhpc1N0YWNrVHJhY2Uuc2hpZnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3RhY2sgPSBgJHt0aGlzLnN0YWNrLnNsaWNlKDAsIGluZGV4T2ZNZXNzYWdlKX0ke3RoaXNTdGFja1RyYWNlLnJldmVyc2UoKS5qb2luKCdcXG4nKX0ke2Vycm9yU3RhY2tUcmFjZS5yZXZlcnNlKCkuam9pbignXFxuJyl9YDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuUmVxdWVzdEVycm9yID0gUmVxdWVzdEVycm9yO1xuLyoqXG5BbiBlcnJvciB0byBiZSB0aHJvd24gd2hlbiB0aGUgc2VydmVyIHJlZGlyZWN0cyB5b3UgbW9yZSB0aGFuIHRlbiB0aW1lcy5cbkluY2x1ZGVzIGEgYHJlc3BvbnNlYCBwcm9wZXJ0eS5cbiovXG5jbGFzcyBNYXhSZWRpcmVjdHNFcnJvciBleHRlbmRzIFJlcXVlc3RFcnJvciB7XG4gICAgY29uc3RydWN0b3IocmVxdWVzdCkge1xuICAgICAgICBzdXBlcihgUmVkaXJlY3RlZCAke3JlcXVlc3Qub3B0aW9ucy5tYXhSZWRpcmVjdHN9IHRpbWVzLiBBYm9ydGluZy5gLCB7fSwgcmVxdWVzdCk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdNYXhSZWRpcmVjdHNFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5NYXhSZWRpcmVjdHNFcnJvciA9IE1heFJlZGlyZWN0c0Vycm9yO1xuLyoqXG5BbiBlcnJvciB0byBiZSB0aHJvd24gd2hlbiB0aGUgc2VydmVyIHJlc3BvbnNlIGNvZGUgaXMgbm90IDJ4eCBub3IgM3h4IGlmIGBvcHRpb25zLmZvbGxvd1JlZGlyZWN0YCBpcyBgdHJ1ZWAsIGJ1dCBhbHdheXMgZXhjZXB0IGZvciAzMDQuXG5JbmNsdWRlcyBhIGByZXNwb25zZWAgcHJvcGVydHkuXG4qL1xuY2xhc3MgSFRUUEVycm9yIGV4dGVuZHMgUmVxdWVzdEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZSkge1xuICAgICAgICBzdXBlcihgUmVzcG9uc2UgY29kZSAke3Jlc3BvbnNlLnN0YXR1c0NvZGV9ICgke3Jlc3BvbnNlLnN0YXR1c01lc3NhZ2V9KWAsIHt9LCByZXNwb25zZS5yZXF1ZXN0KTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ0hUVFBFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5IVFRQRXJyb3IgPSBIVFRQRXJyb3I7XG4vKipcbkFuIGVycm9yIHRvIGJlIHRocm93biB3aGVuIGEgY2FjaGUgbWV0aG9kIGZhaWxzLlxuRm9yIGV4YW1wbGUsIGlmIHRoZSBkYXRhYmFzZSBnb2VzIGRvd24gb3IgdGhlcmUncyBhIGZpbGVzeXN0ZW0gZXJyb3IuXG4qL1xuY2xhc3MgQ2FjaGVFcnJvciBleHRlbmRzIFJlcXVlc3RFcnJvciB7XG4gICAgY29uc3RydWN0b3IoZXJyb3IsIHJlcXVlc3QpIHtcbiAgICAgICAgc3VwZXIoZXJyb3IubWVzc2FnZSwgZXJyb3IsIHJlcXVlc3QpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnQ2FjaGVFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5DYWNoZUVycm9yID0gQ2FjaGVFcnJvcjtcbi8qKlxuQW4gZXJyb3IgdG8gYmUgdGhyb3duIHdoZW4gdGhlIHJlcXVlc3QgYm9keSBpcyBhIHN0cmVhbSBhbmQgYW4gZXJyb3Igb2NjdXJzIHdoaWxlIHJlYWRpbmcgZnJvbSB0aGF0IHN0cmVhbS5cbiovXG5jbGFzcyBVcGxvYWRFcnJvciBleHRlbmRzIFJlcXVlc3RFcnJvciB7XG4gICAgY29uc3RydWN0b3IoZXJyb3IsIHJlcXVlc3QpIHtcbiAgICAgICAgc3VwZXIoZXJyb3IubWVzc2FnZSwgZXJyb3IsIHJlcXVlc3QpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnVXBsb2FkRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuVXBsb2FkRXJyb3IgPSBVcGxvYWRFcnJvcjtcbi8qKlxuQW4gZXJyb3IgdG8gYmUgdGhyb3duIHdoZW4gdGhlIHJlcXVlc3QgaXMgYWJvcnRlZCBkdWUgdG8gYSB0aW1lb3V0LlxuSW5jbHVkZXMgYW4gYGV2ZW50YCBhbmQgYHRpbWluZ3NgIHByb3BlcnR5LlxuKi9cbmNsYXNzIFRpbWVvdXRFcnJvciBleHRlbmRzIFJlcXVlc3RFcnJvciB7XG4gICAgY29uc3RydWN0b3IoZXJyb3IsIHRpbWluZ3MsIHJlcXVlc3QpIHtcbiAgICAgICAgc3VwZXIoZXJyb3IubWVzc2FnZSwgZXJyb3IsIHJlcXVlc3QpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnVGltZW91dEVycm9yJztcbiAgICAgICAgdGhpcy5ldmVudCA9IGVycm9yLmV2ZW50O1xuICAgICAgICB0aGlzLnRpbWluZ3MgPSB0aW1pbmdzO1xuICAgIH1cbn1cbmV4cG9ydHMuVGltZW91dEVycm9yID0gVGltZW91dEVycm9yO1xuLyoqXG5BbiBlcnJvciB0byBiZSB0aHJvd24gd2hlbiByZWFkaW5nIGZyb20gcmVzcG9uc2Ugc3RyZWFtIGZhaWxzLlxuKi9cbmNsYXNzIFJlYWRFcnJvciBleHRlbmRzIFJlcXVlc3RFcnJvciB7XG4gICAgY29uc3RydWN0b3IoZXJyb3IsIHJlcXVlc3QpIHtcbiAgICAgICAgc3VwZXIoZXJyb3IubWVzc2FnZSwgZXJyb3IsIHJlcXVlc3QpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnUmVhZEVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLlJlYWRFcnJvciA9IFJlYWRFcnJvcjtcbi8qKlxuQW4gZXJyb3IgdG8gYmUgdGhyb3duIHdoZW4gZ2l2ZW4gYW4gdW5zdXBwb3J0ZWQgcHJvdG9jb2wuXG4qL1xuY2xhc3MgVW5zdXBwb3J0ZWRQcm90b2NvbEVycm9yIGV4dGVuZHMgUmVxdWVzdEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGBVbnN1cHBvcnRlZCBwcm90b2NvbCBcIiR7b3B0aW9ucy51cmwucHJvdG9jb2x9XCJgLCB7fSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdVbnN1cHBvcnRlZFByb3RvY29sRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuVW5zdXBwb3J0ZWRQcm90b2NvbEVycm9yID0gVW5zdXBwb3J0ZWRQcm90b2NvbEVycm9yO1xuY29uc3QgcHJveGllZFJlcXVlc3RFdmVudHMgPSBbXG4gICAgJ3NvY2tldCcsXG4gICAgJ2Nvbm5lY3QnLFxuICAgICdjb250aW51ZScsXG4gICAgJ2luZm9ybWF0aW9uJyxcbiAgICAndXBncmFkZScsXG4gICAgJ3RpbWVvdXQnXG5dO1xuY2xhc3MgUmVxdWVzdCBleHRlbmRzIHN0cmVhbV8xLkR1cGxleCB7XG4gICAgY29uc3RydWN0b3IodXJsLCBvcHRpb25zID0ge30sIGRlZmF1bHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIC8vIFRoaXMgbXVzdCBiZSBmYWxzZSwgdG8gZW5hYmxlIHRocm93aW5nIGFmdGVyIGRlc3Ryb3lcbiAgICAgICAgICAgIC8vIEl0IGlzIHVzZWQgZm9yIHJldHJ5IGxvZ2ljIGluIFByb21pc2UgQVBJXG4gICAgICAgICAgICBhdXRvRGVzdHJveTogZmFsc2UsXG4gICAgICAgICAgICAvLyBJdCBuZWVkcyB0byBiZSB6ZXJvIGJlY2F1c2Ugd2UncmUganVzdCBwcm94eWluZyB0aGUgZGF0YSB0byBhbm90aGVyIHN0cmVhbVxuICAgICAgICAgICAgaGlnaFdhdGVyTWFyazogMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpc1trRG93bmxvYWRlZFNpemVdID0gMDtcbiAgICAgICAgdGhpc1trVXBsb2FkZWRTaXplXSA9IDA7XG4gICAgICAgIHRoaXMucmVxdWVzdEluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgIHRoaXNba1NlcnZlclJlc3BvbnNlc1BpcGVkXSA9IG5ldyBTZXQoKTtcbiAgICAgICAgdGhpcy5yZWRpcmVjdHMgPSBbXTtcbiAgICAgICAgdGhpc1trU3RvcFJlYWRpbmddID0gZmFsc2U7XG4gICAgICAgIHRoaXNba1RyaWdnZXJSZWFkXSA9IGZhbHNlO1xuICAgICAgICB0aGlzW2tKb2JzXSA9IFtdO1xuICAgICAgICB0aGlzLnJldHJ5Q291bnQgPSAwO1xuICAgICAgICAvLyBUT0RPOiBSZW1vdmUgdGhpcyB3aGVuIHRhcmdldGluZyBOb2RlLmpzID49IDEyXG4gICAgICAgIHRoaXMuX3Byb2dyZXNzQ2FsbGJhY2tzID0gW107XG4gICAgICAgIGNvbnN0IHVubG9ja1dyaXRlID0gKCkgPT4gdGhpcy5fdW5sb2NrV3JpdGUoKTtcbiAgICAgICAgY29uc3QgbG9ja1dyaXRlID0gKCkgPT4gdGhpcy5fbG9ja1dyaXRlKCk7XG4gICAgICAgIHRoaXMub24oJ3BpcGUnLCAoc291cmNlKSA9PiB7XG4gICAgICAgICAgICBzb3VyY2UucHJlcGVuZExpc3RlbmVyKCdkYXRhJywgdW5sb2NrV3JpdGUpO1xuICAgICAgICAgICAgc291cmNlLm9uKCdkYXRhJywgbG9ja1dyaXRlKTtcbiAgICAgICAgICAgIHNvdXJjZS5wcmVwZW5kTGlzdGVuZXIoJ2VuZCcsIHVubG9ja1dyaXRlKTtcbiAgICAgICAgICAgIHNvdXJjZS5vbignZW5kJywgbG9ja1dyaXRlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMub24oJ3VucGlwZScsIChzb3VyY2UpID0+IHtcbiAgICAgICAgICAgIHNvdXJjZS5vZmYoJ2RhdGEnLCB1bmxvY2tXcml0ZSk7XG4gICAgICAgICAgICBzb3VyY2Uub2ZmKCdkYXRhJywgbG9ja1dyaXRlKTtcbiAgICAgICAgICAgIHNvdXJjZS5vZmYoJ2VuZCcsIHVubG9ja1dyaXRlKTtcbiAgICAgICAgICAgIHNvdXJjZS5vZmYoJ2VuZCcsIGxvY2tXcml0ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uKCdwaXBlJywgc291cmNlID0+IHtcbiAgICAgICAgICAgIGlmIChzb3VyY2UgaW5zdGFuY2VvZiBodHRwXzEuSW5jb21pbmdNZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnNvdXJjZS5oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICAuLi50aGlzLm9wdGlvbnMuaGVhZGVyc1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB7IGpzb24sIGJvZHksIGZvcm0gfSA9IG9wdGlvbnM7XG4gICAgICAgIGlmIChqc29uIHx8IGJvZHkgfHwgZm9ybSkge1xuICAgICAgICAgICAgdGhpcy5fbG9ja1dyaXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4cG9ydHMua0lzTm9ybWFsaXplZEFscmVhZHkgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBDb21tb24gVHlwZVNjcmlwdCBidWcgc2F5aW5nIHRoYXQgYHRoaXMuY29uc3RydWN0b3JgIGlzIG5vdCBhY2Nlc3NpYmxlXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gdGhpcy5jb25zdHJ1Y3Rvci5ub3JtYWxpemVBcmd1bWVudHModXJsLCBvcHRpb25zLCBkZWZhdWx0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBNb3ZlIHRoaXMgdG8gYF9kZXN0cm95KClgXG4gICAgICAgICAgICAgICAgaWYgKGlzXzEuZGVmYXVsdC5ub2RlU3RyZWFtKG9wdGlvbnMuYm9keSkpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5ib2R5LmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95KGVycm9yKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5ib2R5IGluc3RhbmNlb2YgZnNfMS5SZWFkU3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHdhaXRGb3JPcGVuRmlsZSh0aGlzLm9wdGlvbnMuYm9keSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHsgdXJsOiBub3JtYWxpemVkVVJMIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgICAgICAgICAgaWYgKCFub3JtYWxpemVkVVJMKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ01pc3NpbmcgYHVybGAgcHJvcGVydHknKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0VXJsID0gbm9ybWFsaXplZFVSTC50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIGRlY29kZVVSSSh0aGlzLnJlcXVlc3RVcmwpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX2ZpbmFsaXplQm9keSgpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX21ha2VSZXF1ZXN0KCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgICAgICAgIChfYSA9IHRoaXNba1JlcXVlc3RdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFF1ZXVlZCB3cml0ZXMgZXRjLlxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgam9iIG9mIHRoaXNba0pvYnNdKSB7XG4gICAgICAgICAgICAgICAgICAgIGpvYigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IG1lbW9yeSBsZWFrXG4gICAgICAgICAgICAgICAgdGhpc1trSm9ic10ubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLnJlcXVlc3RJbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBSZXF1ZXN0RXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmVmb3JlRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSB3b3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvaXNzdWVzLzMzMzM1XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3koZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkoKTtcbiAgICB9XG4gICAgc3RhdGljIG5vcm1hbGl6ZUFyZ3VtZW50cyh1cmwsIG9wdGlvbnMsIGRlZmF1bHRzKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gICAgICAgIGNvbnN0IHJhd09wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBpZiAoaXNfMS5kZWZhdWx0Lm9iamVjdCh1cmwpICYmICFpc18xLmRlZmF1bHQudXJsSW5zdGFuY2UodXJsKSkge1xuICAgICAgICAgICAgb3B0aW9ucyA9IHsgLi4uZGVmYXVsdHMsIC4uLnVybCwgLi4ub3B0aW9ucyB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHVybCAmJiBvcHRpb25zICYmIG9wdGlvbnMudXJsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgYHVybGAgb3B0aW9uIGlzIG11dHVhbGx5IGV4Y2x1c2l2ZSB3aXRoIHRoZSBgaW5wdXRgIGFyZ3VtZW50Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zID0geyAuLi5kZWZhdWx0cywgLi4ub3B0aW9ucyB9O1xuICAgICAgICAgICAgaWYgKHVybCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy51cmwgPSB1cmw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNfMS5kZWZhdWx0LnVybEluc3RhbmNlKG9wdGlvbnMudXJsKSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMudXJsID0gbmV3IHVybF8xLlVSTChvcHRpb25zLnVybC50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPOiBEZXByZWNhdGUgVVJMIG9wdGlvbnMgaW4gR290IDEyLlxuICAgICAgICAvLyBTdXBwb3J0IGV4dGVuZC1zcGVjaWZpYyBvcHRpb25zXG4gICAgICAgIGlmIChvcHRpb25zLmNhY2hlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgb3B0aW9ucy5jYWNoZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5kbnNDYWNoZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuZG5zQ2FjaGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTmljZSB0eXBlIGFzc2VydGlvbnNcbiAgICAgICAgaXNfMS5hc3NlcnQuYW55KFtpc18xLmRlZmF1bHQuc3RyaW5nLCBpc18xLmRlZmF1bHQudW5kZWZpbmVkXSwgb3B0aW9ucy5tZXRob2QpO1xuICAgICAgICBpc18xLmFzc2VydC5hbnkoW2lzXzEuZGVmYXVsdC5vYmplY3QsIGlzXzEuZGVmYXVsdC51bmRlZmluZWRdLCBvcHRpb25zLmhlYWRlcnMpO1xuICAgICAgICBpc18xLmFzc2VydC5hbnkoW2lzXzEuZGVmYXVsdC5zdHJpbmcsIGlzXzEuZGVmYXVsdC51cmxJbnN0YW5jZSwgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZF0sIG9wdGlvbnMucHJlZml4VXJsKTtcbiAgICAgICAgaXNfMS5hc3NlcnQuYW55KFtpc18xLmRlZmF1bHQub2JqZWN0LCBpc18xLmRlZmF1bHQudW5kZWZpbmVkXSwgb3B0aW9ucy5jb29raWVKYXIpO1xuICAgICAgICBpc18xLmFzc2VydC5hbnkoW2lzXzEuZGVmYXVsdC5vYmplY3QsIGlzXzEuZGVmYXVsdC5zdHJpbmcsIGlzXzEuZGVmYXVsdC51bmRlZmluZWRdLCBvcHRpb25zLnNlYXJjaFBhcmFtcyk7XG4gICAgICAgIGlzXzEuYXNzZXJ0LmFueShbaXNfMS5kZWZhdWx0Lm9iamVjdCwgaXNfMS5kZWZhdWx0LnN0cmluZywgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZF0sIG9wdGlvbnMuY2FjaGUpO1xuICAgICAgICBpc18xLmFzc2VydC5hbnkoW2lzXzEuZGVmYXVsdC5vYmplY3QsIGlzXzEuZGVmYXVsdC5udW1iZXIsIGlzXzEuZGVmYXVsdC51bmRlZmluZWRdLCBvcHRpb25zLnRpbWVvdXQpO1xuICAgICAgICBpc18xLmFzc2VydC5hbnkoW2lzXzEuZGVmYXVsdC5vYmplY3QsIGlzXzEuZGVmYXVsdC51bmRlZmluZWRdLCBvcHRpb25zLmNvbnRleHQpO1xuICAgICAgICBpc18xLmFzc2VydC5hbnkoW2lzXzEuZGVmYXVsdC5vYmplY3QsIGlzXzEuZGVmYXVsdC51bmRlZmluZWRdLCBvcHRpb25zLmhvb2tzKTtcbiAgICAgICAgaXNfMS5hc3NlcnQuYW55KFtpc18xLmRlZmF1bHQuYm9vbGVhbiwgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZF0sIG9wdGlvbnMuZGVjb21wcmVzcyk7XG4gICAgICAgIGlzXzEuYXNzZXJ0LmFueShbaXNfMS5kZWZhdWx0LmJvb2xlYW4sIGlzXzEuZGVmYXVsdC51bmRlZmluZWRdLCBvcHRpb25zLmlnbm9yZUludmFsaWRDb29raWVzKTtcbiAgICAgICAgaXNfMS5hc3NlcnQuYW55KFtpc18xLmRlZmF1bHQuYm9vbGVhbiwgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZF0sIG9wdGlvbnMuZm9sbG93UmVkaXJlY3QpO1xuICAgICAgICBpc18xLmFzc2VydC5hbnkoW2lzXzEuZGVmYXVsdC5udW1iZXIsIGlzXzEuZGVmYXVsdC51bmRlZmluZWRdLCBvcHRpb25zLm1heFJlZGlyZWN0cyk7XG4gICAgICAgIGlzXzEuYXNzZXJ0LmFueShbaXNfMS5kZWZhdWx0LmJvb2xlYW4sIGlzXzEuZGVmYXVsdC51bmRlZmluZWRdLCBvcHRpb25zLnRocm93SHR0cEVycm9ycyk7XG4gICAgICAgIGlzXzEuYXNzZXJ0LmFueShbaXNfMS5kZWZhdWx0LmJvb2xlYW4sIGlzXzEuZGVmYXVsdC51bmRlZmluZWRdLCBvcHRpb25zLmh0dHAyKTtcbiAgICAgICAgaXNfMS5hc3NlcnQuYW55KFtpc18xLmRlZmF1bHQuYm9vbGVhbiwgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZF0sIG9wdGlvbnMuYWxsb3dHZXRCb2R5KTtcbiAgICAgICAgaXNfMS5hc3NlcnQuYW55KFtpc18xLmRlZmF1bHQuc3RyaW5nLCBpc18xLmRlZmF1bHQudW5kZWZpbmVkXSwgb3B0aW9ucy5sb2NhbEFkZHJlc3MpO1xuICAgICAgICBpc18xLmFzc2VydC5hbnkoW2Ruc19pcF92ZXJzaW9uXzEuaXNEbnNMb29rdXBJcFZlcnNpb24sIGlzXzEuZGVmYXVsdC51bmRlZmluZWRdLCBvcHRpb25zLmRuc0xvb2t1cElwVmVyc2lvbik7XG4gICAgICAgIGlzXzEuYXNzZXJ0LmFueShbaXNfMS5kZWZhdWx0Lm9iamVjdCwgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZF0sIG9wdGlvbnMuaHR0cHMpO1xuICAgICAgICBpc18xLmFzc2VydC5hbnkoW2lzXzEuZGVmYXVsdC5ib29sZWFuLCBpc18xLmRlZmF1bHQudW5kZWZpbmVkXSwgb3B0aW9ucy5yZWplY3RVbmF1dGhvcml6ZWQpO1xuICAgICAgICBpZiAob3B0aW9ucy5odHRwcykge1xuICAgICAgICAgICAgaXNfMS5hc3NlcnQuYW55KFtpc18xLmRlZmF1bHQuYm9vbGVhbiwgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZF0sIG9wdGlvbnMuaHR0cHMucmVqZWN0VW5hdXRob3JpemVkKTtcbiAgICAgICAgICAgIGlzXzEuYXNzZXJ0LmFueShbaXNfMS5kZWZhdWx0LmZ1bmN0aW9uXywgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZF0sIG9wdGlvbnMuaHR0cHMuY2hlY2tTZXJ2ZXJJZGVudGl0eSk7XG4gICAgICAgICAgICBpc18xLmFzc2VydC5hbnkoW2lzXzEuZGVmYXVsdC5zdHJpbmcsIGlzXzEuZGVmYXVsdC5vYmplY3QsIGlzXzEuZGVmYXVsdC5hcnJheSwgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZF0sIG9wdGlvbnMuaHR0cHMuY2VydGlmaWNhdGVBdXRob3JpdHkpO1xuICAgICAgICAgICAgaXNfMS5hc3NlcnQuYW55KFtpc18xLmRlZmF1bHQuc3RyaW5nLCBpc18xLmRlZmF1bHQub2JqZWN0LCBpc18xLmRlZmF1bHQuYXJyYXksIGlzXzEuZGVmYXVsdC51bmRlZmluZWRdLCBvcHRpb25zLmh0dHBzLmtleSk7XG4gICAgICAgICAgICBpc18xLmFzc2VydC5hbnkoW2lzXzEuZGVmYXVsdC5zdHJpbmcsIGlzXzEuZGVmYXVsdC5vYmplY3QsIGlzXzEuZGVmYXVsdC5hcnJheSwgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZF0sIG9wdGlvbnMuaHR0cHMuY2VydGlmaWNhdGUpO1xuICAgICAgICAgICAgaXNfMS5hc3NlcnQuYW55KFtpc18xLmRlZmF1bHQuc3RyaW5nLCBpc18xLmRlZmF1bHQudW5kZWZpbmVkXSwgb3B0aW9ucy5odHRwcy5wYXNzcGhyYXNlKTtcbiAgICAgICAgICAgIGlzXzEuYXNzZXJ0LmFueShbaXNfMS5kZWZhdWx0LnN0cmluZywgaXNfMS5kZWZhdWx0LmJ1ZmZlciwgaXNfMS5kZWZhdWx0LmFycmF5LCBpc18xLmRlZmF1bHQudW5kZWZpbmVkXSwgb3B0aW9ucy5odHRwcy5wZngpO1xuICAgICAgICB9XG4gICAgICAgIGlzXzEuYXNzZXJ0LmFueShbaXNfMS5kZWZhdWx0Lm9iamVjdCwgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZF0sIG9wdGlvbnMuY2FjaGVPcHRpb25zKTtcbiAgICAgICAgLy8gYG9wdGlvbnMubWV0aG9kYFxuICAgICAgICBpZiAoaXNfMS5kZWZhdWx0LnN0cmluZyhvcHRpb25zLm1ldGhvZCkpIHtcbiAgICAgICAgICAgIG9wdGlvbnMubWV0aG9kID0gb3B0aW9ucy5tZXRob2QudG9VcHBlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMubWV0aG9kID0gJ0dFVCc7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYG9wdGlvbnMuaGVhZGVyc2BcbiAgICAgICAgaWYgKG9wdGlvbnMuaGVhZGVycyA9PT0gKGRlZmF1bHRzID09PSBudWxsIHx8IGRlZmF1bHRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWZhdWx0cy5oZWFkZXJzKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5oZWFkZXJzID0geyAuLi5vcHRpb25zLmhlYWRlcnMgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMuaGVhZGVycyA9IGxvd2VyY2FzZUtleXMoeyAuLi4oZGVmYXVsdHMgPT09IG51bGwgfHwgZGVmYXVsdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlZmF1bHRzLmhlYWRlcnMpLCAuLi5vcHRpb25zLmhlYWRlcnMgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGlzYWxsb3cgbGVnYWN5IGB1cmwuVXJsYFxuICAgICAgICBpZiAoJ3NsYXNoZXMnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBsZWdhY3kgYHVybC5VcmxgIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBgVVJMYCBpbnN0ZWFkLicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGBvcHRpb25zLmF1dGhgXG4gICAgICAgIGlmICgnYXV0aCcgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUGFyYW1ldGVyIGBhdXRoYCBpcyBkZXByZWNhdGVkLiBVc2UgYHVzZXJuYW1lYCAvIGBwYXNzd29yZGAgaW5zdGVhZC4nKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBgb3B0aW9ucy5zZWFyY2hQYXJhbXNgXG4gICAgICAgIGlmICgnc2VhcmNoUGFyYW1zJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zZWFyY2hQYXJhbXMgJiYgb3B0aW9ucy5zZWFyY2hQYXJhbXMgIT09IChkZWZhdWx0cyA9PT0gbnVsbCB8fCBkZWZhdWx0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVmYXVsdHMuc2VhcmNoUGFyYW1zKSkge1xuICAgICAgICAgICAgICAgIGxldCBzZWFyY2hQYXJhbWV0ZXJzO1xuICAgICAgICAgICAgICAgIGlmIChpc18xLmRlZmF1bHQuc3RyaW5nKG9wdGlvbnMuc2VhcmNoUGFyYW1zKSB8fCAob3B0aW9ucy5zZWFyY2hQYXJhbXMgaW5zdGFuY2VvZiB1cmxfMS5VUkxTZWFyY2hQYXJhbXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaFBhcmFtZXRlcnMgPSBuZXcgdXJsXzEuVVJMU2VhcmNoUGFyYW1zKG9wdGlvbnMuc2VhcmNoUGFyYW1zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlU2VhcmNoUGFyYW1ldGVycyhvcHRpb25zLnNlYXJjaFBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaFBhcmFtZXRlcnMgPSBuZXcgdXJsXzEuVVJMU2VhcmNoUGFyYW1zKCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb3B0aW9ucy5zZWFyY2hQYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gb3B0aW9ucy5zZWFyY2hQYXJhbXNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaFBhcmFtZXRlcnMuYXBwZW5kKGtleSwgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaFBhcmFtZXRlcnMuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGBub3JtYWxpemVBcmd1bWVudHMoKWAgaXMgYWxzbyB1c2VkIHRvIG1lcmdlIG9wdGlvbnNcbiAgICAgICAgICAgICAgICAoX2EgPSBkZWZhdWx0cyA9PT0gbnVsbCB8fCBkZWZhdWx0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVmYXVsdHMuc2VhcmNoUGFyYW1zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IHVzZSBkZWZhdWx0IGlmIG9uZSBpc24ndCBhbHJlYWR5IGRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWFyY2hQYXJhbWV0ZXJzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hQYXJhbWV0ZXJzLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuc2VhcmNoUGFyYW1zID0gc2VhcmNoUGFyYW1ldGVycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBgb3B0aW9ucy51c2VybmFtZWAgJiBgb3B0aW9ucy5wYXNzd29yZGBcbiAgICAgICAgb3B0aW9ucy51c2VybmFtZSA9IChfYiA9IG9wdGlvbnMudXNlcm5hbWUpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICcnO1xuICAgICAgICBvcHRpb25zLnBhc3N3b3JkID0gKF9jID0gb3B0aW9ucy5wYXNzd29yZCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogJyc7XG4gICAgICAgIC8vIGBvcHRpb25zLnByZWZpeFVybGAgJiBgb3B0aW9ucy51cmxgXG4gICAgICAgIGlmIChpc18xLmRlZmF1bHQudW5kZWZpbmVkKG9wdGlvbnMucHJlZml4VXJsKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5wcmVmaXhVcmwgPSAoX2QgPSBkZWZhdWx0cyA9PT0gbnVsbCB8fCBkZWZhdWx0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVmYXVsdHMucHJlZml4VXJsKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiAnJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMucHJlZml4VXJsID0gb3B0aW9ucy5wcmVmaXhVcmwudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnByZWZpeFVybCAhPT0gJycgJiYgIW9wdGlvbnMucHJlZml4VXJsLmVuZHNXaXRoKCcvJykpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnByZWZpeFVybCArPSAnLyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzXzEuZGVmYXVsdC5zdHJpbmcob3B0aW9ucy51cmwpKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy51cmwuc3RhcnRzV2l0aCgnLycpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgaW5wdXRgIG11c3Qgbm90IHN0YXJ0IHdpdGggYSBzbGFzaCB3aGVuIHVzaW5nIGBwcmVmaXhVcmxgJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zLnVybCA9IG9wdGlvbnNfdG9fdXJsXzEuZGVmYXVsdChvcHRpb25zLnByZWZpeFVybCArIG9wdGlvbnMudXJsLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoaXNfMS5kZWZhdWx0LnVuZGVmaW5lZChvcHRpb25zLnVybCkgJiYgb3B0aW9ucy5wcmVmaXhVcmwgIT09ICcnKSB8fCBvcHRpb25zLnByb3RvY29sKSB7XG4gICAgICAgICAgICBvcHRpb25zLnVybCA9IG9wdGlvbnNfdG9fdXJsXzEuZGVmYXVsdChvcHRpb25zLnByZWZpeFVybCwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMudXJsKSB7XG4gICAgICAgICAgICBpZiAoJ3BvcnQnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5wb3J0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTWFrZSBpdCBwb3NzaWJsZSB0byBjaGFuZ2UgYG9wdGlvbnMucHJlZml4VXJsYFxuICAgICAgICAgICAgbGV0IHsgcHJlZml4VXJsIH0gPSBvcHRpb25zO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wdGlvbnMsICdwcmVmaXhVcmwnLCB7XG4gICAgICAgICAgICAgICAgc2V0OiAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdXJsID0gb3B0aW9ucy51cmw7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdXJsLmhyZWYuc3RhcnRzV2l0aCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGNoYW5nZSBcXGBwcmVmaXhVcmxcXGAgZnJvbSAke3ByZWZpeFVybH0gdG8gJHt2YWx1ZX06ICR7dXJsLmhyZWZ9YCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy51cmwgPSBuZXcgdXJsXzEuVVJMKHZhbHVlICsgdXJsLmhyZWYuc2xpY2UocHJlZml4VXJsLmxlbmd0aCkpO1xuICAgICAgICAgICAgICAgICAgICBwcmVmaXhVcmwgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldDogKCkgPT4gcHJlZml4VXJsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIFN1cHBvcnQgVU5JWCBzb2NrZXRzXG4gICAgICAgICAgICBsZXQgeyBwcm90b2NvbCB9ID0gb3B0aW9ucy51cmw7XG4gICAgICAgICAgICBpZiAocHJvdG9jb2wgPT09ICd1bml4OicpIHtcbiAgICAgICAgICAgICAgICBwcm90b2NvbCA9ICdodHRwOic7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy51cmwgPSBuZXcgdXJsXzEuVVJMKGBodHRwOi8vdW5peCR7b3B0aW9ucy51cmwucGF0aG5hbWV9JHtvcHRpb25zLnVybC5zZWFyY2h9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTZXQgc2VhcmNoIHBhcmFtc1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2VhcmNoUGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1iYXNlLXRvLXN0cmluZ1xuICAgICAgICAgICAgICAgIG9wdGlvbnMudXJsLnNlYXJjaCA9IG9wdGlvbnMuc2VhcmNoUGFyYW1zLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBQcm90b2NvbCBjaGVja1xuICAgICAgICAgICAgaWYgKHByb3RvY29sICE9PSAnaHR0cDonICYmIHByb3RvY29sICE9PSAnaHR0cHM6Jykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnN1cHBvcnRlZFByb3RvY29sRXJyb3Iob3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBVcGRhdGUgYHVzZXJuYW1lYFxuICAgICAgICAgICAgaWYgKG9wdGlvbnMudXNlcm5hbWUgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy51c2VybmFtZSA9IG9wdGlvbnMudXJsLnVzZXJuYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy51cmwudXNlcm5hbWUgPSBvcHRpb25zLnVzZXJuYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVXBkYXRlIGBwYXNzd29yZGBcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnBhc3N3b3JkID09PSAnJykge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMucGFzc3dvcmQgPSBvcHRpb25zLnVybC5wYXNzd29yZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMudXJsLnBhc3N3b3JkID0gb3B0aW9ucy5wYXNzd29yZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBgb3B0aW9ucy5jb29raWVKYXJgXG4gICAgICAgIGNvbnN0IHsgY29va2llSmFyIH0gPSBvcHRpb25zO1xuICAgICAgICBpZiAoY29va2llSmFyKSB7XG4gICAgICAgICAgICBsZXQgeyBzZXRDb29raWUsIGdldENvb2tpZVN0cmluZyB9ID0gY29va2llSmFyO1xuICAgICAgICAgICAgaXNfMS5hc3NlcnQuZnVuY3Rpb25fKHNldENvb2tpZSk7XG4gICAgICAgICAgICBpc18xLmFzc2VydC5mdW5jdGlvbl8oZ2V0Q29va2llU3RyaW5nKTtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBIb3JyaWJsZSBgdG91Z2gtY29va2llYCB2MyBjaGVjayAqL1xuICAgICAgICAgICAgaWYgKHNldENvb2tpZS5sZW5ndGggPT09IDQgJiYgZ2V0Q29va2llU3RyaW5nLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHNldENvb2tpZSA9IHV0aWxfMS5wcm9taXNpZnkoc2V0Q29va2llLmJpbmQob3B0aW9ucy5jb29raWVKYXIpKTtcbiAgICAgICAgICAgICAgICBnZXRDb29raWVTdHJpbmcgPSB1dGlsXzEucHJvbWlzaWZ5KGdldENvb2tpZVN0cmluZy5iaW5kKG9wdGlvbnMuY29va2llSmFyKSk7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5jb29raWVKYXIgPSB7XG4gICAgICAgICAgICAgICAgICAgIHNldENvb2tpZSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0Q29va2llU3RyaW5nOiBnZXRDb29raWVTdHJpbmdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGBvcHRpb25zLmNhY2hlYFxuICAgICAgICBjb25zdCB7IGNhY2hlIH0gPSBvcHRpb25zO1xuICAgICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgICAgIGlmICghY2FjaGVhYmxlU3RvcmUuaGFzKGNhY2hlKSkge1xuICAgICAgICAgICAgICAgIGNhY2hlYWJsZVN0b3JlLnNldChjYWNoZSwgbmV3IENhY2hlYWJsZVJlcXVlc3QoKChyZXF1ZXN0T3B0aW9ucywgaGFuZGxlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSByZXF1ZXN0T3B0aW9uc1trUmVxdWVzdF0ocmVxdWVzdE9wdGlvbnMsIGhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiByZW1vdmUgdGhpcyB3aGVuIGBjYWNoZWFibGUtcmVxdWVzdGAgc3VwcG9ydHMgYXN5bmMgcmVxdWVzdCBmdW5jdGlvbnMuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc18xLmRlZmF1bHQucHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBvbmx5IG5lZWQgdG8gaW1wbGVtZW50IHRoZSBlcnJvciBoYW5kbGVyIGluIG9yZGVyIHRvIHN1cHBvcnQgSFRUUDIgY2FjaGluZy5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSByZXN1bHQgd2lsbCBiZSBhIHByb21pc2UgYW55d2F5LlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lm9uY2UgPSAoZXZlbnQsIGhhbmRsZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQgPT09ICdlcnJvcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmNhdGNoKGhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChldmVudCA9PT0gJ2Fib3J0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZW1wdHkgY2F0Y2ggaXMgbmVlZGVkIGhlcmUgaW4gY2FzZSB3aGVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGl0IHJlamVjdHMgYmVmb3JlIGl0J3MgYGF3YWl0YGVkIGluIGBfbWFrZVJlcXVlc3RgLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gKGF3YWl0IHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5vbmNlKCdhYm9ydCcsIGhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKF9hKSB7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBzYWZldHkgY2hlY2sgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIEhUVFAyIHByb21pc2UgZXZlbnQ6ICR7ZXZlbnR9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfSksIGNhY2hlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gYG9wdGlvbnMuY2FjaGVPcHRpb25zYFxuICAgICAgICBvcHRpb25zLmNhY2hlT3B0aW9ucyA9IHsgLi4ub3B0aW9ucy5jYWNoZU9wdGlvbnMgfTtcbiAgICAgICAgLy8gYG9wdGlvbnMuZG5zQ2FjaGVgXG4gICAgICAgIGlmIChvcHRpb25zLmRuc0NhY2hlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBvcHRpb25zLmRuc0NhY2hlID0gZ2xvYmFsRG5zQ2FjaGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWlzXzEuZGVmYXVsdC51bmRlZmluZWQob3B0aW9ucy5kbnNDYWNoZSkgJiYgIW9wdGlvbnMuZG5zQ2FjaGUubG9va3VwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBQYXJhbWV0ZXIgXFxgZG5zQ2FjaGVcXGAgbXVzdCBiZSBhIENhY2hlYWJsZUxvb2t1cCBpbnN0YW5jZSBvciBhIGJvb2xlYW4sIGdvdCAke2lzXzEuZGVmYXVsdChvcHRpb25zLmRuc0NhY2hlKX1gKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBgb3B0aW9ucy50aW1lb3V0YFxuICAgICAgICBpZiAoaXNfMS5kZWZhdWx0Lm51bWJlcihvcHRpb25zLnRpbWVvdXQpKSB7XG4gICAgICAgICAgICBvcHRpb25zLnRpbWVvdXQgPSB7IHJlcXVlc3Q6IG9wdGlvbnMudGltZW91dCB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRlZmF1bHRzICYmIG9wdGlvbnMudGltZW91dCAhPT0gZGVmYXVsdHMudGltZW91dCkge1xuICAgICAgICAgICAgb3B0aW9ucy50aW1lb3V0ID0ge1xuICAgICAgICAgICAgICAgIC4uLmRlZmF1bHRzLnRpbWVvdXQsXG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucy50aW1lb3V0XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb3B0aW9ucy50aW1lb3V0ID0geyAuLi5vcHRpb25zLnRpbWVvdXQgfTtcbiAgICAgICAgfVxuICAgICAgICAvLyBgb3B0aW9ucy5jb250ZXh0YFxuICAgICAgICBpZiAoIW9wdGlvbnMuY29udGV4dCkge1xuICAgICAgICAgICAgb3B0aW9ucy5jb250ZXh0ID0ge307XG4gICAgICAgIH1cbiAgICAgICAgLy8gYG9wdGlvbnMuaG9va3NgXG4gICAgICAgIGNvbnN0IGFyZUhvb2tzRGVmYXVsdCA9IG9wdGlvbnMuaG9va3MgPT09IChkZWZhdWx0cyA9PT0gbnVsbCB8fCBkZWZhdWx0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVmYXVsdHMuaG9va3MpO1xuICAgICAgICBvcHRpb25zLmhvb2tzID0geyAuLi5vcHRpb25zLmhvb2tzIH07XG4gICAgICAgIGZvciAoY29uc3QgZXZlbnQgb2YgZXhwb3J0cy5rbm93bkhvb2tFdmVudHMpIHtcbiAgICAgICAgICAgIGlmIChldmVudCBpbiBvcHRpb25zLmhvb2tzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzXzEuZGVmYXVsdC5hcnJheShvcHRpb25zLmhvb2tzW2V2ZW50XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMzE0NDUjaXNzdWVjb21tZW50LTU3NjkyOTA0NFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmhvb2tzW2V2ZW50XSA9IFsuLi5vcHRpb25zLmhvb2tzW2V2ZW50XV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBQYXJhbWV0ZXIgXFxgJHtldmVudH1cXGAgbXVzdCBiZSBhbiBBcnJheSwgZ290ICR7aXNfMS5kZWZhdWx0KG9wdGlvbnMuaG9va3NbZXZlbnRdKX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmhvb2tzW2V2ZW50XSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkZWZhdWx0cyAmJiAhYXJlSG9va3NEZWZhdWx0KSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIGV4cG9ydHMua25vd25Ib29rRXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVmYXVsdEhvb2tzID0gZGVmYXVsdHMuaG9va3NbZXZlbnRdO1xuICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0SG9va3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8zMTQ0NSNpc3N1ZWNvbW1lbnQtNTc2OTI5MDQ0XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuaG9va3NbZXZlbnRdID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uZGVmYXVsdHMuaG9va3NbZXZlbnRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgLi4ub3B0aW9ucy5ob29rc1tldmVudF1cbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gRE5TIG9wdGlvbnNcbiAgICAgICAgaWYgKCdmYW1pbHknIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGRlcHJlY2F0aW9uX3dhcm5pbmdfMS5kZWZhdWx0KCdcIm9wdGlvbnMuZmFtaWx5XCIgd2FzIG5ldmVyIGRvY3VtZW50ZWQsIHBsZWFzZSB1c2UgXCJvcHRpb25zLmRuc0xvb2t1cElwVmVyc2lvblwiJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSFRUUFMgb3B0aW9uc1xuICAgICAgICBpZiAoZGVmYXVsdHMgPT09IG51bGwgfHwgZGVmYXVsdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlZmF1bHRzLmh0dHBzKSB7XG4gICAgICAgICAgICBvcHRpb25zLmh0dHBzID0geyAuLi5kZWZhdWx0cy5odHRwcywgLi4ub3B0aW9ucy5odHRwcyB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICgncmVqZWN0VW5hdXRob3JpemVkJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICBkZXByZWNhdGlvbl93YXJuaW5nXzEuZGVmYXVsdCgnXCJvcHRpb25zLnJlamVjdFVuYXV0aG9yaXplZFwiIGlzIG5vdyBkZXByZWNhdGVkLCBwbGVhc2UgdXNlIFwib3B0aW9ucy5odHRwcy5yZWplY3RVbmF1dGhvcml6ZWRcIicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgnY2hlY2tTZXJ2ZXJJZGVudGl0eScgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgZGVwcmVjYXRpb25fd2FybmluZ18xLmRlZmF1bHQoJ1wib3B0aW9ucy5jaGVja1NlcnZlcklkZW50aXR5XCIgd2FzIG5ldmVyIGRvY3VtZW50ZWQsIHBsZWFzZSB1c2UgXCJvcHRpb25zLmh0dHBzLmNoZWNrU2VydmVySWRlbnRpdHlcIicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgnY2EnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGRlcHJlY2F0aW9uX3dhcm5pbmdfMS5kZWZhdWx0KCdcIm9wdGlvbnMuY2FcIiB3YXMgbmV2ZXIgZG9jdW1lbnRlZCwgcGxlYXNlIHVzZSBcIm9wdGlvbnMuaHR0cHMuY2VydGlmaWNhdGVBdXRob3JpdHlcIicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgna2V5JyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICBkZXByZWNhdGlvbl93YXJuaW5nXzEuZGVmYXVsdCgnXCJvcHRpb25zLmtleVwiIHdhcyBuZXZlciBkb2N1bWVudGVkLCBwbGVhc2UgdXNlIFwib3B0aW9ucy5odHRwcy5rZXlcIicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgnY2VydCcgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgZGVwcmVjYXRpb25fd2FybmluZ18xLmRlZmF1bHQoJ1wib3B0aW9ucy5jZXJ0XCIgd2FzIG5ldmVyIGRvY3VtZW50ZWQsIHBsZWFzZSB1c2UgXCJvcHRpb25zLmh0dHBzLmNlcnRpZmljYXRlXCInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJ3Bhc3NwaHJhc2UnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGRlcHJlY2F0aW9uX3dhcm5pbmdfMS5kZWZhdWx0KCdcIm9wdGlvbnMucGFzc3BocmFzZVwiIHdhcyBuZXZlciBkb2N1bWVudGVkLCBwbGVhc2UgdXNlIFwib3B0aW9ucy5odHRwcy5wYXNzcGhyYXNlXCInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJ3BmeCcgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgZGVwcmVjYXRpb25fd2FybmluZ18xLmRlZmF1bHQoJ1wib3B0aW9ucy5wZnhcIiB3YXMgbmV2ZXIgZG9jdW1lbnRlZCwgcGxlYXNlIHVzZSBcIm9wdGlvbnMuaHR0cHMucGZ4XCInKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBPdGhlciBvcHRpb25zXG4gICAgICAgIGlmICgnZm9sbG93UmVkaXJlY3RzJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgYGZvbGxvd1JlZGlyZWN0c2Agb3B0aW9uIGRvZXMgbm90IGV4aXN0LiBVc2UgYGZvbGxvd1JlZGlyZWN0YCBpbnN0ZWFkLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmFnZW50KSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvcHRpb25zLmFnZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleSAhPT0gJ2h0dHAnICYmIGtleSAhPT0gJ2h0dHBzJyAmJiBrZXkgIT09ICdodHRwMicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgdGhlIFxcYG9wdGlvbnMuYWdlbnRcXGAgcHJvcGVydGllcyB0byBiZSBcXGBodHRwXFxgLCBcXGBodHRwc1xcYCBvciBcXGBodHRwMlxcYCwgZ290IFxcYCR7a2V5fVxcYGApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zLm1heFJlZGlyZWN0cyA9IChfZSA9IG9wdGlvbnMubWF4UmVkaXJlY3RzKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiAwO1xuICAgICAgICAvLyBTZXQgbm9uLWVudW1lcmFibGUgcHJvcGVydGllc1xuICAgICAgICBleHBvcnRzLnNldE5vbkVudW1lcmFibGVQcm9wZXJ0aWVzKFtkZWZhdWx0cywgcmF3T3B0aW9uc10sIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gbm9ybWFsaXplX2FyZ3VtZW50c18xLmRlZmF1bHQob3B0aW9ucywgZGVmYXVsdHMpO1xuICAgIH1cbiAgICBfbG9ja1dyaXRlKCkge1xuICAgICAgICBjb25zdCBvbkxvY2tlZFdyaXRlID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIHBheWxvYWQgaGFzIGJlZW4gYWxyZWFkeSBwcm92aWRlZCcpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLndyaXRlID0gb25Mb2NrZWRXcml0ZTtcbiAgICAgICAgdGhpcy5lbmQgPSBvbkxvY2tlZFdyaXRlO1xuICAgIH1cbiAgICBfdW5sb2NrV3JpdGUoKSB7XG4gICAgICAgIHRoaXMud3JpdGUgPSBzdXBlci53cml0ZTtcbiAgICAgICAgdGhpcy5lbmQgPSBzdXBlci5lbmQ7XG4gICAgfVxuICAgIGFzeW5jIF9maW5hbGl6ZUJvZHkoKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBoZWFkZXJzIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBpc0Zvcm0gPSAhaXNfMS5kZWZhdWx0LnVuZGVmaW5lZChvcHRpb25zLmZvcm0pO1xuICAgICAgICBjb25zdCBpc0pTT04gPSAhaXNfMS5kZWZhdWx0LnVuZGVmaW5lZChvcHRpb25zLmpzb24pO1xuICAgICAgICBjb25zdCBpc0JvZHkgPSAhaXNfMS5kZWZhdWx0LnVuZGVmaW5lZChvcHRpb25zLmJvZHkpO1xuICAgICAgICBjb25zdCBoYXNQYXlsb2FkID0gaXNGb3JtIHx8IGlzSlNPTiB8fCBpc0JvZHk7XG4gICAgICAgIGNvbnN0IGNhbm5vdEhhdmVCb2R5ID0gZXhwb3J0cy53aXRob3V0Qm9keS5oYXMob3B0aW9ucy5tZXRob2QpICYmICEob3B0aW9ucy5tZXRob2QgPT09ICdHRVQnICYmIG9wdGlvbnMuYWxsb3dHZXRCb2R5KTtcbiAgICAgICAgdGhpcy5fY2Fubm90SGF2ZUJvZHkgPSBjYW5ub3RIYXZlQm9keTtcbiAgICAgICAgaWYgKGhhc1BheWxvYWQpIHtcbiAgICAgICAgICAgIGlmIChjYW5ub3RIYXZlQm9keSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFRoZSBcXGAke29wdGlvbnMubWV0aG9kfVxcYCBtZXRob2QgY2Fubm90IGJlIHVzZWQgd2l0aCBhIGJvZHlgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChbaXNCb2R5LCBpc0Zvcm0sIGlzSlNPTl0uZmlsdGVyKGlzVHJ1ZSA9PiBpc1RydWUpLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgYGJvZHlgLCBganNvbmAgYW5kIGBmb3JtYCBvcHRpb25zIGFyZSBtdXR1YWxseSBleGNsdXNpdmUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0JvZHkgJiZcbiAgICAgICAgICAgICAgICAhKG9wdGlvbnMuYm9keSBpbnN0YW5jZW9mIHN0cmVhbV8xLlJlYWRhYmxlKSAmJlxuICAgICAgICAgICAgICAgICFpc18xLmRlZmF1bHQuc3RyaW5nKG9wdGlvbnMuYm9keSkgJiZcbiAgICAgICAgICAgICAgICAhaXNfMS5kZWZhdWx0LmJ1ZmZlcihvcHRpb25zLmJvZHkpICYmXG4gICAgICAgICAgICAgICAgIWlzX2Zvcm1fZGF0YV8xLmRlZmF1bHQob3B0aW9ucy5ib2R5KSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBgYm9keWAgb3B0aW9uIG11c3QgYmUgYSBzdHJlYW0uUmVhZGFibGUsIHN0cmluZyBvciBCdWZmZXInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0Zvcm0gJiYgIWlzXzEuZGVmYXVsdC5vYmplY3Qob3B0aW9ucy5mb3JtKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBgZm9ybWAgb3B0aW9uIG11c3QgYmUgYW4gT2JqZWN0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLy8gU2VyaWFsaXplIGJvZHlcbiAgICAgICAgICAgICAgICBjb25zdCBub0NvbnRlbnRUeXBlID0gIWlzXzEuZGVmYXVsdC5zdHJpbmcoaGVhZGVyc1snY29udGVudC10eXBlJ10pO1xuICAgICAgICAgICAgICAgIGlmIChpc0JvZHkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3BlY2lhbCBjYXNlIGZvciBodHRwczovL2dpdGh1Yi5jb20vZm9ybS1kYXRhL2Zvcm0tZGF0YVxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNfZm9ybV9kYXRhXzEuZGVmYXVsdChvcHRpb25zLmJvZHkpICYmIG5vQ29udGVudFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddID0gYG11bHRpcGFydC9mb3JtLWRhdGE7IGJvdW5kYXJ5PSR7b3B0aW9ucy5ib2R5LmdldEJvdW5kYXJ5KCl9YDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzW2tCb2R5XSA9IG9wdGlvbnMuYm9keTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNGb3JtKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub0NvbnRlbnRUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzWydjb250ZW50LXR5cGUnXSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXNba0JvZHldID0gKG5ldyB1cmxfMS5VUkxTZWFyY2hQYXJhbXMob3B0aW9ucy5mb3JtKSkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub0NvbnRlbnRUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzWydjb250ZW50LXR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzW2tCb2R5XSA9IG9wdGlvbnMuc3RyaW5naWZ5SnNvbihvcHRpb25zLmpzb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB1cGxvYWRCb2R5U2l6ZSA9IGF3YWl0IGdldF9ib2R5X3NpemVfMS5kZWZhdWx0KHRoaXNba0JvZHldLCBvcHRpb25zLmhlYWRlcnMpO1xuICAgICAgICAgICAgICAgIC8vIFNlZSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzIzMCNzZWN0aW9uLTMuMy4yXG4gICAgICAgICAgICAgICAgLy8gQSB1c2VyIGFnZW50IFNIT1VMRCBzZW5kIGEgQ29udGVudC1MZW5ndGggaW4gYSByZXF1ZXN0IG1lc3NhZ2Ugd2hlblxuICAgICAgICAgICAgICAgIC8vIG5vIFRyYW5zZmVyLUVuY29kaW5nIGlzIHNlbnQgYW5kIHRoZSByZXF1ZXN0IG1ldGhvZCBkZWZpbmVzIGEgbWVhbmluZ1xuICAgICAgICAgICAgICAgIC8vIGZvciBhbiBlbmNsb3NlZCBwYXlsb2FkIGJvZHkuICBGb3IgZXhhbXBsZSwgYSBDb250ZW50LUxlbmd0aCBoZWFkZXJcbiAgICAgICAgICAgICAgICAvLyBmaWVsZCBpcyBub3JtYWxseSBzZW50IGluIGEgUE9TVCByZXF1ZXN0IGV2ZW4gd2hlbiB0aGUgdmFsdWUgaXMgMFxuICAgICAgICAgICAgICAgIC8vIChpbmRpY2F0aW5nIGFuIGVtcHR5IHBheWxvYWQgYm9keSkuICBBIHVzZXIgYWdlbnQgU0hPVUxEIE5PVCBzZW5kIGFcbiAgICAgICAgICAgICAgICAvLyBDb250ZW50LUxlbmd0aCBoZWFkZXIgZmllbGQgd2hlbiB0aGUgcmVxdWVzdCBtZXNzYWdlIGRvZXMgbm90IGNvbnRhaW5cbiAgICAgICAgICAgICAgICAvLyBhIHBheWxvYWQgYm9keSBhbmQgdGhlIG1ldGhvZCBzZW1hbnRpY3MgZG8gbm90IGFudGljaXBhdGUgc3VjaCBhXG4gICAgICAgICAgICAgICAgLy8gYm9keS5cbiAgICAgICAgICAgICAgICBpZiAoaXNfMS5kZWZhdWx0LnVuZGVmaW5lZChoZWFkZXJzWydjb250ZW50LWxlbmd0aCddKSAmJiBpc18xLmRlZmF1bHQudW5kZWZpbmVkKGhlYWRlcnNbJ3RyYW5zZmVyLWVuY29kaW5nJ10pKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY2Fubm90SGF2ZUJvZHkgJiYgIWlzXzEuZGVmYXVsdC51bmRlZmluZWQodXBsb2FkQm9keVNpemUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzWydjb250ZW50LWxlbmd0aCddID0gU3RyaW5nKHVwbG9hZEJvZHlTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjYW5ub3RIYXZlQm9keSkge1xuICAgICAgICAgICAgdGhpcy5fbG9ja1dyaXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl91bmxvY2tXcml0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXNba0JvZHlTaXplXSA9IE51bWJlcihoZWFkZXJzWydjb250ZW50LWxlbmd0aCddKSB8fCB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGFzeW5jIF9vblJlc3BvbnNlQmFzZShyZXNwb25zZSkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgdXJsIH0gPSBvcHRpb25zO1xuICAgICAgICB0aGlzW2tPcmlnaW5hbFJlc3BvbnNlXSA9IHJlc3BvbnNlO1xuICAgICAgICBpZiAob3B0aW9ucy5kZWNvbXByZXNzKSB7XG4gICAgICAgICAgICByZXNwb25zZSA9IGRlY29tcHJlc3NSZXNwb25zZShyZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RhdHVzQ29kZSA9IHJlc3BvbnNlLnN0YXR1c0NvZGU7XG4gICAgICAgIGNvbnN0IHR5cGVkUmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICAgICAgdHlwZWRSZXNwb25zZS5zdGF0dXNNZXNzYWdlID0gdHlwZWRSZXNwb25zZS5zdGF0dXNNZXNzYWdlID8gdHlwZWRSZXNwb25zZS5zdGF0dXNNZXNzYWdlIDogaHR0cC5TVEFUVVNfQ09ERVNbc3RhdHVzQ29kZV07XG4gICAgICAgIHR5cGVkUmVzcG9uc2UudXJsID0gb3B0aW9ucy51cmwudG9TdHJpbmcoKTtcbiAgICAgICAgdHlwZWRSZXNwb25zZS5yZXF1ZXN0VXJsID0gdGhpcy5yZXF1ZXN0VXJsO1xuICAgICAgICB0eXBlZFJlc3BvbnNlLnJlZGlyZWN0VXJscyA9IHRoaXMucmVkaXJlY3RzO1xuICAgICAgICB0eXBlZFJlc3BvbnNlLnJlcXVlc3QgPSB0aGlzO1xuICAgICAgICB0eXBlZFJlc3BvbnNlLmlzRnJvbUNhY2hlID0gcmVzcG9uc2UuZnJvbUNhY2hlIHx8IGZhbHNlO1xuICAgICAgICB0eXBlZFJlc3BvbnNlLmlwID0gdGhpcy5pcDtcbiAgICAgICAgdHlwZWRSZXNwb25zZS5yZXRyeUNvdW50ID0gdGhpcy5yZXRyeUNvdW50O1xuICAgICAgICB0aGlzW2tJc0Zyb21DYWNoZV0gPSB0eXBlZFJlc3BvbnNlLmlzRnJvbUNhY2hlO1xuICAgICAgICB0aGlzW2tSZXNwb25zZVNpemVdID0gTnVtYmVyKHJlc3BvbnNlLmhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ10pIHx8IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpc1trUmVzcG9uc2VdID0gcmVzcG9uc2U7XG4gICAgICAgIHJlc3BvbnNlLm9uY2UoJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXNba1Jlc3BvbnNlU2l6ZV0gPSB0aGlzW2tEb3dubG9hZGVkU2l6ZV07XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2Rvd25sb2FkUHJvZ3Jlc3MnLCB0aGlzLmRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmVzcG9uc2Uub25jZSgnZXJyb3InLCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIC8vIEZvcmNlIGNsZWFuLXVwLCBiZWNhdXNlIHNvbWUgcGFja2FnZXMgZG9uJ3QgZG8gdGhpcy5cbiAgICAgICAgICAgIC8vIFRPRE86IEZpeCBkZWNvbXByZXNzLXJlc3BvbnNlXG4gICAgICAgICAgICByZXNwb25zZS5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLl9iZWZvcmVFcnJvcihuZXcgUmVhZEVycm9yKGVycm9yLCB0aGlzKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXNwb25zZS5vbmNlKCdhYm9ydGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fYmVmb3JlRXJyb3IobmV3IFJlYWRFcnJvcih7XG4gICAgICAgICAgICAgICAgbmFtZTogJ0Vycm9yJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnVGhlIHNlcnZlciBhYm9ydGVkIHBlbmRpbmcgcmVxdWVzdCcsXG4gICAgICAgICAgICAgICAgY29kZTogJ0VDT05OUkVTRVQnXG4gICAgICAgICAgICB9LCB0aGlzKSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVtaXQoJ2Rvd25sb2FkUHJvZ3Jlc3MnLCB0aGlzLmRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgICAgICBjb25zdCByYXdDb29raWVzID0gcmVzcG9uc2UuaGVhZGVyc1snc2V0LWNvb2tpZSddO1xuICAgICAgICBpZiAoaXNfMS5kZWZhdWx0Lm9iamVjdChvcHRpb25zLmNvb2tpZUphcikgJiYgcmF3Q29va2llcykge1xuICAgICAgICAgICAgbGV0IHByb21pc2VzID0gcmF3Q29va2llcy5tYXAoYXN5bmMgKHJhd0Nvb2tpZSkgPT4gb3B0aW9ucy5jb29raWVKYXIuc2V0Q29va2llKHJhd0Nvb2tpZSwgdXJsLnRvU3RyaW5nKCkpKTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmlnbm9yZUludmFsaWRDb29raWVzKSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZXMgPSBwcm9taXNlcy5tYXAoYXN5bmMgKHApID0+IHAuY2F0Y2goKCkgPT4geyB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2JlZm9yZUVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuZm9sbG93UmVkaXJlY3QgJiYgcmVzcG9uc2UuaGVhZGVycy5sb2NhdGlvbiAmJiByZWRpcmVjdENvZGVzLmhhcyhzdGF0dXNDb2RlKSkge1xuICAgICAgICAgICAgLy8gV2UncmUgYmVpbmcgcmVkaXJlY3RlZCwgd2UgZG9uJ3QgY2FyZSBhYm91dCB0aGUgcmVzcG9uc2UuXG4gICAgICAgICAgICAvLyBJdCdkIGJlIGJlc3QgdG8gYWJvcnQgdGhlIHJlcXVlc3QsIGJ1dCB3ZSBjYW4ndCBiZWNhdXNlXG4gICAgICAgICAgICAvLyB3ZSB3b3VsZCBoYXZlIHRvIHNhY3JpZmljZSB0aGUgVENQIGNvbm5lY3Rpb24uIFdlIGRvbid0IHdhbnQgdGhhdC5cbiAgICAgICAgICAgIHJlc3BvbnNlLnJlc3VtZSgpO1xuICAgICAgICAgICAgaWYgKHRoaXNba1JlcXVlc3RdKSB7XG4gICAgICAgICAgICAgICAgdGhpc1trQ2FuY2VsVGltZW91dHNdKCk7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1keW5hbWljLWRlbGV0ZVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzW2tSZXF1ZXN0XTtcbiAgICAgICAgICAgICAgICB0aGlzW2tVbnByb3h5RXZlbnRzXSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc2hvdWxkQmVHZXQgPSBzdGF0dXNDb2RlID09PSAzMDMgJiYgb3B0aW9ucy5tZXRob2QgIT09ICdHRVQnICYmIG9wdGlvbnMubWV0aG9kICE9PSAnSEVBRCc7XG4gICAgICAgICAgICBpZiAoc2hvdWxkQmVHZXQgfHwgIW9wdGlvbnMubWV0aG9kUmV3cml0aW5nKSB7XG4gICAgICAgICAgICAgICAgLy8gU2VydmVyIHJlc3BvbmRlZCB3aXRoIFwic2VlIG90aGVyXCIsIGluZGljYXRpbmcgdGhhdCB0aGUgcmVzb3VyY2UgZXhpc3RzIGF0IGFub3RoZXIgbG9jYXRpb24sXG4gICAgICAgICAgICAgICAgLy8gYW5kIHRoZSBjbGllbnQgc2hvdWxkIHJlcXVlc3QgaXQgZnJvbSB0aGF0IGxvY2F0aW9uIHZpYSBHRVQgb3IgSEVBRC5cbiAgICAgICAgICAgICAgICBvcHRpb25zLm1ldGhvZCA9ICdHRVQnO1xuICAgICAgICAgICAgICAgIGlmICgnYm9keScgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5ib2R5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoJ2pzb24nIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuanNvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCdmb3JtJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmZvcm07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXNba0JvZHldID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5yZWRpcmVjdHMubGVuZ3RoID49IG9wdGlvbnMubWF4UmVkaXJlY3RzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYmVmb3JlRXJyb3IobmV3IE1heFJlZGlyZWN0c0Vycm9yKHRoaXMpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIERvIG5vdCByZW1vdmUuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2dvdC9wdWxsLzIxNFxuICAgICAgICAgICAgICAgIGNvbnN0IHJlZGlyZWN0QnVmZmVyID0gQnVmZmVyLmZyb20ocmVzcG9uc2UuaGVhZGVycy5sb2NhdGlvbiwgJ2JpbmFyeScpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgLy8gSGFuZGxlcyBpbnZhbGlkIFVSTHMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2dvdC9pc3N1ZXMvNjA0XG4gICAgICAgICAgICAgICAgY29uc3QgcmVkaXJlY3RVcmwgPSBuZXcgdXJsXzEuVVJMKHJlZGlyZWN0QnVmZmVyLCB1cmwpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZGlyZWN0U3RyaW5nID0gcmVkaXJlY3RVcmwudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBkZWNvZGVVUkkocmVkaXJlY3RTdHJpbmcpO1xuICAgICAgICAgICAgICAgIC8vIFJlZGlyZWN0aW5nIHRvIGEgZGlmZmVyZW50IHNpdGUsIGNsZWFyIHNlbnNpdGl2ZSBkYXRhLlxuICAgICAgICAgICAgICAgIGlmIChyZWRpcmVjdFVybC5ob3N0bmFtZSAhPT0gdXJsLmhvc3RuYW1lIHx8IHJlZGlyZWN0VXJsLnBvcnQgIT09IHVybC5wb3J0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgnaG9zdCcgaW4gb3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5oZWFkZXJzLmhvc3Q7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCdjb29raWUnIGluIG9wdGlvbnMuaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuaGVhZGVycy5jb29raWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCdhdXRob3JpemF0aW9uJyBpbiBvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmhlYWRlcnMuYXV0aG9yaXphdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy51c2VybmFtZSB8fCBvcHRpb25zLnBhc3N3b3JkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnVzZXJuYW1lID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnBhc3N3b3JkID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0VXJsLnVzZXJuYW1lID0gb3B0aW9ucy51c2VybmFtZTtcbiAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RVcmwucGFzc3dvcmQgPSBvcHRpb25zLnBhc3N3b3JkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnJlZGlyZWN0cy5wdXNoKHJlZGlyZWN0U3RyaW5nKTtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnVybCA9IHJlZGlyZWN0VXJsO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaG9vayBvZiBvcHRpb25zLmhvb2tzLmJlZm9yZVJlZGlyZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hd2FpdC1pbi1sb29wXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGhvb2sob3B0aW9ucywgdHlwZWRSZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgncmVkaXJlY3QnLCB0eXBlZFJlc3BvbnNlLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9tYWtlUmVxdWVzdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYmVmb3JlRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5pc1N0cmVhbSAmJiBvcHRpb25zLnRocm93SHR0cEVycm9ycyAmJiAhaXNfcmVzcG9uc2Vfb2tfMS5pc1Jlc3BvbnNlT2sodHlwZWRSZXNwb25zZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX2JlZm9yZUVycm9yKG5ldyBIVFRQRXJyb3IodHlwZWRSZXNwb25zZSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlc3BvbnNlLm9uKCdyZWFkYWJsZScsICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzW2tUcmlnZ2VyUmVhZF0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uKCdyZXN1bWUnLCAoKSA9PiB7XG4gICAgICAgICAgICByZXNwb25zZS5yZXN1bWUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMub24oJ3BhdXNlJywgKCkgPT4ge1xuICAgICAgICAgICAgcmVzcG9uc2UucGF1c2UoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3BvbnNlLm9uY2UoJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucHVzaChudWxsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZW1pdCgncmVzcG9uc2UnLCByZXNwb25zZSk7XG4gICAgICAgIGZvciAoY29uc3QgZGVzdGluYXRpb24gb2YgdGhpc1trU2VydmVyUmVzcG9uc2VzUGlwZWRdKSB7XG4gICAgICAgICAgICBpZiAoZGVzdGluYXRpb24uaGVhZGVyc1NlbnQpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHJlc3BvbnNlLmhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpc0FsbG93ZWQgPSBvcHRpb25zLmRlY29tcHJlc3MgPyBrZXkgIT09ICdjb250ZW50LWVuY29kaW5nJyA6IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSByZXNwb25zZS5oZWFkZXJzW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKGlzQWxsb3dlZCkge1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5zZXRIZWFkZXIoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVzdGluYXRpb24uc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgX29uUmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX29uUmVzcG9uc2VCYXNlKHJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBiZXR0ZXIgc2FmZSB0aGFuIHNvcnJ5ICovXG4gICAgICAgICAgICB0aGlzLl9iZWZvcmVFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX29uUmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyB0aW1lb3V0LCB1cmwgfSA9IG9wdGlvbnM7XG4gICAgICAgIGh0dHBfdGltZXJfMS5kZWZhdWx0KHJlcXVlc3QpO1xuICAgICAgICB0aGlzW2tDYW5jZWxUaW1lb3V0c10gPSB0aW1lZF9vdXRfMS5kZWZhdWx0KHJlcXVlc3QsIHRpbWVvdXQsIHVybCk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlRXZlbnROYW1lID0gb3B0aW9ucy5jYWNoZSA/ICdjYWNoZWFibGVSZXNwb25zZScgOiAncmVzcG9uc2UnO1xuICAgICAgICByZXF1ZXN0Lm9uY2UocmVzcG9uc2VFdmVudE5hbWUsIChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgdm9pZCB0aGlzLl9vblJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlcXVlc3Qub25jZSgnZXJyb3InLCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIC8vIEZvcmNlIGNsZWFuLXVwLCBiZWNhdXNlIHNvbWUgcGFja2FnZXMgKGUuZy4gbm9jaykgZG9uJ3QgZG8gdGhpcy5cbiAgICAgICAgICAgIHJlcXVlc3QuZGVzdHJveSgpO1xuICAgICAgICAgICAgLy8gTm9kZS5qcyA8PSAxMi4xOC4yIG1pc3Rha2VubHkgZW1pdHMgdGhlIHJlc3BvbnNlIGBlbmRgIGZpcnN0LlxuICAgICAgICAgICAgKF9hID0gcmVxdWVzdC5yZXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZW1vdmVBbGxMaXN0ZW5lcnMoJ2VuZCcpO1xuICAgICAgICAgICAgZXJyb3IgPSBlcnJvciBpbnN0YW5jZW9mIHRpbWVkX291dF8xLlRpbWVvdXRFcnJvciA/IG5ldyBUaW1lb3V0RXJyb3IoZXJyb3IsIHRoaXMudGltaW5ncywgdGhpcykgOiBuZXcgUmVxdWVzdEVycm9yKGVycm9yLm1lc3NhZ2UsIGVycm9yLCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuX2JlZm9yZUVycm9yKGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXNba1VucHJveHlFdmVudHNdID0gcHJveHlfZXZlbnRzXzEuZGVmYXVsdChyZXF1ZXN0LCB0aGlzLCBwcm94aWVkUmVxdWVzdEV2ZW50cyk7XG4gICAgICAgIHRoaXNba1JlcXVlc3RdID0gcmVxdWVzdDtcbiAgICAgICAgdGhpcy5lbWl0KCd1cGxvYWRQcm9ncmVzcycsIHRoaXMudXBsb2FkUHJvZ3Jlc3MpO1xuICAgICAgICAvLyBTZW5kIGJvZHlcbiAgICAgICAgY29uc3QgYm9keSA9IHRoaXNba0JvZHldO1xuICAgICAgICBjb25zdCBjdXJyZW50UmVxdWVzdCA9IHRoaXMucmVkaXJlY3RzLmxlbmd0aCA9PT0gMCA/IHRoaXMgOiByZXF1ZXN0O1xuICAgICAgICBpZiAoaXNfMS5kZWZhdWx0Lm5vZGVTdHJlYW0oYm9keSkpIHtcbiAgICAgICAgICAgIGJvZHkucGlwZShjdXJyZW50UmVxdWVzdCk7XG4gICAgICAgICAgICBib2R5Lm9uY2UoJ2Vycm9yJywgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYmVmb3JlRXJyb3IobmV3IFVwbG9hZEVycm9yKGVycm9yLCB0aGlzKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3VubG9ja1dyaXRlKCk7XG4gICAgICAgICAgICBpZiAoIWlzXzEuZGVmYXVsdC51bmRlZmluZWQoYm9keSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93cml0ZVJlcXVlc3QoYm9keSwgdW5kZWZpbmVkLCAoKSA9PiB7IH0pO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRSZXF1ZXN0LmVuZCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvY2tXcml0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fY2Fubm90SGF2ZUJvZHkgfHwgdGhpcy5fbm9QaXBlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFJlcXVlc3QuZW5kKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9ja1dyaXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbWl0KCdyZXF1ZXN0JywgcmVxdWVzdCk7XG4gICAgfVxuICAgIGFzeW5jIF9jcmVhdGVDYWNoZWFibGVSZXF1ZXN0KHVybCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgLy8gVE9ETzogUmVtb3ZlIGB1dGlscy91cmwtdG8tb3B0aW9ucy50c2Agd2hlbiBgY2FjaGVhYmxlLXJlcXVlc3RgIGlzIGZpeGVkXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKG9wdGlvbnMsIHVybF90b19vcHRpb25zXzEuZGVmYXVsdCh1cmwpKTtcbiAgICAgICAgICAgIC8vIGBodHRwLWNhY2hlLXNlbWFudGljc2AgY2hlY2tzIHRoaXNcbiAgICAgICAgICAgIC8vIFRPRE86IEZpeCB0aGlzIGlnbm9yZS5cbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLnVybDtcbiAgICAgICAgICAgIGxldCByZXF1ZXN0O1xuICAgICAgICAgICAgLy8gVGhpcyBpcyB1Z2x5XG4gICAgICAgICAgICBjb25zdCBjYWNoZVJlcXVlc3QgPSBjYWNoZWFibGVTdG9yZS5nZXQob3B0aW9ucy5jYWNoZSkob3B0aW9ucywgYXN5bmMgKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogRml4IGBjYWNoZWFibGUtcmVzcG9uc2VgXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UuX3JlYWRhYmxlU3RhdGUuYXV0b0Rlc3Ryb3kgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAocmVxdWVzdCkge1xuICAgICAgICAgICAgICAgICAgICAoYXdhaXQgcmVxdWVzdCkuZW1pdCgnY2FjaGVhYmxlUmVzcG9uc2UnLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBSZXN0b3JlIG9wdGlvbnNcbiAgICAgICAgICAgIG9wdGlvbnMudXJsID0gdXJsO1xuICAgICAgICAgICAgY2FjaGVSZXF1ZXN0Lm9uY2UoJ2Vycm9yJywgcmVqZWN0KTtcbiAgICAgICAgICAgIGNhY2hlUmVxdWVzdC5vbmNlKCdyZXF1ZXN0JywgYXN5bmMgKHJlcXVlc3RPclByb21pc2UpID0+IHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0ID0gcmVxdWVzdE9yUHJvbWlzZTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlcXVlc3QpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBfbWFrZVJlcXVlc3QoKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBoZWFkZXJzIH0gPSBvcHRpb25zO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBoZWFkZXJzKSB7XG4gICAgICAgICAgICBpZiAoaXNfMS5kZWZhdWx0LnVuZGVmaW5lZChoZWFkZXJzW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1keW5hbWljLWRlbGV0ZVxuICAgICAgICAgICAgICAgIGRlbGV0ZSBoZWFkZXJzW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc18xLmRlZmF1bHQubnVsbF8oaGVhZGVyc1trZXldKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFVzZSBcXGB1bmRlZmluZWRcXGAgaW5zdGVhZCBvZiBcXGBudWxsXFxgIHRvIGRlbGV0ZSB0aGUgXFxgJHtrZXl9XFxgIGhlYWRlcmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmRlY29tcHJlc3MgJiYgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZChoZWFkZXJzWydhY2NlcHQtZW5jb2RpbmcnXSkpIHtcbiAgICAgICAgICAgIGhlYWRlcnNbJ2FjY2VwdC1lbmNvZGluZyddID0gc3VwcG9ydHNCcm90bGkgPyAnZ3ppcCwgZGVmbGF0ZSwgYnInIDogJ2d6aXAsIGRlZmxhdGUnO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNldCBjb29raWVzXG4gICAgICAgIGlmIChvcHRpb25zLmNvb2tpZUphcikge1xuICAgICAgICAgICAgY29uc3QgY29va2llU3RyaW5nID0gYXdhaXQgb3B0aW9ucy5jb29raWVKYXIuZ2V0Q29va2llU3RyaW5nKG9wdGlvbnMudXJsLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgaWYgKGlzXzEuZGVmYXVsdC5ub25FbXB0eVN0cmluZyhjb29raWVTdHJpbmcpKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5oZWFkZXJzLmNvb2tpZSA9IGNvb2tpZVN0cmluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGhvb2sgb2Ygb3B0aW9ucy5ob29rcy5iZWZvcmVSZXF1ZXN0KSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYXdhaXQtaW4tbG9vcFxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaG9vayhvcHRpb25zKTtcbiAgICAgICAgICAgIGlmICghaXNfMS5kZWZhdWx0LnVuZGVmaW5lZChyZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBTa2lwIHRoZSB0eXBlIG1pc21hdGNoIHRvIHN1cHBvcnQgYWJzdHJhY3QgcmVzcG9uc2VzXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5yZXF1ZXN0ID0gKCkgPT4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmJvZHkgJiYgdGhpc1trQm9keV0gIT09IG9wdGlvbnMuYm9keSkge1xuICAgICAgICAgICAgdGhpc1trQm9keV0gPSBvcHRpb25zLmJvZHk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBhZ2VudCwgcmVxdWVzdCwgdGltZW91dCwgdXJsIH0gPSBvcHRpb25zO1xuICAgICAgICBpZiAob3B0aW9ucy5kbnNDYWNoZSAmJiAhKCdsb29rdXAnIGluIG9wdGlvbnMpKSB7XG4gICAgICAgICAgICBvcHRpb25zLmxvb2t1cCA9IG9wdGlvbnMuZG5zQ2FjaGUubG9va3VwO1xuICAgICAgICB9XG4gICAgICAgIC8vIFVOSVggc29ja2V0c1xuICAgICAgICBpZiAodXJsLmhvc3RuYW1lID09PSAndW5peCcpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXMgPSAvKD88c29ja2V0UGF0aD4uKz8pOig/PHBhdGg+LispLy5leGVjKGAke3VybC5wYXRobmFtZX0ke3VybC5zZWFyY2h9YCk7XG4gICAgICAgICAgICBpZiAobWF0Y2hlcyA9PT0gbnVsbCB8fCBtYXRjaGVzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBtYXRjaGVzLmdyb3Vwcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgc29ja2V0UGF0aCwgcGF0aCB9ID0gbWF0Y2hlcy5ncm91cHM7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihvcHRpb25zLCB7XG4gICAgICAgICAgICAgICAgICAgIHNvY2tldFBhdGgsXG4gICAgICAgICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgICAgICAgIGhvc3Q6ICcnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXNIdHRwcyA9IHVybC5wcm90b2NvbCA9PT0gJ2h0dHBzOic7XG4gICAgICAgIC8vIEZhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICAgIGxldCBmYWxsYmFja0ZuO1xuICAgICAgICBpZiAob3B0aW9ucy5odHRwMikge1xuICAgICAgICAgICAgZmFsbGJhY2tGbiA9IGh0dHAyd3JhcHBlci5hdXRvO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZmFsbGJhY2tGbiA9IGlzSHR0cHMgPyBodHRwcy5yZXF1ZXN0IDogaHR0cC5yZXF1ZXN0O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlYWxGbiA9IChfYSA9IG9wdGlvbnMucmVxdWVzdCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmFsbGJhY2tGbjtcbiAgICAgICAgLy8gQ2FjaGUgc3VwcG9ydFxuICAgICAgICBjb25zdCBmbiA9IG9wdGlvbnMuY2FjaGUgPyB0aGlzLl9jcmVhdGVDYWNoZWFibGVSZXF1ZXN0IDogcmVhbEZuO1xuICAgICAgICAvLyBQYXNzIGFuIGFnZW50IGRpcmVjdGx5IHdoZW4gSFRUUDIgaXMgZGlzYWJsZWRcbiAgICAgICAgaWYgKGFnZW50ICYmICFvcHRpb25zLmh0dHAyKSB7XG4gICAgICAgICAgICBvcHRpb25zLmFnZW50ID0gYWdlbnRbaXNIdHRwcyA/ICdodHRwcycgOiAnaHR0cCddO1xuICAgICAgICB9XG4gICAgICAgIC8vIFByZXBhcmUgcGxhaW4gSFRUUCByZXF1ZXN0IG9wdGlvbnNcbiAgICAgICAgb3B0aW9uc1trUmVxdWVzdF0gPSByZWFsRm47XG4gICAgICAgIGRlbGV0ZSBvcHRpb25zLnJlcXVlc3Q7XG4gICAgICAgIC8vIFRPRE86IEZpeCB0aGlzIGlnbm9yZS5cbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICBkZWxldGUgb3B0aW9ucy50aW1lb3V0O1xuICAgICAgICBjb25zdCByZXF1ZXN0T3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHJlcXVlc3RPcHRpb25zLnNoYXJlZCA9IChfYiA9IG9wdGlvbnMuY2FjaGVPcHRpb25zKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iuc2hhcmVkO1xuICAgICAgICByZXF1ZXN0T3B0aW9ucy5jYWNoZUhldXJpc3RpYyA9IChfYyA9IG9wdGlvbnMuY2FjaGVPcHRpb25zKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuY2FjaGVIZXVyaXN0aWM7XG4gICAgICAgIHJlcXVlc3RPcHRpb25zLmltbXV0YWJsZU1pblRpbWVUb0xpdmUgPSAoX2QgPSBvcHRpb25zLmNhY2hlT3B0aW9ucykgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmltbXV0YWJsZU1pblRpbWVUb0xpdmU7XG4gICAgICAgIHJlcXVlc3RPcHRpb25zLmlnbm9yZUNhcmdvQ3VsdCA9IChfZSA9IG9wdGlvbnMuY2FjaGVPcHRpb25zKSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UuaWdub3JlQ2FyZ29DdWx0O1xuICAgICAgICAvLyBJZiBgZG5zTG9va3VwSXBWZXJzaW9uYCBpcyBub3QgcHJlc2VudCBkbyBub3Qgb3ZlcnJpZGUgYGZhbWlseWBcbiAgICAgICAgaWYgKG9wdGlvbnMuZG5zTG9va3VwSXBWZXJzaW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdE9wdGlvbnMuZmFtaWx5ID0gZG5zX2lwX3ZlcnNpb25fMS5kbnNMb29rdXBJcFZlcnNpb25Ub0ZhbWlseShvcHRpb25zLmRuc0xvb2t1cElwVmVyc2lvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoX2YpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYGRuc0xvb2t1cElwVmVyc2lvbmAgb3B0aW9uIHZhbHVlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSFRUUFMgb3B0aW9ucyByZW1hcHBpbmdcbiAgICAgICAgaWYgKG9wdGlvbnMuaHR0cHMpIHtcbiAgICAgICAgICAgIGlmICgncmVqZWN0VW5hdXRob3JpemVkJyBpbiBvcHRpb25zLmh0dHBzKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdE9wdGlvbnMucmVqZWN0VW5hdXRob3JpemVkID0gb3B0aW9ucy5odHRwcy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5odHRwcy5jaGVja1NlcnZlcklkZW50aXR5KSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdE9wdGlvbnMuY2hlY2tTZXJ2ZXJJZGVudGl0eSA9IG9wdGlvbnMuaHR0cHMuY2hlY2tTZXJ2ZXJJZGVudGl0eTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmh0dHBzLmNlcnRpZmljYXRlQXV0aG9yaXR5KSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdE9wdGlvbnMuY2EgPSBvcHRpb25zLmh0dHBzLmNlcnRpZmljYXRlQXV0aG9yaXR5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaHR0cHMuY2VydGlmaWNhdGUpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0T3B0aW9ucy5jZXJ0ID0gb3B0aW9ucy5odHRwcy5jZXJ0aWZpY2F0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmh0dHBzLmtleSkge1xuICAgICAgICAgICAgICAgIHJlcXVlc3RPcHRpb25zLmtleSA9IG9wdGlvbnMuaHR0cHMua2V5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaHR0cHMucGFzc3BocmFzZSkge1xuICAgICAgICAgICAgICAgIHJlcXVlc3RPcHRpb25zLnBhc3NwaHJhc2UgPSBvcHRpb25zLmh0dHBzLnBhc3NwaHJhc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5odHRwcy5wZngpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0T3B0aW9ucy5wZnggPSBvcHRpb25zLmh0dHBzLnBmeDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IHJlcXVlc3RPclJlc3BvbnNlID0gYXdhaXQgZm4odXJsLCByZXF1ZXN0T3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAoaXNfMS5kZWZhdWx0LnVuZGVmaW5lZChyZXF1ZXN0T3JSZXNwb25zZSkpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0T3JSZXNwb25zZSA9IGZhbGxiYWNrRm4odXJsLCByZXF1ZXN0T3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBSZXN0b3JlIG9wdGlvbnNcbiAgICAgICAgICAgIG9wdGlvbnMucmVxdWVzdCA9IHJlcXVlc3Q7XG4gICAgICAgICAgICBvcHRpb25zLnRpbWVvdXQgPSB0aW1lb3V0O1xuICAgICAgICAgICAgb3B0aW9ucy5hZ2VudCA9IGFnZW50O1xuICAgICAgICAgICAgLy8gSFRUUFMgb3B0aW9ucyByZXN0b3JlXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5odHRwcykge1xuICAgICAgICAgICAgICAgIGlmICgncmVqZWN0VW5hdXRob3JpemVkJyBpbiBvcHRpb25zLmh0dHBzKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0T3B0aW9ucy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmh0dHBzLmNoZWNrU2VydmVySWRlbnRpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRoaXMgb25lIHdpbGwgYmUgcmVtb3ZlZCB3aGVuIHdlIHJlbW92ZSB0aGUgYWxpYXMuXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0T3B0aW9ucy5jaGVja1NlcnZlcklkZW50aXR5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5odHRwcy5jZXJ0aWZpY2F0ZUF1dGhvcml0eSkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVxdWVzdE9wdGlvbnMuY2E7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmh0dHBzLmNlcnRpZmljYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0T3B0aW9ucy5jZXJ0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5odHRwcy5rZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJlcXVlc3RPcHRpb25zLmtleTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuaHR0cHMucGFzc3BocmFzZSkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVxdWVzdE9wdGlvbnMucGFzc3BocmFzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuaHR0cHMucGZ4KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0T3B0aW9ucy5wZng7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzQ2xpZW50UmVxdWVzdChyZXF1ZXN0T3JSZXNwb25zZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vblJlcXVlc3QocmVxdWVzdE9yUmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIC8vIEVtaXQgdGhlIHJlc3BvbnNlIGFmdGVyIHRoZSBzdHJlYW0gaGFzIGJlZW4gZW5kZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMud3JpdGFibGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uY2UoJ2ZpbmlzaCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdm9pZCB0aGlzLl9vblJlc3BvbnNlKHJlcXVlc3RPclJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLl91bmxvY2tXcml0ZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW5kKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9ja1dyaXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2b2lkIHRoaXMuX29uUmVzcG9uc2UocmVxdWVzdE9yUmVzcG9uc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgQ2FjaGVhYmxlUmVxdWVzdC5DYWNoZUVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IENhY2hlRXJyb3IoZXJyb3IsIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVlc3RFcnJvcihlcnJvci5tZXNzYWdlLCBlcnJvciwgdGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgX2Vycm9yKGVycm9yKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGhvb2sgb2YgdGhpcy5vcHRpb25zLmhvb2tzLmJlZm9yZUVycm9yKSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWF3YWl0LWluLWxvb3BcbiAgICAgICAgICAgICAgICBlcnJvciA9IGF3YWl0IGhvb2soZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcl8pIHtcbiAgICAgICAgICAgIGVycm9yID0gbmV3IFJlcXVlc3RFcnJvcihlcnJvcl8ubWVzc2FnZSwgZXJyb3JfLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3Ryb3koZXJyb3IpO1xuICAgIH1cbiAgICBfYmVmb3JlRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgaWYgKHRoaXNba1N0b3BSZWFkaW5nXSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgcmV0cnlDb3VudCA9IHRoaXMucmV0cnlDb3VudCArIDE7XG4gICAgICAgIHRoaXNba1N0b3BSZWFkaW5nXSA9IHRydWU7XG4gICAgICAgIGlmICghKGVycm9yIGluc3RhbmNlb2YgUmVxdWVzdEVycm9yKSkge1xuICAgICAgICAgICAgZXJyb3IgPSBuZXcgUmVxdWVzdEVycm9yKGVycm9yLm1lc3NhZ2UsIGVycm9yLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0eXBlZEVycm9yID0gZXJyb3I7XG4gICAgICAgIGNvbnN0IHsgcmVzcG9uc2UgfSA9IHR5cGVkRXJyb3I7XG4gICAgICAgIHZvaWQgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiAhcmVzcG9uc2UuYm9keSkge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlLnNldEVuY29kaW5nKHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5jb2RpbmcpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLnJhd0JvZHkgPSBhd2FpdCBnZXRfYnVmZmVyXzEuZGVmYXVsdChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmJvZHkgPSByZXNwb25zZS5yYXdCb2R5LnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChfYSkgeyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5saXN0ZW5lckNvdW50KCdyZXRyeScpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IGJhY2tvZmY7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJldHJ5QWZ0ZXI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiAncmV0cnktYWZ0ZXInIGluIHJlc3BvbnNlLmhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHJ5QWZ0ZXIgPSBOdW1iZXIocmVzcG9uc2UuaGVhZGVyc1sncmV0cnktYWZ0ZXInXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKHJldHJ5QWZ0ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0cnlBZnRlciA9IERhdGUucGFyc2UocmVzcG9uc2UuaGVhZGVyc1sncmV0cnktYWZ0ZXInXSkgLSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXRyeUFmdGVyIDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0cnlBZnRlciA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0cnlBZnRlciAqPSAxMDAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJhY2tvZmYgPSBhd2FpdCBvcHRpb25zLnJldHJ5LmNhbGN1bGF0ZURlbGF5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dGVtcHRDb3VudDogcmV0cnlDb3VudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHJ5T3B0aW9uczogb3B0aW9ucy5yZXRyeSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiB0eXBlZEVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0cnlBZnRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXB1dGVkVmFsdWU6IGNhbGN1bGF0ZV9yZXRyeV9kZWxheV8xLmRlZmF1bHQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dGVtcHRDb3VudDogcmV0cnlDb3VudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXRyeU9wdGlvbnM6IG9wdGlvbnMucmV0cnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IHR5cGVkRXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0cnlBZnRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wdXRlZFZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yXykge1xuICAgICAgICAgICAgICAgICAgICB2b2lkIHRoaXMuX2Vycm9yKG5ldyBSZXF1ZXN0RXJyb3IoZXJyb3JfLm1lc3NhZ2UsIGVycm9yXywgdGhpcykpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChiYWNrb2ZmKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJldHJ5ID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGhvb2sgb2YgdGhpcy5vcHRpb25zLmhvb2tzLmJlZm9yZVJldHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hd2FpdC1pbi1sb29wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGhvb2sodGhpcy5vcHRpb25zLCB0eXBlZEVycm9yLCByZXRyeUNvdW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3JfKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdm9pZCB0aGlzLl9lcnJvcihuZXcgUmVxdWVzdEVycm9yKGVycm9yXy5tZXNzYWdlLCBlcnJvciwgdGhpcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNvbWV0aGluZyBmb3JjZWQgdXMgdG8gYWJvcnQgdGhlIHJldHJ5XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgncmV0cnknLCByZXRyeUNvdW50LCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHRoaXNba1JldHJ5VGltZW91dF0gPSBzZXRUaW1lb3V0KHJldHJ5LCBiYWNrb2ZmKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZvaWQgdGhpcy5fZXJyb3IodHlwZWRFcnJvcik7XG4gICAgICAgIH0pKCk7XG4gICAgfVxuICAgIF9yZWFkKCkge1xuICAgICAgICB0aGlzW2tUcmlnZ2VyUmVhZF0gPSB0cnVlO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IHRoaXNba1Jlc3BvbnNlXTtcbiAgICAgICAgaWYgKHJlc3BvbnNlICYmICF0aGlzW2tTdG9wUmVhZGluZ10pIHtcbiAgICAgICAgICAgIC8vIFdlIGNhbm5vdCBwdXQgdGhpcyBpbiB0aGUgYGlmYCBhYm92ZVxuICAgICAgICAgICAgLy8gYmVjYXVzZSBgLnJlYWQoKWAgYWxzbyB0cmlnZ2VycyB0aGUgYGVuZGAgZXZlbnRcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5yZWFkYWJsZUxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXNba1RyaWdnZXJSZWFkXSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGRhdGE7XG4gICAgICAgICAgICB3aGlsZSAoKGRhdGEgPSByZXNwb25zZS5yZWFkKCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpc1trRG93bmxvYWRlZFNpemVdICs9IGRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHRoaXNba1N0YXJ0ZWRSZWFkaW5nXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvZ3Jlc3MgPSB0aGlzLmRvd25sb2FkUHJvZ3Jlc3M7XG4gICAgICAgICAgICAgICAgaWYgKHByb2dyZXNzLnBlcmNlbnQgPCAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnZG93bmxvYWRQcm9ncmVzcycsIHByb2dyZXNzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5wdXNoKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIE5vZGUuanMgMTIgaGFzIGluY29ycmVjdCB0eXBlcywgc28gdGhlIGVuY29kaW5nIG11c3QgYmUgYSBzdHJpbmdcbiAgICBfd3JpdGUoY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICAgICAgICBjb25zdCB3cml0ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3dyaXRlUmVxdWVzdChjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMucmVxdWVzdEluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB3cml0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpc1trSm9ic10ucHVzaCh3cml0ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3dyaXRlUmVxdWVzdChjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICh0aGlzW2tSZXF1ZXN0XS5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgIC8vIFByb2JhYmx5IHRoZSBgQ2xpZW50UmVxdWVzdGAgaW5zdGFuY2Ugd2lsbCB0aHJvd1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Byb2dyZXNzQ2FsbGJhY2tzLnB1c2goKCkgPT4ge1xuICAgICAgICAgICAgdGhpc1trVXBsb2FkZWRTaXplXSArPSBCdWZmZXIuYnl0ZUxlbmd0aChjaHVuaywgZW5jb2RpbmcpO1xuICAgICAgICAgICAgY29uc3QgcHJvZ3Jlc3MgPSB0aGlzLnVwbG9hZFByb2dyZXNzO1xuICAgICAgICAgICAgaWYgKHByb2dyZXNzLnBlcmNlbnQgPCAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCd1cGxvYWRQcm9ncmVzcycsIHByb2dyZXNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFRPRE86IFdoYXQgaGFwcGVucyBpZiBpdCdzIGZyb20gY2FjaGU/IFRoZW4gdGhpc1trUmVxdWVzdF0gd29uJ3QgYmUgZGVmaW5lZC5cbiAgICAgICAgdGhpc1trUmVxdWVzdF0ud3JpdGUoY2h1bmssIGVuY29kaW5nLCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGlmICghZXJyb3IgJiYgdGhpcy5fcHJvZ3Jlc3NDYWxsYmFja3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Byb2dyZXNzQ2FsbGJhY2tzLnNoaWZ0KCkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9maW5hbChjYWxsYmFjaykge1xuICAgICAgICBjb25zdCBlbmRSZXF1ZXN0ID0gKCkgPT4ge1xuICAgICAgICAgICAgLy8gRklYOiBOb2RlLmpzIDEwIGNhbGxzIHRoZSB3cml0ZSBjYWxsYmFjayBBRlRFUiB0aGUgZW5kIGNhbGxiYWNrIVxuICAgICAgICAgICAgd2hpbGUgKHRoaXMuX3Byb2dyZXNzQ2FsbGJhY2tzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Byb2dyZXNzQ2FsbGJhY2tzLnNoaWZ0KCkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gY2hlY2sgaWYgYHRoaXNba1JlcXVlc3RdYCBpcyBwcmVzZW50LFxuICAgICAgICAgICAgLy8gYmVjYXVzZSBpdCBpc24ndCB3aGVuIHdlIHVzZSBjYWNoZS5cbiAgICAgICAgICAgIGlmICghKGtSZXF1ZXN0IGluIHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpc1trUmVxdWVzdF0uZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzW2tSZXF1ZXN0XS5lbmQoKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzW2tCb2R5U2l6ZV0gPSB0aGlzW2tVcGxvYWRlZFNpemVdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ3VwbG9hZFByb2dyZXNzJywgdGhpcy51cGxvYWRQcm9ncmVzcyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNba1JlcXVlc3RdLmVtaXQoJ3VwbG9hZC1jb21wbGV0ZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMucmVxdWVzdEluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICBlbmRSZXF1ZXN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzW2tKb2JzXS5wdXNoKGVuZFJlcXVlc3QpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9kZXN0cm95KGVycm9yLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXNba1N0b3BSZWFkaW5nXSA9IHRydWU7XG4gICAgICAgIC8vIFByZXZlbnQgZnVydGhlciByZXRyaWVzXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzW2tSZXRyeVRpbWVvdXRdKTtcbiAgICAgICAgaWYgKGtSZXF1ZXN0IGluIHRoaXMpIHtcbiAgICAgICAgICAgIHRoaXNba0NhbmNlbFRpbWVvdXRzXSgpO1xuICAgICAgICAgICAgLy8gVE9ETzogUmVtb3ZlIHRoZSBuZXh0IGBpZmAgd2hlbiB0aGVzZSBnZXQgZml4ZWQ6XG4gICAgICAgICAgICAvLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9pc3N1ZXMvMzI4NTFcbiAgICAgICAgICAgIGlmICghKChfYSA9IHRoaXNba1Jlc3BvbnNlXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNvbXBsZXRlKSkge1xuICAgICAgICAgICAgICAgIHRoaXNba1JlcXVlc3RdLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IgIT09IG51bGwgJiYgIWlzXzEuZGVmYXVsdC51bmRlZmluZWQoZXJyb3IpICYmICEoZXJyb3IgaW5zdGFuY2VvZiBSZXF1ZXN0RXJyb3IpKSB7XG4gICAgICAgICAgICBlcnJvciA9IG5ldyBSZXF1ZXN0RXJyb3IoZXJyb3IubWVzc2FnZSwgZXJyb3IsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICB9XG4gICAgZ2V0IF9pc0Fib3V0VG9FcnJvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNba1N0b3BSZWFkaW5nXTtcbiAgICB9XG4gICAgLyoqXG4gICAgVGhlIHJlbW90ZSBJUCBhZGRyZXNzLlxuICAgICovXG4gICAgZ2V0IGlwKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSB0aGlzLnNvY2tldCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlbW90ZUFkZHJlc3M7XG4gICAgfVxuICAgIC8qKlxuICAgIEluZGljYXRlcyB3aGV0aGVyIHRoZSByZXF1ZXN0IGhhcyBiZWVuIGFib3J0ZWQgb3Igbm90LlxuICAgICovXG4gICAgZ2V0IGFib3J0ZWQoKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICByZXR1cm4gKChfYiA9IChfYSA9IHRoaXNba1JlcXVlc3RdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGVzdHJveWVkKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiB0aGlzLmRlc3Ryb3llZCkgJiYgISgoX2MgPSB0aGlzW2tPcmlnaW5hbFJlc3BvbnNlXSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmNvbXBsZXRlKTtcbiAgICB9XG4gICAgZ2V0IHNvY2tldCgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuIChfYiA9IChfYSA9IHRoaXNba1JlcXVlc3RdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc29ja2V0KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgIFByb2dyZXNzIGV2ZW50IGZvciBkb3dubG9hZGluZyAocmVjZWl2aW5nIGEgcmVzcG9uc2UpLlxuICAgICovXG4gICAgZ2V0IGRvd25sb2FkUHJvZ3Jlc3MoKSB7XG4gICAgICAgIGxldCBwZXJjZW50O1xuICAgICAgICBpZiAodGhpc1trUmVzcG9uc2VTaXplXSkge1xuICAgICAgICAgICAgcGVyY2VudCA9IHRoaXNba0Rvd25sb2FkZWRTaXplXSAvIHRoaXNba1Jlc3BvbnNlU2l6ZV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpc1trUmVzcG9uc2VTaXplXSA9PT0gdGhpc1trRG93bmxvYWRlZFNpemVdKSB7XG4gICAgICAgICAgICBwZXJjZW50ID0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBlcmNlbnQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwZXJjZW50LFxuICAgICAgICAgICAgdHJhbnNmZXJyZWQ6IHRoaXNba0Rvd25sb2FkZWRTaXplXSxcbiAgICAgICAgICAgIHRvdGFsOiB0aGlzW2tSZXNwb25zZVNpemVdXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgIFByb2dyZXNzIGV2ZW50IGZvciB1cGxvYWRpbmcgKHNlbmRpbmcgYSByZXF1ZXN0KS5cbiAgICAqL1xuICAgIGdldCB1cGxvYWRQcm9ncmVzcygpIHtcbiAgICAgICAgbGV0IHBlcmNlbnQ7XG4gICAgICAgIGlmICh0aGlzW2tCb2R5U2l6ZV0pIHtcbiAgICAgICAgICAgIHBlcmNlbnQgPSB0aGlzW2tVcGxvYWRlZFNpemVdIC8gdGhpc1trQm9keVNpemVdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXNba0JvZHlTaXplXSA9PT0gdGhpc1trVXBsb2FkZWRTaXplXSkge1xuICAgICAgICAgICAgcGVyY2VudCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwZXJjZW50ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGVyY2VudCxcbiAgICAgICAgICAgIHRyYW5zZmVycmVkOiB0aGlzW2tVcGxvYWRlZFNpemVdLFxuICAgICAgICAgICAgdG90YWw6IHRoaXNba0JvZHlTaXplXVxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICBUaGUgb2JqZWN0IGNvbnRhaW5zIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcblxuICAgIC0gYHN0YXJ0YCAtIFRpbWUgd2hlbiB0aGUgcmVxdWVzdCBzdGFydGVkLlxuICAgIC0gYHNvY2tldGAgLSBUaW1lIHdoZW4gYSBzb2NrZXQgd2FzIGFzc2lnbmVkIHRvIHRoZSByZXF1ZXN0LlxuICAgIC0gYGxvb2t1cGAgLSBUaW1lIHdoZW4gdGhlIEROUyBsb29rdXAgZmluaXNoZWQuXG4gICAgLSBgY29ubmVjdGAgLSBUaW1lIHdoZW4gdGhlIHNvY2tldCBzdWNjZXNzZnVsbHkgY29ubmVjdGVkLlxuICAgIC0gYHNlY3VyZUNvbm5lY3RgIC0gVGltZSB3aGVuIHRoZSBzb2NrZXQgc2VjdXJlbHkgY29ubmVjdGVkLlxuICAgIC0gYHVwbG9hZGAgLSBUaW1lIHdoZW4gdGhlIHJlcXVlc3QgZmluaXNoZWQgdXBsb2FkaW5nLlxuICAgIC0gYHJlc3BvbnNlYCAtIFRpbWUgd2hlbiB0aGUgcmVxdWVzdCBmaXJlZCBgcmVzcG9uc2VgIGV2ZW50LlxuICAgIC0gYGVuZGAgLSBUaW1lIHdoZW4gdGhlIHJlc3BvbnNlIGZpcmVkIGBlbmRgIGV2ZW50LlxuICAgIC0gYGVycm9yYCAtIFRpbWUgd2hlbiB0aGUgcmVxdWVzdCBmaXJlZCBgZXJyb3JgIGV2ZW50LlxuICAgIC0gYGFib3J0YCAtIFRpbWUgd2hlbiB0aGUgcmVxdWVzdCBmaXJlZCBgYWJvcnRgIGV2ZW50LlxuICAgIC0gYHBoYXNlc2BcbiAgICAgICAgLSBgd2FpdGAgLSBgdGltaW5ncy5zb2NrZXQgLSB0aW1pbmdzLnN0YXJ0YFxuICAgICAgICAtIGBkbnNgIC0gYHRpbWluZ3MubG9va3VwIC0gdGltaW5ncy5zb2NrZXRgXG4gICAgICAgIC0gYHRjcGAgLSBgdGltaW5ncy5jb25uZWN0IC0gdGltaW5ncy5sb29rdXBgXG4gICAgICAgIC0gYHRsc2AgLSBgdGltaW5ncy5zZWN1cmVDb25uZWN0IC0gdGltaW5ncy5jb25uZWN0YFxuICAgICAgICAtIGByZXF1ZXN0YCAtIGB0aW1pbmdzLnVwbG9hZCAtICh0aW1pbmdzLnNlY3VyZUNvbm5lY3QgfHwgdGltaW5ncy5jb25uZWN0KWBcbiAgICAgICAgLSBgZmlyc3RCeXRlYCAtIGB0aW1pbmdzLnJlc3BvbnNlIC0gdGltaW5ncy51cGxvYWRgXG4gICAgICAgIC0gYGRvd25sb2FkYCAtIGB0aW1pbmdzLmVuZCAtIHRpbWluZ3MucmVzcG9uc2VgXG4gICAgICAgIC0gYHRvdGFsYCAtIGAodGltaW5ncy5lbmQgfHwgdGltaW5ncy5lcnJvciB8fCB0aW1pbmdzLmFib3J0KSAtIHRpbWluZ3Muc3RhcnRgXG5cbiAgICBJZiBzb21ldGhpbmcgaGFzIG5vdCBiZWVuIG1lYXN1cmVkIHlldCwgaXQgd2lsbCBiZSBgdW5kZWZpbmVkYC5cblxuICAgIF9fTm90ZV9fOiBUaGUgdGltZSBpcyBhIGBudW1iZXJgIHJlcHJlc2VudGluZyB0aGUgbWlsbGlzZWNvbmRzIGVsYXBzZWQgc2luY2UgdGhlIFVOSVggZXBvY2guXG4gICAgKi9cbiAgICBnZXQgdGltaW5ncygpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpc1trUmVxdWVzdF0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50aW1pbmdzO1xuICAgIH1cbiAgICAvKipcbiAgICBXaGV0aGVyIHRoZSByZXNwb25zZSB3YXMgcmV0cmlldmVkIGZyb20gdGhlIGNhY2hlLlxuICAgICovXG4gICAgZ2V0IGlzRnJvbUNhY2hlKCkge1xuICAgICAgICByZXR1cm4gdGhpc1trSXNGcm9tQ2FjaGVdO1xuICAgIH1cbiAgICBwaXBlKGRlc3RpbmF0aW9uLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICh0aGlzW2tTdGFydGVkUmVhZGluZ10pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIHBpcGUuIFRoZSByZXNwb25zZSBoYXMgYmVlbiBlbWl0dGVkIGFscmVhZHkuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlc3RpbmF0aW9uIGluc3RhbmNlb2YgaHR0cF8xLlNlcnZlclJlc3BvbnNlKSB7XG4gICAgICAgICAgICB0aGlzW2tTZXJ2ZXJSZXNwb25zZXNQaXBlZF0uYWRkKGRlc3RpbmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIucGlwZShkZXN0aW5hdGlvbiwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHVucGlwZShkZXN0aW5hdGlvbikge1xuICAgICAgICBpZiAoZGVzdGluYXRpb24gaW5zdGFuY2VvZiBodHRwXzEuU2VydmVyUmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHRoaXNba1NlcnZlclJlc3BvbnNlc1BpcGVkXS5kZWxldGUoZGVzdGluYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLnVucGlwZShkZXN0aW5hdGlvbik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFJlcXVlc3Q7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZG5zTG9va3VwSXBWZXJzaW9uVG9GYW1pbHkgPSBleHBvcnRzLmlzRG5zTG9va3VwSXBWZXJzaW9uID0gdm9pZCAwO1xuY29uc3QgY29udmVyc2lvblRhYmxlID0ge1xuICAgIGF1dG86IDAsXG4gICAgaXB2NDogNCxcbiAgICBpcHY2OiA2XG59O1xuZXhwb3J0cy5pc0Ruc0xvb2t1cElwVmVyc2lvbiA9ICh2YWx1ZSkgPT4ge1xuICAgIHJldHVybiB2YWx1ZSBpbiBjb252ZXJzaW9uVGFibGU7XG59O1xuZXhwb3J0cy5kbnNMb29rdXBJcFZlcnNpb25Ub0ZhbWlseSA9IChkbnNMb29rdXBJcFZlcnNpb24pID0+IHtcbiAgICBpZiAoZXhwb3J0cy5pc0Ruc0xvb2t1cElwVmVyc2lvbihkbnNMb29rdXBJcFZlcnNpb24pKSB7XG4gICAgICAgIHJldHVybiBjb252ZXJzaW9uVGFibGVbZG5zTG9va3VwSXBWZXJzaW9uXTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEROUyBsb29rdXAgSVAgdmVyc2lvbicpO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZnNfMSA9IHJlcXVpcmUoXCJmc1wiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xuY29uc3QgaXNfMSA9IHJlcXVpcmUoXCJAc2luZHJlc29yaHVzL2lzXCIpO1xuY29uc3QgaXNfZm9ybV9kYXRhXzEgPSByZXF1aXJlKFwiLi9pcy1mb3JtLWRhdGFcIik7XG5jb25zdCBzdGF0QXN5bmMgPSB1dGlsXzEucHJvbWlzaWZ5KGZzXzEuc3RhdCk7XG5leHBvcnRzLmRlZmF1bHQgPSBhc3luYyAoYm9keSwgaGVhZGVycykgPT4ge1xuICAgIGlmIChoZWFkZXJzICYmICdjb250ZW50LWxlbmd0aCcgaW4gaGVhZGVycykge1xuICAgICAgICByZXR1cm4gTnVtYmVyKGhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ10pO1xuICAgIH1cbiAgICBpZiAoIWJvZHkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmIChpc18xLmRlZmF1bHQuc3RyaW5nKGJvZHkpKSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuYnl0ZUxlbmd0aChib2R5KTtcbiAgICB9XG4gICAgaWYgKGlzXzEuZGVmYXVsdC5idWZmZXIoYm9keSkpIHtcbiAgICAgICAgcmV0dXJuIGJvZHkubGVuZ3RoO1xuICAgIH1cbiAgICBpZiAoaXNfZm9ybV9kYXRhXzEuZGVmYXVsdChib2R5KSkge1xuICAgICAgICByZXR1cm4gdXRpbF8xLnByb21pc2lmeShib2R5LmdldExlbmd0aC5iaW5kKGJvZHkpKSgpO1xuICAgIH1cbiAgICBpZiAoYm9keSBpbnN0YW5jZW9mIGZzXzEuUmVhZFN0cmVhbSkge1xuICAgICAgICBjb25zdCB7IHNpemUgfSA9IGF3YWl0IHN0YXRBc3luYyhib2R5LnBhdGgpO1xuICAgICAgICBpZiAoc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIFRPRE86IFVwZGF0ZSBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2dldC1zdHJlYW1cbmNvbnN0IGdldEJ1ZmZlciA9IGFzeW5jIChzdHJlYW0pID0+IHtcbiAgICBjb25zdCBjaHVua3MgPSBbXTtcbiAgICBsZXQgbGVuZ3RoID0gMDtcbiAgICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIHN0cmVhbSkge1xuICAgICAgICBjaHVua3MucHVzaChjaHVuayk7XG4gICAgICAgIGxlbmd0aCArPSBCdWZmZXIuYnl0ZUxlbmd0aChjaHVuayk7XG4gICAgfVxuICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoY2h1bmtzWzBdKSkge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChjaHVua3MsIGxlbmd0aCk7XG4gICAgfVxuICAgIHJldHVybiBCdWZmZXIuZnJvbShjaHVua3Muam9pbignJykpO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGdldEJ1ZmZlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaXNfMSA9IHJlcXVpcmUoXCJAc2luZHJlc29yaHVzL2lzXCIpO1xuZXhwb3J0cy5kZWZhdWx0ID0gKGJvZHkpID0+IGlzXzEuZGVmYXVsdC5ub2RlU3RyZWFtKGJvZHkpICYmIGlzXzEuZGVmYXVsdC5mdW5jdGlvbl8oYm9keS5nZXRCb3VuZGFyeSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNSZXNwb25zZU9rID0gdm9pZCAwO1xuZXhwb3J0cy5pc1Jlc3BvbnNlT2sgPSAocmVzcG9uc2UpID0+IHtcbiAgICBjb25zdCB7IHN0YXR1c0NvZGUgfSA9IHJlc3BvbnNlO1xuICAgIGNvbnN0IGxpbWl0U3RhdHVzQ29kZSA9IHJlc3BvbnNlLnJlcXVlc3Qub3B0aW9ucy5mb2xsb3dSZWRpcmVjdCA/IDI5OSA6IDM5OTtcbiAgICByZXR1cm4gKHN0YXR1c0NvZGUgPj0gMjAwICYmIHN0YXR1c0NvZGUgPD0gbGltaXRTdGF0dXNDb2RlKSB8fCBzdGF0dXNDb2RlID09PSAzMDQ7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgZmlsZTogZGVwcmVjYXRlZCAqL1xuY29uc3QgdXJsXzEgPSByZXF1aXJlKFwidXJsXCIpO1xuY29uc3Qga2V5cyA9IFtcbiAgICAncHJvdG9jb2wnLFxuICAgICdob3N0JyxcbiAgICAnaG9zdG5hbWUnLFxuICAgICdwb3J0JyxcbiAgICAncGF0aG5hbWUnLFxuICAgICdzZWFyY2gnXG5dO1xuZXhwb3J0cy5kZWZhdWx0ID0gKG9yaWdpbiwgb3B0aW9ucykgPT4ge1xuICAgIHZhciBfYSwgX2I7XG4gICAgaWYgKG9wdGlvbnMucGF0aCkge1xuICAgICAgICBpZiAob3B0aW9ucy5wYXRobmFtZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUGFyYW1ldGVycyBgcGF0aGAgYW5kIGBwYXRobmFtZWAgYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZS4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5zZWFyY2gpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BhcmFtZXRlcnMgYHBhdGhgIGFuZCBgc2VhcmNoYCBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnNlYXJjaFBhcmFtcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUGFyYW1ldGVycyBgcGF0aGAgYW5kIGBzZWFyY2hQYXJhbXNgIGFyZSBtdXR1YWxseSBleGNsdXNpdmUuJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuc2VhcmNoICYmIG9wdGlvbnMuc2VhcmNoUGFyYW1zKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BhcmFtZXRlcnMgYHNlYXJjaGAgYW5kIGBzZWFyY2hQYXJhbXNgIGFyZSBtdXR1YWxseSBleGNsdXNpdmUuJyk7XG4gICAgfVxuICAgIGlmICghb3JpZ2luKSB7XG4gICAgICAgIGlmICghb3B0aW9ucy5wcm90b2NvbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTm8gVVJMIHByb3RvY29sIHNwZWNpZmllZCcpO1xuICAgICAgICB9XG4gICAgICAgIG9yaWdpbiA9IGAke29wdGlvbnMucHJvdG9jb2x9Ly8keyhfYiA9IChfYSA9IG9wdGlvbnMuaG9zdG5hbWUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG9wdGlvbnMuaG9zdCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJyd9YDtcbiAgICB9XG4gICAgY29uc3QgdXJsID0gbmV3IHVybF8xLlVSTChvcmlnaW4pO1xuICAgIGlmIChvcHRpb25zLnBhdGgpIHtcbiAgICAgICAgY29uc3Qgc2VhcmNoSW5kZXggPSBvcHRpb25zLnBhdGguaW5kZXhPZignPycpO1xuICAgICAgICBpZiAoc2VhcmNoSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICBvcHRpb25zLnBhdGhuYW1lID0gb3B0aW9ucy5wYXRoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb3B0aW9ucy5wYXRobmFtZSA9IG9wdGlvbnMucGF0aC5zbGljZSgwLCBzZWFyY2hJbmRleCk7XG4gICAgICAgICAgICBvcHRpb25zLnNlYXJjaCA9IG9wdGlvbnMucGF0aC5zbGljZShzZWFyY2hJbmRleCArIDEpO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSBvcHRpb25zLnBhdGg7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnNba2V5XSkge1xuICAgICAgICAgICAgdXJsW2tleV0gPSBvcHRpb25zW2tleV0udG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdXJsO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gZGVmYXVsdF8xKGZyb20sIHRvLCBldmVudHMpIHtcbiAgICBjb25zdCBmbnMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIGV2ZW50cykge1xuICAgICAgICBmbnNbZXZlbnRdID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgIHRvLmVtaXQoZXZlbnQsIC4uLmFyZ3MpO1xuICAgICAgICB9O1xuICAgICAgICBmcm9tLm9uKGV2ZW50LCBmbnNbZXZlbnRdKTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBldmVudCBvZiBldmVudHMpIHtcbiAgICAgICAgICAgIGZyb20ub2ZmKGV2ZW50LCBmbnNbZXZlbnRdKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5leHBvcnRzLmRlZmF1bHQgPSBkZWZhdWx0XzE7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVGltZW91dEVycm9yID0gdm9pZCAwO1xuY29uc3QgbmV0ID0gcmVxdWlyZShcIm5ldFwiKTtcbmNvbnN0IHVuaGFuZGxlXzEgPSByZXF1aXJlKFwiLi91bmhhbmRsZVwiKTtcbmNvbnN0IHJlZW50cnkgPSBTeW1ib2woJ3JlZW50cnknKTtcbmNvbnN0IG5vb3AgPSAoKSA9PiB7IH07XG5jbGFzcyBUaW1lb3V0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IodGhyZXNob2xkLCBldmVudCkge1xuICAgICAgICBzdXBlcihgVGltZW91dCBhd2FpdGluZyAnJHtldmVudH0nIGZvciAke3RocmVzaG9sZH1tc2ApO1xuICAgICAgICB0aGlzLmV2ZW50ID0gZXZlbnQ7XG4gICAgICAgIHRoaXMubmFtZSA9ICdUaW1lb3V0RXJyb3InO1xuICAgICAgICB0aGlzLmNvZGUgPSAnRVRJTUVET1VUJztcbiAgICB9XG59XG5leHBvcnRzLlRpbWVvdXRFcnJvciA9IFRpbWVvdXRFcnJvcjtcbmV4cG9ydHMuZGVmYXVsdCA9IChyZXF1ZXN0LCBkZWxheXMsIG9wdGlvbnMpID0+IHtcbiAgICBpZiAocmVlbnRyeSBpbiByZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybiBub29wO1xuICAgIH1cbiAgICByZXF1ZXN0W3JlZW50cnldID0gdHJ1ZTtcbiAgICBjb25zdCBjYW5jZWxlcnMgPSBbXTtcbiAgICBjb25zdCB7IG9uY2UsIHVuaGFuZGxlQWxsIH0gPSB1bmhhbmRsZV8xLmRlZmF1bHQoKTtcbiAgICBjb25zdCBhZGRUaW1lb3V0ID0gKGRlbGF5LCBjYWxsYmFjaywgZXZlbnQpID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCB0aW1lb3V0ID0gc2V0VGltZW91dChjYWxsYmFjaywgZGVsYXksIGRlbGF5LCBldmVudCk7XG4gICAgICAgIChfYSA9IHRpbWVvdXQudW5yZWYpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRpbWVvdXQpO1xuICAgICAgICBjb25zdCBjYW5jZWwgPSAoKSA9PiB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgIH07XG4gICAgICAgIGNhbmNlbGVycy5wdXNoKGNhbmNlbCk7XG4gICAgICAgIHJldHVybiBjYW5jZWw7XG4gICAgfTtcbiAgICBjb25zdCB7IGhvc3QsIGhvc3RuYW1lIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IHRpbWVvdXRIYW5kbGVyID0gKGRlbGF5LCBldmVudCkgPT4ge1xuICAgICAgICByZXF1ZXN0LmRlc3Ryb3kobmV3IFRpbWVvdXRFcnJvcihkZWxheSwgZXZlbnQpKTtcbiAgICB9O1xuICAgIGNvbnN0IGNhbmNlbFRpbWVvdXRzID0gKCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IGNhbmNlbCBvZiBjYW5jZWxlcnMpIHtcbiAgICAgICAgICAgIGNhbmNlbCgpO1xuICAgICAgICB9XG4gICAgICAgIHVuaGFuZGxlQWxsKCk7XG4gICAgfTtcbiAgICByZXF1ZXN0Lm9uY2UoJ2Vycm9yJywgZXJyb3IgPT4ge1xuICAgICAgICBjYW5jZWxUaW1lb3V0cygpO1xuICAgICAgICAvLyBTYXZlIG9yaWdpbmFsIGJlaGF2aW9yXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIGlmIChyZXF1ZXN0Lmxpc3RlbmVyQ291bnQoJ2Vycm9yJykgPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmVxdWVzdC5vbmNlKCdjbG9zZScsIGNhbmNlbFRpbWVvdXRzKTtcbiAgICBvbmNlKHJlcXVlc3QsICdyZXNwb25zZScsIChyZXNwb25zZSkgPT4ge1xuICAgICAgICBvbmNlKHJlc3BvbnNlLCAnZW5kJywgY2FuY2VsVGltZW91dHMpO1xuICAgIH0pO1xuICAgIGlmICh0eXBlb2YgZGVsYXlzLnJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGFkZFRpbWVvdXQoZGVsYXlzLnJlcXVlc3QsIHRpbWVvdXRIYW5kbGVyLCAncmVxdWVzdCcpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGRlbGF5cy5zb2NrZXQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnN0IHNvY2tldFRpbWVvdXRIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgdGltZW91dEhhbmRsZXIoZGVsYXlzLnNvY2tldCwgJ3NvY2tldCcpO1xuICAgICAgICB9O1xuICAgICAgICByZXF1ZXN0LnNldFRpbWVvdXQoZGVsYXlzLnNvY2tldCwgc29ja2V0VGltZW91dEhhbmRsZXIpO1xuICAgICAgICAvLyBgcmVxdWVzdC5zZXRUaW1lb3V0KDApYCBjYXVzZXMgYSBtZW1vcnkgbGVhay5cbiAgICAgICAgLy8gV2UgY2FuIGp1c3QgcmVtb3ZlIHRoZSBsaXN0ZW5lciBhbmQgZm9yZ2V0IGFib3V0IHRoZSB0aW1lciAtIGl0J3MgdW5yZWZmZWQuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2dvdC9pc3N1ZXMvNjkwXG4gICAgICAgIGNhbmNlbGVycy5wdXNoKCgpID0+IHtcbiAgICAgICAgICAgIHJlcXVlc3QucmVtb3ZlTGlzdGVuZXIoJ3RpbWVvdXQnLCBzb2NrZXRUaW1lb3V0SGFuZGxlcik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBvbmNlKHJlcXVlc3QsICdzb2NrZXQnLCAoc29ja2V0KSA9PiB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgeyBzb2NrZXRQYXRoIH0gPSByZXF1ZXN0O1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogaGFyZCB0byB0ZXN0ICovXG4gICAgICAgIGlmIChzb2NrZXQuY29ubmVjdGluZykge1xuICAgICAgICAgICAgY29uc3QgaGFzUGF0aCA9IEJvb2xlYW4oc29ja2V0UGF0aCAhPT0gbnVsbCAmJiBzb2NrZXRQYXRoICE9PSB2b2lkIDAgPyBzb2NrZXRQYXRoIDogbmV0LmlzSVAoKF9hID0gaG9zdG5hbWUgIT09IG51bGwgJiYgaG9zdG5hbWUgIT09IHZvaWQgMCA/IGhvc3RuYW1lIDogaG9zdCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJycpICE9PSAwKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGVsYXlzLmxvb2t1cCAhPT0gJ3VuZGVmaW5lZCcgJiYgIWhhc1BhdGggJiYgdHlwZW9mIHNvY2tldC5hZGRyZXNzKCkuYWRkcmVzcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjYW5jZWxUaW1lb3V0ID0gYWRkVGltZW91dChkZWxheXMubG9va3VwLCB0aW1lb3V0SGFuZGxlciwgJ2xvb2t1cCcpO1xuICAgICAgICAgICAgICAgIG9uY2Uoc29ja2V0LCAnbG9va3VwJywgY2FuY2VsVGltZW91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRlbGF5cy5jb25uZWN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVDb25uZWN0ID0gKCkgPT4gYWRkVGltZW91dChkZWxheXMuY29ubmVjdCwgdGltZW91dEhhbmRsZXIsICdjb25uZWN0Jyk7XG4gICAgICAgICAgICAgICAgaWYgKGhhc1BhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgb25jZShzb2NrZXQsICdjb25uZWN0JywgdGltZUNvbm5lY3QoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvbmNlKHNvY2tldCwgJ2xvb2t1cCcsIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jZShzb2NrZXQsICdjb25uZWN0JywgdGltZUNvbm5lY3QoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGVsYXlzLnNlY3VyZUNvbm5lY3QgIT09ICd1bmRlZmluZWQnICYmIG9wdGlvbnMucHJvdG9jb2wgPT09ICdodHRwczonKSB7XG4gICAgICAgICAgICAgICAgb25jZShzb2NrZXQsICdjb25uZWN0JywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYW5jZWxUaW1lb3V0ID0gYWRkVGltZW91dChkZWxheXMuc2VjdXJlQ29ubmVjdCwgdGltZW91dEhhbmRsZXIsICdzZWN1cmVDb25uZWN0Jyk7XG4gICAgICAgICAgICAgICAgICAgIG9uY2Uoc29ja2V0LCAnc2VjdXJlQ29ubmVjdCcsIGNhbmNlbFRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZGVsYXlzLnNlbmQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lUmVxdWVzdCA9ICgpID0+IGFkZFRpbWVvdXQoZGVsYXlzLnNlbmQsIHRpbWVvdXRIYW5kbGVyLCAnc2VuZCcpO1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IGhhcmQgdG8gdGVzdCAqL1xuICAgICAgICAgICAgaWYgKHNvY2tldC5jb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgb25jZShzb2NrZXQsICdjb25uZWN0JywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBvbmNlKHJlcXVlc3QsICd1cGxvYWQtY29tcGxldGUnLCB0aW1lUmVxdWVzdCgpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG9uY2UocmVxdWVzdCwgJ3VwbG9hZC1jb21wbGV0ZScsIHRpbWVSZXF1ZXN0KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBkZWxheXMucmVzcG9uc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG9uY2UocmVxdWVzdCwgJ3VwbG9hZC1jb21wbGV0ZScsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNhbmNlbFRpbWVvdXQgPSBhZGRUaW1lb3V0KGRlbGF5cy5yZXNwb25zZSwgdGltZW91dEhhbmRsZXIsICdyZXNwb25zZScpO1xuICAgICAgICAgICAgb25jZShyZXF1ZXN0LCAncmVzcG9uc2UnLCBjYW5jZWxUaW1lb3V0KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBjYW5jZWxUaW1lb3V0cztcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIFdoZW4gYXR0YWNoaW5nIGxpc3RlbmVycywgaXQncyB2ZXJ5IGVhc3kgdG8gZm9yZ2V0IGFib3V0IHRoZW0uXG4vLyBFc3BlY2lhbGx5IGlmIHlvdSBkbyBlcnJvciBoYW5kbGluZyBhbmQgc2V0IHRpbWVvdXRzLlxuLy8gU28gaW5zdGVhZCBvZiBjaGVja2luZyBpZiBpdCdzIHByb3BlciB0byB0aHJvdyBhbiBlcnJvciBvbiBldmVyeSB0aW1lb3V0IGV2ZXIsXG4vLyB1c2UgdGhpcyBzaW1wbGUgdG9vbCB3aGljaCB3aWxsIHJlbW92ZSBhbGwgbGlzdGVuZXJzIHlvdSBoYXZlIGF0dGFjaGVkLlxuZXhwb3J0cy5kZWZhdWx0ID0gKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZXJzID0gW107XG4gICAgcmV0dXJuIHtcbiAgICAgICAgb25jZShvcmlnaW4sIGV2ZW50LCBmbikge1xuICAgICAgICAgICAgb3JpZ2luLm9uY2UoZXZlbnQsIGZuKTtcbiAgICAgICAgICAgIGhhbmRsZXJzLnB1c2goeyBvcmlnaW4sIGV2ZW50LCBmbiB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgdW5oYW5kbGVBbGwoKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGhhbmRsZXIgb2YgaGFuZGxlcnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IG9yaWdpbiwgZXZlbnQsIGZuIH0gPSBoYW5kbGVyO1xuICAgICAgICAgICAgICAgIG9yaWdpbi5yZW1vdmVMaXN0ZW5lcihldmVudCwgZm4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGFuZGxlcnMubGVuZ3RoID0gMDtcbiAgICAgICAgfVxuICAgIH07XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBpc18xID0gcmVxdWlyZShcIkBzaW5kcmVzb3JodXMvaXNcIik7XG5leHBvcnRzLmRlZmF1bHQgPSAodXJsKSA9PiB7XG4gICAgLy8gQ2FzdCB0byBVUkxcbiAgICB1cmwgPSB1cmw7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgcHJvdG9jb2w6IHVybC5wcm90b2NvbCxcbiAgICAgICAgaG9zdG5hbWU6IGlzXzEuZGVmYXVsdC5zdHJpbmcodXJsLmhvc3RuYW1lKSAmJiB1cmwuaG9zdG5hbWUuc3RhcnRzV2l0aCgnWycpID8gdXJsLmhvc3RuYW1lLnNsaWNlKDEsIC0xKSA6IHVybC5ob3N0bmFtZSxcbiAgICAgICAgaG9zdDogdXJsLmhvc3QsXG4gICAgICAgIGhhc2g6IHVybC5oYXNoLFxuICAgICAgICBzZWFyY2g6IHVybC5zZWFyY2gsXG4gICAgICAgIHBhdGhuYW1lOiB1cmwucGF0aG5hbWUsXG4gICAgICAgIGhyZWY6IHVybC5ocmVmLFxuICAgICAgICBwYXRoOiBgJHt1cmwucGF0aG5hbWUgfHwgJyd9JHt1cmwuc2VhcmNoIHx8ICcnfWBcbiAgICB9O1xuICAgIGlmIChpc18xLmRlZmF1bHQuc3RyaW5nKHVybC5wb3J0KSAmJiB1cmwucG9ydC5sZW5ndGggPiAwKSB7XG4gICAgICAgIG9wdGlvbnMucG9ydCA9IE51bWJlcih1cmwucG9ydCk7XG4gICAgfVxuICAgIGlmICh1cmwudXNlcm5hbWUgfHwgdXJsLnBhc3N3b3JkKSB7XG4gICAgICAgIG9wdGlvbnMuYXV0aCA9IGAke3VybC51c2VybmFtZSB8fCAnJ306JHt1cmwucGFzc3dvcmQgfHwgJyd9YDtcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnM7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jbGFzcyBXZWFrYWJsZU1hcCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMud2Vha01hcCA9IG5ldyBXZWFrTWFwKCk7XG4gICAgICAgIHRoaXMubWFwID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRoaXMud2Vha01hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0KGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndlYWtNYXAuZ2V0KGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubWFwLmdldChrZXkpO1xuICAgIH1cbiAgICBoYXMoa2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMud2Vha01hcC5oYXMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5tYXAuaGFzKGtleSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gV2Vha2FibGVNYXA7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0SGFuZGxlciA9IHZvaWQgMDtcbmNvbnN0IGlzXzEgPSByZXF1aXJlKFwiQHNpbmRyZXNvcmh1cy9pc1wiKTtcbmNvbnN0IGFzX3Byb21pc2VfMSA9IHJlcXVpcmUoXCIuL2FzLXByb21pc2VcIik7XG5jb25zdCBjcmVhdGVfcmVqZWN0aW9uXzEgPSByZXF1aXJlKFwiLi9hcy1wcm9taXNlL2NyZWF0ZS1yZWplY3Rpb25cIik7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiLi9jb3JlXCIpO1xuY29uc3QgZGVlcF9mcmVlemVfMSA9IHJlcXVpcmUoXCIuL3V0aWxzL2RlZXAtZnJlZXplXCIpO1xuY29uc3QgZXJyb3JzID0ge1xuICAgIFJlcXVlc3RFcnJvcjogYXNfcHJvbWlzZV8xLlJlcXVlc3RFcnJvcixcbiAgICBDYWNoZUVycm9yOiBhc19wcm9taXNlXzEuQ2FjaGVFcnJvcixcbiAgICBSZWFkRXJyb3I6IGFzX3Byb21pc2VfMS5SZWFkRXJyb3IsXG4gICAgSFRUUEVycm9yOiBhc19wcm9taXNlXzEuSFRUUEVycm9yLFxuICAgIE1heFJlZGlyZWN0c0Vycm9yOiBhc19wcm9taXNlXzEuTWF4UmVkaXJlY3RzRXJyb3IsXG4gICAgVGltZW91dEVycm9yOiBhc19wcm9taXNlXzEuVGltZW91dEVycm9yLFxuICAgIFBhcnNlRXJyb3I6IGFzX3Byb21pc2VfMS5QYXJzZUVycm9yLFxuICAgIENhbmNlbEVycm9yOiBhc19wcm9taXNlXzEuQ2FuY2VsRXJyb3IsXG4gICAgVW5zdXBwb3J0ZWRQcm90b2NvbEVycm9yOiBhc19wcm9taXNlXzEuVW5zdXBwb3J0ZWRQcm90b2NvbEVycm9yLFxuICAgIFVwbG9hZEVycm9yOiBhc19wcm9taXNlXzEuVXBsb2FkRXJyb3Jcbn07XG4vLyBUaGUgYGRlbGF5YCBwYWNrYWdlIHdlaWdocyAxMEtCICghKVxuY29uc3QgZGVsYXkgPSBhc3luYyAobXMpID0+IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgIHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpO1xufSk7XG5jb25zdCB7IG5vcm1hbGl6ZUFyZ3VtZW50cyB9ID0gY29yZV8xLmRlZmF1bHQ7XG5jb25zdCBtZXJnZU9wdGlvbnMgPSAoLi4uc291cmNlcykgPT4ge1xuICAgIGxldCBtZXJnZWRPcHRpb25zO1xuICAgIGZvciAoY29uc3Qgc291cmNlIG9mIHNvdXJjZXMpIHtcbiAgICAgICAgbWVyZ2VkT3B0aW9ucyA9IG5vcm1hbGl6ZUFyZ3VtZW50cyh1bmRlZmluZWQsIHNvdXJjZSwgbWVyZ2VkT3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiBtZXJnZWRPcHRpb25zO1xufTtcbmNvbnN0IGdldFByb21pc2VPclN0cmVhbSA9IChvcHRpb25zKSA9PiBvcHRpb25zLmlzU3RyZWFtID8gbmV3IGNvcmVfMS5kZWZhdWx0KHVuZGVmaW5lZCwgb3B0aW9ucykgOiBhc19wcm9taXNlXzEuZGVmYXVsdChvcHRpb25zKTtcbmNvbnN0IGlzR290SW5zdGFuY2UgPSAodmFsdWUpID0+ICgnZGVmYXVsdHMnIGluIHZhbHVlICYmICdvcHRpb25zJyBpbiB2YWx1ZS5kZWZhdWx0cyk7XG5jb25zdCBhbGlhc2VzID0gW1xuICAgICdnZXQnLFxuICAgICdwb3N0JyxcbiAgICAncHV0JyxcbiAgICAncGF0Y2gnLFxuICAgICdoZWFkJyxcbiAgICAnZGVsZXRlJ1xuXTtcbmV4cG9ydHMuZGVmYXVsdEhhbmRsZXIgPSAob3B0aW9ucywgbmV4dCkgPT4gbmV4dChvcHRpb25zKTtcbmNvbnN0IGNhbGxJbml0SG9va3MgPSAoaG9va3MsIG9wdGlvbnMpID0+IHtcbiAgICBpZiAoaG9va3MpIHtcbiAgICAgICAgZm9yIChjb25zdCBob29rIG9mIGhvb2tzKSB7XG4gICAgICAgICAgICBob29rKG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxufTtcbmNvbnN0IGNyZWF0ZSA9IChkZWZhdWx0cykgPT4ge1xuICAgIC8vIFByb3h5IHByb3BlcnRpZXMgZnJvbSBuZXh0IGhhbmRsZXJzXG4gICAgZGVmYXVsdHMuX3Jhd0hhbmRsZXJzID0gZGVmYXVsdHMuaGFuZGxlcnM7XG4gICAgZGVmYXVsdHMuaGFuZGxlcnMgPSBkZWZhdWx0cy5oYW5kbGVycy5tYXAoZm4gPT4gKChvcHRpb25zLCBuZXh0KSA9PiB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCBiZSBhc3NpZ25lZCBieSBhc3NpZ25pbmcgcmVzdWx0XG4gICAgICAgIGxldCByb290O1xuICAgICAgICBjb25zdCByZXN1bHQgPSBmbihvcHRpb25zLCBuZXdPcHRpb25zID0+IHtcbiAgICAgICAgICAgIHJvb3QgPSBuZXh0KG5ld09wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIHJvb3Q7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmVzdWx0ICE9PSByb290ICYmICFvcHRpb25zLmlzU3RyZWFtICYmIHJvb3QpIHtcbiAgICAgICAgICAgIGNvbnN0IHR5cGVkUmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICAgICAgY29uc3QgeyB0aGVuOiBwcm9taXNlVGhlbiwgY2F0Y2g6IHByb21pc2VDYXRjaCwgZmluYWxseTogcHJvbWlzZUZpYW5sbHkgfSA9IHR5cGVkUmVzdWx0O1xuICAgICAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHR5cGVkUmVzdWx0LCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yocm9vdCkpO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModHlwZWRSZXN1bHQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHJvb3QpKTtcbiAgICAgICAgICAgIC8vIFRoZXNlIHNob3VsZCBwb2ludCB0byB0aGUgbmV3IHByb21pc2VcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcm9taXNlL3ByZWZlci1hd2FpdC10by10aGVuXG4gICAgICAgICAgICB0eXBlZFJlc3VsdC50aGVuID0gcHJvbWlzZVRoZW47XG4gICAgICAgICAgICB0eXBlZFJlc3VsdC5jYXRjaCA9IHByb21pc2VDYXRjaDtcbiAgICAgICAgICAgIHR5cGVkUmVzdWx0LmZpbmFsbHkgPSBwcm9taXNlRmlhbmxseTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pKTtcbiAgICAvLyBHb3QgaW50ZXJmYWNlXG4gICAgY29uc3QgZ290ID0gKCh1cmwsIG9wdGlvbnMgPSB7fSwgX2RlZmF1bHRzKSA9PiB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGxldCBpdGVyYXRpb24gPSAwO1xuICAgICAgICBjb25zdCBpdGVyYXRlSGFuZGxlcnMgPSAobmV3T3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRzLmhhbmRsZXJzW2l0ZXJhdGlvbisrXShuZXdPcHRpb25zLCBpdGVyYXRpb24gPT09IGRlZmF1bHRzLmhhbmRsZXJzLmxlbmd0aCA/IGdldFByb21pc2VPclN0cmVhbSA6IGl0ZXJhdGVIYW5kbGVycyk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIFRPRE86IFJlbW92ZSB0aGlzIGluIEdvdCAxMi5cbiAgICAgICAgaWYgKGlzXzEuZGVmYXVsdC5wbGFpbk9iamVjdCh1cmwpKSB7XG4gICAgICAgICAgICBjb25zdCBtZXJnZWRPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIC4uLnVybCxcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29yZV8xLnNldE5vbkVudW1lcmFibGVQcm9wZXJ0aWVzKFt1cmwsIG9wdGlvbnNdLCBtZXJnZWRPcHRpb25zKTtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBtZXJnZWRPcHRpb25zO1xuICAgICAgICAgICAgdXJsID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBDYWxsIGBpbml0YCBob29rc1xuICAgICAgICAgICAgbGV0IGluaXRIb29rRXJyb3I7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNhbGxJbml0SG9va3MoZGVmYXVsdHMub3B0aW9ucy5ob29rcy5pbml0LCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBjYWxsSW5pdEhvb2tzKChfYSA9IG9wdGlvbnMuaG9va3MpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pbml0LCBvcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGluaXRIb29rRXJyb3IgPSBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE5vcm1hbGl6ZSBvcHRpb25zICYgY2FsbCBoYW5kbGVyc1xuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZE9wdGlvbnMgPSBub3JtYWxpemVBcmd1bWVudHModXJsLCBvcHRpb25zLCBfZGVmYXVsdHMgIT09IG51bGwgJiYgX2RlZmF1bHRzICE9PSB2b2lkIDAgPyBfZGVmYXVsdHMgOiBkZWZhdWx0cy5vcHRpb25zKTtcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRPcHRpb25zW2NvcmVfMS5rSXNOb3JtYWxpemVkQWxyZWFkeV0gPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGluaXRIb29rRXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgYXNfcHJvbWlzZV8xLlJlcXVlc3RFcnJvcihpbml0SG9va0Vycm9yLm1lc3NhZ2UsIGluaXRIb29rRXJyb3IsIG5vcm1hbGl6ZWRPcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpdGVyYXRlSGFuZGxlcnMobm9ybWFsaXplZE9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaXNTdHJlYW0pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVfcmVqZWN0aW9uXzEuZGVmYXVsdChlcnJvciwgZGVmYXVsdHMub3B0aW9ucy5ob29rcy5iZWZvcmVFcnJvciwgKF9iID0gb3B0aW9ucy5ob29rcykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmJlZm9yZUVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGdvdC5leHRlbmQgPSAoLi4uaW5zdGFuY2VzT3JPcHRpb25zKSA9PiB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnNBcnJheSA9IFtkZWZhdWx0cy5vcHRpb25zXTtcbiAgICAgICAgbGV0IGhhbmRsZXJzID0gWy4uLmRlZmF1bHRzLl9yYXdIYW5kbGVyc107XG4gICAgICAgIGxldCBpc011dGFibGVEZWZhdWx0cztcbiAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBpbnN0YW5jZXNPck9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChpc0dvdEluc3RhbmNlKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnNBcnJheS5wdXNoKHZhbHVlLmRlZmF1bHRzLm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGhhbmRsZXJzLnB1c2goLi4udmFsdWUuZGVmYXVsdHMuX3Jhd0hhbmRsZXJzKTtcbiAgICAgICAgICAgICAgICBpc011dGFibGVEZWZhdWx0cyA9IHZhbHVlLmRlZmF1bHRzLm11dGFibGVEZWZhdWx0cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG9wdGlvbnNBcnJheS5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoJ2hhbmRsZXJzJyBpbiB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGVycy5wdXNoKC4uLnZhbHVlLmhhbmRsZXJzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaXNNdXRhYmxlRGVmYXVsdHMgPSB2YWx1ZS5tdXRhYmxlRGVmYXVsdHM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaGFuZGxlcnMgPSBoYW5kbGVycy5maWx0ZXIoaGFuZGxlciA9PiBoYW5kbGVyICE9PSBleHBvcnRzLmRlZmF1bHRIYW5kbGVyKTtcbiAgICAgICAgaWYgKGhhbmRsZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgaGFuZGxlcnMucHVzaChleHBvcnRzLmRlZmF1bHRIYW5kbGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3JlYXRlKHtcbiAgICAgICAgICAgIG9wdGlvbnM6IG1lcmdlT3B0aW9ucyguLi5vcHRpb25zQXJyYXkpLFxuICAgICAgICAgICAgaGFuZGxlcnMsXG4gICAgICAgICAgICBtdXRhYmxlRGVmYXVsdHM6IEJvb2xlYW4oaXNNdXRhYmxlRGVmYXVsdHMpXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLy8gUGFnaW5hdGlvblxuICAgIGNvbnN0IHBhZ2luYXRlRWFjaCA9IChhc3luYyBmdW5jdGlvbiogKHVybCwgb3B0aW9ucykge1xuICAgICAgICAvLyBUT0RPOiBSZW1vdmUgdGhpcyBgQHRzLWV4cGVjdC1lcnJvcmAgd2hlbiB1cGdyYWRpbmcgdG8gVHlwZVNjcmlwdCA0LlxuICAgICAgICAvLyBFcnJvcjogQXJndW1lbnQgb2YgdHlwZSAnTWVyZ2U8T3B0aW9ucywgUGFnaW5hdGlvbk9wdGlvbnM8VCwgUj4+IHwgdW5kZWZpbmVkJyBpcyBub3QgYXNzaWduYWJsZSB0byBwYXJhbWV0ZXIgb2YgdHlwZSAnT3B0aW9ucyB8IHVuZGVmaW5lZCcuXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgbGV0IG5vcm1hbGl6ZWRPcHRpb25zID0gbm9ybWFsaXplQXJndW1lbnRzKHVybCwgb3B0aW9ucywgZGVmYXVsdHMub3B0aW9ucyk7XG4gICAgICAgIG5vcm1hbGl6ZWRPcHRpb25zLnJlc29sdmVCb2R5T25seSA9IGZhbHNlO1xuICAgICAgICBjb25zdCBwYWdpbmF0aW9uID0gbm9ybWFsaXplZE9wdGlvbnMucGFnaW5hdGlvbjtcbiAgICAgICAgaWYgKCFpc18xLmRlZmF1bHQub2JqZWN0KHBhZ2luYXRpb24pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdgb3B0aW9ucy5wYWdpbmF0aW9uYCBtdXN0IGJlIGltcGxlbWVudGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWxsID0gW107XG4gICAgICAgIGxldCB7IGNvdW50TGltaXQgfSA9IHBhZ2luYXRpb247XG4gICAgICAgIGxldCBudW1iZXJPZlJlcXVlc3RzID0gMDtcbiAgICAgICAgd2hpbGUgKG51bWJlck9mUmVxdWVzdHMgPCBwYWdpbmF0aW9uLnJlcXVlc3RMaW1pdCkge1xuICAgICAgICAgICAgaWYgKG51bWJlck9mUmVxdWVzdHMgIT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYXdhaXQtaW4tbG9vcFxuICAgICAgICAgICAgICAgIGF3YWl0IGRlbGF5KHBhZ2luYXRpb24uYmFja29mZik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIEZJWE1FIVxuICAgICAgICAgICAgLy8gVE9ETzogVGhyb3cgd2hlbiByZXN1bHQgaXMgbm90IGFuIGluc3RhbmNlIG9mIFJlc3BvbnNlXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYXdhaXQtaW4tbG9vcFxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gKGF3YWl0IGdvdCh1bmRlZmluZWQsIHVuZGVmaW5lZCwgbm9ybWFsaXplZE9wdGlvbnMpKTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hd2FpdC1pbi1sb29wXG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSBhd2FpdCBwYWdpbmF0aW9uLnRyYW5zZm9ybShyZXN1bHQpO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHBhcnNlZCkge1xuICAgICAgICAgICAgICAgIGlmIChwYWdpbmF0aW9uLmZpbHRlcihpdGVtLCBhbGwsIGN1cnJlbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcGFnaW5hdGlvbi5zaG91bGRDb250aW51ZShpdGVtLCBhbGwsIGN1cnJlbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgeWllbGQgaXRlbTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhZ2luYXRpb24uc3RhY2tBbGxJdGVtcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxsLnB1c2goaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY3VycmVudC5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoLS1jb3VudExpbWl0IDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnNUb01lcmdlID0gcGFnaW5hdGlvbi5wYWdpbmF0ZShyZXN1bHQsIGFsbCwgY3VycmVudCk7XG4gICAgICAgICAgICBpZiAob3B0aW9uc1RvTWVyZ2UgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnNUb01lcmdlID09PSByZXN1bHQucmVxdWVzdC5vcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZE9wdGlvbnMgPSByZXN1bHQucmVxdWVzdC5vcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAob3B0aW9uc1RvTWVyZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRPcHRpb25zID0gbm9ybWFsaXplQXJndW1lbnRzKHVuZGVmaW5lZCwgb3B0aW9uc1RvTWVyZ2UsIG5vcm1hbGl6ZWRPcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG51bWJlck9mUmVxdWVzdHMrKztcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGdvdC5wYWdpbmF0ZSA9IHBhZ2luYXRlRWFjaDtcbiAgICBnb3QucGFnaW5hdGUuYWxsID0gKGFzeW5jICh1cmwsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGl0ZW0gb2YgcGFnaW5hdGVFYWNoKHVybCwgb3B0aW9ucykpIHtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChpdGVtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9KTtcbiAgICAvLyBGb3IgdGhvc2Ugd2hvIGxpa2UgdmVyeSBkZXNjcmlwdGl2ZSBuYW1lc1xuICAgIGdvdC5wYWdpbmF0ZS5lYWNoID0gcGFnaW5hdGVFYWNoO1xuICAgIC8vIFN0cmVhbSBBUElcbiAgICBnb3Quc3RyZWFtID0gKCh1cmwsIG9wdGlvbnMpID0+IGdvdCh1cmwsIHsgLi4ub3B0aW9ucywgaXNTdHJlYW06IHRydWUgfSkpO1xuICAgIC8vIFNob3J0Y3V0c1xuICAgIGZvciAoY29uc3QgbWV0aG9kIG9mIGFsaWFzZXMpIHtcbiAgICAgICAgZ290W21ldGhvZF0gPSAoKHVybCwgb3B0aW9ucykgPT4gZ290KHVybCwgeyAuLi5vcHRpb25zLCBtZXRob2QgfSkpO1xuICAgICAgICBnb3Quc3RyZWFtW21ldGhvZF0gPSAoKHVybCwgb3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGdvdCh1cmwsIHsgLi4ub3B0aW9ucywgbWV0aG9kLCBpc1N0cmVhbTogdHJ1ZSB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24oZ290LCBlcnJvcnMpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnb3QsICdkZWZhdWx0cycsIHtcbiAgICAgICAgdmFsdWU6IGRlZmF1bHRzLm11dGFibGVEZWZhdWx0cyA/IGRlZmF1bHRzIDogZGVlcF9mcmVlemVfMS5kZWZhdWx0KGRlZmF1bHRzKSxcbiAgICAgICAgd3JpdGFibGU6IGRlZmF1bHRzLm11dGFibGVEZWZhdWx0cyxcbiAgICAgICAgY29uZmlndXJhYmxlOiBkZWZhdWx0cy5tdXRhYmxlRGVmYXVsdHMsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBnb3QubWVyZ2VPcHRpb25zID0gbWVyZ2VPcHRpb25zO1xuICAgIHJldHVybiBnb3Q7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzXCIpLCBleHBvcnRzKTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB1cmxfMSA9IHJlcXVpcmUoXCJ1cmxcIik7XG5jb25zdCBjcmVhdGVfMSA9IHJlcXVpcmUoXCIuL2NyZWF0ZVwiKTtcbmNvbnN0IGRlZmF1bHRzID0ge1xuICAgIG9wdGlvbnM6IHtcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgcmV0cnk6IHtcbiAgICAgICAgICAgIGxpbWl0OiAyLFxuICAgICAgICAgICAgbWV0aG9kczogW1xuICAgICAgICAgICAgICAgICdHRVQnLFxuICAgICAgICAgICAgICAgICdQVVQnLFxuICAgICAgICAgICAgICAgICdIRUFEJyxcbiAgICAgICAgICAgICAgICAnREVMRVRFJyxcbiAgICAgICAgICAgICAgICAnT1BUSU9OUycsXG4gICAgICAgICAgICAgICAgJ1RSQUNFJ1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHN0YXR1c0NvZGVzOiBbXG4gICAgICAgICAgICAgICAgNDA4LFxuICAgICAgICAgICAgICAgIDQxMyxcbiAgICAgICAgICAgICAgICA0MjksXG4gICAgICAgICAgICAgICAgNTAwLFxuICAgICAgICAgICAgICAgIDUwMixcbiAgICAgICAgICAgICAgICA1MDMsXG4gICAgICAgICAgICAgICAgNTA0LFxuICAgICAgICAgICAgICAgIDUyMSxcbiAgICAgICAgICAgICAgICA1MjIsXG4gICAgICAgICAgICAgICAgNTI0XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZXJyb3JDb2RlczogW1xuICAgICAgICAgICAgICAgICdFVElNRURPVVQnLFxuICAgICAgICAgICAgICAgICdFQ09OTlJFU0VUJyxcbiAgICAgICAgICAgICAgICAnRUFERFJJTlVTRScsXG4gICAgICAgICAgICAgICAgJ0VDT05OUkVGVVNFRCcsXG4gICAgICAgICAgICAgICAgJ0VQSVBFJyxcbiAgICAgICAgICAgICAgICAnRU5PVEZPVU5EJyxcbiAgICAgICAgICAgICAgICAnRU5FVFVOUkVBQ0gnLFxuICAgICAgICAgICAgICAgICdFQUlfQUdBSU4nXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgbWF4UmV0cnlBZnRlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY2FsY3VsYXRlRGVsYXk6ICh7IGNvbXB1dGVkVmFsdWUgfSkgPT4gY29tcHV0ZWRWYWx1ZVxuICAgICAgICB9LFxuICAgICAgICB0aW1lb3V0OiB7fSxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ3VzZXItYWdlbnQnOiAnZ290IChodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2dvdCknXG4gICAgICAgIH0sXG4gICAgICAgIGhvb2tzOiB7XG4gICAgICAgICAgICBpbml0OiBbXSxcbiAgICAgICAgICAgIGJlZm9yZVJlcXVlc3Q6IFtdLFxuICAgICAgICAgICAgYmVmb3JlUmVkaXJlY3Q6IFtdLFxuICAgICAgICAgICAgYmVmb3JlUmV0cnk6IFtdLFxuICAgICAgICAgICAgYmVmb3JlRXJyb3I6IFtdLFxuICAgICAgICAgICAgYWZ0ZXJSZXNwb25zZTogW11cbiAgICAgICAgfSxcbiAgICAgICAgY2FjaGU6IHVuZGVmaW5lZCxcbiAgICAgICAgZG5zQ2FjaGU6IHVuZGVmaW5lZCxcbiAgICAgICAgZGVjb21wcmVzczogdHJ1ZSxcbiAgICAgICAgdGhyb3dIdHRwRXJyb3JzOiB0cnVlLFxuICAgICAgICBmb2xsb3dSZWRpcmVjdDogdHJ1ZSxcbiAgICAgICAgaXNTdHJlYW06IGZhbHNlLFxuICAgICAgICByZXNwb25zZVR5cGU6ICd0ZXh0JyxcbiAgICAgICAgcmVzb2x2ZUJvZHlPbmx5OiBmYWxzZSxcbiAgICAgICAgbWF4UmVkaXJlY3RzOiAxMCxcbiAgICAgICAgcHJlZml4VXJsOiAnJyxcbiAgICAgICAgbWV0aG9kUmV3cml0aW5nOiB0cnVlLFxuICAgICAgICBpZ25vcmVJbnZhbGlkQ29va2llczogZmFsc2UsXG4gICAgICAgIGNvbnRleHQ6IHt9LFxuICAgICAgICAvLyBUT0RPOiBTZXQgdGhpcyB0byBgdHJ1ZWAgd2hlbiBHb3QgMTIgZ2V0cyByZWxlYXNlZFxuICAgICAgICBodHRwMjogZmFsc2UsXG4gICAgICAgIGFsbG93R2V0Qm9keTogZmFsc2UsXG4gICAgICAgIGh0dHBzOiB1bmRlZmluZWQsXG4gICAgICAgIHBhZ2luYXRpb246IHtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnJlcXVlc3Qub3B0aW9ucy5yZXNwb25zZVR5cGUgPT09ICdqc29uJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuYm9keTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmVzcG9uc2UuYm9keSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFnaW5hdGU6IHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIVJlZmxlY3QuaGFzKHJlc3BvbnNlLmhlYWRlcnMsICdsaW5rJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtcyA9IHJlc3BvbnNlLmhlYWRlcnMubGluay5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgICAgIGxldCBuZXh0O1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWQgPSBpdGVtLnNwbGl0KCc7Jyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZWRbMV0uaW5jbHVkZXMoJ25leHQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCA9IHBhcnNlZFswXS50cmltU3RhcnQoKS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0ID0gbmV4dC5zbGljZSgxLCAtMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobmV4dCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBuZXcgdXJsXzEuVVJMKG5leHQpXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmlsdGVyOiAoKSA9PiB0cnVlLFxuICAgICAgICAgICAgc2hvdWxkQ29udGludWU6ICgpID0+IHRydWUsXG4gICAgICAgICAgICBjb3VudExpbWl0OiBJbmZpbml0eSxcbiAgICAgICAgICAgIGJhY2tvZmY6IDAsXG4gICAgICAgICAgICByZXF1ZXN0TGltaXQ6IDEwMDAwLFxuICAgICAgICAgICAgc3RhY2tBbGxJdGVtczogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBwYXJzZUpzb246ICh0ZXh0KSA9PiBKU09OLnBhcnNlKHRleHQpLFxuICAgICAgICBzdHJpbmdpZnlKc29uOiAob2JqZWN0KSA9PiBKU09OLnN0cmluZ2lmeShvYmplY3QpLFxuICAgICAgICBjYWNoZU9wdGlvbnM6IHt9XG4gICAgfSxcbiAgICBoYW5kbGVyczogW2NyZWF0ZV8xLmRlZmF1bHRIYW5kbGVyXSxcbiAgICBtdXRhYmxlRGVmYXVsdHM6IGZhbHNlXG59O1xuY29uc3QgZ290ID0gY3JlYXRlXzEuZGVmYXVsdChkZWZhdWx0cyk7XG5leHBvcnRzLmRlZmF1bHQgPSBnb3Q7XG4vLyBGb3IgQ29tbW9uSlMgZGVmYXVsdCBleHBvcnQgc3VwcG9ydFxubW9kdWxlLmV4cG9ydHMgPSBnb3Q7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZ290O1xubW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IC8vIFdvcmthcm91bmQgZm9yIFRTIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2dvdC9wdWxsLzEyNjdcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jcmVhdGVcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2FzLXByb21pc2VcIiksIGV4cG9ydHMpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGlzXzEgPSByZXF1aXJlKFwiQHNpbmRyZXNvcmh1cy9pc1wiKTtcbmZ1bmN0aW9uIGRlZXBGcmVlemUob2JqZWN0KSB7XG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiBPYmplY3QudmFsdWVzKG9iamVjdCkpIHtcbiAgICAgICAgaWYgKGlzXzEuZGVmYXVsdC5wbGFpbk9iamVjdCh2YWx1ZSkgfHwgaXNfMS5kZWZhdWx0LmFycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgZGVlcEZyZWV6ZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUob2JqZWN0KTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGRlZXBGcmVlemU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGFscmVhZHlXYXJuZWQgPSBuZXcgU2V0KCk7XG5leHBvcnRzLmRlZmF1bHQgPSAobWVzc2FnZSkgPT4ge1xuICAgIGlmIChhbHJlYWR5V2FybmVkLmhhcyhtZXNzYWdlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGFscmVhZHlXYXJuZWQuYWRkKG1lc3NhZ2UpO1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgTWlzc2luZyB0eXBlcy5cbiAgICBwcm9jZXNzLmVtaXRXYXJuaW5nKGBHb3Q6ICR7bWVzc2FnZX1gLCB7XG4gICAgICAgIHR5cGU6ICdEZXByZWNhdGlvbldhcm5pbmcnXG4gICAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gcmZjNzIzMSA2LjFcbmNvbnN0IHN0YXR1c0NvZGVDYWNoZWFibGVCeURlZmF1bHQgPSBuZXcgU2V0KFtcbiAgICAyMDAsXG4gICAgMjAzLFxuICAgIDIwNCxcbiAgICAyMDYsXG4gICAgMzAwLFxuICAgIDMwMSxcbiAgICA0MDQsXG4gICAgNDA1LFxuICAgIDQxMCxcbiAgICA0MTQsXG4gICAgNTAxLFxuXSk7XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gZG9lcyBub3QgdW5kZXJzdGFuZCBwYXJ0aWFsIHJlc3BvbnNlcyAoMjA2KVxuY29uc3QgdW5kZXJzdG9vZFN0YXR1c2VzID0gbmV3IFNldChbXG4gICAgMjAwLFxuICAgIDIwMyxcbiAgICAyMDQsXG4gICAgMzAwLFxuICAgIDMwMSxcbiAgICAzMDIsXG4gICAgMzAzLFxuICAgIDMwNyxcbiAgICAzMDgsXG4gICAgNDA0LFxuICAgIDQwNSxcbiAgICA0MTAsXG4gICAgNDE0LFxuICAgIDUwMSxcbl0pO1xuXG5jb25zdCBlcnJvclN0YXR1c0NvZGVzID0gbmV3IFNldChbXG4gICAgNTAwLFxuICAgIDUwMixcbiAgICA1MDMsIFxuICAgIDUwNCxcbl0pO1xuXG5jb25zdCBob3BCeUhvcEhlYWRlcnMgPSB7XG4gICAgZGF0ZTogdHJ1ZSwgLy8gaW5jbHVkZWQsIGJlY2F1c2Ugd2UgYWRkIEFnZSB1cGRhdGUgRGF0ZVxuICAgIGNvbm5lY3Rpb246IHRydWUsXG4gICAgJ2tlZXAtYWxpdmUnOiB0cnVlLFxuICAgICdwcm94eS1hdXRoZW50aWNhdGUnOiB0cnVlLFxuICAgICdwcm94eS1hdXRob3JpemF0aW9uJzogdHJ1ZSxcbiAgICB0ZTogdHJ1ZSxcbiAgICB0cmFpbGVyOiB0cnVlLFxuICAgICd0cmFuc2Zlci1lbmNvZGluZyc6IHRydWUsXG4gICAgdXBncmFkZTogdHJ1ZSxcbn07XG5cbmNvbnN0IGV4Y2x1ZGVkRnJvbVJldmFsaWRhdGlvblVwZGF0ZSA9IHtcbiAgICAvLyBTaW5jZSB0aGUgb2xkIGJvZHkgaXMgcmV1c2VkLCBpdCBkb2Vzbid0IG1ha2Ugc2Vuc2UgdG8gY2hhbmdlIHByb3BlcnRpZXMgb2YgdGhlIGJvZHlcbiAgICAnY29udGVudC1sZW5ndGgnOiB0cnVlLFxuICAgICdjb250ZW50LWVuY29kaW5nJzogdHJ1ZSxcbiAgICAndHJhbnNmZXItZW5jb2RpbmcnOiB0cnVlLFxuICAgICdjb250ZW50LXJhbmdlJzogdHJ1ZSxcbn07XG5cbmZ1bmN0aW9uIHRvTnVtYmVyT3JaZXJvKHMpIHtcbiAgICBjb25zdCBuID0gcGFyc2VJbnQocywgMTApO1xuICAgIHJldHVybiBpc0Zpbml0ZShuKSA/IG4gOiAwO1xufVxuXG4vLyBSRkMgNTg2MVxuZnVuY3Rpb24gaXNFcnJvclJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgLy8gY29uc2lkZXIgdW5kZWZpbmVkIHJlc3BvbnNlIGFzIGZhdWx0eVxuICAgIGlmKCFyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZXJyb3JTdGF0dXNDb2Rlcy5oYXMocmVzcG9uc2Uuc3RhdHVzKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VDYWNoZUNvbnRyb2woaGVhZGVyKSB7XG4gICAgY29uc3QgY2MgPSB7fTtcbiAgICBpZiAoIWhlYWRlcikgcmV0dXJuIGNjO1xuXG4gICAgLy8gVE9ETzogV2hlbiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIHZhbHVlIHByZXNlbnQgZm9yIGEgZ2l2ZW4gZGlyZWN0aXZlIChlLmcuLCB0d28gRXhwaXJlcyBoZWFkZXIgZmllbGRzLCBtdWx0aXBsZSBDYWNoZS1Db250cm9sOiBtYXgtYWdlIGRpcmVjdGl2ZXMpLFxuICAgIC8vIHRoZSBkaXJlY3RpdmUncyB2YWx1ZSBpcyBjb25zaWRlcmVkIGludmFsaWQuIENhY2hlcyBhcmUgZW5jb3VyYWdlZCB0byBjb25zaWRlciByZXNwb25zZXMgdGhhdCBoYXZlIGludmFsaWQgZnJlc2huZXNzIGluZm9ybWF0aW9uIHRvIGJlIHN0YWxlXG4gICAgY29uc3QgcGFydHMgPSBoZWFkZXIudHJpbSgpLnNwbGl0KC9cXHMqLFxccyovKTsgLy8gVE9ETzogbGFtZSBwYXJzaW5nXG4gICAgZm9yIChjb25zdCBwYXJ0IG9mIHBhcnRzKSB7XG4gICAgICAgIGNvbnN0IFtrLCB2XSA9IHBhcnQuc3BsaXQoL1xccyo9XFxzKi8sIDIpO1xuICAgICAgICBjY1trXSA9IHYgPT09IHVuZGVmaW5lZCA/IHRydWUgOiB2LnJlcGxhY2UoL15cInxcIiQvZywgJycpOyAvLyBUT0RPOiBsYW1lIHVucXVvdGluZ1xuICAgIH1cblxuICAgIHJldHVybiBjYztcbn1cblxuZnVuY3Rpb24gZm9ybWF0Q2FjaGVDb250cm9sKGNjKSB7XG4gICAgbGV0IHBhcnRzID0gW107XG4gICAgZm9yIChjb25zdCBrIGluIGNjKSB7XG4gICAgICAgIGNvbnN0IHYgPSBjY1trXTtcbiAgICAgICAgcGFydHMucHVzaCh2ID09PSB0cnVlID8gayA6IGsgKyAnPScgKyB2KTtcbiAgICB9XG4gICAgaWYgKCFwYXJ0cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnRzLmpvaW4oJywgJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgQ2FjaGVQb2xpY3kge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICByZXEsXG4gICAgICAgIHJlcyxcbiAgICAgICAge1xuICAgICAgICAgICAgc2hhcmVkLFxuICAgICAgICAgICAgY2FjaGVIZXVyaXN0aWMsXG4gICAgICAgICAgICBpbW11dGFibGVNaW5UaW1lVG9MaXZlLFxuICAgICAgICAgICAgaWdub3JlQ2FyZ29DdWx0LFxuICAgICAgICAgICAgX2Zyb21PYmplY3QsXG4gICAgICAgIH0gPSB7fVxuICAgICkge1xuICAgICAgICBpZiAoX2Zyb21PYmplY3QpIHtcbiAgICAgICAgICAgIHRoaXMuX2Zyb21PYmplY3QoX2Zyb21PYmplY3QpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFyZXMgfHwgIXJlcy5oZWFkZXJzKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignUmVzcG9uc2UgaGVhZGVycyBtaXNzaW5nJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYXNzZXJ0UmVxdWVzdEhhc0hlYWRlcnMocmVxKTtcblxuICAgICAgICB0aGlzLl9yZXNwb25zZVRpbWUgPSB0aGlzLm5vdygpO1xuICAgICAgICB0aGlzLl9pc1NoYXJlZCA9IHNoYXJlZCAhPT0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2NhY2hlSGV1cmlzdGljID1cbiAgICAgICAgICAgIHVuZGVmaW5lZCAhPT0gY2FjaGVIZXVyaXN0aWMgPyBjYWNoZUhldXJpc3RpYyA6IDAuMTsgLy8gMTAlIG1hdGNoZXMgSUVcbiAgICAgICAgdGhpcy5faW1tdXRhYmxlTWluVHRsID1cbiAgICAgICAgICAgIHVuZGVmaW5lZCAhPT0gaW1tdXRhYmxlTWluVGltZVRvTGl2ZVxuICAgICAgICAgICAgICAgID8gaW1tdXRhYmxlTWluVGltZVRvTGl2ZVxuICAgICAgICAgICAgICAgIDogMjQgKiAzNjAwICogMTAwMDtcblxuICAgICAgICB0aGlzLl9zdGF0dXMgPSAnc3RhdHVzJyBpbiByZXMgPyByZXMuc3RhdHVzIDogMjAwO1xuICAgICAgICB0aGlzLl9yZXNIZWFkZXJzID0gcmVzLmhlYWRlcnM7XG4gICAgICAgIHRoaXMuX3Jlc2NjID0gcGFyc2VDYWNoZUNvbnRyb2wocmVzLmhlYWRlcnNbJ2NhY2hlLWNvbnRyb2wnXSk7XG4gICAgICAgIHRoaXMuX21ldGhvZCA9ICdtZXRob2QnIGluIHJlcSA/IHJlcS5tZXRob2QgOiAnR0VUJztcbiAgICAgICAgdGhpcy5fdXJsID0gcmVxLnVybDtcbiAgICAgICAgdGhpcy5faG9zdCA9IHJlcS5oZWFkZXJzLmhvc3Q7XG4gICAgICAgIHRoaXMuX25vQXV0aG9yaXphdGlvbiA9ICFyZXEuaGVhZGVycy5hdXRob3JpemF0aW9uO1xuICAgICAgICB0aGlzLl9yZXFIZWFkZXJzID0gcmVzLmhlYWRlcnMudmFyeSA/IHJlcS5oZWFkZXJzIDogbnVsbDsgLy8gRG9uJ3Qga2VlcCBhbGwgcmVxdWVzdCBoZWFkZXJzIGlmIHRoZXkgd29uJ3QgYmUgdXNlZFxuICAgICAgICB0aGlzLl9yZXFjYyA9IHBhcnNlQ2FjaGVDb250cm9sKHJlcS5oZWFkZXJzWydjYWNoZS1jb250cm9sJ10pO1xuXG4gICAgICAgIC8vIEFzc3VtZSB0aGF0IGlmIHNvbWVvbmUgdXNlcyBsZWdhY3ksIG5vbi1zdGFuZGFyZCB1bmNlY2Vzc2FyeSBvcHRpb25zIHRoZXkgZG9uJ3QgdW5kZXJzdGFuZCBjYWNoaW5nLFxuICAgICAgICAvLyBzbyB0aGVyZSdzIG5vIHBvaW50IHN0cmljbHkgYWRoZXJpbmcgdG8gdGhlIGJsaW5kbHkgY29weSZwYXN0ZWQgZGlyZWN0aXZlcy5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgaWdub3JlQ2FyZ29DdWx0ICYmXG4gICAgICAgICAgICAncHJlLWNoZWNrJyBpbiB0aGlzLl9yZXNjYyAmJlxuICAgICAgICAgICAgJ3Bvc3QtY2hlY2snIGluIHRoaXMuX3Jlc2NjXG4gICAgICAgICkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3Jlc2NjWydwcmUtY2hlY2snXTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9yZXNjY1sncG9zdC1jaGVjayddO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3Jlc2NjWyduby1jYWNoZSddO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3Jlc2NjWyduby1zdG9yZSddO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3Jlc2NjWydtdXN0LXJldmFsaWRhdGUnXTtcbiAgICAgICAgICAgIHRoaXMuX3Jlc0hlYWRlcnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLl9yZXNIZWFkZXJzLCB7XG4gICAgICAgICAgICAgICAgJ2NhY2hlLWNvbnRyb2wnOiBmb3JtYXRDYWNoZUNvbnRyb2wodGhpcy5fcmVzY2MpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fcmVzSGVhZGVycy5leHBpcmVzO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3Jlc0hlYWRlcnMucHJhZ21hO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2hlbiB0aGUgQ2FjaGUtQ29udHJvbCBoZWFkZXIgZmllbGQgaXMgbm90IHByZXNlbnQgaW4gYSByZXF1ZXN0LCBjYWNoZXMgTVVTVCBjb25zaWRlciB0aGUgbm8tY2FjaGUgcmVxdWVzdCBwcmFnbWEtZGlyZWN0aXZlXG4gICAgICAgIC8vIGFzIGhhdmluZyB0aGUgc2FtZSBlZmZlY3QgYXMgaWYgXCJDYWNoZS1Db250cm9sOiBuby1jYWNoZVwiIHdlcmUgcHJlc2VudCAoc2VlIFNlY3Rpb24gNS4yLjEpLlxuICAgICAgICBpZiAoXG4gICAgICAgICAgICByZXMuaGVhZGVyc1snY2FjaGUtY29udHJvbCddID09IG51bGwgJiZcbiAgICAgICAgICAgIC9uby1jYWNoZS8udGVzdChyZXMuaGVhZGVycy5wcmFnbWEpXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5fcmVzY2NbJ25vLWNhY2hlJ10gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbm93KCkge1xuICAgICAgICByZXR1cm4gRGF0ZS5ub3coKTtcbiAgICB9XG5cbiAgICBzdG9yYWJsZSgpIHtcbiAgICAgICAgLy8gVGhlIFwibm8tc3RvcmVcIiByZXF1ZXN0IGRpcmVjdGl2ZSBpbmRpY2F0ZXMgdGhhdCBhIGNhY2hlIE1VU1QgTk9UIHN0b3JlIGFueSBwYXJ0IG9mIGVpdGhlciB0aGlzIHJlcXVlc3Qgb3IgYW55IHJlc3BvbnNlIHRvIGl0LlxuICAgICAgICByZXR1cm4gISEoXG4gICAgICAgICAgICAhdGhpcy5fcmVxY2NbJ25vLXN0b3JlJ10gJiZcbiAgICAgICAgICAgIC8vIEEgY2FjaGUgTVVTVCBOT1Qgc3RvcmUgYSByZXNwb25zZSB0byBhbnkgcmVxdWVzdCwgdW5sZXNzOlxuICAgICAgICAgICAgLy8gVGhlIHJlcXVlc3QgbWV0aG9kIGlzIHVuZGVyc3Rvb2QgYnkgdGhlIGNhY2hlIGFuZCBkZWZpbmVkIGFzIGJlaW5nIGNhY2hlYWJsZSwgYW5kXG4gICAgICAgICAgICAoJ0dFVCcgPT09IHRoaXMuX21ldGhvZCB8fFxuICAgICAgICAgICAgICAgICdIRUFEJyA9PT0gdGhpcy5fbWV0aG9kIHx8XG4gICAgICAgICAgICAgICAgKCdQT1NUJyA9PT0gdGhpcy5fbWV0aG9kICYmIHRoaXMuX2hhc0V4cGxpY2l0RXhwaXJhdGlvbigpKSkgJiZcbiAgICAgICAgICAgIC8vIHRoZSByZXNwb25zZSBzdGF0dXMgY29kZSBpcyB1bmRlcnN0b29kIGJ5IHRoZSBjYWNoZSwgYW5kXG4gICAgICAgICAgICB1bmRlcnN0b29kU3RhdHVzZXMuaGFzKHRoaXMuX3N0YXR1cykgJiZcbiAgICAgICAgICAgIC8vIHRoZSBcIm5vLXN0b3JlXCIgY2FjaGUgZGlyZWN0aXZlIGRvZXMgbm90IGFwcGVhciBpbiByZXF1ZXN0IG9yIHJlc3BvbnNlIGhlYWRlciBmaWVsZHMsIGFuZFxuICAgICAgICAgICAgIXRoaXMuX3Jlc2NjWyduby1zdG9yZSddICYmXG4gICAgICAgICAgICAvLyB0aGUgXCJwcml2YXRlXCIgcmVzcG9uc2UgZGlyZWN0aXZlIGRvZXMgbm90IGFwcGVhciBpbiB0aGUgcmVzcG9uc2UsIGlmIHRoZSBjYWNoZSBpcyBzaGFyZWQsIGFuZFxuICAgICAgICAgICAgKCF0aGlzLl9pc1NoYXJlZCB8fCAhdGhpcy5fcmVzY2MucHJpdmF0ZSkgJiZcbiAgICAgICAgICAgIC8vIHRoZSBBdXRob3JpemF0aW9uIGhlYWRlciBmaWVsZCBkb2VzIG5vdCBhcHBlYXIgaW4gdGhlIHJlcXVlc3QsIGlmIHRoZSBjYWNoZSBpcyBzaGFyZWQsXG4gICAgICAgICAgICAoIXRoaXMuX2lzU2hhcmVkIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5fbm9BdXRob3JpemF0aW9uIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5fYWxsb3dzU3RvcmluZ0F1dGhlbnRpY2F0ZWQoKSkgJiZcbiAgICAgICAgICAgIC8vIHRoZSByZXNwb25zZSBlaXRoZXI6XG4gICAgICAgICAgICAvLyBjb250YWlucyBhbiBFeHBpcmVzIGhlYWRlciBmaWVsZCwgb3JcbiAgICAgICAgICAgICh0aGlzLl9yZXNIZWFkZXJzLmV4cGlyZXMgfHxcbiAgICAgICAgICAgICAgICAvLyBjb250YWlucyBhIG1heC1hZ2UgcmVzcG9uc2UgZGlyZWN0aXZlLCBvclxuICAgICAgICAgICAgICAgIC8vIGNvbnRhaW5zIGEgcy1tYXhhZ2UgcmVzcG9uc2UgZGlyZWN0aXZlIGFuZCB0aGUgY2FjaGUgaXMgc2hhcmVkLCBvclxuICAgICAgICAgICAgICAgIC8vIGNvbnRhaW5zIGEgcHVibGljIHJlc3BvbnNlIGRpcmVjdGl2ZS5cbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNjY1snbWF4LWFnZSddIHx8XG4gICAgICAgICAgICAgICAgKHRoaXMuX2lzU2hhcmVkICYmIHRoaXMuX3Jlc2NjWydzLW1heGFnZSddKSB8fFxuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2NjLnB1YmxpYyB8fFxuICAgICAgICAgICAgICAgIC8vIGhhcyBhIHN0YXR1cyBjb2RlIHRoYXQgaXMgZGVmaW5lZCBhcyBjYWNoZWFibGUgYnkgZGVmYXVsdFxuICAgICAgICAgICAgICAgIHN0YXR1c0NvZGVDYWNoZWFibGVCeURlZmF1bHQuaGFzKHRoaXMuX3N0YXR1cykpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgX2hhc0V4cGxpY2l0RXhwaXJhdGlvbigpIHtcbiAgICAgICAgLy8gNC4yLjEgQ2FsY3VsYXRpbmcgRnJlc2huZXNzIExpZmV0aW1lXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAodGhpcy5faXNTaGFyZWQgJiYgdGhpcy5fcmVzY2NbJ3MtbWF4YWdlJ10pIHx8XG4gICAgICAgICAgICB0aGlzLl9yZXNjY1snbWF4LWFnZSddIHx8XG4gICAgICAgICAgICB0aGlzLl9yZXNIZWFkZXJzLmV4cGlyZXNcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBfYXNzZXJ0UmVxdWVzdEhhc0hlYWRlcnMocmVxKSB7XG4gICAgICAgIGlmICghcmVxIHx8ICFyZXEuaGVhZGVycykge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1JlcXVlc3QgaGVhZGVycyBtaXNzaW5nJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzYXRpc2ZpZXNXaXRob3V0UmV2YWxpZGF0aW9uKHJlcSkge1xuICAgICAgICB0aGlzLl9hc3NlcnRSZXF1ZXN0SGFzSGVhZGVycyhyZXEpO1xuXG4gICAgICAgIC8vIFdoZW4gcHJlc2VudGVkIHdpdGggYSByZXF1ZXN0LCBhIGNhY2hlIE1VU1QgTk9UIHJldXNlIGEgc3RvcmVkIHJlc3BvbnNlLCB1bmxlc3M6XG4gICAgICAgIC8vIHRoZSBwcmVzZW50ZWQgcmVxdWVzdCBkb2VzIG5vdCBjb250YWluIHRoZSBuby1jYWNoZSBwcmFnbWEgKFNlY3Rpb24gNS40KSwgbm9yIHRoZSBuby1jYWNoZSBjYWNoZSBkaXJlY3RpdmUsXG4gICAgICAgIC8vIHVubGVzcyB0aGUgc3RvcmVkIHJlc3BvbnNlIGlzIHN1Y2Nlc3NmdWxseSB2YWxpZGF0ZWQgKFNlY3Rpb24gNC4zKSwgYW5kXG4gICAgICAgIGNvbnN0IHJlcXVlc3RDQyA9IHBhcnNlQ2FjaGVDb250cm9sKHJlcS5oZWFkZXJzWydjYWNoZS1jb250cm9sJ10pO1xuICAgICAgICBpZiAocmVxdWVzdENDWyduby1jYWNoZSddIHx8IC9uby1jYWNoZS8udGVzdChyZXEuaGVhZGVycy5wcmFnbWEpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVxdWVzdENDWydtYXgtYWdlJ10gJiYgdGhpcy5hZ2UoKSA+IHJlcXVlc3RDQ1snbWF4LWFnZSddKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICByZXF1ZXN0Q0NbJ21pbi1mcmVzaCddICYmXG4gICAgICAgICAgICB0aGlzLnRpbWVUb0xpdmUoKSA8IDEwMDAgKiByZXF1ZXN0Q0NbJ21pbi1mcmVzaCddXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdGhlIHN0b3JlZCByZXNwb25zZSBpcyBlaXRoZXI6XG4gICAgICAgIC8vIGZyZXNoLCBvciBhbGxvd2VkIHRvIGJlIHNlcnZlZCBzdGFsZVxuICAgICAgICBpZiAodGhpcy5zdGFsZSgpKSB7XG4gICAgICAgICAgICBjb25zdCBhbGxvd3NTdGFsZSA9XG4gICAgICAgICAgICAgICAgcmVxdWVzdENDWydtYXgtc3RhbGUnXSAmJlxuICAgICAgICAgICAgICAgICF0aGlzLl9yZXNjY1snbXVzdC1yZXZhbGlkYXRlJ10gJiZcbiAgICAgICAgICAgICAgICAodHJ1ZSA9PT0gcmVxdWVzdENDWydtYXgtc3RhbGUnXSB8fFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0Q0NbJ21heC1zdGFsZSddID4gdGhpcy5hZ2UoKSAtIHRoaXMubWF4QWdlKCkpO1xuICAgICAgICAgICAgaWYgKCFhbGxvd3NTdGFsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0TWF0Y2hlcyhyZXEsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBfcmVxdWVzdE1hdGNoZXMocmVxLCBhbGxvd0hlYWRNZXRob2QpIHtcbiAgICAgICAgLy8gVGhlIHByZXNlbnRlZCBlZmZlY3RpdmUgcmVxdWVzdCBVUkkgYW5kIHRoYXQgb2YgdGhlIHN0b3JlZCByZXNwb25zZSBtYXRjaCwgYW5kXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAoIXRoaXMuX3VybCB8fCB0aGlzLl91cmwgPT09IHJlcS51cmwpICYmXG4gICAgICAgICAgICB0aGlzLl9ob3N0ID09PSByZXEuaGVhZGVycy5ob3N0ICYmXG4gICAgICAgICAgICAvLyB0aGUgcmVxdWVzdCBtZXRob2QgYXNzb2NpYXRlZCB3aXRoIHRoZSBzdG9yZWQgcmVzcG9uc2UgYWxsb3dzIGl0IHRvIGJlIHVzZWQgZm9yIHRoZSBwcmVzZW50ZWQgcmVxdWVzdCwgYW5kXG4gICAgICAgICAgICAoIXJlcS5tZXRob2QgfHxcbiAgICAgICAgICAgICAgICB0aGlzLl9tZXRob2QgPT09IHJlcS5tZXRob2QgfHxcbiAgICAgICAgICAgICAgICAoYWxsb3dIZWFkTWV0aG9kICYmICdIRUFEJyA9PT0gcmVxLm1ldGhvZCkpICYmXG4gICAgICAgICAgICAvLyBzZWxlY3RpbmcgaGVhZGVyIGZpZWxkcyBub21pbmF0ZWQgYnkgdGhlIHN0b3JlZCByZXNwb25zZSAoaWYgYW55KSBtYXRjaCB0aG9zZSBwcmVzZW50ZWQsIGFuZFxuICAgICAgICAgICAgdGhpcy5fdmFyeU1hdGNoZXMocmVxKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIF9hbGxvd3NTdG9yaW5nQXV0aGVudGljYXRlZCgpIHtcbiAgICAgICAgLy8gIGZvbGxvd2luZyBDYWNoZS1Db250cm9sIHJlc3BvbnNlIGRpcmVjdGl2ZXMgKFNlY3Rpb24gNS4yLjIpIGhhdmUgc3VjaCBhbiBlZmZlY3Q6IG11c3QtcmV2YWxpZGF0ZSwgcHVibGljLCBhbmQgcy1tYXhhZ2UuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLl9yZXNjY1snbXVzdC1yZXZhbGlkYXRlJ10gfHxcbiAgICAgICAgICAgIHRoaXMuX3Jlc2NjLnB1YmxpYyB8fFxuICAgICAgICAgICAgdGhpcy5fcmVzY2NbJ3MtbWF4YWdlJ11cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBfdmFyeU1hdGNoZXMocmVxKSB7XG4gICAgICAgIGlmICghdGhpcy5fcmVzSGVhZGVycy52YXJ5KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEEgVmFyeSBoZWFkZXIgZmllbGQtdmFsdWUgb2YgXCIqXCIgYWx3YXlzIGZhaWxzIHRvIG1hdGNoXG4gICAgICAgIGlmICh0aGlzLl9yZXNIZWFkZXJzLnZhcnkgPT09ICcqJykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZmllbGRzID0gdGhpcy5fcmVzSGVhZGVycy52YXJ5XG4gICAgICAgICAgICAudHJpbSgpXG4gICAgICAgICAgICAudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgLnNwbGl0KC9cXHMqLFxccyovKTtcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIGZpZWxkcykge1xuICAgICAgICAgICAgaWYgKHJlcS5oZWFkZXJzW25hbWVdICE9PSB0aGlzLl9yZXFIZWFkZXJzW25hbWVdKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgX2NvcHlXaXRob3V0SG9wQnlIb3BIZWFkZXJzKGluSGVhZGVycykge1xuICAgICAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiBpbkhlYWRlcnMpIHtcbiAgICAgICAgICAgIGlmIChob3BCeUhvcEhlYWRlcnNbbmFtZV0pIGNvbnRpbnVlO1xuICAgICAgICAgICAgaGVhZGVyc1tuYW1lXSA9IGluSGVhZGVyc1tuYW1lXTtcbiAgICAgICAgfVxuICAgICAgICAvLyA5LjEuICBDb25uZWN0aW9uXG4gICAgICAgIGlmIChpbkhlYWRlcnMuY29ubmVjdGlvbikge1xuICAgICAgICAgICAgY29uc3QgdG9rZW5zID0gaW5IZWFkZXJzLmNvbm5lY3Rpb24udHJpbSgpLnNwbGl0KC9cXHMqLFxccyovKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiB0b2tlbnMpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaGVhZGVycy53YXJuaW5nKSB7XG4gICAgICAgICAgICBjb25zdCB3YXJuaW5ncyA9IGhlYWRlcnMud2FybmluZy5zcGxpdCgvLC8pLmZpbHRlcih3YXJuaW5nID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIS9eXFxzKjFbMC05XVswLTldLy50ZXN0KHdhcm5pbmcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIXdhcm5pbmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBoZWFkZXJzLndhcm5pbmc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGhlYWRlcnMud2FybmluZyA9IHdhcm5pbmdzLmpvaW4oJywnKS50cmltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhlYWRlcnM7XG4gICAgfVxuXG4gICAgcmVzcG9uc2VIZWFkZXJzKCkge1xuICAgICAgICBjb25zdCBoZWFkZXJzID0gdGhpcy5fY29weVdpdGhvdXRIb3BCeUhvcEhlYWRlcnModGhpcy5fcmVzSGVhZGVycyk7XG4gICAgICAgIGNvbnN0IGFnZSA9IHRoaXMuYWdlKCk7XG5cbiAgICAgICAgLy8gQSBjYWNoZSBTSE9VTEQgZ2VuZXJhdGUgMTEzIHdhcm5pbmcgaWYgaXQgaGV1cmlzdGljYWxseSBjaG9zZSBhIGZyZXNobmVzc1xuICAgICAgICAvLyBsaWZldGltZSBncmVhdGVyIHRoYW4gMjQgaG91cnMgYW5kIHRoZSByZXNwb25zZSdzIGFnZSBpcyBncmVhdGVyIHRoYW4gMjQgaG91cnMuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGFnZSA+IDM2MDAgKiAyNCAmJlxuICAgICAgICAgICAgIXRoaXMuX2hhc0V4cGxpY2l0RXhwaXJhdGlvbigpICYmXG4gICAgICAgICAgICB0aGlzLm1heEFnZSgpID4gMzYwMCAqIDI0XG4gICAgICAgICkge1xuICAgICAgICAgICAgaGVhZGVycy53YXJuaW5nID1cbiAgICAgICAgICAgICAgICAoaGVhZGVycy53YXJuaW5nID8gYCR7aGVhZGVycy53YXJuaW5nfSwgYCA6ICcnKSArXG4gICAgICAgICAgICAgICAgJzExMyAtIFwicmZjNzIzNCA1LjUuNFwiJztcbiAgICAgICAgfVxuICAgICAgICBoZWFkZXJzLmFnZSA9IGAke01hdGgucm91bmQoYWdlKX1gO1xuICAgICAgICBoZWFkZXJzLmRhdGUgPSBuZXcgRGF0ZSh0aGlzLm5vdygpKS50b1VUQ1N0cmluZygpO1xuICAgICAgICByZXR1cm4gaGVhZGVycztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWx1ZSBvZiB0aGUgRGF0ZSByZXNwb25zZSBoZWFkZXIgb3IgY3VycmVudCB0aW1lIGlmIERhdGUgd2FzIGludmFsaWRcbiAgICAgKiBAcmV0dXJuIHRpbWVzdGFtcFxuICAgICAqL1xuICAgIGRhdGUoKSB7XG4gICAgICAgIGNvbnN0IHNlcnZlckRhdGUgPSBEYXRlLnBhcnNlKHRoaXMuX3Jlc0hlYWRlcnMuZGF0ZSk7XG4gICAgICAgIGlmIChpc0Zpbml0ZShzZXJ2ZXJEYXRlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHNlcnZlckRhdGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3BvbnNlVGltZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWx1ZSBvZiB0aGUgQWdlIGhlYWRlciwgaW4gc2Vjb25kcywgdXBkYXRlZCBmb3IgdGhlIGN1cnJlbnQgdGltZS5cbiAgICAgKiBNYXkgYmUgZnJhY3Rpb25hbC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gTnVtYmVyXG4gICAgICovXG4gICAgYWdlKCkge1xuICAgICAgICBsZXQgYWdlID0gdGhpcy5fYWdlVmFsdWUoKTtcblxuICAgICAgICBjb25zdCByZXNpZGVudFRpbWUgPSAodGhpcy5ub3coKSAtIHRoaXMuX3Jlc3BvbnNlVGltZSkgLyAxMDAwO1xuICAgICAgICByZXR1cm4gYWdlICsgcmVzaWRlbnRUaW1lO1xuICAgIH1cblxuICAgIF9hZ2VWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRvTnVtYmVyT3JaZXJvKHRoaXMuX3Jlc0hlYWRlcnMuYWdlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWx1ZSBvZiBhcHBsaWNhYmxlIG1heC1hZ2UgKG9yIGhldXJpc3RpYyBlcXVpdmFsZW50KSBpbiBzZWNvbmRzLiBUaGlzIGNvdW50cyBzaW5jZSByZXNwb25zZSdzIGBEYXRlYC5cbiAgICAgKlxuICAgICAqIEZvciBhbiB1cC10by1kYXRlIHZhbHVlLCBzZWUgYHRpbWVUb0xpdmUoKWAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIE51bWJlclxuICAgICAqL1xuICAgIG1heEFnZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnN0b3JhYmxlKCkgfHwgdGhpcy5fcmVzY2NbJ25vLWNhY2hlJ10pIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2hhcmVkIHJlc3BvbnNlcyB3aXRoIGNvb2tpZXMgYXJlIGNhY2hlYWJsZSBhY2NvcmRpbmcgdG8gdGhlIFJGQywgYnV0IElNSE8gaXQnZCBiZSB1bndpc2UgdG8gZG8gc28gYnkgZGVmYXVsdFxuICAgICAgICAvLyBzbyB0aGlzIGltcGxlbWVudGF0aW9uIHJlcXVpcmVzIGV4cGxpY2l0IG9wdC1pbiB2aWEgcHVibGljIGhlYWRlclxuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLl9pc1NoYXJlZCAmJlxuICAgICAgICAgICAgKHRoaXMuX3Jlc0hlYWRlcnNbJ3NldC1jb29raWUnXSAmJlxuICAgICAgICAgICAgICAgICF0aGlzLl9yZXNjYy5wdWJsaWMgJiZcbiAgICAgICAgICAgICAgICAhdGhpcy5fcmVzY2MuaW1tdXRhYmxlKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3Jlc0hlYWRlcnMudmFyeSA9PT0gJyonKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9pc1NoYXJlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3Jlc2NjWydwcm94eS1yZXZhbGlkYXRlJ10pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmIGEgcmVzcG9uc2UgaW5jbHVkZXMgdGhlIHMtbWF4YWdlIGRpcmVjdGl2ZSwgYSBzaGFyZWQgY2FjaGUgcmVjaXBpZW50IE1VU1QgaWdub3JlIHRoZSBFeHBpcmVzIGZpZWxkLlxuICAgICAgICAgICAgaWYgKHRoaXMuX3Jlc2NjWydzLW1heGFnZSddKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRvTnVtYmVyT3JaZXJvKHRoaXMuX3Jlc2NjWydzLW1heGFnZSddKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGEgcmVzcG9uc2UgaW5jbHVkZXMgYSBDYWNoZS1Db250cm9sIGZpZWxkIHdpdGggdGhlIG1heC1hZ2UgZGlyZWN0aXZlLCBhIHJlY2lwaWVudCBNVVNUIGlnbm9yZSB0aGUgRXhwaXJlcyBmaWVsZC5cbiAgICAgICAgaWYgKHRoaXMuX3Jlc2NjWydtYXgtYWdlJ10pIHtcbiAgICAgICAgICAgIHJldHVybiB0b051bWJlck9yWmVybyh0aGlzLl9yZXNjY1snbWF4LWFnZSddKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGRlZmF1bHRNaW5UdGwgPSB0aGlzLl9yZXNjYy5pbW11dGFibGUgPyB0aGlzLl9pbW11dGFibGVNaW5UdGwgOiAwO1xuXG4gICAgICAgIGNvbnN0IHNlcnZlckRhdGUgPSB0aGlzLmRhdGUoKTtcbiAgICAgICAgaWYgKHRoaXMuX3Jlc0hlYWRlcnMuZXhwaXJlcykge1xuICAgICAgICAgICAgY29uc3QgZXhwaXJlcyA9IERhdGUucGFyc2UodGhpcy5fcmVzSGVhZGVycy5leHBpcmVzKTtcbiAgICAgICAgICAgIC8vIEEgY2FjaGUgcmVjaXBpZW50IE1VU1QgaW50ZXJwcmV0IGludmFsaWQgZGF0ZSBmb3JtYXRzLCBlc3BlY2lhbGx5IHRoZSB2YWx1ZSBcIjBcIiwgYXMgcmVwcmVzZW50aW5nIGEgdGltZSBpbiB0aGUgcGFzdCAoaS5lLiwgXCJhbHJlYWR5IGV4cGlyZWRcIikuXG4gICAgICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKGV4cGlyZXMpIHx8IGV4cGlyZXMgPCBzZXJ2ZXJEYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoZGVmYXVsdE1pblR0bCwgKGV4cGlyZXMgLSBzZXJ2ZXJEYXRlKSAvIDEwMDApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3Jlc0hlYWRlcnNbJ2xhc3QtbW9kaWZpZWQnXSkge1xuICAgICAgICAgICAgY29uc3QgbGFzdE1vZGlmaWVkID0gRGF0ZS5wYXJzZSh0aGlzLl9yZXNIZWFkZXJzWydsYXN0LW1vZGlmaWVkJ10pO1xuICAgICAgICAgICAgaWYgKGlzRmluaXRlKGxhc3RNb2RpZmllZCkgJiYgc2VydmVyRGF0ZSA+IGxhc3RNb2RpZmllZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLm1heChcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdE1pblR0bCxcbiAgICAgICAgICAgICAgICAgICAgKChzZXJ2ZXJEYXRlIC0gbGFzdE1vZGlmaWVkKSAvIDEwMDApICogdGhpcy5fY2FjaGVIZXVyaXN0aWNcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRNaW5UdGw7XG4gICAgfVxuXG4gICAgdGltZVRvTGl2ZSgpIHtcbiAgICAgICAgY29uc3QgYWdlID0gdGhpcy5tYXhBZ2UoKSAtIHRoaXMuYWdlKCk7XG4gICAgICAgIGNvbnN0IHN0YWxlSWZFcnJvckFnZSA9IGFnZSArIHRvTnVtYmVyT3JaZXJvKHRoaXMuX3Jlc2NjWydzdGFsZS1pZi1lcnJvciddKTtcbiAgICAgICAgY29uc3Qgc3RhbGVXaGlsZVJldmFsaWRhdGVBZ2UgPSBhZ2UgKyB0b051bWJlck9yWmVybyh0aGlzLl9yZXNjY1snc3RhbGUtd2hpbGUtcmV2YWxpZGF0ZSddKTtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIGFnZSwgc3RhbGVJZkVycm9yQWdlLCBzdGFsZVdoaWxlUmV2YWxpZGF0ZUFnZSkgKiAxMDAwO1xuICAgIH1cblxuICAgIHN0YWxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXhBZ2UoKSA8PSB0aGlzLmFnZSgpO1xuICAgIH1cblxuICAgIF91c2VTdGFsZUlmRXJyb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1heEFnZSgpICsgdG9OdW1iZXJPclplcm8odGhpcy5fcmVzY2NbJ3N0YWxlLWlmLWVycm9yJ10pID4gdGhpcy5hZ2UoKTtcbiAgICB9XG5cbiAgICB1c2VTdGFsZVdoaWxlUmV2YWxpZGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF4QWdlKCkgKyB0b051bWJlck9yWmVybyh0aGlzLl9yZXNjY1snc3RhbGUtd2hpbGUtcmV2YWxpZGF0ZSddKSA+IHRoaXMuYWdlKCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21PYmplY3Qob2JqKSB7XG4gICAgICAgIHJldHVybiBuZXcgdGhpcyh1bmRlZmluZWQsIHVuZGVmaW5lZCwgeyBfZnJvbU9iamVjdDogb2JqIH0pO1xuICAgIH1cblxuICAgIF9mcm9tT2JqZWN0KG9iaikge1xuICAgICAgICBpZiAodGhpcy5fcmVzcG9uc2VUaW1lKSB0aHJvdyBFcnJvcignUmVpbml0aWFsaXplZCcpO1xuICAgICAgICBpZiAoIW9iaiB8fCBvYmoudiAhPT0gMSkgdGhyb3cgRXJyb3IoJ0ludmFsaWQgc2VyaWFsaXphdGlvbicpO1xuXG4gICAgICAgIHRoaXMuX3Jlc3BvbnNlVGltZSA9IG9iai50O1xuICAgICAgICB0aGlzLl9pc1NoYXJlZCA9IG9iai5zaDtcbiAgICAgICAgdGhpcy5fY2FjaGVIZXVyaXN0aWMgPSBvYmouY2g7XG4gICAgICAgIHRoaXMuX2ltbXV0YWJsZU1pblR0bCA9XG4gICAgICAgICAgICBvYmouaW1tICE9PSB1bmRlZmluZWQgPyBvYmouaW1tIDogMjQgKiAzNjAwICogMTAwMDtcbiAgICAgICAgdGhpcy5fc3RhdHVzID0gb2JqLnN0O1xuICAgICAgICB0aGlzLl9yZXNIZWFkZXJzID0gb2JqLnJlc2g7XG4gICAgICAgIHRoaXMuX3Jlc2NjID0gb2JqLnJlc2NjO1xuICAgICAgICB0aGlzLl9tZXRob2QgPSBvYmoubTtcbiAgICAgICAgdGhpcy5fdXJsID0gb2JqLnU7XG4gICAgICAgIHRoaXMuX2hvc3QgPSBvYmouaDtcbiAgICAgICAgdGhpcy5fbm9BdXRob3JpemF0aW9uID0gb2JqLmE7XG4gICAgICAgIHRoaXMuX3JlcUhlYWRlcnMgPSBvYmoucmVxaDtcbiAgICAgICAgdGhpcy5fcmVxY2MgPSBvYmoucmVxY2M7XG4gICAgfVxuXG4gICAgdG9PYmplY3QoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2OiAxLFxuICAgICAgICAgICAgdDogdGhpcy5fcmVzcG9uc2VUaW1lLFxuICAgICAgICAgICAgc2g6IHRoaXMuX2lzU2hhcmVkLFxuICAgICAgICAgICAgY2g6IHRoaXMuX2NhY2hlSGV1cmlzdGljLFxuICAgICAgICAgICAgaW1tOiB0aGlzLl9pbW11dGFibGVNaW5UdGwsXG4gICAgICAgICAgICBzdDogdGhpcy5fc3RhdHVzLFxuICAgICAgICAgICAgcmVzaDogdGhpcy5fcmVzSGVhZGVycyxcbiAgICAgICAgICAgIHJlc2NjOiB0aGlzLl9yZXNjYyxcbiAgICAgICAgICAgIG06IHRoaXMuX21ldGhvZCxcbiAgICAgICAgICAgIHU6IHRoaXMuX3VybCxcbiAgICAgICAgICAgIGg6IHRoaXMuX2hvc3QsXG4gICAgICAgICAgICBhOiB0aGlzLl9ub0F1dGhvcml6YXRpb24sXG4gICAgICAgICAgICByZXFoOiB0aGlzLl9yZXFIZWFkZXJzLFxuICAgICAgICAgICAgcmVxY2M6IHRoaXMuX3JlcWNjLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhlYWRlcnMgZm9yIHNlbmRpbmcgdG8gdGhlIG9yaWdpbiBzZXJ2ZXIgdG8gcmV2YWxpZGF0ZSBzdGFsZSByZXNwb25zZS5cbiAgICAgKiBBbGxvd3Mgc2VydmVyIHRvIHJldHVybiAzMDQgdG8gYWxsb3cgcmV1c2Ugb2YgdGhlIHByZXZpb3VzIHJlc3BvbnNlLlxuICAgICAqXG4gICAgICogSG9wIGJ5IGhvcCBoZWFkZXJzIGFyZSBhbHdheXMgc3RyaXBwZWQuXG4gICAgICogUmV2YWxpZGF0aW9uIGhlYWRlcnMgbWF5IGJlIGFkZGVkIG9yIHJlbW92ZWQsIGRlcGVuZGluZyBvbiByZXF1ZXN0LlxuICAgICAqL1xuICAgIHJldmFsaWRhdGlvbkhlYWRlcnMoaW5jb21pbmdSZXEpIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0UmVxdWVzdEhhc0hlYWRlcnMoaW5jb21pbmdSZXEpO1xuICAgICAgICBjb25zdCBoZWFkZXJzID0gdGhpcy5fY29weVdpdGhvdXRIb3BCeUhvcEhlYWRlcnMoaW5jb21pbmdSZXEuaGVhZGVycyk7XG5cbiAgICAgICAgLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBkb2VzIG5vdCB1bmRlcnN0YW5kIHJhbmdlIHJlcXVlc3RzXG4gICAgICAgIGRlbGV0ZSBoZWFkZXJzWydpZi1yYW5nZSddO1xuXG4gICAgICAgIGlmICghdGhpcy5fcmVxdWVzdE1hdGNoZXMoaW5jb21pbmdSZXEsIHRydWUpIHx8ICF0aGlzLnN0b3JhYmxlKCkpIHtcbiAgICAgICAgICAgIC8vIHJldmFsaWRhdGlvbiBhbGxvd2VkIHZpYSBIRUFEXG4gICAgICAgICAgICAvLyBub3QgZm9yIHRoZSBzYW1lIHJlc291cmNlLCBvciB3YXNuJ3QgYWxsb3dlZCB0byBiZSBjYWNoZWQgYW55d2F5XG4gICAgICAgICAgICBkZWxldGUgaGVhZGVyc1snaWYtbm9uZS1tYXRjaCddO1xuICAgICAgICAgICAgZGVsZXRlIGhlYWRlcnNbJ2lmLW1vZGlmaWVkLXNpbmNlJ107XG4gICAgICAgICAgICByZXR1cm4gaGVhZGVycztcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIE1VU1Qgc2VuZCB0aGF0IGVudGl0eS10YWcgaW4gYW55IGNhY2hlIHZhbGlkYXRpb24gcmVxdWVzdCAodXNpbmcgSWYtTWF0Y2ggb3IgSWYtTm9uZS1NYXRjaCkgaWYgYW4gZW50aXR5LXRhZyBoYXMgYmVlbiBwcm92aWRlZCBieSB0aGUgb3JpZ2luIHNlcnZlci4gKi9cbiAgICAgICAgaWYgKHRoaXMuX3Jlc0hlYWRlcnMuZXRhZykge1xuICAgICAgICAgICAgaGVhZGVyc1snaWYtbm9uZS1tYXRjaCddID0gaGVhZGVyc1snaWYtbm9uZS1tYXRjaCddXG4gICAgICAgICAgICAgICAgPyBgJHtoZWFkZXJzWydpZi1ub25lLW1hdGNoJ119LCAke3RoaXMuX3Jlc0hlYWRlcnMuZXRhZ31gXG4gICAgICAgICAgICAgICAgOiB0aGlzLl9yZXNIZWFkZXJzLmV0YWc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDbGllbnRzIE1BWSBpc3N1ZSBzaW1wbGUgKG5vbi1zdWJyYW5nZSkgR0VUIHJlcXVlc3RzIHdpdGggZWl0aGVyIHdlYWsgdmFsaWRhdG9ycyBvciBzdHJvbmcgdmFsaWRhdG9ycy4gQ2xpZW50cyBNVVNUIE5PVCB1c2Ugd2VhayB2YWxpZGF0b3JzIGluIG90aGVyIGZvcm1zIG9mIHJlcXVlc3QuXG4gICAgICAgIGNvbnN0IGZvcmJpZHNXZWFrVmFsaWRhdG9ycyA9XG4gICAgICAgICAgICBoZWFkZXJzWydhY2NlcHQtcmFuZ2VzJ10gfHxcbiAgICAgICAgICAgIGhlYWRlcnNbJ2lmLW1hdGNoJ10gfHxcbiAgICAgICAgICAgIGhlYWRlcnNbJ2lmLXVubW9kaWZpZWQtc2luY2UnXSB8fFxuICAgICAgICAgICAgKHRoaXMuX21ldGhvZCAmJiB0aGlzLl9tZXRob2QgIT0gJ0dFVCcpO1xuXG4gICAgICAgIC8qIFNIT1VMRCBzZW5kIHRoZSBMYXN0LU1vZGlmaWVkIHZhbHVlIGluIG5vbi1zdWJyYW5nZSBjYWNoZSB2YWxpZGF0aW9uIHJlcXVlc3RzICh1c2luZyBJZi1Nb2RpZmllZC1TaW5jZSkgaWYgb25seSBhIExhc3QtTW9kaWZpZWQgdmFsdWUgaGFzIGJlZW4gcHJvdmlkZWQgYnkgdGhlIG9yaWdpbiBzZXJ2ZXIuXG4gICAgICAgIE5vdGU6IFRoaXMgaW1wbGVtZW50YXRpb24gZG9lcyBub3QgdW5kZXJzdGFuZCBwYXJ0aWFsIHJlc3BvbnNlcyAoMjA2KSAqL1xuICAgICAgICBpZiAoZm9yYmlkc1dlYWtWYWxpZGF0b3JzKSB7XG4gICAgICAgICAgICBkZWxldGUgaGVhZGVyc1snaWYtbW9kaWZpZWQtc2luY2UnXTtcblxuICAgICAgICAgICAgaWYgKGhlYWRlcnNbJ2lmLW5vbmUtbWF0Y2gnXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGV0YWdzID0gaGVhZGVyc1snaWYtbm9uZS1tYXRjaCddXG4gICAgICAgICAgICAgICAgICAgIC5zcGxpdCgvLC8pXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZXRhZyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIS9eXFxzKldcXC8vLnRlc3QoZXRhZyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICghZXRhZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBoZWFkZXJzWydpZi1ub25lLW1hdGNoJ107XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyc1snaWYtbm9uZS1tYXRjaCddID0gZXRhZ3Muam9pbignLCcpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICB0aGlzLl9yZXNIZWFkZXJzWydsYXN0LW1vZGlmaWVkJ10gJiZcbiAgICAgICAgICAgICFoZWFkZXJzWydpZi1tb2RpZmllZC1zaW5jZSddXG4gICAgICAgICkge1xuICAgICAgICAgICAgaGVhZGVyc1snaWYtbW9kaWZpZWQtc2luY2UnXSA9IHRoaXMuX3Jlc0hlYWRlcnNbJ2xhc3QtbW9kaWZpZWQnXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBoZWFkZXJzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgbmV3IENhY2hlUG9saWN5IHdpdGggaW5mb3JtYXRpb24gY29tYmluZWQgZnJvbSB0aGUgcHJldmlld3MgcmVzcG9uc2UsXG4gICAgICogYW5kIHRoZSBuZXcgcmV2YWxpZGF0aW9uIHJlc3BvbnNlLlxuICAgICAqXG4gICAgICogUmV0dXJucyB7cG9saWN5LCBtb2RpZmllZH0gd2hlcmUgbW9kaWZpZWQgaXMgYSBib29sZWFuIGluZGljYXRpbmdcbiAgICAgKiB3aGV0aGVyIHRoZSByZXNwb25zZSBib2R5IGhhcyBiZWVuIG1vZGlmaWVkLCBhbmQgb2xkIGNhY2hlZCBib2R5IGNhbid0IGJlIHVzZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHtwb2xpY3k6IENhY2hlUG9saWN5LCBtb2RpZmllZDogQm9vbGVhbn1cbiAgICAgKi9cbiAgICByZXZhbGlkYXRlZFBvbGljeShyZXF1ZXN0LCByZXNwb25zZSkge1xuICAgICAgICB0aGlzLl9hc3NlcnRSZXF1ZXN0SGFzSGVhZGVycyhyZXF1ZXN0KTtcbiAgICAgICAgaWYodGhpcy5fdXNlU3RhbGVJZkVycm9yKCkgJiYgaXNFcnJvclJlc3BvbnNlKHJlc3BvbnNlKSkgeyAgLy8gSSBjb25zaWRlciB0aGUgcmV2YWxpZGF0aW9uIHJlcXVlc3QgdW5zdWNjZXNzZnVsXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1vZGlmaWVkOiBmYWxzZSxcbiAgICAgICAgICAgIG1hdGNoZXM6IGZhbHNlLFxuICAgICAgICAgICAgcG9saWN5OiB0aGlzLFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXNwb25zZSB8fCAhcmVzcG9uc2UuaGVhZGVycykge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1Jlc3BvbnNlIGhlYWRlcnMgbWlzc2luZycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlc2UgYXJlbid0IGdvaW5nIHRvIGJlIHN1cHBvcnRlZCBleGFjdGx5LCBzaW5jZSBvbmUgQ2FjaGVQb2xpY3kgb2JqZWN0XG4gICAgICAgIC8vIGRvZXNuJ3Qga25vdyBhYm91dCBhbGwgdGhlIG90aGVyIGNhY2hlZCBvYmplY3RzLlxuICAgICAgICBsZXQgbWF0Y2hlcyA9IGZhbHNlO1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSB1bmRlZmluZWQgJiYgcmVzcG9uc2Uuc3RhdHVzICE9IDMwNCkge1xuICAgICAgICAgICAgbWF0Y2hlcyA9IGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgcmVzcG9uc2UuaGVhZGVycy5ldGFnICYmXG4gICAgICAgICAgICAhL15cXHMqV1xcLy8udGVzdChyZXNwb25zZS5oZWFkZXJzLmV0YWcpXG4gICAgICAgICkge1xuICAgICAgICAgICAgLy8gXCJBbGwgb2YgdGhlIHN0b3JlZCByZXNwb25zZXMgd2l0aCB0aGUgc2FtZSBzdHJvbmcgdmFsaWRhdG9yIGFyZSBzZWxlY3RlZC5cbiAgICAgICAgICAgIC8vIElmIG5vbmUgb2YgdGhlIHN0b3JlZCByZXNwb25zZXMgY29udGFpbiB0aGUgc2FtZSBzdHJvbmcgdmFsaWRhdG9yLFxuICAgICAgICAgICAgLy8gdGhlbiB0aGUgY2FjaGUgTVVTVCBOT1QgdXNlIHRoZSBuZXcgcmVzcG9uc2UgdG8gdXBkYXRlIGFueSBzdG9yZWQgcmVzcG9uc2VzLlwiXG4gICAgICAgICAgICBtYXRjaGVzID1cbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNIZWFkZXJzLmV0YWcgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNIZWFkZXJzLmV0YWcucmVwbGFjZSgvXlxccypXXFwvLywgJycpID09PVxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5oZWFkZXJzLmV0YWc7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fcmVzSGVhZGVycy5ldGFnICYmIHJlc3BvbnNlLmhlYWRlcnMuZXRhZykge1xuICAgICAgICAgICAgLy8gXCJJZiB0aGUgbmV3IHJlc3BvbnNlIGNvbnRhaW5zIGEgd2VhayB2YWxpZGF0b3IgYW5kIHRoYXQgdmFsaWRhdG9yIGNvcnJlc3BvbmRzXG4gICAgICAgICAgICAvLyB0byBvbmUgb2YgdGhlIGNhY2hlJ3Mgc3RvcmVkIHJlc3BvbnNlcyxcbiAgICAgICAgICAgIC8vIHRoZW4gdGhlIG1vc3QgcmVjZW50IG9mIHRob3NlIG1hdGNoaW5nIHN0b3JlZCByZXNwb25zZXMgaXMgc2VsZWN0ZWQgZm9yIHVwZGF0ZS5cIlxuICAgICAgICAgICAgbWF0Y2hlcyA9XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVzSGVhZGVycy5ldGFnLnJlcGxhY2UoL15cXHMqV1xcLy8sICcnKSA9PT1cbiAgICAgICAgICAgICAgICByZXNwb25zZS5oZWFkZXJzLmV0YWcucmVwbGFjZSgvXlxccypXXFwvLywgJycpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3Jlc0hlYWRlcnNbJ2xhc3QtbW9kaWZpZWQnXSkge1xuICAgICAgICAgICAgbWF0Y2hlcyA9XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVzSGVhZGVyc1snbGFzdC1tb2RpZmllZCddID09PVxuICAgICAgICAgICAgICAgIHJlc3BvbnNlLmhlYWRlcnNbJ2xhc3QtbW9kaWZpZWQnXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBuZXcgcmVzcG9uc2UgZG9lcyBub3QgaW5jbHVkZSBhbnkgZm9ybSBvZiB2YWxpZGF0b3IgKHN1Y2ggYXMgaW4gdGhlIGNhc2Ugd2hlcmVcbiAgICAgICAgICAgIC8vIGEgY2xpZW50IGdlbmVyYXRlcyBhbiBJZi1Nb2RpZmllZC1TaW5jZSByZXF1ZXN0IGZyb20gYSBzb3VyY2Ugb3RoZXIgdGhhbiB0aGUgTGFzdC1Nb2RpZmllZFxuICAgICAgICAgICAgLy8gcmVzcG9uc2UgaGVhZGVyIGZpZWxkKSwgYW5kIHRoZXJlIGlzIG9ubHkgb25lIHN0b3JlZCByZXNwb25zZSwgYW5kIHRoYXQgc3RvcmVkIHJlc3BvbnNlIGFsc29cbiAgICAgICAgICAgIC8vIGxhY2tzIGEgdmFsaWRhdG9yLCB0aGVuIHRoYXQgc3RvcmVkIHJlc3BvbnNlIGlzIHNlbGVjdGVkIGZvciB1cGRhdGUuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgIXRoaXMuX3Jlc0hlYWRlcnMuZXRhZyAmJlxuICAgICAgICAgICAgICAgICF0aGlzLl9yZXNIZWFkZXJzWydsYXN0LW1vZGlmaWVkJ10gJiZcbiAgICAgICAgICAgICAgICAhcmVzcG9uc2UuaGVhZGVycy5ldGFnICYmXG4gICAgICAgICAgICAgICAgIXJlc3BvbnNlLmhlYWRlcnNbJ2xhc3QtbW9kaWZpZWQnXVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hlcyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcG9saWN5OiBuZXcgdGhpcy5jb25zdHJ1Y3RvcihyZXF1ZXN0LCByZXNwb25zZSksXG4gICAgICAgICAgICAgICAgLy8gQ2xpZW50IHJlY2VpdmluZyAzMDQgd2l0aG91dCBib2R5LCBldmVuIGlmIGl0J3MgaW52YWxpZC9taXNtYXRjaGVkIGhhcyBubyBvcHRpb25cbiAgICAgICAgICAgICAgICAvLyBidXQgdG8gcmV1c2UgYSBjYWNoZWQgYm9keS4gV2UgZG9uJ3QgaGF2ZSBhIGdvb2Qgd2F5IHRvIHRlbGwgY2xpZW50cyB0byBkb1xuICAgICAgICAgICAgICAgIC8vIGVycm9yIHJlY292ZXJ5IGluIHN1Y2ggY2FzZS5cbiAgICAgICAgICAgICAgICBtb2RpZmllZDogcmVzcG9uc2Uuc3RhdHVzICE9IDMwNCxcbiAgICAgICAgICAgICAgICBtYXRjaGVzOiBmYWxzZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1c2Ugb3RoZXIgaGVhZGVyIGZpZWxkcyBwcm92aWRlZCBpbiB0aGUgMzA0IChOb3QgTW9kaWZpZWQpIHJlc3BvbnNlIHRvIHJlcGxhY2UgYWxsIGluc3RhbmNlc1xuICAgICAgICAvLyBvZiB0aGUgY29ycmVzcG9uZGluZyBoZWFkZXIgZmllbGRzIGluIHRoZSBzdG9yZWQgcmVzcG9uc2UuXG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrIGluIHRoaXMuX3Jlc0hlYWRlcnMpIHtcbiAgICAgICAgICAgIGhlYWRlcnNba10gPVxuICAgICAgICAgICAgICAgIGsgaW4gcmVzcG9uc2UuaGVhZGVycyAmJiAhZXhjbHVkZWRGcm9tUmV2YWxpZGF0aW9uVXBkYXRlW2tdXG4gICAgICAgICAgICAgICAgICAgID8gcmVzcG9uc2UuaGVhZGVyc1trXVxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuX3Jlc0hlYWRlcnNba107XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBuZXdSZXNwb25zZSA9IE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLCB7XG4gICAgICAgICAgICBzdGF0dXM6IHRoaXMuX3N0YXR1cyxcbiAgICAgICAgICAgIG1ldGhvZDogdGhpcy5fbWV0aG9kLFxuICAgICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwb2xpY3k6IG5ldyB0aGlzLmNvbnN0cnVjdG9yKHJlcXVlc3QsIG5ld1Jlc3BvbnNlLCB7XG4gICAgICAgICAgICAgICAgc2hhcmVkOiB0aGlzLl9pc1NoYXJlZCxcbiAgICAgICAgICAgICAgICBjYWNoZUhldXJpc3RpYzogdGhpcy5fY2FjaGVIZXVyaXN0aWMsXG4gICAgICAgICAgICAgICAgaW1tdXRhYmxlTWluVGltZVRvTGl2ZTogdGhpcy5faW1tdXRhYmxlTWluVHRsLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBtb2RpZmllZDogZmFsc2UsXG4gICAgICAgICAgICBtYXRjaGVzOiB0cnVlLFxuICAgICAgICB9O1xuICAgIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5jb25zdCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKTtcbmNvbnN0IHRscyA9IHJlcXVpcmUoJ3RscycpO1xuY29uc3QgaHR0cDIgPSByZXF1aXJlKCdodHRwMicpO1xuY29uc3QgUXVpY2tMUlUgPSByZXF1aXJlKCdxdWljay1scnUnKTtcblxuY29uc3Qga0N1cnJlbnRTdHJlYW1zQ291bnQgPSBTeW1ib2woJ2N1cnJlbnRTdHJlYW1zQ291bnQnKTtcbmNvbnN0IGtSZXF1ZXN0ID0gU3ltYm9sKCdyZXF1ZXN0Jyk7XG5jb25zdCBrT3JpZ2luU2V0ID0gU3ltYm9sKCdjYWNoZWRPcmlnaW5TZXQnKTtcbmNvbnN0IGtHcmFjZWZ1bGx5Q2xvc2luZyA9IFN5bWJvbCgnZ3JhY2VmdWxseUNsb3NpbmcnKTtcblxuY29uc3QgbmFtZUtleXMgPSBbXG5cdC8vIGBodHRwMi5jb25uZWN0KClgIG9wdGlvbnNcblx0J21heERlZmxhdGVEeW5hbWljVGFibGVTaXplJyxcblx0J21heFNlc3Npb25NZW1vcnknLFxuXHQnbWF4SGVhZGVyTGlzdFBhaXJzJyxcblx0J21heE91dHN0YW5kaW5nUGluZ3MnLFxuXHQnbWF4UmVzZXJ2ZWRSZW1vdGVTdHJlYW1zJyxcblx0J21heFNlbmRIZWFkZXJCbG9ja0xlbmd0aCcsXG5cdCdwYWRkaW5nU3RyYXRlZ3knLFxuXG5cdC8vIGB0bHMuY29ubmVjdCgpYCBvcHRpb25zXG5cdCdsb2NhbEFkZHJlc3MnLFxuXHQncGF0aCcsXG5cdCdyZWplY3RVbmF1dGhvcml6ZWQnLFxuXHQnbWluREhTaXplJyxcblxuXHQvLyBgdGxzLmNyZWF0ZVNlY3VyZUNvbnRleHQoKWAgb3B0aW9uc1xuXHQnY2EnLFxuXHQnY2VydCcsXG5cdCdjbGllbnRDZXJ0RW5naW5lJyxcblx0J2NpcGhlcnMnLFxuXHQna2V5Jyxcblx0J3BmeCcsXG5cdCdzZXJ2ZXJuYW1lJyxcblx0J21pblZlcnNpb24nLFxuXHQnbWF4VmVyc2lvbicsXG5cdCdzZWN1cmVQcm90b2NvbCcsXG5cdCdjcmwnLFxuXHQnaG9ub3JDaXBoZXJPcmRlcicsXG5cdCdlY2RoQ3VydmUnLFxuXHQnZGhwYXJhbScsXG5cdCdzZWN1cmVPcHRpb25zJyxcblx0J3Nlc3Npb25JZENvbnRleHQnXG5dO1xuXG5jb25zdCBnZXRTb3J0ZWRJbmRleCA9IChhcnJheSwgdmFsdWUsIGNvbXBhcmUpID0+IHtcblx0bGV0IGxvdyA9IDA7XG5cdGxldCBoaWdoID0gYXJyYXkubGVuZ3RoO1xuXG5cdHdoaWxlIChsb3cgPCBoaWdoKSB7XG5cdFx0Y29uc3QgbWlkID0gKGxvdyArIGhpZ2gpID4+PiAxO1xuXG5cdFx0LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblx0XHRpZiAoY29tcGFyZShhcnJheVttaWRdLCB2YWx1ZSkpIHtcblx0XHRcdC8vIFRoaXMgbmV2ZXIgZ2V0cyBjYWxsZWQgYmVjYXVzZSB3ZSB1c2UgZGVzY2VuZGluZyBzb3J0LiBCZXR0ZXIgdG8gaGF2ZSB0aGlzIGFueXdheS5cblx0XHRcdGxvdyA9IG1pZCArIDE7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGhpZ2ggPSBtaWQ7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGxvdztcbn07XG5cbmNvbnN0IGNvbXBhcmVTZXNzaW9ucyA9IChhLCBiKSA9PiB7XG5cdHJldHVybiBhLnJlbW90ZVNldHRpbmdzLm1heENvbmN1cnJlbnRTdHJlYW1zID4gYi5yZW1vdGVTZXR0aW5ncy5tYXhDb25jdXJyZW50U3RyZWFtcztcbn07XG5cbi8vIFNlZSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjODMzNlxuY29uc3QgY2xvc2VDb3ZlcmVkU2Vzc2lvbnMgPSAod2hlcmUsIHNlc3Npb24pID0+IHtcblx0Ly8gQ2xpZW50cyBTSE9VTEQgTk9UIGVtaXQgbmV3IHJlcXVlc3RzIG9uIGFueSBjb25uZWN0aW9uIHdob3NlIE9yaWdpblxuXHQvLyBTZXQgaXMgYSBwcm9wZXIgc3Vic2V0IG9mIGFub3RoZXIgY29ubmVjdGlvbidzIE9yaWdpbiBTZXQsIGFuZCB0aGV5XG5cdC8vIFNIT1VMRCBjbG9zZSBpdCBvbmNlIGFsbCBvdXRzdGFuZGluZyByZXF1ZXN0cyBhcmUgc2F0aXNmaWVkLlxuXHRmb3IgKGNvbnN0IGNvdmVyZWRTZXNzaW9uIG9mIHdoZXJlKSB7XG5cdFx0aWYgKFxuXHRcdFx0Ly8gVGhlIHNldCBpcyBhIHByb3BlciBzdWJzZXQgd2hlbiBpdHMgbGVuZ3RoIGlzIGxlc3MgdGhhbiB0aGUgb3RoZXIgc2V0LlxuXHRcdFx0Y292ZXJlZFNlc3Npb25ba09yaWdpblNldF0ubGVuZ3RoIDwgc2Vzc2lvbltrT3JpZ2luU2V0XS5sZW5ndGggJiZcblxuXHRcdFx0Ly8gQW5kIHRoZSBvdGhlciBzZXQgaW5jbHVkZXMgYWxsIGVsZW1lbnRzIG9mIHRoZSBzdWJzZXQuXG5cdFx0XHRjb3ZlcmVkU2Vzc2lvbltrT3JpZ2luU2V0XS5ldmVyeShvcmlnaW4gPT4gc2Vzc2lvbltrT3JpZ2luU2V0XS5pbmNsdWRlcyhvcmlnaW4pKSAmJlxuXG5cdFx0XHQvLyBNYWtlcyBzdXJlIHRoYXQgdGhlIHNlc3Npb24gY2FuIGhhbmRsZSBhbGwgcmVxdWVzdHMgZnJvbSB0aGUgY292ZXJlZCBzZXNzaW9uLlxuXHRcdFx0Y292ZXJlZFNlc3Npb25ba0N1cnJlbnRTdHJlYW1zQ291bnRdICsgc2Vzc2lvbltrQ3VycmVudFN0cmVhbXNDb3VudF0gPD0gc2Vzc2lvbi5yZW1vdGVTZXR0aW5ncy5tYXhDb25jdXJyZW50U3RyZWFtc1xuXHRcdCkge1xuXHRcdFx0Ly8gVGhpcyBhbGxvd3MgcGVuZGluZyByZXF1ZXN0cyB0byBmaW5pc2ggYW5kIHByZXZlbnRzIG1ha2luZyBuZXcgcmVxdWVzdHMuXG5cdFx0XHRncmFjZWZ1bGx5Q2xvc2UoY292ZXJlZFNlc3Npb24pO1xuXHRcdH1cblx0fVxufTtcblxuLy8gVGhpcyBpcyBiYXNpY2FsbHkgaW52ZXJ0ZWQgYGNsb3NlQ292ZXJlZFNlc3Npb25zKC4uLilgLlxuY29uc3QgY2xvc2VTZXNzaW9uSWZDb3ZlcmVkID0gKHdoZXJlLCBjb3ZlcmVkU2Vzc2lvbikgPT4ge1xuXHRmb3IgKGNvbnN0IHNlc3Npb24gb2Ygd2hlcmUpIHtcblx0XHRpZiAoXG5cdFx0XHRjb3ZlcmVkU2Vzc2lvbltrT3JpZ2luU2V0XS5sZW5ndGggPCBzZXNzaW9uW2tPcmlnaW5TZXRdLmxlbmd0aCAmJlxuXHRcdFx0Y292ZXJlZFNlc3Npb25ba09yaWdpblNldF0uZXZlcnkob3JpZ2luID0+IHNlc3Npb25ba09yaWdpblNldF0uaW5jbHVkZXMob3JpZ2luKSkgJiZcblx0XHRcdGNvdmVyZWRTZXNzaW9uW2tDdXJyZW50U3RyZWFtc0NvdW50XSArIHNlc3Npb25ba0N1cnJlbnRTdHJlYW1zQ291bnRdIDw9IHNlc3Npb24ucmVtb3RlU2V0dGluZ3MubWF4Q29uY3VycmVudFN0cmVhbXNcblx0XHQpIHtcblx0XHRcdGdyYWNlZnVsbHlDbG9zZShjb3ZlcmVkU2Vzc2lvbik7XG5cdFx0fVxuXHR9XG59O1xuXG5jb25zdCBnZXRTZXNzaW9ucyA9ICh7YWdlbnQsIGlzRnJlZX0pID0+IHtcblx0Y29uc3QgcmVzdWx0ID0ge307XG5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pblxuXHRmb3IgKGNvbnN0IG5vcm1hbGl6ZWRPcHRpb25zIGluIGFnZW50LnNlc3Npb25zKSB7XG5cdFx0Y29uc3Qgc2Vzc2lvbnMgPSBhZ2VudC5zZXNzaW9uc1tub3JtYWxpemVkT3B0aW9uc107XG5cblx0XHRjb25zdCBmaWx0ZXJlZCA9IHNlc3Npb25zLmZpbHRlcihzZXNzaW9uID0+IHtcblx0XHRcdGNvbnN0IHJlc3VsdCA9IHNlc3Npb25bQWdlbnQua0N1cnJlbnRTdHJlYW1zQ291bnRdIDwgc2Vzc2lvbi5yZW1vdGVTZXR0aW5ncy5tYXhDb25jdXJyZW50U3RyZWFtcztcblxuXHRcdFx0cmV0dXJuIGlzRnJlZSA/IHJlc3VsdCA6ICFyZXN1bHQ7XG5cdFx0fSk7XG5cblx0XHRpZiAoZmlsdGVyZWQubGVuZ3RoICE9PSAwKSB7XG5cdFx0XHRyZXN1bHRbbm9ybWFsaXplZE9wdGlvbnNdID0gZmlsdGVyZWQ7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG5cbmNvbnN0IGdyYWNlZnVsbHlDbG9zZSA9IHNlc3Npb24gPT4ge1xuXHRzZXNzaW9uW2tHcmFjZWZ1bGx5Q2xvc2luZ10gPSB0cnVlO1xuXG5cdGlmIChzZXNzaW9uW2tDdXJyZW50U3RyZWFtc0NvdW50XSA9PT0gMCkge1xuXHRcdHNlc3Npb24uY2xvc2UoKTtcblx0fVxufTtcblxuY2xhc3MgQWdlbnQgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuXHRjb25zdHJ1Y3Rvcih7dGltZW91dCA9IDYwMDAwLCBtYXhTZXNzaW9ucyA9IEluZmluaXR5LCBtYXhGcmVlU2Vzc2lvbnMgPSAxMCwgbWF4Q2FjaGVkVGxzU2Vzc2lvbnMgPSAxMDB9ID0ge30pIHtcblx0XHRzdXBlcigpO1xuXG5cdFx0Ly8gQSBzZXNzaW9uIGlzIGNvbnNpZGVyZWQgYnVzeSB3aGVuIGl0cyBjdXJyZW50IHN0cmVhbXMgY291bnRcblx0XHQvLyBpcyBlcXVhbCB0byBvciBncmVhdGVyIHRoYW4gdGhlIGBtYXhDb25jdXJyZW50U3RyZWFtc2AgdmFsdWUuXG5cblx0XHQvLyBBIHNlc3Npb24gaXMgY29uc2lkZXJlZCBmcmVlIHdoZW4gaXRzIGN1cnJlbnQgc3RyZWFtcyBjb3VudFxuXHRcdC8vIGlzIGxlc3MgdGhhbiB0aGUgYG1heENvbmN1cnJlbnRTdHJlYW1zYCB2YWx1ZS5cblxuXHRcdC8vIFNFU1NJT05TW05PUk1BTElaRURfT1BUSU9OU10gPSBbXTtcblx0XHR0aGlzLnNlc3Npb25zID0ge307XG5cblx0XHQvLyBUaGUgcXVldWUgZm9yIGNyZWF0aW5nIG5ldyBzZXNzaW9ucy4gSXQgbG9va3MgbGlrZSB0aGlzOlxuXHRcdC8vIFFVRVVFW05PUk1BTElaRURfT1BUSU9OU11bTk9STUFMSVpFRF9PUklHSU5dID0gRU5UUllfRlVOQ1RJT05cblx0XHQvL1xuXHRcdC8vIFRoZSBlbnRyeSBmdW5jdGlvbiBoYXMgYGxpc3RlbmVyc2AsIGBjb21wbGV0ZWRgIGFuZCBgZGVzdHJveWVkYCBwcm9wZXJ0aWVzLlxuXHRcdC8vIGBsaXN0ZW5lcnNgIGlzIGFuIGFycmF5IG9mIG9iamVjdHMgY29udGFpbmluZyBgcmVzb2x2ZWAgYW5kIGByZWplY3RgIGZ1bmN0aW9ucy5cblx0XHQvLyBgY29tcGxldGVkYCBpcyBhIGJvb2xlYW4uIEl0J3Mgc2V0IHRvIHRydWUgYWZ0ZXIgRU5UUllfRlVOQ1RJT04gaXMgZXhlY3V0ZWQuXG5cdFx0Ly8gYGRlc3Ryb3llZGAgaXMgYSBib29sZWFuLiBJZiBpdCdzIHNldCB0byB0cnVlLCB0aGUgc2Vzc2lvbiB3aWxsIGJlIGRlc3Ryb3llZCBpZiBoYXNuJ3QgY29ubmVjdGVkIHlldC5cblx0XHR0aGlzLnF1ZXVlID0ge307XG5cblx0XHQvLyBFYWNoIHNlc3Npb24gd2lsbCB1c2UgdGhpcyB0aW1lb3V0IHZhbHVlLlxuXHRcdHRoaXMudGltZW91dCA9IHRpbWVvdXQ7XG5cblx0XHQvLyBNYXggc2Vzc2lvbnMgaW4gdG90YWxcblx0XHR0aGlzLm1heFNlc3Npb25zID0gbWF4U2Vzc2lvbnM7XG5cblx0XHQvLyBNYXggZnJlZSBzZXNzaW9ucyBpbiB0b3RhbFxuXHRcdC8vIFRPRE86IGRlY3JlYXNpbmcgYG1heEZyZWVTZXNzaW9uc2Agc2hvdWxkIGNsb3NlIHNvbWUgc2Vzc2lvbnNcblx0XHR0aGlzLm1heEZyZWVTZXNzaW9ucyA9IG1heEZyZWVTZXNzaW9ucztcblxuXHRcdHRoaXMuX2ZyZWVTZXNzaW9uc0NvdW50ID0gMDtcblx0XHR0aGlzLl9zZXNzaW9uc0NvdW50ID0gMDtcblxuXHRcdC8vIFdlIGRvbid0IHN1cHBvcnQgcHVzaCBzdHJlYW1zIGJ5IGRlZmF1bHQuXG5cdFx0dGhpcy5zZXR0aW5ncyA9IHtcblx0XHRcdGVuYWJsZVB1c2g6IGZhbHNlXG5cdFx0fTtcblxuXHRcdC8vIFJldXNpbmcgVExTIHNlc3Npb25zIGluY3JlYXNlcyBwZXJmb3JtYW5jZS5cblx0XHR0aGlzLnRsc1Nlc3Npb25DYWNoZSA9IG5ldyBRdWlja0xSVSh7bWF4U2l6ZTogbWF4Q2FjaGVkVGxzU2Vzc2lvbnN9KTtcblx0fVxuXG5cdHN0YXRpYyBub3JtYWxpemVPcmlnaW4odXJsLCBzZXJ2ZXJuYW1lKSB7XG5cdFx0aWYgKHR5cGVvZiB1cmwgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHR1cmwgPSBuZXcgVVJMKHVybCk7XG5cdFx0fVxuXG5cdFx0aWYgKHNlcnZlcm5hbWUgJiYgdXJsLmhvc3RuYW1lICE9PSBzZXJ2ZXJuYW1lKSB7XG5cdFx0XHR1cmwuaG9zdG5hbWUgPSBzZXJ2ZXJuYW1lO1xuXHRcdH1cblxuXHRcdHJldHVybiB1cmwub3JpZ2luO1xuXHR9XG5cblx0bm9ybWFsaXplT3B0aW9ucyhvcHRpb25zKSB7XG5cdFx0bGV0IG5vcm1hbGl6ZWQgPSAnJztcblxuXHRcdGlmIChvcHRpb25zKSB7XG5cdFx0XHRmb3IgKGNvbnN0IGtleSBvZiBuYW1lS2V5cykge1xuXHRcdFx0XHRpZiAob3B0aW9uc1trZXldKSB7XG5cdFx0XHRcdFx0bm9ybWFsaXplZCArPSBgOiR7b3B0aW9uc1trZXldfWA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbm9ybWFsaXplZDtcblx0fVxuXG5cdF90cnlUb0NyZWF0ZU5ld1Nlc3Npb24obm9ybWFsaXplZE9wdGlvbnMsIG5vcm1hbGl6ZWRPcmlnaW4pIHtcblx0XHRpZiAoIShub3JtYWxpemVkT3B0aW9ucyBpbiB0aGlzLnF1ZXVlKSB8fCAhKG5vcm1hbGl6ZWRPcmlnaW4gaW4gdGhpcy5xdWV1ZVtub3JtYWxpemVkT3B0aW9uc10pKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgaXRlbSA9IHRoaXMucXVldWVbbm9ybWFsaXplZE9wdGlvbnNdW25vcm1hbGl6ZWRPcmlnaW5dO1xuXG5cdFx0Ly8gVGhlIGVudHJ5IGZ1bmN0aW9uIGNhbiBiZSBydW4gb25seSBvbmNlLlxuXHRcdC8vIEJVRzogVGhlIHNlc3Npb24gbWF5IGJlIG5ldmVyIGNyZWF0ZWQgd2hlbjpcblx0XHQvLyAtIHRoZSBmaXJzdCBjb25kaXRpb24gaXMgZmFsc2UgQU5EXG5cdFx0Ly8gLSB0aGlzIGZ1bmN0aW9uIGlzIG5ldmVyIGNhbGxlZCB3aXRoIHRoZSBzYW1lIGFyZ3VtZW50cyBpbiB0aGUgZnV0dXJlLlxuXHRcdGlmICh0aGlzLl9zZXNzaW9uc0NvdW50IDwgdGhpcy5tYXhTZXNzaW9ucyAmJiAhaXRlbS5jb21wbGV0ZWQpIHtcblx0XHRcdGl0ZW0uY29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0aXRlbSgpO1xuXHRcdH1cblx0fVxuXG5cdGdldFNlc3Npb24ob3JpZ2luLCBvcHRpb25zLCBsaXN0ZW5lcnMpIHtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0aWYgKEFycmF5LmlzQXJyYXkobGlzdGVuZXJzKSkge1xuXHRcdFx0XHRsaXN0ZW5lcnMgPSBbLi4ubGlzdGVuZXJzXTtcblxuXHRcdFx0XHQvLyBSZXNvbHZlIHRoZSBjdXJyZW50IHByb21pc2UgQVNBUCwgd2UncmUganVzdCBtb3ZpbmcgdGhlIGxpc3RlbmVycy5cblx0XHRcdFx0Ly8gVGhleSB3aWxsIGJlIGV4ZWN1dGVkIGF0IGEgZGlmZmVyZW50IHRpbWUuXG5cdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxpc3RlbmVycyA9IFt7cmVzb2x2ZSwgcmVqZWN0fV07XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IG5vcm1hbGl6ZWRPcHRpb25zID0gdGhpcy5ub3JtYWxpemVPcHRpb25zKG9wdGlvbnMpO1xuXHRcdFx0Y29uc3Qgbm9ybWFsaXplZE9yaWdpbiA9IEFnZW50Lm5vcm1hbGl6ZU9yaWdpbihvcmlnaW4sIG9wdGlvbnMgJiYgb3B0aW9ucy5zZXJ2ZXJuYW1lKTtcblxuXHRcdFx0aWYgKG5vcm1hbGl6ZWRPcmlnaW4gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRmb3IgKGNvbnN0IHtyZWplY3R9IG9mIGxpc3RlbmVycykge1xuXHRcdFx0XHRcdHJlamVjdChuZXcgVHlwZUVycm9yKCdUaGUgYG9yaWdpbmAgYXJndW1lbnQgbmVlZHMgdG8gYmUgYSBzdHJpbmcgb3IgYW4gVVJMIG9iamVjdCcpKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKG5vcm1hbGl6ZWRPcHRpb25zIGluIHRoaXMuc2Vzc2lvbnMpIHtcblx0XHRcdFx0Y29uc3Qgc2Vzc2lvbnMgPSB0aGlzLnNlc3Npb25zW25vcm1hbGl6ZWRPcHRpb25zXTtcblxuXHRcdFx0XHRsZXQgbWF4Q29uY3VycmVudFN0cmVhbXMgPSAtMTtcblx0XHRcdFx0bGV0IGN1cnJlbnRTdHJlYW1zQ291bnQgPSAtMTtcblx0XHRcdFx0bGV0IG9wdGltYWxTZXNzaW9uO1xuXG5cdFx0XHRcdC8vIFdlIGNvdWxkIGp1c3QgZG8gdGhpcy5zZXNzaW9uc1tub3JtYWxpemVkT3B0aW9uc10uZmluZCguLi4pIGJ1dCB0aGF0IGlzbid0IG9wdGltYWwuXG5cdFx0XHRcdC8vIEFkZGl0aW9uYWxseSwgd2UgYXJlIGxvb2tpbmcgZm9yIHNlc3Npb24gd2hpY2ggaGFzIGJpZ2dlc3QgY3VycmVudCBwZW5kaW5nIHN0cmVhbXMgY291bnQuXG5cdFx0XHRcdGZvciAoY29uc3Qgc2Vzc2lvbiBvZiBzZXNzaW9ucykge1xuXHRcdFx0XHRcdGNvbnN0IHNlc3Npb25NYXhDb25jdXJyZW50U3RyZWFtcyA9IHNlc3Npb24ucmVtb3RlU2V0dGluZ3MubWF4Q29uY3VycmVudFN0cmVhbXM7XG5cblx0XHRcdFx0XHRpZiAoc2Vzc2lvbk1heENvbmN1cnJlbnRTdHJlYW1zIDwgbWF4Q29uY3VycmVudFN0cmVhbXMpIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChzZXNzaW9uW2tPcmlnaW5TZXRdLmluY2x1ZGVzKG5vcm1hbGl6ZWRPcmlnaW4pKSB7XG5cdFx0XHRcdFx0XHRjb25zdCBzZXNzaW9uQ3VycmVudFN0cmVhbXNDb3VudCA9IHNlc3Npb25ba0N1cnJlbnRTdHJlYW1zQ291bnRdO1xuXG5cdFx0XHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0XHRcdHNlc3Npb25DdXJyZW50U3RyZWFtc0NvdW50ID49IHNlc3Npb25NYXhDb25jdXJyZW50U3RyZWFtcyB8fFxuXHRcdFx0XHRcdFx0XHRzZXNzaW9uW2tHcmFjZWZ1bGx5Q2xvc2luZ10gfHxcblx0XHRcdFx0XHRcdFx0Ly8gVW5mb3J0dW5hdGVseSB0aGUgYGNsb3NlYCBldmVudCBpc24ndCBjYWxsZWQgaW1tZWRpYXRlbHksXG5cdFx0XHRcdFx0XHRcdC8vIHNvIGBzZXNzaW9uLmRlc3Ryb3llZGAgaXMgYHRydWVgLCBidXQgYHNlc3Npb24uY2xvc2VkYCBpcyBgZmFsc2VgLlxuXHRcdFx0XHRcdFx0XHRzZXNzaW9uLmRlc3Ryb3llZFxuXHRcdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBXZSBvbmx5IG5lZWQgc2V0IHRoaXMgb25jZS5cblx0XHRcdFx0XHRcdGlmICghb3B0aW1hbFNlc3Npb24pIHtcblx0XHRcdFx0XHRcdFx0bWF4Q29uY3VycmVudFN0cmVhbXMgPSBzZXNzaW9uTWF4Q29uY3VycmVudFN0cmVhbXM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIFdlJ3JlIGxvb2tpbmcgZm9yIHRoZSBzZXNzaW9uIHdoaWNoIGhhcyBiaWdnZXN0IGN1cnJlbnQgcGVuZGluZyBzdHJlYW0gY291bnQsXG5cdFx0XHRcdFx0XHQvLyBpbiBvcmRlciB0byBtaW5pbWFsaXplIHRoZSBhbW91bnQgb2YgYWN0aXZlIHNlc3Npb25zLlxuXHRcdFx0XHRcdFx0aWYgKHNlc3Npb25DdXJyZW50U3RyZWFtc0NvdW50ID4gY3VycmVudFN0cmVhbXNDb3VudCkge1xuXHRcdFx0XHRcdFx0XHRvcHRpbWFsU2Vzc2lvbiA9IHNlc3Npb247XG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRTdHJlYW1zQ291bnQgPSBzZXNzaW9uQ3VycmVudFN0cmVhbXNDb3VudDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAob3B0aW1hbFNlc3Npb24pIHtcblx0XHRcdFx0XHQvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogc2FmZXR5IGNoZWNrICovXG5cdFx0XHRcdFx0aWYgKGxpc3RlbmVycy5sZW5ndGggIT09IDEpIHtcblx0XHRcdFx0XHRcdGZvciAoY29uc3Qge3JlamVjdH0gb2YgbGlzdGVuZXJzKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IGVycm9yID0gbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0XHRcdGBFeHBlY3RlZCB0aGUgbGVuZ3RoIG9mIGxpc3RlbmVycyB0byBiZSAxLCBnb3QgJHtsaXN0ZW5lcnMubGVuZ3RofS5cXG5gICtcblx0XHRcdFx0XHRcdFx0XHQnUGxlYXNlIHJlcG9ydCB0aGlzIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9zem1hcmN6YWsvaHR0cDItd3JhcHBlci8nXG5cdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGxpc3RlbmVyc1swXS5yZXNvbHZlKG9wdGltYWxTZXNzaW9uKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKG5vcm1hbGl6ZWRPcHRpb25zIGluIHRoaXMucXVldWUpIHtcblx0XHRcdFx0aWYgKG5vcm1hbGl6ZWRPcmlnaW4gaW4gdGhpcy5xdWV1ZVtub3JtYWxpemVkT3B0aW9uc10pIHtcblx0XHRcdFx0XHQvLyBUaGVyZSdzIGFscmVhZHkgYW4gaXRlbSBpbiB0aGUgcXVldWUsIGp1c3QgYXR0YWNoIG91cnNlbHZlcyB0byBpdC5cblx0XHRcdFx0XHR0aGlzLnF1ZXVlW25vcm1hbGl6ZWRPcHRpb25zXVtub3JtYWxpemVkT3JpZ2luXS5saXN0ZW5lcnMucHVzaCguLi5saXN0ZW5lcnMpO1xuXG5cdFx0XHRcdFx0Ly8gVGhpcyBzaG91bGRuJ3QgYmUgZXhlY3V0ZWQgaGVyZS5cblx0XHRcdFx0XHQvLyBTZWUgdGhlIGNvbW1lbnQgaW5zaWRlIF90cnlUb0NyZWF0ZU5ld1Nlc3Npb24uXG5cdFx0XHRcdFx0dGhpcy5fdHJ5VG9DcmVhdGVOZXdTZXNzaW9uKG5vcm1hbGl6ZWRPcHRpb25zLCBub3JtYWxpemVkT3JpZ2luKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMucXVldWVbbm9ybWFsaXplZE9wdGlvbnNdID0ge307XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbnRyeSBtdXN0IGJlIHJlbW92ZWQgZnJvbSB0aGUgcXVldWUgSU1NRURJQVRFTFkgd2hlbjpcblx0XHRcdC8vIDEuIHRoZSBzZXNzaW9uIGNvbm5lY3RzIHN1Y2Nlc3NmdWxseSxcblx0XHRcdC8vIDIuIGFuIGVycm9yIG9jY3Vycy5cblx0XHRcdGNvbnN0IHJlbW92ZUZyb21RdWV1ZSA9ICgpID0+IHtcblx0XHRcdFx0Ly8gT3VyIGVudHJ5IGNhbiBiZSByZXBsYWNlZC4gV2UgY2Fubm90IHJlbW92ZSB0aGUgbmV3IG9uZS5cblx0XHRcdFx0aWYgKG5vcm1hbGl6ZWRPcHRpb25zIGluIHRoaXMucXVldWUgJiYgdGhpcy5xdWV1ZVtub3JtYWxpemVkT3B0aW9uc11bbm9ybWFsaXplZE9yaWdpbl0gPT09IGVudHJ5KSB7XG5cdFx0XHRcdFx0ZGVsZXRlIHRoaXMucXVldWVbbm9ybWFsaXplZE9wdGlvbnNdW25vcm1hbGl6ZWRPcmlnaW5dO1xuXG5cdFx0XHRcdFx0aWYgKE9iamVjdC5rZXlzKHRoaXMucXVldWVbbm9ybWFsaXplZE9wdGlvbnNdKS5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0XHRcdGRlbGV0ZSB0aGlzLnF1ZXVlW25vcm1hbGl6ZWRPcHRpb25zXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRcdC8vIFRoZSBtYWluIGxvZ2ljIGlzIGhlcmVcblx0XHRcdGNvbnN0IGVudHJ5ID0gKCkgPT4ge1xuXHRcdFx0XHRjb25zdCBuYW1lID0gYCR7bm9ybWFsaXplZE9yaWdpbn06JHtub3JtYWxpemVkT3B0aW9uc31gO1xuXHRcdFx0XHRsZXQgcmVjZWl2ZWRTZXR0aW5ncyA9IGZhbHNlO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Y29uc3Qgc2Vzc2lvbiA9IGh0dHAyLmNvbm5lY3Qob3JpZ2luLCB7XG5cdFx0XHRcdFx0XHRjcmVhdGVDb25uZWN0aW9uOiB0aGlzLmNyZWF0ZUNvbm5lY3Rpb24sXG5cdFx0XHRcdFx0XHRzZXR0aW5nczogdGhpcy5zZXR0aW5ncyxcblx0XHRcdFx0XHRcdHNlc3Npb246IHRoaXMudGxzU2Vzc2lvbkNhY2hlLmdldChuYW1lKSxcblx0XHRcdFx0XHRcdC4uLm9wdGlvbnNcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRzZXNzaW9uW2tDdXJyZW50U3RyZWFtc0NvdW50XSA9IDA7XG5cdFx0XHRcdFx0c2Vzc2lvbltrR3JhY2VmdWxseUNsb3NpbmddID0gZmFsc2U7XG5cblx0XHRcdFx0XHRjb25zdCBpc0ZyZWUgPSAoKSA9PiBzZXNzaW9uW2tDdXJyZW50U3RyZWFtc0NvdW50XSA8IHNlc3Npb24ucmVtb3RlU2V0dGluZ3MubWF4Q29uY3VycmVudFN0cmVhbXM7XG5cdFx0XHRcdFx0bGV0IHdhc0ZyZWUgPSB0cnVlO1xuXG5cdFx0XHRcdFx0c2Vzc2lvbi5zb2NrZXQub25jZSgnc2Vzc2lvbicsIHRsc1Nlc3Npb24gPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy50bHNTZXNzaW9uQ2FjaGUuc2V0KG5hbWUsIHRsc1Nlc3Npb24pO1xuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0c2Vzc2lvbi5vbmNlKCdlcnJvcicsIGVycm9yID0+IHtcblx0XHRcdFx0XHRcdC8vIExpc3RlbmVycyBhcmUgZW1wdHkgd2hlbiB0aGUgc2Vzc2lvbiBzdWNjZXNzZnVsbHkgY29ubmVjdGVkLlxuXHRcdFx0XHRcdFx0Zm9yIChjb25zdCB7cmVqZWN0fSBvZiBsaXN0ZW5lcnMpIHtcblx0XHRcdFx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gVGhlIGNvbm5lY3Rpb24gZ290IGJyb2tlbiwgcHVyZ2UgdGhlIGNhY2hlLlxuXHRcdFx0XHRcdFx0dGhpcy50bHNTZXNzaW9uQ2FjaGUuZGVsZXRlKG5hbWUpO1xuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0c2Vzc2lvbi5zZXRUaW1lb3V0KHRoaXMudGltZW91dCwgKCkgPT4ge1xuXHRcdFx0XHRcdFx0Ly8gVGVybWluYXRlcyBhbGwgc3RyZWFtcyBvd25lZCBieSB0aGlzIHNlc3Npb24uXG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBNYXliZSB0aGUgc3RyZWFtcyBzaG91bGQgaGF2ZSBhIFwiU2Vzc2lvbiB0aW1lZCBvdXRcIiBlcnJvcj9cblx0XHRcdFx0XHRcdHNlc3Npb24uZGVzdHJveSgpO1xuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0c2Vzc2lvbi5vbmNlKCdjbG9zZScsICgpID0+IHtcblx0XHRcdFx0XHRcdGlmIChyZWNlaXZlZFNldHRpbmdzKSB7XG5cdFx0XHRcdFx0XHRcdC8vIDEuIElmIGl0IHdhc24ndCBmcmVlIHRoZW4gbm8gbmVlZCB0byBkZWNyZWFzZSBiZWNhdXNlXG5cdFx0XHRcdFx0XHRcdC8vICAgIGl0IGhhcyBiZWVuIGRlY3JlYXNlZCBhbHJlYWR5IGluIHNlc3Npb24ucmVxdWVzdCgpLlxuXHRcdFx0XHRcdFx0XHQvLyAyLiBgc3RyZWFtLm9uY2UoJ2Nsb3NlJylgIHdvbid0IGluY3JlbWVudCB0aGUgY291bnRcblx0XHRcdFx0XHRcdFx0Ly8gICAgYmVjYXVzZSB0aGUgc2Vzc2lvbiBpcyBhbHJlYWR5IGNsb3NlZC5cblx0XHRcdFx0XHRcdFx0aWYgKHdhc0ZyZWUpIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9mcmVlU2Vzc2lvbnNDb3VudC0tO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0dGhpcy5fc2Vzc2lvbnNDb3VudC0tO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgY2Fubm90IGJlIG1vdmVkIHRvIHRoZSBzdHJlYW0gbG9naWMsXG5cdFx0XHRcdFx0XHRcdC8vIGJlY2F1c2UgdGhlcmUgbWF5IGJlIGEgc2Vzc2lvbiB0aGF0IGhhZG4ndCBtYWRlIGEgc2luZ2xlIHJlcXVlc3QuXG5cdFx0XHRcdFx0XHRcdGNvbnN0IHdoZXJlID0gdGhpcy5zZXNzaW9uc1tub3JtYWxpemVkT3B0aW9uc107XG5cdFx0XHRcdFx0XHRcdHdoZXJlLnNwbGljZSh3aGVyZS5pbmRleE9mKHNlc3Npb24pLCAxKTtcblxuXHRcdFx0XHRcdFx0XHRpZiAod2hlcmUubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0ZGVsZXRlIHRoaXMuc2Vzc2lvbnNbbm9ybWFsaXplZE9wdGlvbnNdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBCcm9rZW4gY29ubmVjdGlvblxuXHRcdFx0XHRcdFx0XHRjb25zdCBlcnJvciA9IG5ldyBFcnJvcignU2Vzc2lvbiBjbG9zZWQgd2l0aG91dCByZWNlaXZpbmcgYSBTRVRUSU5HUyBmcmFtZScpO1xuXHRcdFx0XHRcdFx0XHRlcnJvci5jb2RlID0gJ0hUVFAyV1JBUFBFUl9OT1NFVFRJTkdTJztcblxuXHRcdFx0XHRcdFx0XHRmb3IgKGNvbnN0IHtyZWplY3R9IG9mIGxpc3RlbmVycykge1xuXHRcdFx0XHRcdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRyZW1vdmVGcm9tUXVldWUoKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gVGhlcmUgbWF5IGJlIGFub3RoZXIgc2Vzc2lvbiBhd2FpdGluZy5cblx0XHRcdFx0XHRcdHRoaXMuX3RyeVRvQ3JlYXRlTmV3U2Vzc2lvbihub3JtYWxpemVkT3B0aW9ucywgbm9ybWFsaXplZE9yaWdpbik7XG5cdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHQvLyBJdGVyYXRlcyBvdmVyIHRoZSBxdWV1ZSBhbmQgcHJvY2Vzc2VzIGxpc3RlbmVycy5cblx0XHRcdFx0XHRjb25zdCBwcm9jZXNzTGlzdGVuZXJzID0gKCkgPT4ge1xuXHRcdFx0XHRcdFx0aWYgKCEobm9ybWFsaXplZE9wdGlvbnMgaW4gdGhpcy5xdWV1ZSkgfHwgIWlzRnJlZSgpKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Zm9yIChjb25zdCBvcmlnaW4gb2Ygc2Vzc2lvbltrT3JpZ2luU2V0XSkge1xuXHRcdFx0XHRcdFx0XHRpZiAob3JpZ2luIGluIHRoaXMucXVldWVbbm9ybWFsaXplZE9wdGlvbnNdKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc3Qge2xpc3RlbmVyc30gPSB0aGlzLnF1ZXVlW25vcm1hbGl6ZWRPcHRpb25zXVtvcmlnaW5dO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gUHJldmVudHMgc2Vzc2lvbiBvdmVybG9hZGluZy5cblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAobGlzdGVuZXJzLmxlbmd0aCAhPT0gMCAmJiBpc0ZyZWUoKSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gV2UgYXNzdW1lIGByZXNvbHZlKC4uLilgIGNhbGxzIGByZXF1ZXN0KC4uLilgICpkaXJlY3RseSosXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBvdGhlcndpc2UgdGhlIHNlc3Npb24gd2lsbCBnZXQgb3ZlcmxvYWRlZC5cblx0XHRcdFx0XHRcdFx0XHRcdGxpc3RlbmVycy5zaGlmdCgpLnJlc29sdmUoc2Vzc2lvbik7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0Y29uc3Qgd2hlcmUgPSB0aGlzLnF1ZXVlW25vcm1hbGl6ZWRPcHRpb25zXTtcblx0XHRcdFx0XHRcdFx0XHRpZiAod2hlcmVbb3JpZ2luXS5saXN0ZW5lcnMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRkZWxldGUgd2hlcmVbb3JpZ2luXTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKE9iamVjdC5rZXlzKHdoZXJlKS5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVsZXRlIHRoaXMucXVldWVbbm9ybWFsaXplZE9wdGlvbnNdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXZSdyZSBubyBsb25nZXIgZnJlZSwgbm8gcG9pbnQgaW4gY29udGludWluZy5cblx0XHRcdFx0XHRcdFx0XHRpZiAoIWlzRnJlZSgpKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0Ly8gVGhlIE9yaWdpbiBTZXQgY2Fubm90IHNocmluay4gTm8gbmVlZCB0byBjaGVjayBpZiBpdCBzdWRkZW5seSBiZWNhbWUgY292ZXJlZCBieSBhbm90aGVyIG9uZS5cblx0XHRcdFx0XHRzZXNzaW9uLm9uKCdvcmlnaW4nLCAoKSA9PiB7XG5cdFx0XHRcdFx0XHRzZXNzaW9uW2tPcmlnaW5TZXRdID0gc2Vzc2lvbi5vcmlnaW5TZXQ7XG5cblx0XHRcdFx0XHRcdGlmICghaXNGcmVlKCkpIHtcblx0XHRcdFx0XHRcdFx0Ly8gVGhlIHNlc3Npb24gaXMgZnVsbC5cblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRwcm9jZXNzTGlzdGVuZXJzKCk7XG5cblx0XHRcdFx0XHRcdC8vIENsb3NlIGNvdmVyZWQgc2Vzc2lvbnMgKGlmIHBvc3NpYmxlKS5cblx0XHRcdFx0XHRcdGNsb3NlQ292ZXJlZFNlc3Npb25zKHRoaXMuc2Vzc2lvbnNbbm9ybWFsaXplZE9wdGlvbnNdLCBzZXNzaW9uKTtcblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdHNlc3Npb24ub25jZSgncmVtb3RlU2V0dGluZ3MnLCAoKSA9PiB7XG5cdFx0XHRcdFx0XHQvLyBGaXggTm9kZS5qcyBidWcgcHJldmVudGluZyB0aGUgcHJvY2VzcyBmcm9tIGV4aXRpbmdcblx0XHRcdFx0XHRcdHNlc3Npb24ucmVmKCk7XG5cdFx0XHRcdFx0XHRzZXNzaW9uLnVucmVmKCk7XG5cblx0XHRcdFx0XHRcdHRoaXMuX3Nlc3Npb25zQ291bnQrKztcblxuXHRcdFx0XHRcdFx0Ly8gVGhlIEFnZW50IGNvdWxkIGhhdmUgYmVlbiBkZXN0cm95ZWQgYWxyZWFkeS5cblx0XHRcdFx0XHRcdGlmIChlbnRyeS5kZXN0cm95ZWQpIHtcblx0XHRcdFx0XHRcdFx0Y29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ0FnZW50IGhhcyBiZWVuIGRlc3Ryb3llZCcpO1xuXG5cdFx0XHRcdFx0XHRcdGZvciAoY29uc3QgbGlzdGVuZXIgb2YgbGlzdGVuZXJzKSB7XG5cdFx0XHRcdFx0XHRcdFx0bGlzdGVuZXIucmVqZWN0KGVycm9yKTtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdHNlc3Npb24uZGVzdHJveSgpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHNlc3Npb25ba09yaWdpblNldF0gPSBzZXNzaW9uLm9yaWdpblNldDtcblxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRjb25zdCB3aGVyZSA9IHRoaXMuc2Vzc2lvbnM7XG5cblx0XHRcdFx0XHRcdFx0aWYgKG5vcm1hbGl6ZWRPcHRpb25zIGluIHdoZXJlKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc3Qgc2Vzc2lvbnMgPSB3aGVyZVtub3JtYWxpemVkT3B0aW9uc107XG5cdFx0XHRcdFx0XHRcdFx0c2Vzc2lvbnMuc3BsaWNlKGdldFNvcnRlZEluZGV4KHNlc3Npb25zLCBzZXNzaW9uLCBjb21wYXJlU2Vzc2lvbnMpLCAwLCBzZXNzaW9uKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR3aGVyZVtub3JtYWxpemVkT3B0aW9uc10gPSBbc2Vzc2lvbl07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0dGhpcy5fZnJlZVNlc3Npb25zQ291bnQgKz0gMTtcblx0XHRcdFx0XHRcdHJlY2VpdmVkU2V0dGluZ3MgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHR0aGlzLmVtaXQoJ3Nlc3Npb24nLCBzZXNzaW9uKTtcblxuXHRcdFx0XHRcdFx0cHJvY2Vzc0xpc3RlbmVycygpO1xuXHRcdFx0XHRcdFx0cmVtb3ZlRnJvbVF1ZXVlKCk7XG5cblx0XHRcdFx0XHRcdC8vIFRPRE86IENsb3NlIGxhc3QgcmVjZW50bHkgdXNlZCAob3IgbGVhc3QgdXNlZD8pIHNlc3Npb25cblx0XHRcdFx0XHRcdGlmIChzZXNzaW9uW2tDdXJyZW50U3RyZWFtc0NvdW50XSA9PT0gMCAmJiB0aGlzLl9mcmVlU2Vzc2lvbnNDb3VudCA+IHRoaXMubWF4RnJlZVNlc3Npb25zKSB7XG5cdFx0XHRcdFx0XHRcdHNlc3Npb24uY2xvc2UoKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgaWYgd2UgaGF2ZW4ndCBtYW5hZ2VkIHRvIGV4ZWN1dGUgYWxsIGxpc3RlbmVycy5cblx0XHRcdFx0XHRcdGlmIChsaXN0ZW5lcnMubGVuZ3RoICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJlcXVlc3QgZm9yIGEgbmV3IHNlc3Npb24gd2l0aCBwcmVkZWZpbmVkIGxpc3RlbmVycy5cblx0XHRcdFx0XHRcdFx0dGhpcy5nZXRTZXNzaW9uKG5vcm1hbGl6ZWRPcmlnaW4sIG9wdGlvbnMsIGxpc3RlbmVycyk7XG5cdFx0XHRcdFx0XHRcdGxpc3RlbmVycy5sZW5ndGggPSAwO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBgc2Vzc2lvbi5yZW1vdGVTZXR0aW5ncy5tYXhDb25jdXJyZW50U3RyZWFtc2AgbWlnaHQgZ2V0IGluY3JlYXNlZFxuXHRcdFx0XHRcdFx0c2Vzc2lvbi5vbigncmVtb3RlU2V0dGluZ3MnLCAoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdHByb2Nlc3NMaXN0ZW5lcnMoKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBJbiBjYXNlIHRoZSBPcmlnaW4gU2V0IGNoYW5nZXNcblx0XHRcdFx0XHRcdFx0Y2xvc2VDb3ZlcmVkU2Vzc2lvbnModGhpcy5zZXNzaW9uc1tub3JtYWxpemVkT3B0aW9uc10sIHNlc3Npb24pO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHQvLyBTaGltIGBzZXNzaW9uLnJlcXVlc3QoKWAgaW4gb3JkZXIgdG8gY2F0Y2ggYWxsIHN0cmVhbXNcblx0XHRcdFx0XHRzZXNzaW9uW2tSZXF1ZXN0XSA9IHNlc3Npb24ucmVxdWVzdDtcblx0XHRcdFx0XHRzZXNzaW9uLnJlcXVlc3QgPSAoaGVhZGVycywgc3RyZWFtT3B0aW9ucykgPT4ge1xuXHRcdFx0XHRcdFx0aWYgKHNlc3Npb25ba0dyYWNlZnVsbHlDbG9zaW5nXSkge1xuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1RoZSBzZXNzaW9uIGlzIGdyYWNlZnVsbHkgY2xvc2luZy4gTm8gbmV3IHN0cmVhbXMgYXJlIGFsbG93ZWQuJyk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGNvbnN0IHN0cmVhbSA9IHNlc3Npb25ba1JlcXVlc3RdKGhlYWRlcnMsIHN0cmVhbU9wdGlvbnMpO1xuXG5cdFx0XHRcdFx0XHQvLyBUaGUgcHJvY2VzcyB3b24ndCBleGl0IHVudGlsIHRoZSBzZXNzaW9uIGlzIGNsb3NlZCBvciBhbGwgcmVxdWVzdHMgYXJlIGdvbmUuXG5cdFx0XHRcdFx0XHRzZXNzaW9uLnJlZigpO1xuXG5cdFx0XHRcdFx0XHQrK3Nlc3Npb25ba0N1cnJlbnRTdHJlYW1zQ291bnRdO1xuXG5cdFx0XHRcdFx0XHRpZiAoc2Vzc2lvbltrQ3VycmVudFN0cmVhbXNDb3VudF0gPT09IHNlc3Npb24ucmVtb3RlU2V0dGluZ3MubWF4Q29uY3VycmVudFN0cmVhbXMpIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5fZnJlZVNlc3Npb25zQ291bnQtLTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RyZWFtLm9uY2UoJ2Nsb3NlJywgKCkgPT4ge1xuXHRcdFx0XHRcdFx0XHR3YXNGcmVlID0gaXNGcmVlKCk7XG5cblx0XHRcdFx0XHRcdFx0LS1zZXNzaW9uW2tDdXJyZW50U3RyZWFtc0NvdW50XTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIXNlc3Npb24uZGVzdHJveWVkICYmICFzZXNzaW9uLmNsb3NlZCkge1xuXHRcdFx0XHRcdFx0XHRcdGNsb3NlU2Vzc2lvbklmQ292ZXJlZCh0aGlzLnNlc3Npb25zW25vcm1hbGl6ZWRPcHRpb25zXSwgc2Vzc2lvbik7XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoaXNGcmVlKCkgJiYgIXNlc3Npb24uY2xvc2VkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIXdhc0ZyZWUpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5fZnJlZVNlc3Npb25zQ291bnQrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHR3YXNGcmVlID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Y29uc3QgaXNFbXB0eSA9IHNlc3Npb25ba0N1cnJlbnRTdHJlYW1zQ291bnRdID09PSAwO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoaXNFbXB0eSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRzZXNzaW9uLnVucmVmKCk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmIChcblx0XHRcdFx0XHRcdFx0XHRcdFx0aXNFbXB0eSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5fZnJlZVNlc3Npb25zQ291bnQgPiB0aGlzLm1heEZyZWVTZXNzaW9ucyB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHNlc3Npb25ba0dyYWNlZnVsbHlDbG9zaW5nXVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0c2Vzc2lvbi5jbG9zZSgpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2xvc2VDb3ZlcmVkU2Vzc2lvbnModGhpcy5zZXNzaW9uc1tub3JtYWxpemVkT3B0aW9uc10sIHNlc3Npb24pO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzTGlzdGVuZXJzKCk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHN0cmVhbTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0XHRcdGZvciAoY29uc3QgbGlzdGVuZXIgb2YgbGlzdGVuZXJzKSB7XG5cdFx0XHRcdFx0XHRsaXN0ZW5lci5yZWplY3QoZXJyb3IpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJlbW92ZUZyb21RdWV1ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0XHRlbnRyeS5saXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG5cdFx0XHRlbnRyeS5jb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdGVudHJ5LmRlc3Ryb3llZCA9IGZhbHNlO1xuXG5cdFx0XHR0aGlzLnF1ZXVlW25vcm1hbGl6ZWRPcHRpb25zXVtub3JtYWxpemVkT3JpZ2luXSA9IGVudHJ5O1xuXHRcdFx0dGhpcy5fdHJ5VG9DcmVhdGVOZXdTZXNzaW9uKG5vcm1hbGl6ZWRPcHRpb25zLCBub3JtYWxpemVkT3JpZ2luKTtcblx0XHR9KTtcblx0fVxuXG5cdHJlcXVlc3Qob3JpZ2luLCBvcHRpb25zLCBoZWFkZXJzLCBzdHJlYW1PcHRpb25zKSB7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdHRoaXMuZ2V0U2Vzc2lvbihvcmlnaW4sIG9wdGlvbnMsIFt7XG5cdFx0XHRcdHJlamVjdCxcblx0XHRcdFx0cmVzb2x2ZTogc2Vzc2lvbiA9PiB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdHJlc29sdmUoc2Vzc2lvbi5yZXF1ZXN0KGhlYWRlcnMsIHN0cmVhbU9wdGlvbnMpKTtcblx0XHRcdFx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1dKTtcblx0XHR9KTtcblx0fVxuXG5cdGNyZWF0ZUNvbm5lY3Rpb24ob3JpZ2luLCBvcHRpb25zKSB7XG5cdFx0cmV0dXJuIEFnZW50LmNvbm5lY3Qob3JpZ2luLCBvcHRpb25zKTtcblx0fVxuXG5cdHN0YXRpYyBjb25uZWN0KG9yaWdpbiwgb3B0aW9ucykge1xuXHRcdG9wdGlvbnMuQUxQTlByb3RvY29scyA9IFsnaDInXTtcblxuXHRcdGNvbnN0IHBvcnQgPSBvcmlnaW4ucG9ydCB8fCA0NDM7XG5cdFx0Y29uc3QgaG9zdCA9IG9yaWdpbi5ob3N0bmFtZSB8fCBvcmlnaW4uaG9zdDtcblxuXHRcdGlmICh0eXBlb2Ygb3B0aW9ucy5zZXJ2ZXJuYW1lID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0b3B0aW9ucy5zZXJ2ZXJuYW1lID0gaG9zdDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGxzLmNvbm5lY3QocG9ydCwgaG9zdCwgb3B0aW9ucyk7XG5cdH1cblxuXHRjbG9zZUZyZWVTZXNzaW9ucygpIHtcblx0XHRmb3IgKGNvbnN0IHNlc3Npb25zIG9mIE9iamVjdC52YWx1ZXModGhpcy5zZXNzaW9ucykpIHtcblx0XHRcdGZvciAoY29uc3Qgc2Vzc2lvbiBvZiBzZXNzaW9ucykge1xuXHRcdFx0XHRpZiAoc2Vzc2lvbltrQ3VycmVudFN0cmVhbXNDb3VudF0gPT09IDApIHtcblx0XHRcdFx0XHRzZXNzaW9uLmNsb3NlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRkZXN0cm95KHJlYXNvbikge1xuXHRcdGZvciAoY29uc3Qgc2Vzc2lvbnMgb2YgT2JqZWN0LnZhbHVlcyh0aGlzLnNlc3Npb25zKSkge1xuXHRcdFx0Zm9yIChjb25zdCBzZXNzaW9uIG9mIHNlc3Npb25zKSB7XG5cdFx0XHRcdHNlc3Npb24uZGVzdHJveShyZWFzb24pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAoY29uc3QgZW50cmllc09mQXV0aG9yaXR5IG9mIE9iamVjdC52YWx1ZXModGhpcy5xdWV1ZSkpIHtcblx0XHRcdGZvciAoY29uc3QgZW50cnkgb2YgT2JqZWN0LnZhbHVlcyhlbnRyaWVzT2ZBdXRob3JpdHkpKSB7XG5cdFx0XHRcdGVudHJ5LmRlc3Ryb3llZCA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTmV3IHJlcXVlc3RzIHNob3VsZCBOT1QgYXR0YWNoIHRvIGRlc3Ryb3llZCBzZXNzaW9uc1xuXHRcdHRoaXMucXVldWUgPSB7fTtcblx0fVxuXG5cdGdldCBmcmVlU2Vzc2lvbnMoKSB7XG5cdFx0cmV0dXJuIGdldFNlc3Npb25zKHthZ2VudDogdGhpcywgaXNGcmVlOiB0cnVlfSk7XG5cdH1cblxuXHRnZXQgYnVzeVNlc3Npb25zKCkge1xuXHRcdHJldHVybiBnZXRTZXNzaW9ucyh7YWdlbnQ6IHRoaXMsIGlzRnJlZTogZmFsc2V9KTtcblx0fVxufVxuXG5BZ2VudC5rQ3VycmVudFN0cmVhbXNDb3VudCA9IGtDdXJyZW50U3RyZWFtc0NvdW50O1xuQWdlbnQua0dyYWNlZnVsbHlDbG9zaW5nID0ga0dyYWNlZnVsbHlDbG9zaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0QWdlbnQsXG5cdGdsb2JhbEFnZW50OiBuZXcgQWdlbnQoKVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbmNvbnN0IGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG5jb25zdCBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyk7XG5jb25zdCByZXNvbHZlQUxQTiA9IHJlcXVpcmUoJ3Jlc29sdmUtYWxwbicpO1xuY29uc3QgUXVpY2tMUlUgPSByZXF1aXJlKCdxdWljay1scnUnKTtcbmNvbnN0IEh0dHAyQ2xpZW50UmVxdWVzdCA9IHJlcXVpcmUoJy4vY2xpZW50LXJlcXVlc3QnKTtcbmNvbnN0IGNhbGN1bGF0ZVNlcnZlck5hbWUgPSByZXF1aXJlKCcuL3V0aWxzL2NhbGN1bGF0ZS1zZXJ2ZXItbmFtZScpO1xuY29uc3QgdXJsVG9PcHRpb25zID0gcmVxdWlyZSgnLi91dGlscy91cmwtdG8tb3B0aW9ucycpO1xuXG5jb25zdCBjYWNoZSA9IG5ldyBRdWlja0xSVSh7bWF4U2l6ZTogMTAwfSk7XG5jb25zdCBxdWV1ZSA9IG5ldyBNYXAoKTtcblxuY29uc3QgaW5zdGFsbFNvY2tldCA9IChhZ2VudCwgc29ja2V0LCBvcHRpb25zKSA9PiB7XG5cdHNvY2tldC5faHR0cE1lc3NhZ2UgPSB7c2hvdWxkS2VlcEFsaXZlOiB0cnVlfTtcblxuXHRjb25zdCBvbkZyZWUgPSAoKSA9PiB7XG5cdFx0YWdlbnQuZW1pdCgnZnJlZScsIHNvY2tldCwgb3B0aW9ucyk7XG5cdH07XG5cblx0c29ja2V0Lm9uKCdmcmVlJywgb25GcmVlKTtcblxuXHRjb25zdCBvbkNsb3NlID0gKCkgPT4ge1xuXHRcdGFnZW50LnJlbW92ZVNvY2tldChzb2NrZXQsIG9wdGlvbnMpO1xuXHR9O1xuXG5cdHNvY2tldC5vbignY2xvc2UnLCBvbkNsb3NlKTtcblxuXHRjb25zdCBvblJlbW92ZSA9ICgpID0+IHtcblx0XHRhZ2VudC5yZW1vdmVTb2NrZXQoc29ja2V0LCBvcHRpb25zKTtcblx0XHRzb2NrZXQub2ZmKCdjbG9zZScsIG9uQ2xvc2UpO1xuXHRcdHNvY2tldC5vZmYoJ2ZyZWUnLCBvbkZyZWUpO1xuXHRcdHNvY2tldC5vZmYoJ2FnZW50UmVtb3ZlJywgb25SZW1vdmUpO1xuXHR9O1xuXG5cdHNvY2tldC5vbignYWdlbnRSZW1vdmUnLCBvblJlbW92ZSk7XG5cblx0YWdlbnQuZW1pdCgnZnJlZScsIHNvY2tldCwgb3B0aW9ucyk7XG59O1xuXG5jb25zdCByZXNvbHZlUHJvdG9jb2wgPSBhc3luYyBvcHRpb25zID0+IHtcblx0Y29uc3QgbmFtZSA9IGAke29wdGlvbnMuaG9zdH06JHtvcHRpb25zLnBvcnR9OiR7b3B0aW9ucy5BTFBOUHJvdG9jb2xzLnNvcnQoKX1gO1xuXG5cdGlmICghY2FjaGUuaGFzKG5hbWUpKSB7XG5cdFx0aWYgKHF1ZXVlLmhhcyhuYW1lKSkge1xuXHRcdFx0Y29uc3QgcmVzdWx0ID0gYXdhaXQgcXVldWUuZ2V0KG5hbWUpO1xuXHRcdFx0cmV0dXJuIHJlc3VsdC5hbHBuUHJvdG9jb2w7XG5cdFx0fVxuXG5cdFx0Y29uc3Qge3BhdGgsIGFnZW50fSA9IG9wdGlvbnM7XG5cdFx0b3B0aW9ucy5wYXRoID0gb3B0aW9ucy5zb2NrZXRQYXRoO1xuXG5cdFx0Y29uc3QgcmVzdWx0UHJvbWlzZSA9IHJlc29sdmVBTFBOKG9wdGlvbnMpO1xuXHRcdHF1ZXVlLnNldChuYW1lLCByZXN1bHRQcm9taXNlKTtcblxuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCB7c29ja2V0LCBhbHBuUHJvdG9jb2x9ID0gYXdhaXQgcmVzdWx0UHJvbWlzZTtcblx0XHRcdGNhY2hlLnNldChuYW1lLCBhbHBuUHJvdG9jb2wpO1xuXG5cdFx0XHRvcHRpb25zLnBhdGggPSBwYXRoO1xuXG5cdFx0XHRpZiAoYWxwblByb3RvY29sID09PSAnaDInKSB7XG5cdFx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9pc3N1ZXMvMzMzNDNcblx0XHRcdFx0c29ja2V0LmRlc3Ryb3koKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvbnN0IHtnbG9iYWxBZ2VudH0gPSBodHRwcztcblx0XHRcdFx0Y29uc3QgZGVmYXVsdENyZWF0ZUNvbm5lY3Rpb24gPSBodHRwcy5BZ2VudC5wcm90b3R5cGUuY3JlYXRlQ29ubmVjdGlvbjtcblxuXHRcdFx0XHRpZiAoYWdlbnQpIHtcblx0XHRcdFx0XHRpZiAoYWdlbnQuY3JlYXRlQ29ubmVjdGlvbiA9PT0gZGVmYXVsdENyZWF0ZUNvbm5lY3Rpb24pIHtcblx0XHRcdFx0XHRcdGluc3RhbGxTb2NrZXQoYWdlbnQsIHNvY2tldCwgb3B0aW9ucyk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNvY2tldC5kZXN0cm95KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKGdsb2JhbEFnZW50LmNyZWF0ZUNvbm5lY3Rpb24gPT09IGRlZmF1bHRDcmVhdGVDb25uZWN0aW9uKSB7XG5cdFx0XHRcdFx0aW5zdGFsbFNvY2tldChnbG9iYWxBZ2VudCwgc29ja2V0LCBvcHRpb25zKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzb2NrZXQuZGVzdHJveSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHF1ZXVlLmRlbGV0ZShuYW1lKTtcblxuXHRcdFx0cmV0dXJuIGFscG5Qcm90b2NvbDtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0cXVldWUuZGVsZXRlKG5hbWUpO1xuXG5cdFx0XHR0aHJvdyBlcnJvcjtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY2FjaGUuZ2V0KG5hbWUpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBhc3luYyAoaW5wdXQsIG9wdGlvbnMsIGNhbGxiYWNrKSA9PiB7XG5cdGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnIHx8IGlucHV0IGluc3RhbmNlb2YgVVJMKSB7XG5cdFx0aW5wdXQgPSB1cmxUb09wdGlvbnMobmV3IFVSTChpbnB1dCkpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0Y2FsbGJhY2sgPSBvcHRpb25zO1xuXHRcdG9wdGlvbnMgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRvcHRpb25zID0ge1xuXHRcdEFMUE5Qcm90b2NvbHM6IFsnaDInLCAnaHR0cC8xLjEnXSxcblx0XHQuLi5pbnB1dCxcblx0XHQuLi5vcHRpb25zLFxuXHRcdHJlc29sdmVTb2NrZXQ6IHRydWVcblx0fTtcblxuXHRpZiAoIUFycmF5LmlzQXJyYXkob3B0aW9ucy5BTFBOUHJvdG9jb2xzKSB8fCBvcHRpb25zLkFMUE5Qcm90b2NvbHMubGVuZ3RoID09PSAwKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdUaGUgYEFMUE5Qcm90b2NvbHNgIG9wdGlvbiBtdXN0IGJlIGFuIEFycmF5IHdpdGggYXQgbGVhc3Qgb25lIGVudHJ5Jyk7XG5cdH1cblxuXHRvcHRpb25zLnByb3RvY29sID0gb3B0aW9ucy5wcm90b2NvbCB8fCAnaHR0cHM6Jztcblx0Y29uc3QgaXNIdHRwcyA9IG9wdGlvbnMucHJvdG9jb2wgPT09ICdodHRwczonO1xuXG5cdG9wdGlvbnMuaG9zdCA9IG9wdGlvbnMuaG9zdG5hbWUgfHwgb3B0aW9ucy5ob3N0IHx8ICdsb2NhbGhvc3QnO1xuXHRvcHRpb25zLnNlc3Npb24gPSBvcHRpb25zLnRsc1Nlc3Npb247XG5cdG9wdGlvbnMuc2VydmVybmFtZSA9IG9wdGlvbnMuc2VydmVybmFtZSB8fCBjYWxjdWxhdGVTZXJ2ZXJOYW1lKG9wdGlvbnMpO1xuXHRvcHRpb25zLnBvcnQgPSBvcHRpb25zLnBvcnQgfHwgKGlzSHR0cHMgPyA0NDMgOiA4MCk7XG5cdG9wdGlvbnMuX2RlZmF1bHRBZ2VudCA9IGlzSHR0cHMgPyBodHRwcy5nbG9iYWxBZ2VudCA6IGh0dHAuZ2xvYmFsQWdlbnQ7XG5cblx0Y29uc3QgYWdlbnRzID0gb3B0aW9ucy5hZ2VudDtcblxuXHRpZiAoYWdlbnRzKSB7XG5cdFx0aWYgKGFnZW50cy5hZGRSZXF1ZXN0KSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1RoZSBgb3B0aW9ucy5hZ2VudGAgb2JqZWN0IGNhbiBjb250YWluIG9ubHkgYGh0dHBgLCBgaHR0cHNgIG9yIGBodHRwMmAgcHJvcGVydGllcycpO1xuXHRcdH1cblxuXHRcdG9wdGlvbnMuYWdlbnQgPSBhZ2VudHNbaXNIdHRwcyA/ICdodHRwcycgOiAnaHR0cCddO1xuXHR9XG5cblx0aWYgKGlzSHR0cHMpIHtcblx0XHRjb25zdCBwcm90b2NvbCA9IGF3YWl0IHJlc29sdmVQcm90b2NvbChvcHRpb25zKTtcblxuXHRcdGlmIChwcm90b2NvbCA9PT0gJ2gyJykge1xuXHRcdFx0aWYgKGFnZW50cykge1xuXHRcdFx0XHRvcHRpb25zLmFnZW50ID0gYWdlbnRzLmh0dHAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbmV3IEh0dHAyQ2xpZW50UmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGh0dHAucmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5wcm90b2NvbENhY2hlID0gY2FjaGU7XG4iLCIndXNlIHN0cmljdCc7XG5jb25zdCBodHRwMiA9IHJlcXVpcmUoJ2h0dHAyJyk7XG5jb25zdCB7V3JpdGFibGV9ID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5jb25zdCB7QWdlbnQsIGdsb2JhbEFnZW50fSA9IHJlcXVpcmUoJy4vYWdlbnQnKTtcbmNvbnN0IEluY29taW5nTWVzc2FnZSA9IHJlcXVpcmUoJy4vaW5jb21pbmctbWVzc2FnZScpO1xuY29uc3QgdXJsVG9PcHRpb25zID0gcmVxdWlyZSgnLi91dGlscy91cmwtdG8tb3B0aW9ucycpO1xuY29uc3QgcHJveHlFdmVudHMgPSByZXF1aXJlKCcuL3V0aWxzL3Byb3h5LWV2ZW50cycpO1xuY29uc3QgaXNSZXF1ZXN0UHNldWRvSGVhZGVyID0gcmVxdWlyZSgnLi91dGlscy9pcy1yZXF1ZXN0LXBzZXVkby1oZWFkZXInKTtcbmNvbnN0IHtcblx0RVJSX0lOVkFMSURfQVJHX1RZUEUsXG5cdEVSUl9JTlZBTElEX1BST1RPQ09MLFxuXHRFUlJfSFRUUF9IRUFERVJTX1NFTlQsXG5cdEVSUl9JTlZBTElEX0hUVFBfVE9LRU4sXG5cdEVSUl9IVFRQX0lOVkFMSURfSEVBREVSX1ZBTFVFLFxuXHRFUlJfSU5WQUxJRF9DSEFSXG59ID0gcmVxdWlyZSgnLi91dGlscy9lcnJvcnMnKTtcblxuY29uc3Qge1xuXHRIVFRQMl9IRUFERVJfU1RBVFVTLFxuXHRIVFRQMl9IRUFERVJfTUVUSE9ELFxuXHRIVFRQMl9IRUFERVJfUEFUSCxcblx0SFRUUDJfTUVUSE9EX0NPTk5FQ1Rcbn0gPSBodHRwMi5jb25zdGFudHM7XG5cbmNvbnN0IGtIZWFkZXJzID0gU3ltYm9sKCdoZWFkZXJzJyk7XG5jb25zdCBrT3JpZ2luID0gU3ltYm9sKCdvcmlnaW4nKTtcbmNvbnN0IGtTZXNzaW9uID0gU3ltYm9sKCdzZXNzaW9uJyk7XG5jb25zdCBrT3B0aW9ucyA9IFN5bWJvbCgnb3B0aW9ucycpO1xuY29uc3Qga0ZsdXNoZWRIZWFkZXJzID0gU3ltYm9sKCdmbHVzaGVkSGVhZGVycycpO1xuY29uc3Qga0pvYnMgPSBTeW1ib2woJ2pvYnMnKTtcblxuY29uc3QgaXNWYWxpZEh0dHBUb2tlbiA9IC9eW1xcXmBcXC1cXHchIyQlJiorLnx+XSskLztcbmNvbnN0IGlzSW52YWxpZEhlYWRlclZhbHVlID0gL1teXFx0XFx1MDAyMC1cXHUwMDdFXFx1MDA4MC1cXHUwMEZGXS87XG5cbmNsYXNzIENsaWVudFJlcXVlc3QgZXh0ZW5kcyBXcml0YWJsZSB7XG5cdGNvbnN0cnVjdG9yKGlucHV0LCBvcHRpb25zLCBjYWxsYmFjaykge1xuXHRcdHN1cGVyKHtcblx0XHRcdGF1dG9EZXN0cm95OiBmYWxzZVxuXHRcdH0pO1xuXG5cdFx0Y29uc3QgaGFzSW5wdXQgPSB0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnIHx8IGlucHV0IGluc3RhbmNlb2YgVVJMO1xuXHRcdGlmIChoYXNJbnB1dCkge1xuXHRcdFx0aW5wdXQgPSB1cmxUb09wdGlvbnMoaW5wdXQgaW5zdGFuY2VvZiBVUkwgPyBpbnB1dCA6IG5ldyBVUkwoaW5wdXQpKTtcblx0XHR9XG5cblx0XHRpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicgfHwgb3B0aW9ucyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHQvLyAob3B0aW9ucywgY2FsbGJhY2spXG5cdFx0XHRjYWxsYmFjayA9IG9wdGlvbnM7XG5cdFx0XHRvcHRpb25zID0gaGFzSW5wdXQgPyBpbnB1dCA6IHsuLi5pbnB1dH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIChpbnB1dCwgb3B0aW9ucywgY2FsbGJhY2spXG5cdFx0XHRvcHRpb25zID0gey4uLmlucHV0LCAuLi5vcHRpb25zfTtcblx0XHR9XG5cblx0XHRpZiAob3B0aW9ucy5oMnNlc3Npb24pIHtcblx0XHRcdHRoaXNba1Nlc3Npb25dID0gb3B0aW9ucy5oMnNlc3Npb247XG5cdFx0fSBlbHNlIGlmIChvcHRpb25zLmFnZW50ID09PSBmYWxzZSkge1xuXHRcdFx0dGhpcy5hZ2VudCA9IG5ldyBBZ2VudCh7bWF4RnJlZVNlc3Npb25zOiAwfSk7XG5cdFx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5hZ2VudCA9PT0gJ3VuZGVmaW5lZCcgfHwgb3B0aW9ucy5hZ2VudCA9PT0gbnVsbCkge1xuXHRcdFx0aWYgKHR5cGVvZiBvcHRpb25zLmNyZWF0ZUNvbm5lY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0Ly8gVGhpcyBpcyBhIHdvcmthcm91bmQgLSB3ZSBkb24ndCBoYXZlIHRvIGNyZWF0ZSB0aGUgc2Vzc2lvbiBvbiBvdXIgb3duLlxuXHRcdFx0XHR0aGlzLmFnZW50ID0gbmV3IEFnZW50KHttYXhGcmVlU2Vzc2lvbnM6IDB9KTtcblx0XHRcdFx0dGhpcy5hZ2VudC5jcmVhdGVDb25uZWN0aW9uID0gb3B0aW9ucy5jcmVhdGVDb25uZWN0aW9uO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5hZ2VudCA9IGdsb2JhbEFnZW50O1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuYWdlbnQucmVxdWVzdCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0dGhpcy5hZ2VudCA9IG9wdGlvbnMuYWdlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm93IG5ldyBFUlJfSU5WQUxJRF9BUkdfVFlQRSgnb3B0aW9ucy5hZ2VudCcsIFsnQWdlbnQtbGlrZSBPYmplY3QnLCAndW5kZWZpbmVkJywgJ2ZhbHNlJ10sIG9wdGlvbnMuYWdlbnQpO1xuXHRcdH1cblxuXHRcdGlmIChvcHRpb25zLnByb3RvY29sICYmIG9wdGlvbnMucHJvdG9jb2wgIT09ICdodHRwczonKSB7XG5cdFx0XHR0aHJvdyBuZXcgRVJSX0lOVkFMSURfUFJPVE9DT0wob3B0aW9ucy5wcm90b2NvbCwgJ2h0dHBzOicpO1xuXHRcdH1cblxuXHRcdGNvbnN0IHBvcnQgPSBvcHRpb25zLnBvcnQgfHwgb3B0aW9ucy5kZWZhdWx0UG9ydCB8fCAodGhpcy5hZ2VudCAmJiB0aGlzLmFnZW50LmRlZmF1bHRQb3J0KSB8fCA0NDM7XG5cdFx0Y29uc3QgaG9zdCA9IG9wdGlvbnMuaG9zdG5hbWUgfHwgb3B0aW9ucy5ob3N0IHx8ICdsb2NhbGhvc3QnO1xuXG5cdFx0Ly8gRG9uJ3QgZW5mb3JjZSB0aGUgb3JpZ2luIHZpYSBvcHRpb25zLiBJdCBtYXkgYmUgY2hhbmdlZCBpbiBhbiBBZ2VudC5cblx0XHRkZWxldGUgb3B0aW9ucy5ob3N0bmFtZTtcblx0XHRkZWxldGUgb3B0aW9ucy5ob3N0O1xuXHRcdGRlbGV0ZSBvcHRpb25zLnBvcnQ7XG5cblx0XHRjb25zdCB7dGltZW91dH0gPSBvcHRpb25zO1xuXHRcdG9wdGlvbnMudGltZW91dCA9IHVuZGVmaW5lZDtcblxuXHRcdHRoaXNba0hlYWRlcnNdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblx0XHR0aGlzW2tKb2JzXSA9IFtdO1xuXG5cdFx0dGhpcy5zb2NrZXQgPSBudWxsO1xuXHRcdHRoaXMuY29ubmVjdGlvbiA9IG51bGw7XG5cblx0XHR0aGlzLm1ldGhvZCA9IG9wdGlvbnMubWV0aG9kIHx8ICdHRVQnO1xuXHRcdHRoaXMucGF0aCA9IG9wdGlvbnMucGF0aDtcblxuXHRcdHRoaXMucmVzID0gbnVsbDtcblx0XHR0aGlzLmFib3J0ZWQgPSBmYWxzZTtcblx0XHR0aGlzLnJldXNlZFNvY2tldCA9IGZhbHNlO1xuXG5cdFx0aWYgKG9wdGlvbnMuaGVhZGVycykge1xuXHRcdFx0Zm9yIChjb25zdCBbaGVhZGVyLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMob3B0aW9ucy5oZWFkZXJzKSkge1xuXHRcdFx0XHR0aGlzLnNldEhlYWRlcihoZWFkZXIsIHZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAob3B0aW9ucy5hdXRoICYmICEoJ2F1dGhvcml6YXRpb24nIGluIHRoaXNba0hlYWRlcnNdKSkge1xuXHRcdFx0dGhpc1trSGVhZGVyc10uYXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgQnVmZmVyLmZyb20ob3B0aW9ucy5hdXRoKS50b1N0cmluZygnYmFzZTY0Jyk7XG5cdFx0fVxuXG5cdFx0b3B0aW9ucy5zZXNzaW9uID0gb3B0aW9ucy50bHNTZXNzaW9uO1xuXHRcdG9wdGlvbnMucGF0aCA9IG9wdGlvbnMuc29ja2V0UGF0aDtcblxuXHRcdHRoaXNba09wdGlvbnNdID0gb3B0aW9ucztcblxuXHRcdC8vIENsaWVudHMgdGhhdCBnZW5lcmF0ZSBIVFRQLzIgcmVxdWVzdHMgZGlyZWN0bHkgU0hPVUxEIHVzZSB0aGUgOmF1dGhvcml0eSBwc2V1ZG8taGVhZGVyIGZpZWxkIGluc3RlYWQgb2YgdGhlIEhvc3QgaGVhZGVyIGZpZWxkLlxuXHRcdGlmIChwb3J0ID09PSA0NDMpIHtcblx0XHRcdHRoaXNba09yaWdpbl0gPSBgaHR0cHM6Ly8ke2hvc3R9YDtcblxuXHRcdFx0aWYgKCEoJzphdXRob3JpdHknIGluIHRoaXNba0hlYWRlcnNdKSkge1xuXHRcdFx0XHR0aGlzW2tIZWFkZXJzXVsnOmF1dGhvcml0eSddID0gaG9zdDtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpc1trT3JpZ2luXSA9IGBodHRwczovLyR7aG9zdH06JHtwb3J0fWA7XG5cblx0XHRcdGlmICghKCc6YXV0aG9yaXR5JyBpbiB0aGlzW2tIZWFkZXJzXSkpIHtcblx0XHRcdFx0dGhpc1trSGVhZGVyc11bJzphdXRob3JpdHknXSA9IGAke2hvc3R9OiR7cG9ydH1gO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICh0aW1lb3V0KSB7XG5cdFx0XHR0aGlzLnNldFRpbWVvdXQodGltZW91dCk7XG5cdFx0fVxuXG5cdFx0aWYgKGNhbGxiYWNrKSB7XG5cdFx0XHR0aGlzLm9uY2UoJ3Jlc3BvbnNlJywgY2FsbGJhY2spO1xuXHRcdH1cblxuXHRcdHRoaXNba0ZsdXNoZWRIZWFkZXJzXSA9IGZhbHNlO1xuXHR9XG5cblx0Z2V0IG1ldGhvZCgpIHtcblx0XHRyZXR1cm4gdGhpc1trSGVhZGVyc11bSFRUUDJfSEVBREVSX01FVEhPRF07XG5cdH1cblxuXHRzZXQgbWV0aG9kKHZhbHVlKSB7XG5cdFx0aWYgKHZhbHVlKSB7XG5cdFx0XHR0aGlzW2tIZWFkZXJzXVtIVFRQMl9IRUFERVJfTUVUSE9EXSA9IHZhbHVlLnRvVXBwZXJDYXNlKCk7XG5cdFx0fVxuXHR9XG5cblx0Z2V0IHBhdGgoKSB7XG5cdFx0cmV0dXJuIHRoaXNba0hlYWRlcnNdW0hUVFAyX0hFQURFUl9QQVRIXTtcblx0fVxuXG5cdHNldCBwYXRoKHZhbHVlKSB7XG5cdFx0aWYgKHZhbHVlKSB7XG5cdFx0XHR0aGlzW2tIZWFkZXJzXVtIVFRQMl9IRUFERVJfUEFUSF0gPSB2YWx1ZTtcblx0XHR9XG5cdH1cblxuXHRnZXQgX211c3ROb3RIYXZlQUJvZHkoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWV0aG9kID09PSAnR0VUJyB8fCB0aGlzLm1ldGhvZCA9PT0gJ0hFQUQnIHx8IHRoaXMubWV0aG9kID09PSAnREVMRVRFJztcblx0fVxuXG5cdF93cml0ZShjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG5cdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvNjU0ZGYwOWFlMGM1ZTE3ZDFiNTJhOTAwYTU0NWYwNjY0ZDhjNzYyNy9saWIvaW50ZXJuYWwvaHR0cDIvdXRpbC5qcyNMMTQ4LUwxNTZcblx0XHRpZiAodGhpcy5fbXVzdE5vdEhhdmVBQm9keSkge1xuXHRcdFx0Y2FsbGJhY2sobmV3IEVycm9yKCdUaGUgR0VULCBIRUFEIGFuZCBERUxFVEUgbWV0aG9kcyBtdXN0IE5PVCBoYXZlIGEgYm9keScpKTtcblx0XHRcdC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBOb2RlLmpzIDEyIHRocm93cyBkaXJlY3RseSAqL1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuZmx1c2hIZWFkZXJzKCk7XG5cblx0XHRjb25zdCBjYWxsV3JpdGUgPSAoKSA9PiB0aGlzLl9yZXF1ZXN0LndyaXRlKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spO1xuXHRcdGlmICh0aGlzLl9yZXF1ZXN0KSB7XG5cdFx0XHRjYWxsV3JpdGUoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpc1trSm9ic10ucHVzaChjYWxsV3JpdGUpO1xuXHRcdH1cblx0fVxuXG5cdF9maW5hbChjYWxsYmFjaykge1xuXHRcdGlmICh0aGlzLmRlc3Ryb3llZCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuZmx1c2hIZWFkZXJzKCk7XG5cblx0XHRjb25zdCBjYWxsRW5kID0gKCkgPT4ge1xuXHRcdFx0Ly8gRm9yIEdFVCwgSEVBRCBhbmQgREVMRVRFXG5cdFx0XHRpZiAodGhpcy5fbXVzdE5vdEhhdmVBQm9keSkge1xuXHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX3JlcXVlc3QuZW5kKGNhbGxiYWNrKTtcblx0XHR9O1xuXG5cdFx0aWYgKHRoaXMuX3JlcXVlc3QpIHtcblx0XHRcdGNhbGxFbmQoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpc1trSm9ic10ucHVzaChjYWxsRW5kKTtcblx0XHR9XG5cdH1cblxuXHRhYm9ydCgpIHtcblx0XHRpZiAodGhpcy5yZXMgJiYgdGhpcy5yZXMuY29tcGxldGUpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIXRoaXMuYWJvcnRlZCkge1xuXHRcdFx0cHJvY2Vzcy5uZXh0VGljaygoKSA9PiB0aGlzLmVtaXQoJ2Fib3J0JykpO1xuXHRcdH1cblxuXHRcdHRoaXMuYWJvcnRlZCA9IHRydWU7XG5cblx0XHR0aGlzLmRlc3Ryb3koKTtcblx0fVxuXG5cdF9kZXN0cm95KGVycm9yLCBjYWxsYmFjaykge1xuXHRcdGlmICh0aGlzLnJlcykge1xuXHRcdFx0dGhpcy5yZXMuX2R1bXAoKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5fcmVxdWVzdCkge1xuXHRcdFx0dGhpcy5fcmVxdWVzdC5kZXN0cm95KCk7XG5cdFx0fVxuXG5cdFx0Y2FsbGJhY2soZXJyb3IpO1xuXHR9XG5cblx0YXN5bmMgZmx1c2hIZWFkZXJzKCkge1xuXHRcdGlmICh0aGlzW2tGbHVzaGVkSGVhZGVyc10gfHwgdGhpcy5kZXN0cm95ZWQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzW2tGbHVzaGVkSGVhZGVyc10gPSB0cnVlO1xuXG5cdFx0Y29uc3QgaXNDb25uZWN0TWV0aG9kID0gdGhpcy5tZXRob2QgPT09IEhUVFAyX01FVEhPRF9DT05ORUNUO1xuXG5cdFx0Ly8gVGhlIHJlYWwgbWFnaWMgaXMgaGVyZVxuXHRcdGNvbnN0IG9uU3RyZWFtID0gc3RyZWFtID0+IHtcblx0XHRcdHRoaXMuX3JlcXVlc3QgPSBzdHJlYW07XG5cblx0XHRcdGlmICh0aGlzLmRlc3Ryb3llZCkge1xuXHRcdFx0XHRzdHJlYW0uZGVzdHJveSgpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcndhcmRzIGB0aW1lb3V0YCwgYGNvbnRpbnVlYCwgYGNsb3NlYCBhbmQgYGVycm9yYCBldmVudHMgdG8gdGhpcyBpbnN0YW5jZS5cblx0XHRcdGlmICghaXNDb25uZWN0TWV0aG9kKSB7XG5cdFx0XHRcdHByb3h5RXZlbnRzKHN0cmVhbSwgdGhpcywgWyd0aW1lb3V0JywgJ2NvbnRpbnVlJywgJ2Nsb3NlJywgJ2Vycm9yJ10pO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXYWl0IGZvciB0aGUgYGZpbmlzaGAgZXZlbnQuIFdlIGRvbid0IHdhbnQgdG8gZW1pdCB0aGUgYHJlc3BvbnNlYCBldmVudFxuXHRcdFx0Ly8gYmVmb3JlIGByZXF1ZXN0LmVuZCgpYCBpcyBjYWxsZWQuXG5cdFx0XHRjb25zdCB3YWl0Rm9yRW5kID0gZm4gPT4ge1xuXHRcdFx0XHRyZXR1cm4gKC4uLmFyZ3MpID0+IHtcblx0XHRcdFx0XHRpZiAoIXRoaXMud3JpdGFibGUgJiYgIXRoaXMuZGVzdHJveWVkKSB7XG5cdFx0XHRcdFx0XHRmbiguLi5hcmdzKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy5vbmNlKCdmaW5pc2gnLCAoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdGZuKC4uLmFyZ3MpO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gVGhpcyBldmVudCB0ZWxscyB3ZSBhcmUgcmVhZHkgdG8gbGlzdGVuIGZvciB0aGUgZGF0YS5cblx0XHRcdHN0cmVhbS5vbmNlKCdyZXNwb25zZScsIHdhaXRGb3JFbmQoKGhlYWRlcnMsIGZsYWdzLCByYXdIZWFkZXJzKSA9PiB7XG5cdFx0XHRcdC8vIElmIHdlIHdlcmUgdG8gZW1pdCByYXcgcmVxdWVzdCBzdHJlYW0sIGl0IHdvdWxkIGJlIGFzIGZhc3QgYXMgdGhlIG5hdGl2ZSBhcHByb2FjaC5cblx0XHRcdFx0Ly8gTm90ZSB0aGF0IHdyYXBwaW5nIHRoZSByYXcgc3RyZWFtIGluIGEgUHJveHkgaW5zdGFuY2Ugd29uJ3QgaW1wcm92ZSB0aGUgcGVyZm9ybWFuY2UgKGFscmVhZHkgdGVzdGVkIGl0KS5cblx0XHRcdFx0Y29uc3QgcmVzcG9uc2UgPSBuZXcgSW5jb21pbmdNZXNzYWdlKHRoaXMuc29ja2V0LCBzdHJlYW0ucmVhZGFibGVIaWdoV2F0ZXJNYXJrKTtcblx0XHRcdFx0dGhpcy5yZXMgPSByZXNwb25zZTtcblxuXHRcdFx0XHRyZXNwb25zZS5yZXEgPSB0aGlzO1xuXHRcdFx0XHRyZXNwb25zZS5zdGF0dXNDb2RlID0gaGVhZGVyc1tIVFRQMl9IRUFERVJfU1RBVFVTXTtcblx0XHRcdFx0cmVzcG9uc2UuaGVhZGVycyA9IGhlYWRlcnM7XG5cdFx0XHRcdHJlc3BvbnNlLnJhd0hlYWRlcnMgPSByYXdIZWFkZXJzO1xuXG5cdFx0XHRcdHJlc3BvbnNlLm9uY2UoJ2VuZCcsICgpID0+IHtcblx0XHRcdFx0XHRpZiAodGhpcy5hYm9ydGVkKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZS5hYm9ydGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdHJlc3BvbnNlLmVtaXQoJ2Fib3J0ZWQnKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UuY29tcGxldGUgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHQvLyBIYXMgbm8gZWZmZWN0LCBqdXN0IGJlIGNvbnNpc3RlbnQgd2l0aCB0aGUgTm9kZS5qcyBiZWhhdmlvclxuXHRcdFx0XHRcdFx0cmVzcG9uc2Uuc29ja2V0ID0gbnVsbDtcblx0XHRcdFx0XHRcdHJlc3BvbnNlLmNvbm5lY3Rpb24gPSBudWxsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aWYgKGlzQ29ubmVjdE1ldGhvZCkge1xuXHRcdFx0XHRcdHJlc3BvbnNlLnVwZ3JhZGUgPSB0cnVlO1xuXG5cdFx0XHRcdFx0Ly8gVGhlIEhUVFAxIEFQSSBzYXlzIHRoZSBzb2NrZXQgaXMgZGV0YWNoZWQgaGVyZSxcblx0XHRcdFx0XHQvLyBidXQgd2UgY2FuJ3QgZG8gdGhhdCBzbyB3ZSBwYXNzIHRoZSBvcmlnaW5hbCBIVFRQMiByZXF1ZXN0LlxuXHRcdFx0XHRcdGlmICh0aGlzLmVtaXQoJ2Nvbm5lY3QnLCByZXNwb25zZSwgc3RyZWFtLCBCdWZmZXIuYWxsb2MoMCkpKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmVtaXQoJ2Nsb3NlJyk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdC8vIE5vIGxpc3RlbmVycyBhdHRhY2hlZCwgZGVzdHJveSB0aGUgb3JpZ2luYWwgcmVxdWVzdC5cblx0XHRcdFx0XHRcdHN0cmVhbS5kZXN0cm95KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIEZvcndhcmRzIGRhdGFcblx0XHRcdFx0XHRzdHJlYW0ub24oJ2RhdGEnLCBjaHVuayA9PiB7XG5cdFx0XHRcdFx0XHRpZiAoIXJlc3BvbnNlLl9kdW1wZWQgJiYgIXJlc3BvbnNlLnB1c2goY2h1bmspKSB7XG5cdFx0XHRcdFx0XHRcdHN0cmVhbS5wYXVzZSgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0c3RyZWFtLm9uY2UoJ2VuZCcsICgpID0+IHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlLnB1c2gobnVsbCk7XG5cdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHRpZiAoIXRoaXMuZW1pdCgncmVzcG9uc2UnLCByZXNwb25zZSkpIHtcblx0XHRcdFx0XHRcdC8vIE5vIGxpc3RlbmVycyBhdHRhY2hlZCwgZHVtcCB0aGUgcmVzcG9uc2UuXG5cdFx0XHRcdFx0XHRyZXNwb25zZS5fZHVtcCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSkpO1xuXG5cdFx0XHQvLyBFbWl0cyBgaW5mb3JtYXRpb25gIGV2ZW50XG5cdFx0XHRzdHJlYW0ub25jZSgnaGVhZGVycycsIHdhaXRGb3JFbmQoXG5cdFx0XHRcdGhlYWRlcnMgPT4gdGhpcy5lbWl0KCdpbmZvcm1hdGlvbicsIHtzdGF0dXNDb2RlOiBoZWFkZXJzW0hUVFAyX0hFQURFUl9TVEFUVVNdfSlcblx0XHRcdCkpO1xuXG5cdFx0XHRzdHJlYW0ub25jZSgndHJhaWxlcnMnLCB3YWl0Rm9yRW5kKCh0cmFpbGVycywgZmxhZ3MsIHJhd1RyYWlsZXJzKSA9PiB7XG5cdFx0XHRcdGNvbnN0IHtyZXN9ID0gdGhpcztcblxuXHRcdFx0XHQvLyBBc3NpZ25zIHRyYWlsZXJzIHRvIHRoZSByZXNwb25zZSBvYmplY3QuXG5cdFx0XHRcdHJlcy50cmFpbGVycyA9IHRyYWlsZXJzO1xuXHRcdFx0XHRyZXMucmF3VHJhaWxlcnMgPSByYXdUcmFpbGVycztcblx0XHRcdH0pKTtcblxuXHRcdFx0Y29uc3Qge3NvY2tldH0gPSBzdHJlYW0uc2Vzc2lvbjtcblx0XHRcdHRoaXMuc29ja2V0ID0gc29ja2V0O1xuXHRcdFx0dGhpcy5jb25uZWN0aW9uID0gc29ja2V0O1xuXG5cdFx0XHRmb3IgKGNvbnN0IGpvYiBvZiB0aGlzW2tKb2JzXSkge1xuXHRcdFx0XHRqb2IoKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5lbWl0KCdzb2NrZXQnLCB0aGlzLnNvY2tldCk7XG5cdFx0fTtcblxuXHRcdC8vIE1ha2VzIGEgSFRUUDIgcmVxdWVzdFxuXHRcdGlmICh0aGlzW2tTZXNzaW9uXSkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0b25TdHJlYW0odGhpc1trU2Vzc2lvbl0ucmVxdWVzdCh0aGlzW2tIZWFkZXJzXSkpO1xuXHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0dGhpcy5lbWl0KCdlcnJvcicsIGVycm9yKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5yZXVzZWRTb2NrZXQgPSB0cnVlO1xuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRvblN0cmVhbShhd2FpdCB0aGlzLmFnZW50LnJlcXVlc3QodGhpc1trT3JpZ2luXSwgdGhpc1trT3B0aW9uc10sIHRoaXNba0hlYWRlcnNdKSk7XG5cdFx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0XHR0aGlzLmVtaXQoJ2Vycm9yJywgZXJyb3IpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGdldEhlYWRlcihuYW1lKSB7XG5cdFx0aWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuXHRcdFx0dGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKCduYW1lJywgJ3N0cmluZycsIG5hbWUpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzW2tIZWFkZXJzXVtuYW1lLnRvTG93ZXJDYXNlKCldO1xuXHR9XG5cblx0Z2V0IGhlYWRlcnNTZW50KCkge1xuXHRcdHJldHVybiB0aGlzW2tGbHVzaGVkSGVhZGVyc107XG5cdH1cblxuXHRyZW1vdmVIZWFkZXIobmFtZSkge1xuXHRcdGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcblx0XHRcdHRocm93IG5ldyBFUlJfSU5WQUxJRF9BUkdfVFlQRSgnbmFtZScsICdzdHJpbmcnLCBuYW1lKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5oZWFkZXJzU2VudCkge1xuXHRcdFx0dGhyb3cgbmV3IEVSUl9IVFRQX0hFQURFUlNfU0VOVCgncmVtb3ZlJyk7XG5cdFx0fVxuXG5cdFx0ZGVsZXRlIHRoaXNba0hlYWRlcnNdW25hbWUudG9Mb3dlckNhc2UoKV07XG5cdH1cblxuXHRzZXRIZWFkZXIobmFtZSwgdmFsdWUpIHtcblx0XHRpZiAodGhpcy5oZWFkZXJzU2VudCkge1xuXHRcdFx0dGhyb3cgbmV3IEVSUl9IVFRQX0hFQURFUlNfU0VOVCgnc2V0Jyk7XG5cdFx0fVxuXG5cdFx0aWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJyB8fCAoIWlzVmFsaWRIdHRwVG9rZW4udGVzdChuYW1lKSAmJiAhaXNSZXF1ZXN0UHNldWRvSGVhZGVyKG5hbWUpKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVSUl9JTlZBTElEX0hUVFBfVE9LRU4oJ0hlYWRlciBuYW1lJywgbmFtZSk7XG5cdFx0fVxuXG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdHRocm93IG5ldyBFUlJfSFRUUF9JTlZBTElEX0hFQURFUl9WQUxVRSh2YWx1ZSwgbmFtZSk7XG5cdFx0fVxuXG5cdFx0aWYgKGlzSW52YWxpZEhlYWRlclZhbHVlLnRlc3QodmFsdWUpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRVJSX0lOVkFMSURfQ0hBUignaGVhZGVyIGNvbnRlbnQnLCBuYW1lKTtcblx0XHR9XG5cblx0XHR0aGlzW2tIZWFkZXJzXVtuYW1lLnRvTG93ZXJDYXNlKCldID0gdmFsdWU7XG5cdH1cblxuXHRzZXROb0RlbGF5KCkge1xuXHRcdC8vIEhUVFAyIHNvY2tldHMgY2Fubm90IGJlIG1hbGZvcm1lZCwgZG8gbm90aGluZy5cblx0fVxuXG5cdHNldFNvY2tldEtlZXBBbGl2ZSgpIHtcblx0XHQvLyBIVFRQMiBzb2NrZXRzIGNhbm5vdCBiZSBtYWxmb3JtZWQsIGRvIG5vdGhpbmcuXG5cdH1cblxuXHRzZXRUaW1lb3V0KG1zLCBjYWxsYmFjaykge1xuXHRcdGNvbnN0IGFwcGx5VGltZW91dCA9ICgpID0+IHRoaXMuX3JlcXVlc3Quc2V0VGltZW91dChtcywgY2FsbGJhY2spO1xuXG5cdFx0aWYgKHRoaXMuX3JlcXVlc3QpIHtcblx0XHRcdGFwcGx5VGltZW91dCgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzW2tKb2JzXS5wdXNoKGFwcGx5VGltZW91dCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRnZXQgbWF4SGVhZGVyc0NvdW50KCkge1xuXHRcdGlmICghdGhpcy5kZXN0cm95ZWQgJiYgdGhpcy5fcmVxdWVzdCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX3JlcXVlc3Quc2Vzc2lvbi5sb2NhbFNldHRpbmdzLm1heEhlYWRlckxpc3RTaXplO1xuXHRcdH1cblxuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHRzZXQgbWF4SGVhZGVyc0NvdW50KF92YWx1ZSkge1xuXHRcdC8vIFVwZGF0aW5nIEhUVFAyIHNldHRpbmdzIHdvdWxkIGFmZmVjdCBhbGwgcmVxdWVzdHMsIGRvIG5vdGhpbmcuXG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDbGllbnRSZXF1ZXN0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuY29uc3Qge1JlYWRhYmxlfSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuXG5jbGFzcyBJbmNvbWluZ01lc3NhZ2UgZXh0ZW5kcyBSZWFkYWJsZSB7XG5cdGNvbnN0cnVjdG9yKHNvY2tldCwgaGlnaFdhdGVyTWFyaykge1xuXHRcdHN1cGVyKHtcblx0XHRcdGhpZ2hXYXRlck1hcmssXG5cdFx0XHRhdXRvRGVzdHJveTogZmFsc2Vcblx0XHR9KTtcblxuXHRcdHRoaXMuc3RhdHVzQ29kZSA9IG51bGw7XG5cdFx0dGhpcy5zdGF0dXNNZXNzYWdlID0gJyc7XG5cdFx0dGhpcy5odHRwVmVyc2lvbiA9ICcyLjAnO1xuXHRcdHRoaXMuaHR0cFZlcnNpb25NYWpvciA9IDI7XG5cdFx0dGhpcy5odHRwVmVyc2lvbk1pbm9yID0gMDtcblx0XHR0aGlzLmhlYWRlcnMgPSB7fTtcblx0XHR0aGlzLnRyYWlsZXJzID0ge307XG5cdFx0dGhpcy5yZXEgPSBudWxsO1xuXG5cdFx0dGhpcy5hYm9ydGVkID0gZmFsc2U7XG5cdFx0dGhpcy5jb21wbGV0ZSA9IGZhbHNlO1xuXHRcdHRoaXMudXBncmFkZSA9IG51bGw7XG5cblx0XHR0aGlzLnJhd0hlYWRlcnMgPSBbXTtcblx0XHR0aGlzLnJhd1RyYWlsZXJzID0gW107XG5cblx0XHR0aGlzLnNvY2tldCA9IHNvY2tldDtcblx0XHR0aGlzLmNvbm5lY3Rpb24gPSBzb2NrZXQ7XG5cblx0XHR0aGlzLl9kdW1wZWQgPSBmYWxzZTtcblx0fVxuXG5cdF9kZXN0cm95KGVycm9yKSB7XG5cdFx0dGhpcy5yZXEuX3JlcXVlc3QuZGVzdHJveShlcnJvcik7XG5cdH1cblxuXHRzZXRUaW1lb3V0KG1zLCBjYWxsYmFjaykge1xuXHRcdHRoaXMucmVxLnNldFRpbWVvdXQobXMsIGNhbGxiYWNrKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdF9kdW1wKCkge1xuXHRcdGlmICghdGhpcy5fZHVtcGVkKSB7XG5cdFx0XHR0aGlzLl9kdW1wZWQgPSB0cnVlO1xuXG5cdFx0XHR0aGlzLnJlbW92ZUFsbExpc3RlbmVycygnZGF0YScpO1xuXHRcdFx0dGhpcy5yZXN1bWUoKTtcblx0XHR9XG5cdH1cblxuXHRfcmVhZCgpIHtcblx0XHRpZiAodGhpcy5yZXEpIHtcblx0XHRcdHRoaXMucmVxLl9yZXF1ZXN0LnJlc3VtZSgpO1xuXHRcdH1cblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEluY29taW5nTWVzc2FnZTtcbiIsIid1c2Ugc3RyaWN0JztcbmNvbnN0IGh0dHAyID0gcmVxdWlyZSgnaHR0cDInKTtcbmNvbnN0IGFnZW50ID0gcmVxdWlyZSgnLi9hZ2VudCcpO1xuY29uc3QgQ2xpZW50UmVxdWVzdCA9IHJlcXVpcmUoJy4vY2xpZW50LXJlcXVlc3QnKTtcbmNvbnN0IEluY29taW5nTWVzc2FnZSA9IHJlcXVpcmUoJy4vaW5jb21pbmctbWVzc2FnZScpO1xuY29uc3QgYXV0byA9IHJlcXVpcmUoJy4vYXV0bycpO1xuXG5jb25zdCByZXF1ZXN0ID0gKHVybCwgb3B0aW9ucywgY2FsbGJhY2spID0+IHtcblx0cmV0dXJuIG5ldyBDbGllbnRSZXF1ZXN0KHVybCwgb3B0aW9ucywgY2FsbGJhY2spO1xufTtcblxuY29uc3QgZ2V0ID0gKHVybCwgb3B0aW9ucywgY2FsbGJhY2spID0+IHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vcHJldmVudC1hYmJyZXZpYXRpb25zXG5cdGNvbnN0IHJlcSA9IG5ldyBDbGllbnRSZXF1ZXN0KHVybCwgb3B0aW9ucywgY2FsbGJhY2spO1xuXHRyZXEuZW5kKCk7XG5cblx0cmV0dXJuIHJlcTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHQuLi5odHRwMixcblx0Q2xpZW50UmVxdWVzdCxcblx0SW5jb21pbmdNZXNzYWdlLFxuXHQuLi5hZ2VudCxcblx0cmVxdWVzdCxcblx0Z2V0LFxuXHRhdXRvXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuY29uc3QgbmV0ID0gcmVxdWlyZSgnbmV0Jyk7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgZmlsZTogaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvdjEzLjAuMS9saWIvX2h0dHBfYWdlbnQuanMgKi9cblxubW9kdWxlLmV4cG9ydHMgPSBvcHRpb25zID0+IHtcblx0bGV0IHNlcnZlcm5hbWUgPSBvcHRpb25zLmhvc3Q7XG5cdGNvbnN0IGhvc3RIZWFkZXIgPSBvcHRpb25zLmhlYWRlcnMgJiYgb3B0aW9ucy5oZWFkZXJzLmhvc3Q7XG5cblx0aWYgKGhvc3RIZWFkZXIpIHtcblx0XHRpZiAoaG9zdEhlYWRlci5zdGFydHNXaXRoKCdbJykpIHtcblx0XHRcdGNvbnN0IGluZGV4ID0gaG9zdEhlYWRlci5pbmRleE9mKCddJyk7XG5cdFx0XHRpZiAoaW5kZXggPT09IC0xKSB7XG5cdFx0XHRcdHNlcnZlcm5hbWUgPSBob3N0SGVhZGVyO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VydmVybmFtZSA9IGhvc3RIZWFkZXIuc2xpY2UoMSwgLTEpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzZXJ2ZXJuYW1lID0gaG9zdEhlYWRlci5zcGxpdCgnOicsIDEpWzBdO1xuXHRcdH1cblx0fVxuXG5cdGlmIChuZXQuaXNJUChzZXJ2ZXJuYW1lKSkge1xuXHRcdHJldHVybiAnJztcblx0fVxuXG5cdHJldHVybiBzZXJ2ZXJuYW1lO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGlzdGFuYnVsIGlnbm9yZSBmaWxlOiBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi9tYXN0ZXIvbGliL2ludGVybmFsL2Vycm9ycy5qcyAqL1xuXG5jb25zdCBtYWtlRXJyb3IgPSAoQmFzZSwga2V5LCBnZXRNZXNzYWdlKSA9PiB7XG5cdG1vZHVsZS5leHBvcnRzW2tleV0gPSBjbGFzcyBOb2RlRXJyb3IgZXh0ZW5kcyBCYXNlIHtcblx0XHRjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG5cdFx0XHRzdXBlcih0eXBlb2YgZ2V0TWVzc2FnZSA9PT0gJ3N0cmluZycgPyBnZXRNZXNzYWdlIDogZ2V0TWVzc2FnZShhcmdzKSk7XG5cdFx0XHR0aGlzLm5hbWUgPSBgJHtzdXBlci5uYW1lfSBbJHtrZXl9XWA7XG5cdFx0XHR0aGlzLmNvZGUgPSBrZXk7XG5cdFx0fVxuXHR9O1xufTtcblxubWFrZUVycm9yKFR5cGVFcnJvciwgJ0VSUl9JTlZBTElEX0FSR19UWVBFJywgYXJncyA9PiB7XG5cdGNvbnN0IHR5cGUgPSBhcmdzWzBdLmluY2x1ZGVzKCcuJykgPyAncHJvcGVydHknIDogJ2FyZ3VtZW50JztcblxuXHRsZXQgdmFsaWQgPSBhcmdzWzFdO1xuXHRjb25zdCBpc01hbnlUeXBlcyA9IEFycmF5LmlzQXJyYXkodmFsaWQpO1xuXG5cdGlmIChpc01hbnlUeXBlcykge1xuXHRcdHZhbGlkID0gYCR7dmFsaWQuc2xpY2UoMCwgLTEpLmpvaW4oJywgJyl9IG9yICR7dmFsaWQuc2xpY2UoLTEpfWA7XG5cdH1cblxuXHRyZXR1cm4gYFRoZSBcIiR7YXJnc1swXX1cIiAke3R5cGV9IG11c3QgYmUgJHtpc01hbnlUeXBlcyA/ICdvbmUgb2YnIDogJ29mJ30gdHlwZSAke3ZhbGlkfS4gUmVjZWl2ZWQgJHt0eXBlb2YgYXJnc1syXX1gO1xufSk7XG5cbm1ha2VFcnJvcihUeXBlRXJyb3IsICdFUlJfSU5WQUxJRF9QUk9UT0NPTCcsIGFyZ3MgPT4ge1xuXHRyZXR1cm4gYFByb3RvY29sIFwiJHthcmdzWzBdfVwiIG5vdCBzdXBwb3J0ZWQuIEV4cGVjdGVkIFwiJHthcmdzWzFdfVwiYDtcbn0pO1xuXG5tYWtlRXJyb3IoRXJyb3IsICdFUlJfSFRUUF9IRUFERVJTX1NFTlQnLCBhcmdzID0+IHtcblx0cmV0dXJuIGBDYW5ub3QgJHthcmdzWzBdfSBoZWFkZXJzIGFmdGVyIHRoZXkgYXJlIHNlbnQgdG8gdGhlIGNsaWVudGA7XG59KTtcblxubWFrZUVycm9yKFR5cGVFcnJvciwgJ0VSUl9JTlZBTElEX0hUVFBfVE9LRU4nLCBhcmdzID0+IHtcblx0cmV0dXJuIGAke2FyZ3NbMF19IG11c3QgYmUgYSB2YWxpZCBIVFRQIHRva2VuIFske2FyZ3NbMV19XWA7XG59KTtcblxubWFrZUVycm9yKFR5cGVFcnJvciwgJ0VSUl9IVFRQX0lOVkFMSURfSEVBREVSX1ZBTFVFJywgYXJncyA9PiB7XG5cdHJldHVybiBgSW52YWxpZCB2YWx1ZSBcIiR7YXJnc1swXX0gZm9yIGhlYWRlciBcIiR7YXJnc1sxXX1cImA7XG59KTtcblxubWFrZUVycm9yKFR5cGVFcnJvciwgJ0VSUl9JTlZBTElEX0NIQVInLCBhcmdzID0+IHtcblx0cmV0dXJuIGBJbnZhbGlkIGNoYXJhY3RlciBpbiAke2FyZ3NbMF19IFske2FyZ3NbMV19XWA7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBoZWFkZXIgPT4ge1xuXHRzd2l0Y2ggKGhlYWRlcikge1xuXHRcdGNhc2UgJzptZXRob2QnOlxuXHRcdGNhc2UgJzpzY2hlbWUnOlxuXHRcdGNhc2UgJzphdXRob3JpdHknOlxuXHRcdGNhc2UgJzpwYXRoJzpcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gKGZyb20sIHRvLCBldmVudHMpID0+IHtcblx0Zm9yIChjb25zdCBldmVudCBvZiBldmVudHMpIHtcblx0XHRmcm9tLm9uKGV2ZW50LCAoLi4uYXJncykgPT4gdG8uZW1pdChldmVudCwgLi4uYXJncykpO1xuXHR9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyogaXN0YW5idWwgaWdub3JlIGZpbGU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iL2E5MTI5M2Q0ZDlhYjQwMzA0NmFiNWViMDIyMzMyZTRlM2QyNDliZDMvbGliL2ludGVybmFsL3VybC5qcyNMMTI1NyAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVybCA9PiB7XG5cdGNvbnN0IG9wdGlvbnMgPSB7XG5cdFx0cHJvdG9jb2w6IHVybC5wcm90b2NvbCxcblx0XHRob3N0bmFtZTogdHlwZW9mIHVybC5ob3N0bmFtZSA9PT0gJ3N0cmluZycgJiYgdXJsLmhvc3RuYW1lLnN0YXJ0c1dpdGgoJ1snKSA/IHVybC5ob3N0bmFtZS5zbGljZSgxLCAtMSkgOiB1cmwuaG9zdG5hbWUsXG5cdFx0aG9zdDogdXJsLmhvc3QsXG5cdFx0aGFzaDogdXJsLmhhc2gsXG5cdFx0c2VhcmNoOiB1cmwuc2VhcmNoLFxuXHRcdHBhdGhuYW1lOiB1cmwucGF0aG5hbWUsXG5cdFx0aHJlZjogdXJsLmhyZWYsXG5cdFx0cGF0aDogYCR7dXJsLnBhdGhuYW1lIHx8ICcnfSR7dXJsLnNlYXJjaCB8fCAnJ31gXG5cdH07XG5cblx0aWYgKHR5cGVvZiB1cmwucG9ydCA9PT0gJ3N0cmluZycgJiYgdXJsLnBvcnQubGVuZ3RoICE9PSAwKSB7XG5cdFx0b3B0aW9ucy5wb3J0ID0gTnVtYmVyKHVybC5wb3J0KTtcblx0fVxuXG5cdGlmICh1cmwudXNlcm5hbWUgfHwgdXJsLnBhc3N3b3JkKSB7XG5cdFx0b3B0aW9ucy5hdXRoID0gYCR7dXJsLnVzZXJuYW1lIHx8ICcnfToke3VybC5wYXNzd29yZCB8fCAnJ31gO1xuXHR9XG5cblx0cmV0dXJuIG9wdGlvbnM7XG59O1xuIiwiLy9UT0RPOiBoYW5kbGUgcmV2aXZlci9kZWh5ZHJhdGUgZnVuY3Rpb24gbGlrZSBub3JtYWxcbi8vYW5kIGhhbmRsZSBpbmRlbnRhdGlvbiwgbGlrZSBub3JtYWwuXG4vL2lmIGFueW9uZSBuZWVkcyB0aGlzLi4uIHBsZWFzZSBzZW5kIHB1bGwgcmVxdWVzdC5cblxuZXhwb3J0cy5zdHJpbmdpZnkgPSBmdW5jdGlvbiBzdHJpbmdpZnkgKG8pIHtcbiAgaWYoJ3VuZGVmaW5lZCcgPT0gdHlwZW9mIG8pIHJldHVybiBvXG5cbiAgaWYobyAmJiBCdWZmZXIuaXNCdWZmZXIobykpXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KCc6YmFzZTY0OicgKyBvLnRvU3RyaW5nKCdiYXNlNjQnKSlcblxuICBpZihvICYmIG8udG9KU09OKVxuICAgIG8gPSAgby50b0pTT04oKVxuXG4gIGlmKG8gJiYgJ29iamVjdCcgPT09IHR5cGVvZiBvKSB7XG4gICAgdmFyIHMgPSAnJ1xuICAgIHZhciBhcnJheSA9IEFycmF5LmlzQXJyYXkobylcbiAgICBzID0gYXJyYXkgPyAnWycgOiAneydcbiAgICB2YXIgZmlyc3QgPSB0cnVlXG5cbiAgICBmb3IodmFyIGsgaW4gbykge1xuICAgICAgdmFyIGlnbm9yZSA9ICdmdW5jdGlvbicgPT0gdHlwZW9mIG9ba10gfHwgKCFhcnJheSAmJiAndW5kZWZpbmVkJyA9PT0gdHlwZW9mIG9ba10pXG4gICAgICBpZihPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChvLCBrKSAmJiAhaWdub3JlKSB7XG4gICAgICAgIGlmKCFmaXJzdClcbiAgICAgICAgICBzICs9ICcsJ1xuICAgICAgICBmaXJzdCA9IGZhbHNlXG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIGlmKG9ba10gPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcyArPSAnbnVsbCdcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBzICs9IHN0cmluZ2lmeShvW2tdKVxuICAgICAgICB9IGVsc2UgaWYgKG9ba10gIT09IHZvaWQoMCkpIHtcbiAgICAgICAgICBzICs9IHN0cmluZ2lmeShrKSArICc6JyArIHN0cmluZ2lmeShvW2tdKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcyArPSBhcnJheSA/ICddJyA6ICd9J1xuXG4gICAgcmV0dXJuIHNcbiAgfSBlbHNlIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIG8pIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoL146Ly50ZXN0KG8pID8gJzonICsgbyA6IG8pXG4gIH0gZWxzZSBpZiAoJ3VuZGVmaW5lZCcgPT09IHR5cGVvZiBvKSB7XG4gICAgcmV0dXJuICdudWxsJztcbiAgfSBlbHNlXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG8pXG59XG5cbmV4cG9ydHMucGFyc2UgPSBmdW5jdGlvbiAocykge1xuICByZXR1cm4gSlNPTi5wYXJzZShzLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIGlmKCdzdHJpbmcnID09PSB0eXBlb2YgdmFsdWUpIHtcbiAgICAgIGlmKC9eOmJhc2U2NDovLnRlc3QodmFsdWUpKVxuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWUuc3Vic3RyaW5nKDgpLCAnYmFzZTY0JylcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIC9eOi8udGVzdCh2YWx1ZSkgPyB2YWx1ZS5zdWJzdHJpbmcoMSkgOiB2YWx1ZSBcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlXG4gIH0pXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpO1xuY29uc3QgSlNPTkIgPSByZXF1aXJlKCdqc29uLWJ1ZmZlcicpO1xuXG5jb25zdCBsb2FkU3RvcmUgPSBvcHRzID0+IHtcblx0Y29uc3QgYWRhcHRlcnMgPSB7XG5cdFx0cmVkaXM6ICdAa2V5di9yZWRpcycsXG5cdFx0bW9uZ29kYjogJ0BrZXl2L21vbmdvJyxcblx0XHRtb25nbzogJ0BrZXl2L21vbmdvJyxcblx0XHRzcWxpdGU6ICdAa2V5di9zcWxpdGUnLFxuXHRcdHBvc3RncmVzcWw6ICdAa2V5di9wb3N0Z3JlcycsXG5cdFx0cG9zdGdyZXM6ICdAa2V5di9wb3N0Z3JlcycsXG5cdFx0bXlzcWw6ICdAa2V5di9teXNxbCdcblx0fTtcblx0aWYgKG9wdHMuYWRhcHRlciB8fCBvcHRzLnVyaSkge1xuXHRcdGNvbnN0IGFkYXB0ZXIgPSBvcHRzLmFkYXB0ZXIgfHwgL15bXjpdKi8uZXhlYyhvcHRzLnVyaSlbMF07XG5cdFx0cmV0dXJuIG5ldyAocmVxdWlyZShhZGFwdGVyc1thZGFwdGVyXSkpKG9wdHMpO1xuXHR9XG5cblx0cmV0dXJuIG5ldyBNYXAoKTtcbn07XG5cbmNsYXNzIEtleXYgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuXHRjb25zdHJ1Y3Rvcih1cmksIG9wdHMpIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMub3B0cyA9IE9iamVjdC5hc3NpZ24oXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWVzcGFjZTogJ2tleXYnLFxuXHRcdFx0XHRzZXJpYWxpemU6IEpTT05CLnN0cmluZ2lmeSxcblx0XHRcdFx0ZGVzZXJpYWxpemU6IEpTT05CLnBhcnNlXG5cdFx0XHR9LFxuXHRcdFx0KHR5cGVvZiB1cmkgPT09ICdzdHJpbmcnKSA/IHsgdXJpIH0gOiB1cmksXG5cdFx0XHRvcHRzXG5cdFx0KTtcblxuXHRcdGlmICghdGhpcy5vcHRzLnN0b3JlKSB7XG5cdFx0XHRjb25zdCBhZGFwdGVyT3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0cyk7XG5cdFx0XHR0aGlzLm9wdHMuc3RvcmUgPSBsb2FkU3RvcmUoYWRhcHRlck9wdHMpO1xuXHRcdH1cblxuXHRcdGlmICh0eXBlb2YgdGhpcy5vcHRzLnN0b3JlLm9uID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHR0aGlzLm9wdHMuc3RvcmUub24oJ2Vycm9yJywgZXJyID0+IHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpKTtcblx0XHR9XG5cblx0XHR0aGlzLm9wdHMuc3RvcmUubmFtZXNwYWNlID0gdGhpcy5vcHRzLm5hbWVzcGFjZTtcblx0fVxuXG5cdF9nZXRLZXlQcmVmaXgoa2V5KSB7XG5cdFx0cmV0dXJuIGAke3RoaXMub3B0cy5uYW1lc3BhY2V9OiR7a2V5fWA7XG5cdH1cblxuXHRnZXQoa2V5LCBvcHRzKSB7XG5cdFx0Y29uc3Qga2V5UHJlZml4ZWQgPSB0aGlzLl9nZXRLZXlQcmVmaXgoa2V5KTtcblx0XHRjb25zdCB7IHN0b3JlIH0gPSB0aGlzLm9wdHM7XG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG5cdFx0XHQudGhlbigoKSA9PiBzdG9yZS5nZXQoa2V5UHJlZml4ZWQpKVxuXHRcdFx0LnRoZW4oZGF0YSA9PiB7XG5cdFx0XHRcdHJldHVybiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSA/IHRoaXMub3B0cy5kZXNlcmlhbGl6ZShkYXRhKSA6IGRhdGE7XG5cdFx0XHR9KVxuXHRcdFx0LnRoZW4oZGF0YSA9PiB7XG5cdFx0XHRcdGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHR5cGVvZiBkYXRhLmV4cGlyZXMgPT09ICdudW1iZXInICYmIERhdGUubm93KCkgPiBkYXRhLmV4cGlyZXMpIHtcblx0XHRcdFx0XHR0aGlzLmRlbGV0ZShrZXkpO1xuXHRcdFx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gKG9wdHMgJiYgb3B0cy5yYXcpID8gZGF0YSA6IGRhdGEudmFsdWU7XG5cdFx0XHR9KTtcblx0fVxuXG5cdHNldChrZXksIHZhbHVlLCB0dGwpIHtcblx0XHRjb25zdCBrZXlQcmVmaXhlZCA9IHRoaXMuX2dldEtleVByZWZpeChrZXkpO1xuXHRcdGlmICh0eXBlb2YgdHRsID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0dHRsID0gdGhpcy5vcHRzLnR0bDtcblx0XHR9XG5cblx0XHRpZiAodHRsID09PSAwKSB7XG5cdFx0XHR0dGwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Y29uc3QgeyBzdG9yZSB9ID0gdGhpcy5vcHRzO1xuXG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG5cdFx0XHQudGhlbigoKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGV4cGlyZXMgPSAodHlwZW9mIHR0bCA9PT0gJ251bWJlcicpID8gKERhdGUubm93KCkgKyB0dGwpIDogbnVsbDtcblx0XHRcdFx0dmFsdWUgPSB7IHZhbHVlLCBleHBpcmVzIH07XG5cdFx0XHRcdHJldHVybiB0aGlzLm9wdHMuc2VyaWFsaXplKHZhbHVlKTtcblx0XHRcdH0pXG5cdFx0XHQudGhlbih2YWx1ZSA9PiBzdG9yZS5zZXQoa2V5UHJlZml4ZWQsIHZhbHVlLCB0dGwpKVxuXHRcdFx0LnRoZW4oKCkgPT4gdHJ1ZSk7XG5cdH1cblxuXHRkZWxldGUoa2V5KSB7XG5cdFx0Y29uc3Qga2V5UHJlZml4ZWQgPSB0aGlzLl9nZXRLZXlQcmVmaXgoa2V5KTtcblx0XHRjb25zdCB7IHN0b3JlIH0gPSB0aGlzLm9wdHM7XG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG5cdFx0XHQudGhlbigoKSA9PiBzdG9yZS5kZWxldGUoa2V5UHJlZml4ZWQpKTtcblx0fVxuXG5cdGNsZWFyKCkge1xuXHRcdGNvbnN0IHsgc3RvcmUgfSA9IHRoaXMub3B0cztcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcblx0XHRcdC50aGVuKCgpID0+IHN0b3JlLmNsZWFyKCkpO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gS2V5djtcbiIsImZ1bmN0aW9uIHdlYnBhY2tFbXB0eUNvbnRleHQocmVxKSB7XG5cdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHR0aHJvdyBlO1xufVxud2VicGFja0VtcHR5Q29udGV4dC5rZXlzID0gKCkgPT4gW107XG53ZWJwYWNrRW1wdHlDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrRW1wdHlDb250ZXh0O1xud2VicGFja0VtcHR5Q29udGV4dC5pZCA9IDMxOTY7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tFbXB0eUNvbnRleHQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB7IEZPUkNFX0NPTE9SLCBOT0RFX0RJU0FCTEVfQ09MT1JTLCBURVJNIH0gPSBwcm9jZXNzLmVudjtcblxuY29uc3QgJCA9IHtcblx0ZW5hYmxlZDogIU5PREVfRElTQUJMRV9DT0xPUlMgJiYgVEVSTSAhPT0gJ2R1bWInICYmIEZPUkNFX0NPTE9SICE9PSAnMCcsXG5cblx0Ly8gbW9kaWZpZXJzXG5cdHJlc2V0OiBpbml0KDAsIDApLFxuXHRib2xkOiBpbml0KDEsIDIyKSxcblx0ZGltOiBpbml0KDIsIDIyKSxcblx0aXRhbGljOiBpbml0KDMsIDIzKSxcblx0dW5kZXJsaW5lOiBpbml0KDQsIDI0KSxcblx0aW52ZXJzZTogaW5pdCg3LCAyNyksXG5cdGhpZGRlbjogaW5pdCg4LCAyOCksXG5cdHN0cmlrZXRocm91Z2g6IGluaXQoOSwgMjkpLFxuXG5cdC8vIGNvbG9yc1xuXHRibGFjazogaW5pdCgzMCwgMzkpLFxuXHRyZWQ6IGluaXQoMzEsIDM5KSxcblx0Z3JlZW46IGluaXQoMzIsIDM5KSxcblx0eWVsbG93OiBpbml0KDMzLCAzOSksXG5cdGJsdWU6IGluaXQoMzQsIDM5KSxcblx0bWFnZW50YTogaW5pdCgzNSwgMzkpLFxuXHRjeWFuOiBpbml0KDM2LCAzOSksXG5cdHdoaXRlOiBpbml0KDM3LCAzOSksXG5cdGdyYXk6IGluaXQoOTAsIDM5KSxcblx0Z3JleTogaW5pdCg5MCwgMzkpLFxuXG5cdC8vIGJhY2tncm91bmQgY29sb3JzXG5cdGJnQmxhY2s6IGluaXQoNDAsIDQ5KSxcblx0YmdSZWQ6IGluaXQoNDEsIDQ5KSxcblx0YmdHcmVlbjogaW5pdCg0MiwgNDkpLFxuXHRiZ1llbGxvdzogaW5pdCg0MywgNDkpLFxuXHRiZ0JsdWU6IGluaXQoNDQsIDQ5KSxcblx0YmdNYWdlbnRhOiBpbml0KDQ1LCA0OSksXG5cdGJnQ3lhbjogaW5pdCg0NiwgNDkpLFxuXHRiZ1doaXRlOiBpbml0KDQ3LCA0OSlcbn07XG5cbmZ1bmN0aW9uIHJ1bihhcnIsIHN0cikge1xuXHRsZXQgaT0wLCB0bXAsIGJlZz0nJywgZW5kPScnO1xuXHRmb3IgKDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuXHRcdHRtcCA9IGFycltpXTtcblx0XHRiZWcgKz0gdG1wLm9wZW47XG5cdFx0ZW5kICs9IHRtcC5jbG9zZTtcblx0XHRpZiAoc3RyLmluY2x1ZGVzKHRtcC5jbG9zZSkpIHtcblx0XHRcdHN0ciA9IHN0ci5yZXBsYWNlKHRtcC5yZ3gsIHRtcC5jbG9zZSArIHRtcC5vcGVuKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGJlZyArIHN0ciArIGVuZDtcbn1cblxuZnVuY3Rpb24gY2hhaW4oaGFzLCBrZXlzKSB7XG5cdGxldCBjdHggPSB7IGhhcywga2V5cyB9O1xuXG5cdGN0eC5yZXNldCA9ICQucmVzZXQuYmluZChjdHgpO1xuXHRjdHguYm9sZCA9ICQuYm9sZC5iaW5kKGN0eCk7XG5cdGN0eC5kaW0gPSAkLmRpbS5iaW5kKGN0eCk7XG5cdGN0eC5pdGFsaWMgPSAkLml0YWxpYy5iaW5kKGN0eCk7XG5cdGN0eC51bmRlcmxpbmUgPSAkLnVuZGVybGluZS5iaW5kKGN0eCk7XG5cdGN0eC5pbnZlcnNlID0gJC5pbnZlcnNlLmJpbmQoY3R4KTtcblx0Y3R4LmhpZGRlbiA9ICQuaGlkZGVuLmJpbmQoY3R4KTtcblx0Y3R4LnN0cmlrZXRocm91Z2ggPSAkLnN0cmlrZXRocm91Z2guYmluZChjdHgpO1xuXG5cdGN0eC5ibGFjayA9ICQuYmxhY2suYmluZChjdHgpO1xuXHRjdHgucmVkID0gJC5yZWQuYmluZChjdHgpO1xuXHRjdHguZ3JlZW4gPSAkLmdyZWVuLmJpbmQoY3R4KTtcblx0Y3R4LnllbGxvdyA9ICQueWVsbG93LmJpbmQoY3R4KTtcblx0Y3R4LmJsdWUgPSAkLmJsdWUuYmluZChjdHgpO1xuXHRjdHgubWFnZW50YSA9ICQubWFnZW50YS5iaW5kKGN0eCk7XG5cdGN0eC5jeWFuID0gJC5jeWFuLmJpbmQoY3R4KTtcblx0Y3R4LndoaXRlID0gJC53aGl0ZS5iaW5kKGN0eCk7XG5cdGN0eC5ncmF5ID0gJC5ncmF5LmJpbmQoY3R4KTtcblx0Y3R4LmdyZXkgPSAkLmdyZXkuYmluZChjdHgpO1xuXG5cdGN0eC5iZ0JsYWNrID0gJC5iZ0JsYWNrLmJpbmQoY3R4KTtcblx0Y3R4LmJnUmVkID0gJC5iZ1JlZC5iaW5kKGN0eCk7XG5cdGN0eC5iZ0dyZWVuID0gJC5iZ0dyZWVuLmJpbmQoY3R4KTtcblx0Y3R4LmJnWWVsbG93ID0gJC5iZ1llbGxvdy5iaW5kKGN0eCk7XG5cdGN0eC5iZ0JsdWUgPSAkLmJnQmx1ZS5iaW5kKGN0eCk7XG5cdGN0eC5iZ01hZ2VudGEgPSAkLmJnTWFnZW50YS5iaW5kKGN0eCk7XG5cdGN0eC5iZ0N5YW4gPSAkLmJnQ3lhbi5iaW5kKGN0eCk7XG5cdGN0eC5iZ1doaXRlID0gJC5iZ1doaXRlLmJpbmQoY3R4KTtcblxuXHRyZXR1cm4gY3R4O1xufVxuXG5mdW5jdGlvbiBpbml0KG9wZW4sIGNsb3NlKSB7XG5cdGxldCBibGsgPSB7XG5cdFx0b3BlbjogYFxceDFiWyR7b3Blbn1tYCxcblx0XHRjbG9zZTogYFxceDFiWyR7Y2xvc2V9bWAsXG5cdFx0cmd4OiBuZXcgUmVnRXhwKGBcXFxceDFiXFxcXFske2Nsb3NlfW1gLCAnZycpXG5cdH07XG5cdHJldHVybiBmdW5jdGlvbiAodHh0KSB7XG5cdFx0aWYgKHRoaXMgIT09IHZvaWQgMCAmJiB0aGlzLmhhcyAhPT0gdm9pZCAwKSB7XG5cdFx0XHR0aGlzLmhhcy5pbmNsdWRlcyhvcGVuKSB8fCAodGhpcy5oYXMucHVzaChvcGVuKSx0aGlzLmtleXMucHVzaChibGspKTtcblx0XHRcdHJldHVybiB0eHQgPT09IHZvaWQgMCA/IHRoaXMgOiAkLmVuYWJsZWQgPyBydW4odGhpcy5rZXlzLCB0eHQrJycpIDogdHh0KycnO1xuXHRcdH1cblx0XHRyZXR1cm4gdHh0ID09PSB2b2lkIDAgPyBjaGFpbihbb3Blbl0sIFtibGtdKSA6ICQuZW5hYmxlZCA/IHJ1bihbYmxrXSwgdHh0KycnKSA6IHR4dCsnJztcblx0fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSAkO1xuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBvYmplY3QgPT4ge1xuXHRjb25zdCByZXN1bHQgPSB7fTtcblxuXHRmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhvYmplY3QpKSB7XG5cdFx0cmVzdWx0W2tleS50b0xvd2VyQ2FzZSgpXSA9IHZhbHVlO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIFdlIGRlZmluZSB0aGVzZSBtYW51YWxseSB0byBlbnN1cmUgdGhleSdyZSBhbHdheXMgY29waWVkXG4vLyBldmVuIGlmIHRoZXkgd291bGQgbW92ZSB1cCB0aGUgcHJvdG90eXBlIGNoYWluXG4vLyBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX2NsYXNzX2h0dHBfaW5jb21pbmdtZXNzYWdlXG5jb25zdCBrbm93blByb3BlcnRpZXMgPSBbXG5cdCdhYm9ydGVkJyxcblx0J2NvbXBsZXRlJyxcblx0J2hlYWRlcnMnLFxuXHQnaHR0cFZlcnNpb24nLFxuXHQnaHR0cFZlcnNpb25NaW5vcicsXG5cdCdodHRwVmVyc2lvbk1ham9yJyxcblx0J21ldGhvZCcsXG5cdCdyYXdIZWFkZXJzJyxcblx0J3Jhd1RyYWlsZXJzJyxcblx0J3NldFRpbWVvdXQnLFxuXHQnc29ja2V0Jyxcblx0J3N0YXR1c0NvZGUnLFxuXHQnc3RhdHVzTWVzc2FnZScsXG5cdCd0cmFpbGVycycsXG5cdCd1cmwnXG5dO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChmcm9tU3RyZWFtLCB0b1N0cmVhbSkgPT4ge1xuXHRpZiAodG9TdHJlYW0uX3JlYWRhYmxlU3RhdGUuYXV0b0Rlc3Ryb3kpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ1RoZSBzZWNvbmQgc3RyZWFtIG11c3QgaGF2ZSB0aGUgYGF1dG9EZXN0cm95YCBvcHRpb24gc2V0IHRvIGBmYWxzZWAnKTtcblx0fVxuXG5cdGNvbnN0IGZyb21Qcm9wZXJ0aWVzID0gbmV3IFNldChPYmplY3Qua2V5cyhmcm9tU3RyZWFtKS5jb25jYXQoa25vd25Qcm9wZXJ0aWVzKSk7XG5cblx0Y29uc3QgcHJvcGVydGllcyA9IHt9O1xuXG5cdGZvciAoY29uc3QgcHJvcGVydHkgb2YgZnJvbVByb3BlcnRpZXMpIHtcblx0XHQvLyBEb24ndCBvdmVyd3JpdGUgZXhpc3RpbmcgcHJvcGVydGllcy5cblx0XHRpZiAocHJvcGVydHkgaW4gdG9TdHJlYW0pIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdHByb3BlcnRpZXNbcHJvcGVydHldID0ge1xuXHRcdFx0Z2V0KCkge1xuXHRcdFx0XHRjb25zdCB2YWx1ZSA9IGZyb21TdHJlYW1bcHJvcGVydHldO1xuXHRcdFx0XHRjb25zdCBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xuXG5cdFx0XHRcdHJldHVybiBpc0Z1bmN0aW9uID8gdmFsdWUuYmluZChmcm9tU3RyZWFtKSA6IHZhbHVlO1xuXHRcdFx0fSxcblx0XHRcdHNldCh2YWx1ZSkge1xuXHRcdFx0XHRmcm9tU3RyZWFtW3Byb3BlcnR5XSA9IHZhbHVlO1xuXHRcdFx0fSxcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IGZhbHNlXG5cdFx0fTtcblx0fVxuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRvU3RyZWFtLCBwcm9wZXJ0aWVzKTtcblxuXHRmcm9tU3RyZWFtLm9uY2UoJ2Fib3J0ZWQnLCAoKSA9PiB7XG5cdFx0dG9TdHJlYW0uZGVzdHJveSgpO1xuXG5cdFx0dG9TdHJlYW0uZW1pdCgnYWJvcnRlZCcpO1xuXHR9KTtcblxuXHRmcm9tU3RyZWFtLm9uY2UoJ2Nsb3NlJywgKCkgPT4ge1xuXHRcdGlmIChmcm9tU3RyZWFtLmNvbXBsZXRlKSB7XG5cdFx0XHRpZiAodG9TdHJlYW0ucmVhZGFibGUpIHtcblx0XHRcdFx0dG9TdHJlYW0ub25jZSgnZW5kJywgKCkgPT4ge1xuXHRcdFx0XHRcdHRvU3RyZWFtLmVtaXQoJ2Nsb3NlJyk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG9TdHJlYW0uZW1pdCgnY2xvc2UnKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dG9TdHJlYW0uZW1pdCgnY2xvc2UnKTtcblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiB0b1N0cmVhbTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBUT0RPOiBVc2UgdGhlIGBVUkxgIGdsb2JhbCB3aGVuIHRhcmdldGluZyBOb2RlLmpzIDEwXG5jb25zdCBVUkxQYXJzZXIgPSB0eXBlb2YgVVJMID09PSAndW5kZWZpbmVkJyA/IHJlcXVpcmUoJ3VybCcpLlVSTCA6IFVSTDtcblxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9CYXNpY3Nfb2ZfSFRUUC9EYXRhX1VSSXNcbmNvbnN0IERBVEFfVVJMX0RFRkFVTFRfTUlNRV9UWVBFID0gJ3RleHQvcGxhaW4nO1xuY29uc3QgREFUQV9VUkxfREVGQVVMVF9DSEFSU0VUID0gJ3VzLWFzY2lpJztcblxuY29uc3QgdGVzdFBhcmFtZXRlciA9IChuYW1lLCBmaWx0ZXJzKSA9PiB7XG5cdHJldHVybiBmaWx0ZXJzLnNvbWUoZmlsdGVyID0+IGZpbHRlciBpbnN0YW5jZW9mIFJlZ0V4cCA/IGZpbHRlci50ZXN0KG5hbWUpIDogZmlsdGVyID09PSBuYW1lKTtcbn07XG5cbmNvbnN0IG5vcm1hbGl6ZURhdGFVUkwgPSAodXJsU3RyaW5nLCB7c3RyaXBIYXNofSkgPT4ge1xuXHRjb25zdCBwYXJ0cyA9IHVybFN0cmluZy5tYXRjaCgvXmRhdGE6KC4qPyksKC4qPykoPzojKC4qKSk/JC8pO1xuXG5cdGlmICghcGFydHMpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgVVJMOiAke3VybFN0cmluZ31gKTtcblx0fVxuXG5cdGNvbnN0IG1lZGlhVHlwZSA9IHBhcnRzWzFdLnNwbGl0KCc7Jyk7XG5cdGNvbnN0IGJvZHkgPSBwYXJ0c1syXTtcblx0Y29uc3QgaGFzaCA9IHN0cmlwSGFzaCA/ICcnIDogcGFydHNbM107XG5cblx0bGV0IGJhc2U2NCA9IGZhbHNlO1xuXG5cdGlmIChtZWRpYVR5cGVbbWVkaWFUeXBlLmxlbmd0aCAtIDFdID09PSAnYmFzZTY0Jykge1xuXHRcdG1lZGlhVHlwZS5wb3AoKTtcblx0XHRiYXNlNjQgPSB0cnVlO1xuXHR9XG5cblx0Ly8gTG93ZXJjYXNlIE1JTUUgdHlwZVxuXHRjb25zdCBtaW1lVHlwZSA9IChtZWRpYVR5cGUuc2hpZnQoKSB8fCAnJykudG9Mb3dlckNhc2UoKTtcblx0Y29uc3QgYXR0cmlidXRlcyA9IG1lZGlhVHlwZVxuXHRcdC5tYXAoYXR0cmlidXRlID0+IHtcblx0XHRcdGxldCBba2V5LCB2YWx1ZSA9ICcnXSA9IGF0dHJpYnV0ZS5zcGxpdCgnPScpLm1hcChzdHJpbmcgPT4gc3RyaW5nLnRyaW0oKSk7XG5cblx0XHRcdC8vIExvd2VyY2FzZSBgY2hhcnNldGBcblx0XHRcdGlmIChrZXkgPT09ICdjaGFyc2V0Jykge1xuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdFx0aWYgKHZhbHVlID09PSBEQVRBX1VSTF9ERUZBVUxUX0NIQVJTRVQpIHtcblx0XHRcdFx0XHRyZXR1cm4gJyc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGAke2tleX0ke3ZhbHVlID8gYD0ke3ZhbHVlfWAgOiAnJ31gO1xuXHRcdH0pXG5cdFx0LmZpbHRlcihCb29sZWFuKTtcblxuXHRjb25zdCBub3JtYWxpemVkTWVkaWFUeXBlID0gW1xuXHRcdC4uLmF0dHJpYnV0ZXNcblx0XTtcblxuXHRpZiAoYmFzZTY0KSB7XG5cdFx0bm9ybWFsaXplZE1lZGlhVHlwZS5wdXNoKCdiYXNlNjQnKTtcblx0fVxuXG5cdGlmIChub3JtYWxpemVkTWVkaWFUeXBlLmxlbmd0aCAhPT0gMCB8fCAobWltZVR5cGUgJiYgbWltZVR5cGUgIT09IERBVEFfVVJMX0RFRkFVTFRfTUlNRV9UWVBFKSkge1xuXHRcdG5vcm1hbGl6ZWRNZWRpYVR5cGUudW5zaGlmdChtaW1lVHlwZSk7XG5cdH1cblxuXHRyZXR1cm4gYGRhdGE6JHtub3JtYWxpemVkTWVkaWFUeXBlLmpvaW4oJzsnKX0sJHtiYXNlNjQgPyBib2R5LnRyaW0oKSA6IGJvZHl9JHtoYXNoID8gYCMke2hhc2h9YCA6ICcnfWA7XG59O1xuXG5jb25zdCBub3JtYWxpemVVcmwgPSAodXJsU3RyaW5nLCBvcHRpb25zKSA9PiB7XG5cdG9wdGlvbnMgPSB7XG5cdFx0ZGVmYXVsdFByb3RvY29sOiAnaHR0cDonLFxuXHRcdG5vcm1hbGl6ZVByb3RvY29sOiB0cnVlLFxuXHRcdGZvcmNlSHR0cDogZmFsc2UsXG5cdFx0Zm9yY2VIdHRwczogZmFsc2UsXG5cdFx0c3RyaXBBdXRoZW50aWNhdGlvbjogdHJ1ZSxcblx0XHRzdHJpcEhhc2g6IGZhbHNlLFxuXHRcdHN0cmlwV1dXOiB0cnVlLFxuXHRcdHJlbW92ZVF1ZXJ5UGFyYW1ldGVyczogWy9edXRtX1xcdysvaV0sXG5cdFx0cmVtb3ZlVHJhaWxpbmdTbGFzaDogdHJ1ZSxcblx0XHRyZW1vdmVEaXJlY3RvcnlJbmRleDogZmFsc2UsXG5cdFx0c29ydFF1ZXJ5UGFyYW1ldGVyczogdHJ1ZSxcblx0XHQuLi5vcHRpb25zXG5cdH07XG5cblx0Ly8gVE9ETzogUmVtb3ZlIHRoaXMgYXQgc29tZSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdGlmIChSZWZsZWN0LmhhcyhvcHRpb25zLCAnbm9ybWFsaXplSHR0cHMnKSkge1xuXHRcdHRocm93IG5ldyBFcnJvcignb3B0aW9ucy5ub3JtYWxpemVIdHRwcyBpcyByZW5hbWVkIHRvIG9wdGlvbnMuZm9yY2VIdHRwJyk7XG5cdH1cblxuXHRpZiAoUmVmbGVjdC5oYXMob3B0aW9ucywgJ25vcm1hbGl6ZUh0dHAnKSkge1xuXHRcdHRocm93IG5ldyBFcnJvcignb3B0aW9ucy5ub3JtYWxpemVIdHRwIGlzIHJlbmFtZWQgdG8gb3B0aW9ucy5mb3JjZUh0dHBzJyk7XG5cdH1cblxuXHRpZiAoUmVmbGVjdC5oYXMob3B0aW9ucywgJ3N0cmlwRnJhZ21lbnQnKSkge1xuXHRcdHRocm93IG5ldyBFcnJvcignb3B0aW9ucy5zdHJpcEZyYWdtZW50IGlzIHJlbmFtZWQgdG8gb3B0aW9ucy5zdHJpcEhhc2gnKTtcblx0fVxuXG5cdHVybFN0cmluZyA9IHVybFN0cmluZy50cmltKCk7XG5cblx0Ly8gRGF0YSBVUkxcblx0aWYgKC9eZGF0YTovaS50ZXN0KHVybFN0cmluZykpIHtcblx0XHRyZXR1cm4gbm9ybWFsaXplRGF0YVVSTCh1cmxTdHJpbmcsIG9wdGlvbnMpO1xuXHR9XG5cblx0Y29uc3QgaGFzUmVsYXRpdmVQcm90b2NvbCA9IHVybFN0cmluZy5zdGFydHNXaXRoKCcvLycpO1xuXHRjb25zdCBpc1JlbGF0aXZlVXJsID0gIWhhc1JlbGF0aXZlUHJvdG9jb2wgJiYgL15cXC4qXFwvLy50ZXN0KHVybFN0cmluZyk7XG5cblx0Ly8gUHJlcGVuZCBwcm90b2NvbFxuXHRpZiAoIWlzUmVsYXRpdmVVcmwpIHtcblx0XHR1cmxTdHJpbmcgPSB1cmxTdHJpbmcucmVwbGFjZSgvXig/ISg/Olxcdys6KT9cXC9cXC8pfF5cXC9cXC8vLCBvcHRpb25zLmRlZmF1bHRQcm90b2NvbCk7XG5cdH1cblxuXHRjb25zdCB1cmxPYmogPSBuZXcgVVJMUGFyc2VyKHVybFN0cmluZyk7XG5cblx0aWYgKG9wdGlvbnMuZm9yY2VIdHRwICYmIG9wdGlvbnMuZm9yY2VIdHRwcykge1xuXHRcdHRocm93IG5ldyBFcnJvcignVGhlIGBmb3JjZUh0dHBgIGFuZCBgZm9yY2VIdHRwc2Agb3B0aW9ucyBjYW5ub3QgYmUgdXNlZCB0b2dldGhlcicpO1xuXHR9XG5cblx0aWYgKG9wdGlvbnMuZm9yY2VIdHRwICYmIHVybE9iai5wcm90b2NvbCA9PT0gJ2h0dHBzOicpIHtcblx0XHR1cmxPYmoucHJvdG9jb2wgPSAnaHR0cDonO1xuXHR9XG5cblx0aWYgKG9wdGlvbnMuZm9yY2VIdHRwcyAmJiB1cmxPYmoucHJvdG9jb2wgPT09ICdodHRwOicpIHtcblx0XHR1cmxPYmoucHJvdG9jb2wgPSAnaHR0cHM6Jztcblx0fVxuXG5cdC8vIFJlbW92ZSBhdXRoXG5cdGlmIChvcHRpb25zLnN0cmlwQXV0aGVudGljYXRpb24pIHtcblx0XHR1cmxPYmoudXNlcm5hbWUgPSAnJztcblx0XHR1cmxPYmoucGFzc3dvcmQgPSAnJztcblx0fVxuXG5cdC8vIFJlbW92ZSBoYXNoXG5cdGlmIChvcHRpb25zLnN0cmlwSGFzaCkge1xuXHRcdHVybE9iai5oYXNoID0gJyc7XG5cdH1cblxuXHQvLyBSZW1vdmUgZHVwbGljYXRlIHNsYXNoZXMgaWYgbm90IHByZWNlZGVkIGJ5IGEgcHJvdG9jb2xcblx0aWYgKHVybE9iai5wYXRobmFtZSkge1xuXHRcdC8vIFRPRE86IFVzZSB0aGUgZm9sbG93aW5nIGluc3RlYWQgd2hlbiB0YXJnZXRpbmcgTm9kZS5qcyAxMFxuXHRcdC8vIGB1cmxPYmoucGF0aG5hbWUgPSB1cmxPYmoucGF0aG5hbWUucmVwbGFjZSgvKD88IWh0dHBzPzopXFwvezIsfS9nLCAnLycpO2Bcblx0XHR1cmxPYmoucGF0aG5hbWUgPSB1cmxPYmoucGF0aG5hbWUucmVwbGFjZSgvKCg/ITopLnxeKVxcL3syLH0vZywgKF8sIHAxKSA9PiB7XG5cdFx0XHRpZiAoL14oPyFcXC8pL2cudGVzdChwMSkpIHtcblx0XHRcdFx0cmV0dXJuIGAke3AxfS9gO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gJy8nO1xuXHRcdH0pO1xuXHR9XG5cblx0Ly8gRGVjb2RlIFVSSSBvY3RldHNcblx0aWYgKHVybE9iai5wYXRobmFtZSkge1xuXHRcdHVybE9iai5wYXRobmFtZSA9IGRlY29kZVVSSSh1cmxPYmoucGF0aG5hbWUpO1xuXHR9XG5cblx0Ly8gUmVtb3ZlIGRpcmVjdG9yeSBpbmRleFxuXHRpZiAob3B0aW9ucy5yZW1vdmVEaXJlY3RvcnlJbmRleCA9PT0gdHJ1ZSkge1xuXHRcdG9wdGlvbnMucmVtb3ZlRGlyZWN0b3J5SW5kZXggPSBbL15pbmRleFxcLlthLXpdKyQvXTtcblx0fVxuXG5cdGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMucmVtb3ZlRGlyZWN0b3J5SW5kZXgpICYmIG9wdGlvbnMucmVtb3ZlRGlyZWN0b3J5SW5kZXgubGVuZ3RoID4gMCkge1xuXHRcdGxldCBwYXRoQ29tcG9uZW50cyA9IHVybE9iai5wYXRobmFtZS5zcGxpdCgnLycpO1xuXHRcdGNvbnN0IGxhc3RDb21wb25lbnQgPSBwYXRoQ29tcG9uZW50c1twYXRoQ29tcG9uZW50cy5sZW5ndGggLSAxXTtcblxuXHRcdGlmICh0ZXN0UGFyYW1ldGVyKGxhc3RDb21wb25lbnQsIG9wdGlvbnMucmVtb3ZlRGlyZWN0b3J5SW5kZXgpKSB7XG5cdFx0XHRwYXRoQ29tcG9uZW50cyA9IHBhdGhDb21wb25lbnRzLnNsaWNlKDAsIHBhdGhDb21wb25lbnRzLmxlbmd0aCAtIDEpO1xuXHRcdFx0dXJsT2JqLnBhdGhuYW1lID0gcGF0aENvbXBvbmVudHMuc2xpY2UoMSkuam9pbignLycpICsgJy8nO1xuXHRcdH1cblx0fVxuXG5cdGlmICh1cmxPYmouaG9zdG5hbWUpIHtcblx0XHQvLyBSZW1vdmUgdHJhaWxpbmcgZG90XG5cdFx0dXJsT2JqLmhvc3RuYW1lID0gdXJsT2JqLmhvc3RuYW1lLnJlcGxhY2UoL1xcLiQvLCAnJyk7XG5cblx0XHQvLyBSZW1vdmUgYHd3dy5gXG5cdFx0aWYgKG9wdGlvbnMuc3RyaXBXV1cgJiYgL153d3dcXC4oW2EtelxcLVxcZF17Miw2M30pXFwuKFthLXouXXsyLDV9KSQvLnRlc3QodXJsT2JqLmhvc3RuYW1lKSkge1xuXHRcdFx0Ly8gRWFjaCBsYWJlbCBzaG91bGQgYmUgbWF4IDYzIGF0IGxlbmd0aCAobWluOiAyKS5cblx0XHRcdC8vIFRoZSBleHRlbnNpb24gc2hvdWxkIGJlIG1heCA1IGF0IGxlbmd0aCAobWluOiAyKS5cblx0XHRcdC8vIFNvdXJjZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSG9zdG5hbWUjUmVzdHJpY3Rpb25zX29uX3ZhbGlkX2hvc3RfbmFtZXNcblx0XHRcdHVybE9iai5ob3N0bmFtZSA9IHVybE9iai5ob3N0bmFtZS5yZXBsYWNlKC9ed3d3XFwuLywgJycpO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSBxdWVyeSB1bndhbnRlZCBwYXJhbWV0ZXJzXG5cdGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMucmVtb3ZlUXVlcnlQYXJhbWV0ZXJzKSkge1xuXHRcdGZvciAoY29uc3Qga2V5IG9mIFsuLi51cmxPYmouc2VhcmNoUGFyYW1zLmtleXMoKV0pIHtcblx0XHRcdGlmICh0ZXN0UGFyYW1ldGVyKGtleSwgb3B0aW9ucy5yZW1vdmVRdWVyeVBhcmFtZXRlcnMpKSB7XG5cdFx0XHRcdHVybE9iai5zZWFyY2hQYXJhbXMuZGVsZXRlKGtleSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU29ydCBxdWVyeSBwYXJhbWV0ZXJzXG5cdGlmIChvcHRpb25zLnNvcnRRdWVyeVBhcmFtZXRlcnMpIHtcblx0XHR1cmxPYmouc2VhcmNoUGFyYW1zLnNvcnQoKTtcblx0fVxuXG5cdGlmIChvcHRpb25zLnJlbW92ZVRyYWlsaW5nU2xhc2gpIHtcblx0XHR1cmxPYmoucGF0aG5hbWUgPSB1cmxPYmoucGF0aG5hbWUucmVwbGFjZSgvXFwvJC8sICcnKTtcblx0fVxuXG5cdC8vIFRha2UgYWR2YW50YWdlIG9mIG1hbnkgb2YgdGhlIE5vZGUgYHVybGAgbm9ybWFsaXphdGlvbnNcblx0dXJsU3RyaW5nID0gdXJsT2JqLnRvU3RyaW5nKCk7XG5cblx0Ly8gUmVtb3ZlIGVuZGluZyBgL2Bcblx0aWYgKChvcHRpb25zLnJlbW92ZVRyYWlsaW5nU2xhc2ggfHwgdXJsT2JqLnBhdGhuYW1lID09PSAnLycpICYmIHVybE9iai5oYXNoID09PSAnJykge1xuXHRcdHVybFN0cmluZyA9IHVybFN0cmluZy5yZXBsYWNlKC9cXC8kLywgJycpO1xuXHR9XG5cblx0Ly8gUmVzdG9yZSByZWxhdGl2ZSBwcm90b2NvbCwgaWYgYXBwbGljYWJsZVxuXHRpZiAoaGFzUmVsYXRpdmVQcm90b2NvbCAmJiAhb3B0aW9ucy5ub3JtYWxpemVQcm90b2NvbCkge1xuXHRcdHVybFN0cmluZyA9IHVybFN0cmluZy5yZXBsYWNlKC9eaHR0cDpcXC9cXC8vLCAnLy8nKTtcblx0fVxuXG5cdC8vIFJlbW92ZSBodHRwL2h0dHBzXG5cdGlmIChvcHRpb25zLnN0cmlwUHJvdG9jb2wpIHtcblx0XHR1cmxTdHJpbmcgPSB1cmxTdHJpbmcucmVwbGFjZSgvXig/Omh0dHBzPzopP1xcL1xcLy8sICcnKTtcblx0fVxuXG5cdHJldHVybiB1cmxTdHJpbmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vcm1hbGl6ZVVybDtcbi8vIFRPRE86IFJlbW92ZSB0aGlzIGZvciB0aGUgbmV4dCBtYWpvciByZWxlYXNlXG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gbm9ybWFsaXplVXJsO1xuIiwidmFyIHdyYXBweSA9IHJlcXVpcmUoJ3dyYXBweScpXG5tb2R1bGUuZXhwb3J0cyA9IHdyYXBweShvbmNlKVxubW9kdWxlLmV4cG9ydHMuc3RyaWN0ID0gd3JhcHB5KG9uY2VTdHJpY3QpXG5cbm9uY2UucHJvdG8gPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZ1bmN0aW9uLnByb3RvdHlwZSwgJ29uY2UnLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBvbmNlKHRoaXMpXG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSlcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRnVuY3Rpb24ucHJvdG90eXBlLCAnb25jZVN0cmljdCcsIHtcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG9uY2VTdHJpY3QodGhpcylcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KVxufSlcblxuZnVuY3Rpb24gb25jZSAoZm4pIHtcbiAgdmFyIGYgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGYuY2FsbGVkKSByZXR1cm4gZi52YWx1ZVxuICAgIGYuY2FsbGVkID0gdHJ1ZVxuICAgIHJldHVybiBmLnZhbHVlID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICB9XG4gIGYuY2FsbGVkID0gZmFsc2VcbiAgcmV0dXJuIGZcbn1cblxuZnVuY3Rpb24gb25jZVN0cmljdCAoZm4pIHtcbiAgdmFyIGYgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGYuY2FsbGVkKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGYub25jZUVycm9yKVxuICAgIGYuY2FsbGVkID0gdHJ1ZVxuICAgIHJldHVybiBmLnZhbHVlID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICB9XG4gIHZhciBuYW1lID0gZm4ubmFtZSB8fCAnRnVuY3Rpb24gd3JhcHBlZCB3aXRoIGBvbmNlYCdcbiAgZi5vbmNlRXJyb3IgPSBuYW1lICsgXCIgc2hvdWxkbid0IGJlIGNhbGxlZCBtb3JlIHRoYW4gb25jZVwiXG4gIGYuY2FsbGVkID0gZmFsc2VcbiAgcmV0dXJuIGZcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuY2xhc3MgQ2FuY2VsRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG5cdGNvbnN0cnVjdG9yKHJlYXNvbikge1xuXHRcdHN1cGVyKHJlYXNvbiB8fCAnUHJvbWlzZSB3YXMgY2FuY2VsZWQnKTtcblx0XHR0aGlzLm5hbWUgPSAnQ2FuY2VsRXJyb3InO1xuXHR9XG5cblx0Z2V0IGlzQ2FuY2VsZWQoKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cbn1cblxuY2xhc3MgUENhbmNlbGFibGUge1xuXHRzdGF0aWMgZm4odXNlckZuKSB7XG5cdFx0cmV0dXJuICguLi5hcmd1bWVudHNfKSA9PiB7XG5cdFx0XHRyZXR1cm4gbmV3IFBDYW5jZWxhYmxlKChyZXNvbHZlLCByZWplY3QsIG9uQ2FuY2VsKSA9PiB7XG5cdFx0XHRcdGFyZ3VtZW50c18ucHVzaChvbkNhbmNlbCk7XG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcm9taXNlL3ByZWZlci1hd2FpdC10by10aGVuXG5cdFx0XHRcdHVzZXJGbiguLi5hcmd1bWVudHNfKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG5cdFx0XHR9KTtcblx0XHR9O1xuXHR9XG5cblx0Y29uc3RydWN0b3IoZXhlY3V0b3IpIHtcblx0XHR0aGlzLl9jYW5jZWxIYW5kbGVycyA9IFtdO1xuXHRcdHRoaXMuX2lzUGVuZGluZyA9IHRydWU7XG5cdFx0dGhpcy5faXNDYW5jZWxlZCA9IGZhbHNlO1xuXHRcdHRoaXMuX3JlamVjdE9uQ2FuY2VsID0gdHJ1ZTtcblxuXHRcdHRoaXMuX3Byb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHR0aGlzLl9yZWplY3QgPSByZWplY3Q7XG5cblx0XHRcdGNvbnN0IG9uUmVzb2x2ZSA9IHZhbHVlID0+IHtcblx0XHRcdFx0dGhpcy5faXNQZW5kaW5nID0gZmFsc2U7XG5cdFx0XHRcdHJlc29sdmUodmFsdWUpO1xuXHRcdFx0fTtcblxuXHRcdFx0Y29uc3Qgb25SZWplY3QgPSBlcnJvciA9PiB7XG5cdFx0XHRcdHRoaXMuX2lzUGVuZGluZyA9IGZhbHNlO1xuXHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0fTtcblxuXHRcdFx0Y29uc3Qgb25DYW5jZWwgPSBoYW5kbGVyID0+IHtcblx0XHRcdFx0aWYgKCF0aGlzLl9pc1BlbmRpbmcpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1RoZSBgb25DYW5jZWxgIGhhbmRsZXIgd2FzIGF0dGFjaGVkIGFmdGVyIHRoZSBwcm9taXNlIHNldHRsZWQuJyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLl9jYW5jZWxIYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuXHRcdFx0fTtcblxuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXMob25DYW5jZWwsIHtcblx0XHRcdFx0c2hvdWxkUmVqZWN0OiB7XG5cdFx0XHRcdFx0Z2V0OiAoKSA9PiB0aGlzLl9yZWplY3RPbkNhbmNlbCxcblx0XHRcdFx0XHRzZXQ6IGJvb2xlYW4gPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5fcmVqZWN0T25DYW5jZWwgPSBib29sZWFuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHJldHVybiBleGVjdXRvcihvblJlc29sdmUsIG9uUmVqZWN0LCBvbkNhbmNlbCk7XG5cdFx0fSk7XG5cdH1cblxuXHR0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByb21pc2UvcHJlZmVyLWF3YWl0LXRvLXRoZW5cblx0XHRyZXR1cm4gdGhpcy5fcHJvbWlzZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKTtcblx0fVxuXG5cdGNhdGNoKG9uUmVqZWN0ZWQpIHtcblx0XHRyZXR1cm4gdGhpcy5fcHJvbWlzZS5jYXRjaChvblJlamVjdGVkKTtcblx0fVxuXG5cdGZpbmFsbHkob25GaW5hbGx5KSB7XG5cdFx0cmV0dXJuIHRoaXMuX3Byb21pc2UuZmluYWxseShvbkZpbmFsbHkpO1xuXHR9XG5cblx0Y2FuY2VsKHJlYXNvbikge1xuXHRcdGlmICghdGhpcy5faXNQZW5kaW5nIHx8IHRoaXMuX2lzQ2FuY2VsZWQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5fY2FuY2VsSGFuZGxlcnMubGVuZ3RoID4gMCkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Zm9yIChjb25zdCBoYW5kbGVyIG9mIHRoaXMuX2NhbmNlbEhhbmRsZXJzKSB7XG5cdFx0XHRcdFx0aGFuZGxlcigpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0XHR0aGlzLl9yZWplY3QoZXJyb3IpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuX2lzQ2FuY2VsZWQgPSB0cnVlO1xuXHRcdGlmICh0aGlzLl9yZWplY3RPbkNhbmNlbCkge1xuXHRcdFx0dGhpcy5fcmVqZWN0KG5ldyBDYW5jZWxFcnJvcihyZWFzb24pKTtcblx0XHR9XG5cdH1cblxuXHRnZXQgaXNDYW5jZWxlZCgpIHtcblx0XHRyZXR1cm4gdGhpcy5faXNDYW5jZWxlZDtcblx0fVxufVxuXG5PYmplY3Quc2V0UHJvdG90eXBlT2YoUENhbmNlbGFibGUucHJvdG90eXBlLCBQcm9taXNlLnByb3RvdHlwZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUENhbmNlbGFibGU7XG5tb2R1bGUuZXhwb3J0cy5DYW5jZWxFcnJvciA9IENhbmNlbEVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jbGFzcyBEYXRlUGFydCB7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICB0b2tlbixcbiAgICBkYXRlLFxuICAgIHBhcnRzLFxuICAgIGxvY2FsZXNcbiAgfSkge1xuICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcbiAgICB0aGlzLmRhdGUgPSBkYXRlIHx8IG5ldyBEYXRlKCk7XG4gICAgdGhpcy5wYXJ0cyA9IHBhcnRzIHx8IFt0aGlzXTtcbiAgICB0aGlzLmxvY2FsZXMgPSBsb2NhbGVzIHx8IHt9O1xuICB9XG5cbiAgdXAoKSB7fVxuXG4gIGRvd24oKSB7fVxuXG4gIG5leHQoKSB7XG4gICAgY29uc3QgY3VycmVudElkeCA9IHRoaXMucGFydHMuaW5kZXhPZih0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5wYXJ0cy5maW5kKChwYXJ0LCBpZHgpID0+IGlkeCA+IGN1cnJlbnRJZHggJiYgcGFydCBpbnN0YW5jZW9mIERhdGVQYXJ0KTtcbiAgfVxuXG4gIHNldFRvKHZhbCkge31cblxuICBwcmV2KCkge1xuICAgIGxldCBwYXJ0cyA9IFtdLmNvbmNhdCh0aGlzLnBhcnRzKS5yZXZlcnNlKCk7XG4gICAgY29uc3QgY3VycmVudElkeCA9IHBhcnRzLmluZGV4T2YodGhpcyk7XG4gICAgcmV0dXJuIHBhcnRzLmZpbmQoKHBhcnQsIGlkeCkgPT4gaWR4ID4gY3VycmVudElkeCAmJiBwYXJ0IGluc3RhbmNlb2YgRGF0ZVBhcnQpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIFN0cmluZyh0aGlzLmRhdGUpO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEYXRlUGFydDsiLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IERhdGVQYXJ0ID0gcmVxdWlyZSgnLi9kYXRlcGFydCcpO1xuXG5jb25zdCBwb3MgPSBuID0+IHtcbiAgbiA9IG4gJSAxMDtcbiAgcmV0dXJuIG4gPT09IDEgPyAnc3QnIDogbiA9PT0gMiA/ICduZCcgOiBuID09PSAzID8gJ3JkJyA6ICd0aCc7XG59O1xuXG5jbGFzcyBEYXkgZXh0ZW5kcyBEYXRlUGFydCB7XG4gIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICB9XG5cbiAgdXAoKSB7XG4gICAgdGhpcy5kYXRlLnNldERhdGUodGhpcy5kYXRlLmdldERhdGUoKSArIDEpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICB0aGlzLmRhdGUuc2V0RGF0ZSh0aGlzLmRhdGUuZ2V0RGF0ZSgpIC0gMSk7XG4gIH1cblxuICBzZXRUbyh2YWwpIHtcbiAgICB0aGlzLmRhdGUuc2V0RGF0ZShwYXJzZUludCh2YWwuc3Vic3RyKC0yKSkpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgbGV0IGRhdGUgPSB0aGlzLmRhdGUuZ2V0RGF0ZSgpO1xuICAgIGxldCBkYXkgPSB0aGlzLmRhdGUuZ2V0RGF5KCk7XG4gICAgcmV0dXJuIHRoaXMudG9rZW4gPT09ICdERCcgPyBTdHJpbmcoZGF0ZSkucGFkU3RhcnQoMiwgJzAnKSA6IHRoaXMudG9rZW4gPT09ICdEbycgPyBkYXRlICsgcG9zKGRhdGUpIDogdGhpcy50b2tlbiA9PT0gJ2QnID8gZGF5ICsgMSA6IHRoaXMudG9rZW4gPT09ICdkZGQnID8gdGhpcy5sb2NhbGVzLndlZWtkYXlzU2hvcnRbZGF5XSA6IHRoaXMudG9rZW4gPT09ICdkZGRkJyA/IHRoaXMubG9jYWxlcy53ZWVrZGF5c1tkYXldIDogZGF0ZTtcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gRGF5OyIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRGF0ZVBhcnQgPSByZXF1aXJlKCcuL2RhdGVwYXJ0Jyk7XG5cbmNsYXNzIEhvdXJzIGV4dGVuZHMgRGF0ZVBhcnQge1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIHRoaXMuZGF0ZS5zZXRIb3Vycyh0aGlzLmRhdGUuZ2V0SG91cnMoKSArIDEpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICB0aGlzLmRhdGUuc2V0SG91cnModGhpcy5kYXRlLmdldEhvdXJzKCkgLSAxKTtcbiAgfVxuXG4gIHNldFRvKHZhbCkge1xuICAgIHRoaXMuZGF0ZS5zZXRIb3VycyhwYXJzZUludCh2YWwuc3Vic3RyKC0yKSkpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgbGV0IGhvdXJzID0gdGhpcy5kYXRlLmdldEhvdXJzKCk7XG4gICAgaWYgKC9oLy50ZXN0KHRoaXMudG9rZW4pKSBob3VycyA9IGhvdXJzICUgMTIgfHwgMTI7XG4gICAgcmV0dXJuIHRoaXMudG9rZW4ubGVuZ3RoID4gMSA/IFN0cmluZyhob3VycykucGFkU3RhcnQoMiwgJzAnKSA6IGhvdXJzO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBIb3VyczsiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBEYXRlUGFydDogcmVxdWlyZSgnLi9kYXRlcGFydCcpLFxuICBNZXJpZGllbTogcmVxdWlyZSgnLi9tZXJpZGllbScpLFxuICBEYXk6IHJlcXVpcmUoJy4vZGF5JyksXG4gIEhvdXJzOiByZXF1aXJlKCcuL2hvdXJzJyksXG4gIE1pbGxpc2Vjb25kczogcmVxdWlyZSgnLi9taWxsaXNlY29uZHMnKSxcbiAgTWludXRlczogcmVxdWlyZSgnLi9taW51dGVzJyksXG4gIE1vbnRoOiByZXF1aXJlKCcuL21vbnRoJyksXG4gIFNlY29uZHM6IHJlcXVpcmUoJy4vc2Vjb25kcycpLFxuICBZZWFyOiByZXF1aXJlKCcuL3llYXInKVxufTsiLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IERhdGVQYXJ0ID0gcmVxdWlyZSgnLi9kYXRlcGFydCcpO1xuXG5jbGFzcyBNZXJpZGllbSBleHRlbmRzIERhdGVQYXJ0IHtcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gIH1cblxuICB1cCgpIHtcbiAgICB0aGlzLmRhdGUuc2V0SG91cnMoKHRoaXMuZGF0ZS5nZXRIb3VycygpICsgMTIpICUgMjQpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICB0aGlzLnVwKCk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICBsZXQgbWVyaWRpZW0gPSB0aGlzLmRhdGUuZ2V0SG91cnMoKSA+IDEyID8gJ3BtJyA6ICdhbSc7XG4gICAgcmV0dXJuIC9cXEEvLnRlc3QodGhpcy50b2tlbikgPyBtZXJpZGllbS50b1VwcGVyQ2FzZSgpIDogbWVyaWRpZW07XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1lcmlkaWVtOyIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRGF0ZVBhcnQgPSByZXF1aXJlKCcuL2RhdGVwYXJ0Jyk7XG5cbmNsYXNzIE1pbGxpc2Vjb25kcyBleHRlbmRzIERhdGVQYXJ0IHtcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gIH1cblxuICB1cCgpIHtcbiAgICB0aGlzLmRhdGUuc2V0TWlsbGlzZWNvbmRzKHRoaXMuZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSArIDEpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICB0aGlzLmRhdGUuc2V0TWlsbGlzZWNvbmRzKHRoaXMuZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSAtIDEpO1xuICB9XG5cbiAgc2V0VG8odmFsKSB7XG4gICAgdGhpcy5kYXRlLnNldE1pbGxpc2Vjb25kcyhwYXJzZUludCh2YWwuc3Vic3RyKC10aGlzLnRva2VuLmxlbmd0aCkpKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBTdHJpbmcodGhpcy5kYXRlLmdldE1pbGxpc2Vjb25kcygpKS5wYWRTdGFydCg0LCAnMCcpLnN1YnN0cigwLCB0aGlzLnRva2VuLmxlbmd0aCk7XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1pbGxpc2Vjb25kczsiLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IERhdGVQYXJ0ID0gcmVxdWlyZSgnLi9kYXRlcGFydCcpO1xuXG5jbGFzcyBNaW51dGVzIGV4dGVuZHMgRGF0ZVBhcnQge1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIHRoaXMuZGF0ZS5zZXRNaW51dGVzKHRoaXMuZGF0ZS5nZXRNaW51dGVzKCkgKyAxKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgdGhpcy5kYXRlLnNldE1pbnV0ZXModGhpcy5kYXRlLmdldE1pbnV0ZXMoKSAtIDEpO1xuICB9XG5cbiAgc2V0VG8odmFsKSB7XG4gICAgdGhpcy5kYXRlLnNldE1pbnV0ZXMocGFyc2VJbnQodmFsLnN1YnN0cigtMikpKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGxldCBtID0gdGhpcy5kYXRlLmdldE1pbnV0ZXMoKTtcbiAgICByZXR1cm4gdGhpcy50b2tlbi5sZW5ndGggPiAxID8gU3RyaW5nKG0pLnBhZFN0YXJ0KDIsICcwJykgOiBtO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNaW51dGVzOyIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRGF0ZVBhcnQgPSByZXF1aXJlKCcuL2RhdGVwYXJ0Jyk7XG5cbmNsYXNzIE1vbnRoIGV4dGVuZHMgRGF0ZVBhcnQge1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIHRoaXMuZGF0ZS5zZXRNb250aCh0aGlzLmRhdGUuZ2V0TW9udGgoKSArIDEpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICB0aGlzLmRhdGUuc2V0TW9udGgodGhpcy5kYXRlLmdldE1vbnRoKCkgLSAxKTtcbiAgfVxuXG4gIHNldFRvKHZhbCkge1xuICAgIHZhbCA9IHBhcnNlSW50KHZhbC5zdWJzdHIoLTIpKSAtIDE7XG4gICAgdGhpcy5kYXRlLnNldE1vbnRoKHZhbCA8IDAgPyAwIDogdmFsKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGxldCBtb250aCA9IHRoaXMuZGF0ZS5nZXRNb250aCgpO1xuICAgIGxldCB0bCA9IHRoaXMudG9rZW4ubGVuZ3RoO1xuICAgIHJldHVybiB0bCA9PT0gMiA/IFN0cmluZyhtb250aCArIDEpLnBhZFN0YXJ0KDIsICcwJykgOiB0bCA9PT0gMyA/IHRoaXMubG9jYWxlcy5tb250aHNTaG9ydFttb250aF0gOiB0bCA9PT0gNCA/IHRoaXMubG9jYWxlcy5tb250aHNbbW9udGhdIDogU3RyaW5nKG1vbnRoICsgMSk7XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1vbnRoOyIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRGF0ZVBhcnQgPSByZXF1aXJlKCcuL2RhdGVwYXJ0Jyk7XG5cbmNsYXNzIFNlY29uZHMgZXh0ZW5kcyBEYXRlUGFydCB7XG4gIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICB9XG5cbiAgdXAoKSB7XG4gICAgdGhpcy5kYXRlLnNldFNlY29uZHModGhpcy5kYXRlLmdldFNlY29uZHMoKSArIDEpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICB0aGlzLmRhdGUuc2V0U2Vjb25kcyh0aGlzLmRhdGUuZ2V0U2Vjb25kcygpIC0gMSk7XG4gIH1cblxuICBzZXRUbyh2YWwpIHtcbiAgICB0aGlzLmRhdGUuc2V0U2Vjb25kcyhwYXJzZUludCh2YWwuc3Vic3RyKC0yKSkpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgbGV0IHMgPSB0aGlzLmRhdGUuZ2V0U2Vjb25kcygpO1xuICAgIHJldHVybiB0aGlzLnRva2VuLmxlbmd0aCA+IDEgPyBTdHJpbmcocykucGFkU3RhcnQoMiwgJzAnKSA6IHM7XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNlY29uZHM7IiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBEYXRlUGFydCA9IHJlcXVpcmUoJy4vZGF0ZXBhcnQnKTtcblxuY2xhc3MgWWVhciBleHRlbmRzIERhdGVQYXJ0IHtcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gIH1cblxuICB1cCgpIHtcbiAgICB0aGlzLmRhdGUuc2V0RnVsbFllYXIodGhpcy5kYXRlLmdldEZ1bGxZZWFyKCkgKyAxKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgdGhpcy5kYXRlLnNldEZ1bGxZZWFyKHRoaXMuZGF0ZS5nZXRGdWxsWWVhcigpIC0gMSk7XG4gIH1cblxuICBzZXRUbyh2YWwpIHtcbiAgICB0aGlzLmRhdGUuc2V0RnVsbFllYXIodmFsLnN1YnN0cigtNCkpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgbGV0IHllYXIgPSBTdHJpbmcodGhpcy5kYXRlLmdldEZ1bGxZZWFyKCkpLnBhZFN0YXJ0KDQsICcwJyk7XG4gICAgcmV0dXJuIHRoaXMudG9rZW4ubGVuZ3RoID09PSAyID8geWVhci5zdWJzdHIoLTIpIDogeWVhcjtcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gWWVhcjsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOyB9IH1cblxuZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgdmFyIHNlbGYgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzOyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7IGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTsgfSBmdW5jdGlvbiBfdGhyb3coZXJyKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9XG5cbmNvbnN0IGNvbG9yID0gcmVxdWlyZSgna2xldXInKTtcblxuY29uc3QgUHJvbXB0ID0gcmVxdWlyZSgnLi9wcm9tcHQnKTtcblxuY29uc3QgX3JlcXVpcmUgPSByZXF1aXJlKCdzaXN0ZXJhbnNpJyksXG4gICAgICBlcmFzZSA9IF9yZXF1aXJlLmVyYXNlLFxuICAgICAgY3Vyc29yID0gX3JlcXVpcmUuY3Vyc29yO1xuXG5jb25zdCBfcmVxdWlyZTIgPSByZXF1aXJlKCcuLi91dGlsJyksXG4gICAgICBzdHlsZSA9IF9yZXF1aXJlMi5zdHlsZSxcbiAgICAgIGNsZWFyID0gX3JlcXVpcmUyLmNsZWFyLFxuICAgICAgZmlndXJlcyA9IF9yZXF1aXJlMi5maWd1cmVzLFxuICAgICAgd3JhcCA9IF9yZXF1aXJlMi53cmFwLFxuICAgICAgZW50cmllc1RvRGlzcGxheSA9IF9yZXF1aXJlMi5lbnRyaWVzVG9EaXNwbGF5O1xuXG5jb25zdCBnZXRWYWwgPSAoYXJyLCBpKSA9PiBhcnJbaV0gJiYgKGFycltpXS52YWx1ZSB8fCBhcnJbaV0udGl0bGUgfHwgYXJyW2ldKTtcblxuY29uc3QgZ2V0VGl0bGUgPSAoYXJyLCBpKSA9PiBhcnJbaV0gJiYgKGFycltpXS50aXRsZSB8fCBhcnJbaV0udmFsdWUgfHwgYXJyW2ldKTtcblxuY29uc3QgZ2V0SW5kZXggPSAoYXJyLCB2YWxPclRpdGxlKSA9PiB7XG4gIGNvbnN0IGluZGV4ID0gYXJyLmZpbmRJbmRleChlbCA9PiBlbC52YWx1ZSA9PT0gdmFsT3JUaXRsZSB8fCBlbC50aXRsZSA9PT0gdmFsT3JUaXRsZSk7XG4gIHJldHVybiBpbmRleCA+IC0xID8gaW5kZXggOiB1bmRlZmluZWQ7XG59O1xuLyoqXG4gKiBUZXh0UHJvbXB0IEJhc2UgRWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IG9wdHMubWVzc2FnZSBNZXNzYWdlXG4gKiBAcGFyYW0ge0FycmF5fSBvcHRzLmNob2ljZXMgQXJyYXkgb2YgYXV0by1jb21wbGV0ZSBjaG9pY2VzIG9iamVjdHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLnN1Z2dlc3RdIEZpbHRlciBmdW5jdGlvbi4gRGVmYXVsdHMgdG8gc29ydCBieSB0aXRsZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmxpbWl0PTEwXSBNYXggbnVtYmVyIG9mIHJlc3VsdHMgdG8gc2hvd1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmN1cnNvcj0wXSBDdXJzb3Igc3RhcnQgcG9zaXRpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5zdHlsZT0nZGVmYXVsdCddIFJlbmRlciBzdHlsZVxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLmZhbGxiYWNrXSBGYWxsYmFjayBtZXNzYWdlIC0gaW5pdGlhbCB0byBkZWZhdWx0IHZhbHVlXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMuaW5pdGlhbF0gSW5kZXggb2YgdGhlIGRlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdHMuY2xlYXJGaXJzdF0gVGhlIGZpcnN0IEVTQ0FQRSBrZXlwcmVzcyB3aWxsIGNsZWFyIHRoZSBpbnB1dFxuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMubm9NYXRjaGVzXSBUaGUgbm8gbWF0Y2hlcyBmb3VuZCBsYWJlbFxuICovXG5cblxuY2xhc3MgQXV0b2NvbXBsZXRlUHJvbXB0IGV4dGVuZHMgUHJvbXB0IHtcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgdGhpcy5tc2cgPSBvcHRzLm1lc3NhZ2U7XG4gICAgdGhpcy5zdWdnZXN0ID0gb3B0cy5zdWdnZXN0O1xuICAgIHRoaXMuY2hvaWNlcyA9IG9wdHMuY2hvaWNlcztcbiAgICB0aGlzLmluaXRpYWwgPSB0eXBlb2Ygb3B0cy5pbml0aWFsID09PSAnbnVtYmVyJyA/IG9wdHMuaW5pdGlhbCA6IGdldEluZGV4KG9wdHMuY2hvaWNlcywgb3B0cy5pbml0aWFsKTtcbiAgICB0aGlzLnNlbGVjdCA9IHRoaXMuaW5pdGlhbCB8fCBvcHRzLmN1cnNvciB8fCAwO1xuICAgIHRoaXMuaTE4biA9IHtcbiAgICAgIG5vTWF0Y2hlczogb3B0cy5ub01hdGNoZXMgfHwgJ25vIG1hdGNoZXMgZm91bmQnXG4gICAgfTtcbiAgICB0aGlzLmZhbGxiYWNrID0gb3B0cy5mYWxsYmFjayB8fCB0aGlzLmluaXRpYWw7XG4gICAgdGhpcy5jbGVhckZpcnN0ID0gb3B0cy5jbGVhckZpcnN0IHx8IGZhbHNlO1xuICAgIHRoaXMuc3VnZ2VzdGlvbnMgPSBbXTtcbiAgICB0aGlzLmlucHV0ID0gJyc7XG4gICAgdGhpcy5saW1pdCA9IG9wdHMubGltaXQgfHwgMTA7XG4gICAgdGhpcy5jdXJzb3IgPSAwO1xuICAgIHRoaXMudHJhbnNmb3JtID0gc3R5bGUucmVuZGVyKG9wdHMuc3R5bGUpO1xuICAgIHRoaXMuc2NhbGUgPSB0aGlzLnRyYW5zZm9ybS5zY2FsZTtcbiAgICB0aGlzLnJlbmRlciA9IHRoaXMucmVuZGVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jb21wbGV0ZSA9IHRoaXMuY29tcGxldGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNsZWFyID0gY2xlYXIoJycsIHRoaXMub3V0LmNvbHVtbnMpO1xuICAgIHRoaXMuY29tcGxldGUodGhpcy5yZW5kZXIpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBzZXQgZmFsbGJhY2soZmIpIHtcbiAgICB0aGlzLl9mYiA9IE51bWJlci5pc1NhZmVJbnRlZ2VyKHBhcnNlSW50KGZiKSkgPyBwYXJzZUludChmYikgOiBmYjtcbiAgfVxuXG4gIGdldCBmYWxsYmFjaygpIHtcbiAgICBsZXQgY2hvaWNlO1xuICAgIGlmICh0eXBlb2YgdGhpcy5fZmIgPT09ICdudW1iZXInKSBjaG9pY2UgPSB0aGlzLmNob2ljZXNbdGhpcy5fZmJdO2Vsc2UgaWYgKHR5cGVvZiB0aGlzLl9mYiA9PT0gJ3N0cmluZycpIGNob2ljZSA9IHtcbiAgICAgIHRpdGxlOiB0aGlzLl9mYlxuICAgIH07XG4gICAgcmV0dXJuIGNob2ljZSB8fCB0aGlzLl9mYiB8fCB7XG4gICAgICB0aXRsZTogdGhpcy5pMThuLm5vTWF0Y2hlc1xuICAgIH07XG4gIH1cblxuICBtb3ZlU2VsZWN0KGkpIHtcbiAgICB0aGlzLnNlbGVjdCA9IGk7XG4gICAgaWYgKHRoaXMuc3VnZ2VzdGlvbnMubGVuZ3RoID4gMCkgdGhpcy52YWx1ZSA9IGdldFZhbCh0aGlzLnN1Z2dlc3Rpb25zLCBpKTtlbHNlIHRoaXMudmFsdWUgPSB0aGlzLmZhbGxiYWNrLnZhbHVlO1xuICAgIHRoaXMuZmlyZSgpO1xuICB9XG5cbiAgY29tcGxldGUoY2IpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKGZ1bmN0aW9uKiAoKSB7XG4gICAgICBjb25zdCBwID0gX3RoaXMuY29tcGxldGluZyA9IF90aGlzLnN1Z2dlc3QoX3RoaXMuaW5wdXQsIF90aGlzLmNob2ljZXMpO1xuXG4gICAgICBjb25zdCBzdWdnZXN0aW9ucyA9IHlpZWxkIHA7XG4gICAgICBpZiAoX3RoaXMuY29tcGxldGluZyAhPT0gcCkgcmV0dXJuO1xuICAgICAgX3RoaXMuc3VnZ2VzdGlvbnMgPSBzdWdnZXN0aW9ucy5tYXAoKHMsIGksIGFycikgPT4gKHtcbiAgICAgICAgdGl0bGU6IGdldFRpdGxlKGFyciwgaSksXG4gICAgICAgIHZhbHVlOiBnZXRWYWwoYXJyLCBpKSxcbiAgICAgICAgZGVzY3JpcHRpb246IHMuZGVzY3JpcHRpb25cbiAgICAgIH0pKTtcbiAgICAgIF90aGlzLmNvbXBsZXRpbmcgPSBmYWxzZTtcbiAgICAgIGNvbnN0IGwgPSBNYXRoLm1heChzdWdnZXN0aW9ucy5sZW5ndGggLSAxLCAwKTtcblxuICAgICAgX3RoaXMubW92ZVNlbGVjdChNYXRoLm1pbihsLCBfdGhpcy5zZWxlY3QpKTtcblxuICAgICAgY2IgJiYgY2IoKTtcbiAgICB9KSgpO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5pbnB1dCA9ICcnO1xuICAgIHRoaXMuY29tcGxldGUoKCkgPT4ge1xuICAgICAgdGhpcy5tb3ZlU2VsZWN0KHRoaXMuaW5pdGlhbCAhPT0gdm9pZCAwID8gdGhpcy5pbml0aWFsIDogMCk7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH0pO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBleGl0KCkge1xuICAgIGlmICh0aGlzLmNsZWFyRmlyc3QgJiYgdGhpcy5pbnB1dC5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRoaXMuZXhpdGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuYWJvcnRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5maXJlKCk7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIGFib3J0KCkge1xuICAgIHRoaXMuZG9uZSA9IHRoaXMuYWJvcnRlZCA9IHRydWU7XG4gICAgdGhpcy5leGl0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICBzdWJtaXQoKSB7XG4gICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICB0aGlzLmFib3J0ZWQgPSB0aGlzLmV4aXRlZCA9IGZhbHNlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIF8oYywga2V5KSB7XG4gICAgbGV0IHMxID0gdGhpcy5pbnB1dC5zbGljZSgwLCB0aGlzLmN1cnNvcik7XG4gICAgbGV0IHMyID0gdGhpcy5pbnB1dC5zbGljZSh0aGlzLmN1cnNvcik7XG4gICAgdGhpcy5pbnB1dCA9IGAke3MxfSR7Y30ke3MyfWA7XG4gICAgdGhpcy5jdXJzb3IgPSBzMS5sZW5ndGggKyAxO1xuICAgIHRoaXMuY29tcGxldGUodGhpcy5yZW5kZXIpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkZWxldGUoKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yID09PSAwKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgbGV0IHMxID0gdGhpcy5pbnB1dC5zbGljZSgwLCB0aGlzLmN1cnNvciAtIDEpO1xuICAgIGxldCBzMiA9IHRoaXMuaW5wdXQuc2xpY2UodGhpcy5jdXJzb3IpO1xuICAgIHRoaXMuaW5wdXQgPSBgJHtzMX0ke3MyfWA7XG4gICAgdGhpcy5jb21wbGV0ZSh0aGlzLnJlbmRlcik7XG4gICAgdGhpcy5jdXJzb3IgPSB0aGlzLmN1cnNvciAtIDE7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGRlbGV0ZUZvcndhcmQoKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yICogdGhpcy5zY2FsZSA+PSB0aGlzLnJlbmRlcmVkLmxlbmd0aCkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIGxldCBzMSA9IHRoaXMuaW5wdXQuc2xpY2UoMCwgdGhpcy5jdXJzb3IpO1xuICAgIGxldCBzMiA9IHRoaXMuaW5wdXQuc2xpY2UodGhpcy5jdXJzb3IgKyAxKTtcbiAgICB0aGlzLmlucHV0ID0gYCR7czF9JHtzMn1gO1xuICAgIHRoaXMuY29tcGxldGUodGhpcy5yZW5kZXIpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBmaXJzdCgpIHtcbiAgICB0aGlzLm1vdmVTZWxlY3QoMCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGxhc3QoKSB7XG4gICAgdGhpcy5tb3ZlU2VsZWN0KHRoaXMuc3VnZ2VzdGlvbnMubGVuZ3RoIC0gMSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIGlmICh0aGlzLnNlbGVjdCA9PT0gMCkge1xuICAgICAgdGhpcy5tb3ZlU2VsZWN0KHRoaXMuc3VnZ2VzdGlvbnMubGVuZ3RoIC0gMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubW92ZVNlbGVjdCh0aGlzLnNlbGVjdCAtIDEpO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIGlmICh0aGlzLnNlbGVjdCA9PT0gdGhpcy5zdWdnZXN0aW9ucy5sZW5ndGggLSAxKSB7XG4gICAgICB0aGlzLm1vdmVTZWxlY3QoMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubW92ZVNlbGVjdCh0aGlzLnNlbGVjdCArIDEpO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBuZXh0KCkge1xuICAgIGlmICh0aGlzLnNlbGVjdCA9PT0gdGhpcy5zdWdnZXN0aW9ucy5sZW5ndGggLSAxKSB7XG4gICAgICB0aGlzLm1vdmVTZWxlY3QoMCk7XG4gICAgfSBlbHNlIHRoaXMubW92ZVNlbGVjdCh0aGlzLnNlbGVjdCArIDEpO1xuXG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIG5leHRQYWdlKCkge1xuICAgIHRoaXMubW92ZVNlbGVjdChNYXRoLm1pbih0aGlzLnNlbGVjdCArIHRoaXMubGltaXQsIHRoaXMuc3VnZ2VzdGlvbnMubGVuZ3RoIC0gMSkpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBwcmV2UGFnZSgpIHtcbiAgICB0aGlzLm1vdmVTZWxlY3QoTWF0aC5tYXgodGhpcy5zZWxlY3QgLSB0aGlzLmxpbWl0LCAwKSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGxlZnQoKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yIDw9IDApIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB0aGlzLmN1cnNvciA9IHRoaXMuY3Vyc29yIC0gMTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcmlnaHQoKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yICogdGhpcy5zY2FsZSA+PSB0aGlzLnJlbmRlcmVkLmxlbmd0aCkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMuY3Vyc29yID0gdGhpcy5jdXJzb3IgKyAxO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByZW5kZXJPcHRpb24odiwgaG92ZXJlZCwgaXNTdGFydCwgaXNFbmQpIHtcbiAgICBsZXQgZGVzYztcbiAgICBsZXQgcHJlZml4ID0gaXNTdGFydCA/IGZpZ3VyZXMuYXJyb3dVcCA6IGlzRW5kID8gZmlndXJlcy5hcnJvd0Rvd24gOiAnICc7XG4gICAgbGV0IHRpdGxlID0gaG92ZXJlZCA/IGNvbG9yLmN5YW4oKS51bmRlcmxpbmUodi50aXRsZSkgOiB2LnRpdGxlO1xuICAgIHByZWZpeCA9IChob3ZlcmVkID8gY29sb3IuY3lhbihmaWd1cmVzLnBvaW50ZXIpICsgJyAnIDogJyAgJykgKyBwcmVmaXg7XG5cbiAgICBpZiAodi5kZXNjcmlwdGlvbikge1xuICAgICAgZGVzYyA9IGAgLSAke3YuZGVzY3JpcHRpb259YDtcblxuICAgICAgaWYgKHByZWZpeC5sZW5ndGggKyB0aXRsZS5sZW5ndGggKyBkZXNjLmxlbmd0aCA+PSB0aGlzLm91dC5jb2x1bW5zIHx8IHYuZGVzY3JpcHRpb24uc3BsaXQoL1xccj9cXG4vKS5sZW5ndGggPiAxKSB7XG4gICAgICAgIGRlc2MgPSAnXFxuJyArIHdyYXAodi5kZXNjcmlwdGlvbiwge1xuICAgICAgICAgIG1hcmdpbjogMyxcbiAgICAgICAgICB3aWR0aDogdGhpcy5vdXQuY29sdW1uc1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4ICsgJyAnICsgdGl0bGUgKyBjb2xvci5ncmF5KGRlc2MgfHwgJycpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLmNsb3NlZCkgcmV0dXJuO1xuICAgIGlmICh0aGlzLmZpcnN0UmVuZGVyKSB0aGlzLm91dC53cml0ZShjdXJzb3IuaGlkZSk7ZWxzZSB0aGlzLm91dC53cml0ZShjbGVhcih0aGlzLm91dHB1dFRleHQsIHRoaXMub3V0LmNvbHVtbnMpKTtcbiAgICBzdXBlci5yZW5kZXIoKTtcblxuICAgIGxldCBfZW50cmllc1RvRGlzcGxheSA9IGVudHJpZXNUb0Rpc3BsYXkodGhpcy5zZWxlY3QsIHRoaXMuY2hvaWNlcy5sZW5ndGgsIHRoaXMubGltaXQpLFxuICAgICAgICBzdGFydEluZGV4ID0gX2VudHJpZXNUb0Rpc3BsYXkuc3RhcnRJbmRleCxcbiAgICAgICAgZW5kSW5kZXggPSBfZW50cmllc1RvRGlzcGxheS5lbmRJbmRleDtcblxuICAgIHRoaXMub3V0cHV0VGV4dCA9IFtzdHlsZS5zeW1ib2wodGhpcy5kb25lLCB0aGlzLmFib3J0ZWQsIHRoaXMuZXhpdGVkKSwgY29sb3IuYm9sZCh0aGlzLm1zZyksIHN0eWxlLmRlbGltaXRlcih0aGlzLmNvbXBsZXRpbmcpLCB0aGlzLmRvbmUgJiYgdGhpcy5zdWdnZXN0aW9uc1t0aGlzLnNlbGVjdF0gPyB0aGlzLnN1Z2dlc3Rpb25zW3RoaXMuc2VsZWN0XS50aXRsZSA6IHRoaXMucmVuZGVyZWQgPSB0aGlzLnRyYW5zZm9ybS5yZW5kZXIodGhpcy5pbnB1dCldLmpvaW4oJyAnKTtcblxuICAgIGlmICghdGhpcy5kb25lKSB7XG4gICAgICBjb25zdCBzdWdnZXN0aW9ucyA9IHRoaXMuc3VnZ2VzdGlvbnMuc2xpY2Uoc3RhcnRJbmRleCwgZW5kSW5kZXgpLm1hcCgoaXRlbSwgaSkgPT4gdGhpcy5yZW5kZXJPcHRpb24oaXRlbSwgdGhpcy5zZWxlY3QgPT09IGkgKyBzdGFydEluZGV4LCBpID09PSAwICYmIHN0YXJ0SW5kZXggPiAwLCBpICsgc3RhcnRJbmRleCA9PT0gZW5kSW5kZXggLSAxICYmIGVuZEluZGV4IDwgdGhpcy5jaG9pY2VzLmxlbmd0aCkpLmpvaW4oJ1xcbicpO1xuICAgICAgdGhpcy5vdXRwdXRUZXh0ICs9IGBcXG5gICsgKHN1Z2dlc3Rpb25zIHx8IGNvbG9yLmdyYXkodGhpcy5mYWxsYmFjay50aXRsZSkpO1xuICAgIH1cblxuICAgIHRoaXMub3V0LndyaXRlKGVyYXNlLmxpbmUgKyBjdXJzb3IudG8oMCkgKyB0aGlzLm91dHB1dFRleHQpO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBdXRvY29tcGxldGVQcm9tcHQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb2xvciA9IHJlcXVpcmUoJ2tsZXVyJyk7XG5cbmNvbnN0IF9yZXF1aXJlID0gcmVxdWlyZSgnc2lzdGVyYW5zaScpLFxuICAgICAgY3Vyc29yID0gX3JlcXVpcmUuY3Vyc29yO1xuXG5jb25zdCBNdWx0aXNlbGVjdFByb21wdCA9IHJlcXVpcmUoJy4vbXVsdGlzZWxlY3QnKTtcblxuY29uc3QgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi4vdXRpbCcpLFxuICAgICAgY2xlYXIgPSBfcmVxdWlyZTIuY2xlYXIsXG4gICAgICBzdHlsZSA9IF9yZXF1aXJlMi5zdHlsZSxcbiAgICAgIGZpZ3VyZXMgPSBfcmVxdWlyZTIuZmlndXJlcztcbi8qKlxuICogTXVsdGlzZWxlY3RQcm9tcHQgQmFzZSBFbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5tZXNzYWdlIE1lc3NhZ2VcbiAqIEBwYXJhbSB7QXJyYXl9IG9wdHMuY2hvaWNlcyBBcnJheSBvZiBjaG9pY2Ugb2JqZWN0c1xuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLmhpbnRdIEhpbnQgdG8gZGlzcGxheVxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLndhcm5dIEhpbnQgc2hvd24gZm9yIGRpc2FibGVkIGNob2ljZXNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5tYXhdIE1heCBjaG9pY2VzXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMuY3Vyc29yPTBdIEN1cnNvciBzdGFydCBwb3NpdGlvblxuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKi9cblxuXG5jbGFzcyBBdXRvY29tcGxldGVNdWx0aXNlbGVjdFByb21wdCBleHRlbmRzIE11bHRpc2VsZWN0UHJvbXB0IHtcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgb3B0cy5vdmVycmlkZVJlbmRlciA9IHRydWU7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgdGhpcy5pbnB1dFZhbHVlID0gJyc7XG4gICAgdGhpcy5jbGVhciA9IGNsZWFyKCcnLCB0aGlzLm91dC5jb2x1bW5zKTtcbiAgICB0aGlzLmZpbHRlcmVkT3B0aW9ucyA9IHRoaXMudmFsdWU7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGxhc3QoKSB7XG4gICAgdGhpcy5jdXJzb3IgPSB0aGlzLmZpbHRlcmVkT3B0aW9ucy5sZW5ndGggLSAxO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBuZXh0KCkge1xuICAgIHRoaXMuY3Vyc29yID0gKHRoaXMuY3Vyc29yICsgMSkgJSB0aGlzLmZpbHRlcmVkT3B0aW9ucy5sZW5ndGg7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIGlmICh0aGlzLmN1cnNvciA9PT0gMCkge1xuICAgICAgdGhpcy5jdXJzb3IgPSB0aGlzLmZpbHRlcmVkT3B0aW9ucy5sZW5ndGggLSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnNvci0tO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIGlmICh0aGlzLmN1cnNvciA9PT0gdGhpcy5maWx0ZXJlZE9wdGlvbnMubGVuZ3RoIC0gMSkge1xuICAgICAgdGhpcy5jdXJzb3IgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnNvcisrO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBsZWZ0KCkge1xuICAgIHRoaXMuZmlsdGVyZWRPcHRpb25zW3RoaXMuY3Vyc29yXS5zZWxlY3RlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByaWdodCgpIHtcbiAgICBpZiAodGhpcy52YWx1ZS5maWx0ZXIoZSA9PiBlLnNlbGVjdGVkKS5sZW5ndGggPj0gdGhpcy5tYXhDaG9pY2VzKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy5maWx0ZXJlZE9wdGlvbnNbdGhpcy5jdXJzb3JdLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZGVsZXRlKCkge1xuICAgIGlmICh0aGlzLmlucHV0VmFsdWUubGVuZ3RoKSB7XG4gICAgICB0aGlzLmlucHV0VmFsdWUgPSB0aGlzLmlucHV0VmFsdWUuc3Vic3RyKDAsIHRoaXMuaW5wdXRWYWx1ZS5sZW5ndGggLSAxKTtcbiAgICAgIHRoaXMudXBkYXRlRmlsdGVyZWRPcHRpb25zKCk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlRmlsdGVyZWRPcHRpb25zKCkge1xuICAgIGNvbnN0IGN1cnJlbnRIaWdobGlnaHQgPSB0aGlzLmZpbHRlcmVkT3B0aW9uc1t0aGlzLmN1cnNvcl07XG4gICAgdGhpcy5maWx0ZXJlZE9wdGlvbnMgPSB0aGlzLnZhbHVlLmZpbHRlcih2ID0+IHtcbiAgICAgIGlmICh0aGlzLmlucHV0VmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2LnRpdGxlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh2LnRpdGxlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXModGhpcy5pbnB1dFZhbHVlLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHYudmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHYudmFsdWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyh0aGlzLmlucHV0VmFsdWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gICAgY29uc3QgbmV3SGlnaGxpZ2h0SW5kZXggPSB0aGlzLmZpbHRlcmVkT3B0aW9ucy5maW5kSW5kZXgodiA9PiB2ID09PSBjdXJyZW50SGlnaGxpZ2h0KTtcbiAgICB0aGlzLmN1cnNvciA9IG5ld0hpZ2hsaWdodEluZGV4IDwgMCA/IDAgOiBuZXdIaWdobGlnaHRJbmRleDtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgaGFuZGxlU3BhY2VUb2dnbGUoKSB7XG4gICAgY29uc3QgdiA9IHRoaXMuZmlsdGVyZWRPcHRpb25zW3RoaXMuY3Vyc29yXTtcblxuICAgIGlmICh2LnNlbGVjdGVkKSB7XG4gICAgICB2LnNlbGVjdGVkID0gZmFsc2U7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH0gZWxzZSBpZiAodi5kaXNhYmxlZCB8fCB0aGlzLnZhbHVlLmZpbHRlcihlID0+IGUuc2VsZWN0ZWQpLmxlbmd0aCA+PSB0aGlzLm1heENob2ljZXMpIHtcbiAgICAgIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdi5zZWxlY3RlZCA9IHRydWU7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZUlucHV0Q2hhbmdlKGMpIHtcbiAgICB0aGlzLmlucHV0VmFsdWUgPSB0aGlzLmlucHV0VmFsdWUgKyBjO1xuICAgIHRoaXMudXBkYXRlRmlsdGVyZWRPcHRpb25zKCk7XG4gIH1cblxuICBfKGMsIGtleSkge1xuICAgIGlmIChjID09PSAnICcpIHtcbiAgICAgIHRoaXMuaGFuZGxlU3BhY2VUb2dnbGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oYW5kbGVJbnB1dENoYW5nZShjKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXJJbnN0cnVjdGlvbnMoKSB7XG4gICAgaWYgKHRoaXMuaW5zdHJ1Y3Rpb25zID09PSB1bmRlZmluZWQgfHwgdGhpcy5pbnN0cnVjdGlvbnMpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5pbnN0cnVjdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmluc3RydWN0aW9ucztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGBcbkluc3RydWN0aW9uczpcbiAgICAke2ZpZ3VyZXMuYXJyb3dVcH0vJHtmaWd1cmVzLmFycm93RG93bn06IEhpZ2hsaWdodCBvcHRpb25cbiAgICAke2ZpZ3VyZXMuYXJyb3dMZWZ0fS8ke2ZpZ3VyZXMuYXJyb3dSaWdodH0vW3NwYWNlXTogVG9nZ2xlIHNlbGVjdGlvblxuICAgIFthLGIsY10vZGVsZXRlOiBGaWx0ZXIgY2hvaWNlc1xuICAgIGVudGVyL3JldHVybjogQ29tcGxldGUgYW5zd2VyXG5gO1xuICAgIH1cblxuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHJlbmRlckN1cnJlbnRJbnB1dCgpIHtcbiAgICByZXR1cm4gYFxuRmlsdGVyZWQgcmVzdWx0cyBmb3I6ICR7dGhpcy5pbnB1dFZhbHVlID8gdGhpcy5pbnB1dFZhbHVlIDogY29sb3IuZ3JheSgnRW50ZXIgc29tZXRoaW5nIHRvIGZpbHRlcicpfVxcbmA7XG4gIH1cblxuICByZW5kZXJPcHRpb24oY3Vyc29yLCB2LCBpKSB7XG4gICAgbGV0IHRpdGxlO1xuICAgIGlmICh2LmRpc2FibGVkKSB0aXRsZSA9IGN1cnNvciA9PT0gaSA/IGNvbG9yLmdyYXkoKS51bmRlcmxpbmUodi50aXRsZSkgOiBjb2xvci5zdHJpa2V0aHJvdWdoKCkuZ3JheSh2LnRpdGxlKTtlbHNlIHRpdGxlID0gY3Vyc29yID09PSBpID8gY29sb3IuY3lhbigpLnVuZGVybGluZSh2LnRpdGxlKSA6IHYudGl0bGU7XG4gICAgcmV0dXJuICh2LnNlbGVjdGVkID8gY29sb3IuZ3JlZW4oZmlndXJlcy5yYWRpb09uKSA6IGZpZ3VyZXMucmFkaW9PZmYpICsgJyAgJyArIHRpdGxlO1xuICB9XG5cbiAgcmVuZGVyRG9uZU9ySW5zdHJ1Y3Rpb25zKCkge1xuICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlLmZpbHRlcihlID0+IGUuc2VsZWN0ZWQpLm1hcCh2ID0+IHYudGl0bGUpLmpvaW4oJywgJyk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3V0cHV0ID0gW2NvbG9yLmdyYXkodGhpcy5oaW50KSwgdGhpcy5yZW5kZXJJbnN0cnVjdGlvbnMoKSwgdGhpcy5yZW5kZXJDdXJyZW50SW5wdXQoKV07XG5cbiAgICBpZiAodGhpcy5maWx0ZXJlZE9wdGlvbnMubGVuZ3RoICYmIHRoaXMuZmlsdGVyZWRPcHRpb25zW3RoaXMuY3Vyc29yXS5kaXNhYmxlZCkge1xuICAgICAgb3V0cHV0LnB1c2goY29sb3IueWVsbG93KHRoaXMud2FybikpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQuam9pbignICcpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLmNsb3NlZCkgcmV0dXJuO1xuICAgIGlmICh0aGlzLmZpcnN0UmVuZGVyKSB0aGlzLm91dC53cml0ZShjdXJzb3IuaGlkZSk7XG4gICAgc3VwZXIucmVuZGVyKCk7IC8vIHByaW50IHByb21wdFxuXG4gICAgbGV0IHByb21wdCA9IFtzdHlsZS5zeW1ib2wodGhpcy5kb25lLCB0aGlzLmFib3J0ZWQpLCBjb2xvci5ib2xkKHRoaXMubXNnKSwgc3R5bGUuZGVsaW1pdGVyKGZhbHNlKSwgdGhpcy5yZW5kZXJEb25lT3JJbnN0cnVjdGlvbnMoKV0uam9pbignICcpO1xuXG4gICAgaWYgKHRoaXMuc2hvd01pbkVycm9yKSB7XG4gICAgICBwcm9tcHQgKz0gY29sb3IucmVkKGBZb3UgbXVzdCBzZWxlY3QgYSBtaW5pbXVtIG9mICR7dGhpcy5taW5TZWxlY3RlZH0gY2hvaWNlcy5gKTtcbiAgICAgIHRoaXMuc2hvd01pbkVycm9yID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJvbXB0ICs9IHRoaXMucmVuZGVyT3B0aW9ucyh0aGlzLmZpbHRlcmVkT3B0aW9ucyk7XG4gICAgdGhpcy5vdXQud3JpdGUodGhpcy5jbGVhciArIHByb21wdCk7XG4gICAgdGhpcy5jbGVhciA9IGNsZWFyKHByb21wdCwgdGhpcy5vdXQuY29sdW1ucyk7XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEF1dG9jb21wbGV0ZU11bHRpc2VsZWN0UHJvbXB0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBjb2xvciA9IHJlcXVpcmUoJ2tsZXVyJyk7XG5cbmNvbnN0IFByb21wdCA9IHJlcXVpcmUoJy4vcHJvbXB0Jyk7XG5cbmNvbnN0IF9yZXF1aXJlID0gcmVxdWlyZSgnLi4vdXRpbCcpLFxuICAgICAgc3R5bGUgPSBfcmVxdWlyZS5zdHlsZSxcbiAgICAgIGNsZWFyID0gX3JlcXVpcmUuY2xlYXI7XG5cbmNvbnN0IF9yZXF1aXJlMiA9IHJlcXVpcmUoJ3Npc3RlcmFuc2knKSxcbiAgICAgIGVyYXNlID0gX3JlcXVpcmUyLmVyYXNlLFxuICAgICAgY3Vyc29yID0gX3JlcXVpcmUyLmN1cnNvcjtcbi8qKlxuICogQ29uZmlybVByb21wdCBCYXNlIEVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBvcHRzLm1lc3NhZ2UgTWVzc2FnZVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0cy5pbml0aWFsXSBEZWZhdWx0IHZhbHVlICh0cnVlL2ZhbHNlKVxuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMueWVzXSBUaGUgXCJZZXNcIiBsYWJlbFxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLnllc09wdGlvbl0gVGhlIFwiWWVzXCIgb3B0aW9uIHdoZW4gY2hvb3NpbmcgYmV0d2VlbiB5ZXMvbm9cbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5ub10gVGhlIFwiTm9cIiBsYWJlbFxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLm5vT3B0aW9uXSBUaGUgXCJOb1wiIG9wdGlvbiB3aGVuIGNob29zaW5nIGJldHdlZW4geWVzL25vXG4gKi9cblxuXG5jbGFzcyBDb25maXJtUHJvbXB0IGV4dGVuZHMgUHJvbXB0IHtcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgdGhpcy5tc2cgPSBvcHRzLm1lc3NhZ2U7XG4gICAgdGhpcy52YWx1ZSA9IG9wdHMuaW5pdGlhbDtcbiAgICB0aGlzLmluaXRpYWxWYWx1ZSA9ICEhb3B0cy5pbml0aWFsO1xuICAgIHRoaXMueWVzTXNnID0gb3B0cy55ZXMgfHwgJ3llcyc7XG4gICAgdGhpcy55ZXNPcHRpb24gPSBvcHRzLnllc09wdGlvbiB8fCAnKFkvbiknO1xuICAgIHRoaXMubm9Nc2cgPSBvcHRzLm5vIHx8ICdubyc7XG4gICAgdGhpcy5ub09wdGlvbiA9IG9wdHMubm9PcHRpb24gfHwgJyh5L04pJztcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy52YWx1ZSA9IHRoaXMuaW5pdGlhbFZhbHVlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBleGl0KCkge1xuICAgIHRoaXMuYWJvcnQoKTtcbiAgfVxuXG4gIGFib3J0KCkge1xuICAgIHRoaXMuZG9uZSA9IHRoaXMuYWJvcnRlZCA9IHRydWU7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLm91dC53cml0ZSgnXFxuJyk7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG5cbiAgc3VibWl0KCkge1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLnZhbHVlIHx8IGZhbHNlO1xuICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gICAgdGhpcy5hYm9ydGVkID0gZmFsc2U7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLm91dC53cml0ZSgnXFxuJyk7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG5cbiAgXyhjLCBrZXkpIHtcbiAgICBpZiAoYy50b0xvd2VyQ2FzZSgpID09PSAneScpIHtcbiAgICAgIHRoaXMudmFsdWUgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXMuc3VibWl0KCk7XG4gICAgfVxuXG4gICAgaWYgKGMudG9Mb3dlckNhc2UoKSA9PT0gJ24nKSB7XG4gICAgICB0aGlzLnZhbHVlID0gZmFsc2U7XG4gICAgICByZXR1cm4gdGhpcy5zdWJtaXQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5iZWxsKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuY2xvc2VkKSByZXR1cm47XG4gICAgaWYgKHRoaXMuZmlyc3RSZW5kZXIpIHRoaXMub3V0LndyaXRlKGN1cnNvci5oaWRlKTtlbHNlIHRoaXMub3V0LndyaXRlKGNsZWFyKHRoaXMub3V0cHV0VGV4dCwgdGhpcy5vdXQuY29sdW1ucykpO1xuICAgIHN1cGVyLnJlbmRlcigpO1xuICAgIHRoaXMub3V0cHV0VGV4dCA9IFtzdHlsZS5zeW1ib2wodGhpcy5kb25lLCB0aGlzLmFib3J0ZWQpLCBjb2xvci5ib2xkKHRoaXMubXNnKSwgc3R5bGUuZGVsaW1pdGVyKHRoaXMuZG9uZSksIHRoaXMuZG9uZSA/IHRoaXMudmFsdWUgPyB0aGlzLnllc01zZyA6IHRoaXMubm9Nc2cgOiBjb2xvci5ncmF5KHRoaXMuaW5pdGlhbFZhbHVlID8gdGhpcy55ZXNPcHRpb24gOiB0aGlzLm5vT3B0aW9uKV0uam9pbignICcpO1xuICAgIHRoaXMub3V0LndyaXRlKGVyYXNlLmxpbmUgKyBjdXJzb3IudG8oMCkgKyB0aGlzLm91dHB1dFRleHQpO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb25maXJtUHJvbXB0OyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfVxuXG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH1cblxuY29uc3QgY29sb3IgPSByZXF1aXJlKCdrbGV1cicpO1xuXG5jb25zdCBQcm9tcHQgPSByZXF1aXJlKCcuL3Byb21wdCcpO1xuXG5jb25zdCBfcmVxdWlyZSA9IHJlcXVpcmUoJy4uL3V0aWwnKSxcbiAgICAgIHN0eWxlID0gX3JlcXVpcmUuc3R5bGUsXG4gICAgICBjbGVhciA9IF9yZXF1aXJlLmNsZWFyLFxuICAgICAgZmlndXJlcyA9IF9yZXF1aXJlLmZpZ3VyZXM7XG5cbmNvbnN0IF9yZXF1aXJlMiA9IHJlcXVpcmUoJ3Npc3RlcmFuc2knKSxcbiAgICAgIGVyYXNlID0gX3JlcXVpcmUyLmVyYXNlLFxuICAgICAgY3Vyc29yID0gX3JlcXVpcmUyLmN1cnNvcjtcblxuY29uc3QgX3JlcXVpcmUzID0gcmVxdWlyZSgnLi4vZGF0ZXBhcnRzJyksXG4gICAgICBEYXRlUGFydCA9IF9yZXF1aXJlMy5EYXRlUGFydCxcbiAgICAgIE1lcmlkaWVtID0gX3JlcXVpcmUzLk1lcmlkaWVtLFxuICAgICAgRGF5ID0gX3JlcXVpcmUzLkRheSxcbiAgICAgIEhvdXJzID0gX3JlcXVpcmUzLkhvdXJzLFxuICAgICAgTWlsbGlzZWNvbmRzID0gX3JlcXVpcmUzLk1pbGxpc2Vjb25kcyxcbiAgICAgIE1pbnV0ZXMgPSBfcmVxdWlyZTMuTWludXRlcyxcbiAgICAgIE1vbnRoID0gX3JlcXVpcmUzLk1vbnRoLFxuICAgICAgU2Vjb25kcyA9IF9yZXF1aXJlMy5TZWNvbmRzLFxuICAgICAgWWVhciA9IF9yZXF1aXJlMy5ZZWFyO1xuXG5jb25zdCByZWdleCA9IC9cXFxcKC4pfFwiKCg/OlxcXFxbXCJcXFxcXXxbXlwiXSkrKVwifChEW0RvXT98ZHszLDR9fGQpfChNezEsNH0pfChZWSg/OllZKT8pfChbYUFdKXwoW0hoXXsxLDJ9KXwobXsxLDJ9KXwoc3sxLDJ9KXwoU3sxLDR9KXwuL2c7XG5jb25zdCByZWdleEdyb3VwcyA9IHtcbiAgMTogKHtcbiAgICB0b2tlblxuICB9KSA9PiB0b2tlbi5yZXBsYWNlKC9cXFxcKC4pL2csICckMScpLFxuICAyOiBvcHRzID0+IG5ldyBEYXkob3B0cyksXG4gIC8vIERheSAvLyBUT0RPXG4gIDM6IG9wdHMgPT4gbmV3IE1vbnRoKG9wdHMpLFxuICAvLyBNb250aFxuICA0OiBvcHRzID0+IG5ldyBZZWFyKG9wdHMpLFxuICAvLyBZZWFyXG4gIDU6IG9wdHMgPT4gbmV3IE1lcmlkaWVtKG9wdHMpLFxuICAvLyBBTS9QTSAvLyBUT0RPIChzcGVjaWFsKVxuICA2OiBvcHRzID0+IG5ldyBIb3VycyhvcHRzKSxcbiAgLy8gSG91cnNcbiAgNzogb3B0cyA9PiBuZXcgTWludXRlcyhvcHRzKSxcbiAgLy8gTWludXRlc1xuICA4OiBvcHRzID0+IG5ldyBTZWNvbmRzKG9wdHMpLFxuICAvLyBTZWNvbmRzXG4gIDk6IG9wdHMgPT4gbmV3IE1pbGxpc2Vjb25kcyhvcHRzKSAvLyBGcmFjdGlvbmFsIHNlY29uZHNcblxufTtcbmNvbnN0IGRmbHRMb2NhbGVzID0ge1xuICBtb250aHM6ICdKYW51YXJ5LEZlYnJ1YXJ5LE1hcmNoLEFwcmlsLE1heSxKdW5lLEp1bHksQXVndXN0LFNlcHRlbWJlcixPY3RvYmVyLE5vdmVtYmVyLERlY2VtYmVyJy5zcGxpdCgnLCcpLFxuICBtb250aHNTaG9ydDogJ0phbixGZWIsTWFyLEFwcixNYXksSnVuLEp1bCxBdWcsU2VwLE9jdCxOb3YsRGVjJy5zcGxpdCgnLCcpLFxuICB3ZWVrZGF5czogJ1N1bmRheSxNb25kYXksVHVlc2RheSxXZWRuZXNkYXksVGh1cnNkYXksRnJpZGF5LFNhdHVyZGF5Jy5zcGxpdCgnLCcpLFxuICB3ZWVrZGF5c1Nob3J0OiAnU3VuLE1vbixUdWUsV2VkLFRodSxGcmksU2F0Jy5zcGxpdCgnLCcpXG59O1xuLyoqXG4gKiBEYXRlUHJvbXB0IEJhc2UgRWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IG9wdHMubWVzc2FnZSBNZXNzYWdlXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMuaW5pdGlhbF0gSW5kZXggb2YgZGVmYXVsdCB2YWx1ZVxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLm1hc2tdIFRoZSBmb3JtYXQgbWFza1xuICogQHBhcmFtIHtvYmplY3R9IFtvcHRzLmxvY2FsZXNdIFRoZSBkYXRlIGxvY2FsZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5lcnJvcl0gVGhlIGVycm9yIG1lc3NhZ2Ugc2hvd24gb24gaW52YWxpZCB2YWx1ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMudmFsaWRhdGVdIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIHRoZSBzdWJtaXR0ZWQgdmFsdWVcbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICovXG5cbmNsYXNzIERhdGVQcm9tcHQgZXh0ZW5kcyBQcm9tcHQge1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgICB0aGlzLm1zZyA9IG9wdHMubWVzc2FnZTtcbiAgICB0aGlzLmN1cnNvciA9IDA7XG4gICAgdGhpcy50eXBlZCA9ICcnO1xuICAgIHRoaXMubG9jYWxlcyA9IE9iamVjdC5hc3NpZ24oZGZsdExvY2FsZXMsIG9wdHMubG9jYWxlcyk7XG4gICAgdGhpcy5fZGF0ZSA9IG9wdHMuaW5pdGlhbCB8fCBuZXcgRGF0ZSgpO1xuICAgIHRoaXMuZXJyb3JNc2cgPSBvcHRzLmVycm9yIHx8ICdQbGVhc2UgRW50ZXIgQSBWYWxpZCBWYWx1ZSc7XG5cbiAgICB0aGlzLnZhbGlkYXRvciA9IG9wdHMudmFsaWRhdGUgfHwgKCgpID0+IHRydWUpO1xuXG4gICAgdGhpcy5tYXNrID0gb3B0cy5tYXNrIHx8ICdZWVlZLU1NLUREIEhIOm1tOnNzJztcbiAgICB0aGlzLmNsZWFyID0gY2xlYXIoJycsIHRoaXMub3V0LmNvbHVtbnMpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0ZTtcbiAgfVxuXG4gIGdldCBkYXRlKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRlO1xuICB9XG5cbiAgc2V0IGRhdGUoZGF0ZSkge1xuICAgIGlmIChkYXRlKSB0aGlzLl9kYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkpO1xuICB9XG5cbiAgc2V0IG1hc2sobWFzaykge1xuICAgIGxldCByZXN1bHQ7XG4gICAgdGhpcy5wYXJ0cyA9IFtdO1xuXG4gICAgd2hpbGUgKHJlc3VsdCA9IHJlZ2V4LmV4ZWMobWFzaykpIHtcbiAgICAgIGxldCBtYXRjaCA9IHJlc3VsdC5zaGlmdCgpO1xuICAgICAgbGV0IGlkeCA9IHJlc3VsdC5maW5kSW5kZXgoZ3IgPT4gZ3IgIT0gbnVsbCk7XG4gICAgICB0aGlzLnBhcnRzLnB1c2goaWR4IGluIHJlZ2V4R3JvdXBzID8gcmVnZXhHcm91cHNbaWR4XSh7XG4gICAgICAgIHRva2VuOiByZXN1bHRbaWR4XSB8fCBtYXRjaCxcbiAgICAgICAgZGF0ZTogdGhpcy5kYXRlLFxuICAgICAgICBwYXJ0czogdGhpcy5wYXJ0cyxcbiAgICAgICAgbG9jYWxlczogdGhpcy5sb2NhbGVzXG4gICAgICB9KSA6IHJlc3VsdFtpZHhdIHx8IG1hdGNoKTtcbiAgICB9XG5cbiAgICBsZXQgcGFydHMgPSB0aGlzLnBhcnRzLnJlZHVjZSgoYXJyLCBpKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGkgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBhcnJbYXJyLmxlbmd0aCAtIDFdID09PSAnc3RyaW5nJykgYXJyW2Fyci5sZW5ndGggLSAxXSArPSBpO2Vsc2UgYXJyLnB1c2goaSk7XG4gICAgICByZXR1cm4gYXJyO1xuICAgIH0sIFtdKTtcbiAgICB0aGlzLnBhcnRzLnNwbGljZSgwKTtcbiAgICB0aGlzLnBhcnRzLnB1c2goLi4ucGFydHMpO1xuICAgIHRoaXMucmVzZXQoKTtcbiAgfVxuXG4gIG1vdmVDdXJzb3Iobikge1xuICAgIHRoaXMudHlwZWQgPSAnJztcbiAgICB0aGlzLmN1cnNvciA9IG47XG4gICAgdGhpcy5maXJlKCk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLm1vdmVDdXJzb3IodGhpcy5wYXJ0cy5maW5kSW5kZXgocCA9PiBwIGluc3RhbmNlb2YgRGF0ZVBhcnQpKTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZXhpdCgpIHtcbiAgICB0aGlzLmFib3J0KCk7XG4gIH1cblxuICBhYm9ydCgpIHtcbiAgICB0aGlzLmRvbmUgPSB0aGlzLmFib3J0ZWQgPSB0cnVlO1xuICAgIHRoaXMuZXJyb3IgPSBmYWxzZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICB2YWxpZGF0ZSgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKGZ1bmN0aW9uKiAoKSB7XG4gICAgICBsZXQgdmFsaWQgPSB5aWVsZCBfdGhpcy52YWxpZGF0b3IoX3RoaXMudmFsdWUpO1xuXG4gICAgICBpZiAodHlwZW9mIHZhbGlkID09PSAnc3RyaW5nJykge1xuICAgICAgICBfdGhpcy5lcnJvck1zZyA9IHZhbGlkO1xuICAgICAgICB2YWxpZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5lcnJvciA9ICF2YWxpZDtcbiAgICB9KSgpO1xuICB9XG5cbiAgc3VibWl0KCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKGZ1bmN0aW9uKiAoKSB7XG4gICAgICB5aWVsZCBfdGhpczIudmFsaWRhdGUoKTtcblxuICAgICAgaWYgKF90aGlzMi5lcnJvcikge1xuICAgICAgICBfdGhpczIuY29sb3IgPSAncmVkJztcblxuICAgICAgICBfdGhpczIuZmlyZSgpO1xuXG4gICAgICAgIF90aGlzMi5yZW5kZXIoKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzMi5kb25lID0gdHJ1ZTtcbiAgICAgIF90aGlzMi5hYm9ydGVkID0gZmFsc2U7XG5cbiAgICAgIF90aGlzMi5maXJlKCk7XG5cbiAgICAgIF90aGlzMi5yZW5kZXIoKTtcblxuICAgICAgX3RoaXMyLm91dC53cml0ZSgnXFxuJyk7XG5cbiAgICAgIF90aGlzMi5jbG9zZSgpO1xuICAgIH0pKCk7XG4gIH1cblxuICB1cCgpIHtcbiAgICB0aGlzLnR5cGVkID0gJyc7XG4gICAgdGhpcy5wYXJ0c1t0aGlzLmN1cnNvcl0udXAoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICB0aGlzLnR5cGVkID0gJyc7XG4gICAgdGhpcy5wYXJ0c1t0aGlzLmN1cnNvcl0uZG93bigpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBsZWZ0KCkge1xuICAgIGxldCBwcmV2ID0gdGhpcy5wYXJ0c1t0aGlzLmN1cnNvcl0ucHJldigpO1xuICAgIGlmIChwcmV2ID09IG51bGwpIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB0aGlzLm1vdmVDdXJzb3IodGhpcy5wYXJ0cy5pbmRleE9mKHByZXYpKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcmlnaHQoKSB7XG4gICAgbGV0IG5leHQgPSB0aGlzLnBhcnRzW3RoaXMuY3Vyc29yXS5uZXh0KCk7XG4gICAgaWYgKG5leHQgPT0gbnVsbCkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMubW92ZUN1cnNvcih0aGlzLnBhcnRzLmluZGV4T2YobmV4dCkpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBuZXh0KCkge1xuICAgIGxldCBuZXh0ID0gdGhpcy5wYXJ0c1t0aGlzLmN1cnNvcl0ubmV4dCgpO1xuICAgIHRoaXMubW92ZUN1cnNvcihuZXh0ID8gdGhpcy5wYXJ0cy5pbmRleE9mKG5leHQpIDogdGhpcy5wYXJ0cy5maW5kSW5kZXgocGFydCA9PiBwYXJ0IGluc3RhbmNlb2YgRGF0ZVBhcnQpKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgXyhjKSB7XG4gICAgaWYgKC9cXGQvLnRlc3QoYykpIHtcbiAgICAgIHRoaXMudHlwZWQgKz0gYztcbiAgICAgIHRoaXMucGFydHNbdGhpcy5jdXJzb3JdLnNldFRvKHRoaXMudHlwZWQpO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuY2xvc2VkKSByZXR1cm47XG4gICAgaWYgKHRoaXMuZmlyc3RSZW5kZXIpIHRoaXMub3V0LndyaXRlKGN1cnNvci5oaWRlKTtlbHNlIHRoaXMub3V0LndyaXRlKGNsZWFyKHRoaXMub3V0cHV0VGV4dCwgdGhpcy5vdXQuY29sdW1ucykpO1xuICAgIHN1cGVyLnJlbmRlcigpOyAvLyBQcmludCBwcm9tcHRcblxuICAgIHRoaXMub3V0cHV0VGV4dCA9IFtzdHlsZS5zeW1ib2wodGhpcy5kb25lLCB0aGlzLmFib3J0ZWQpLCBjb2xvci5ib2xkKHRoaXMubXNnKSwgc3R5bGUuZGVsaW1pdGVyKGZhbHNlKSwgdGhpcy5wYXJ0cy5yZWR1Y2UoKGFyciwgcCwgaWR4KSA9PiBhcnIuY29uY2F0KGlkeCA9PT0gdGhpcy5jdXJzb3IgJiYgIXRoaXMuZG9uZSA/IGNvbG9yLmN5YW4oKS51bmRlcmxpbmUocC50b1N0cmluZygpKSA6IHApLCBbXSkuam9pbignJyldLmpvaW4oJyAnKTsgLy8gUHJpbnQgZXJyb3JcblxuICAgIGlmICh0aGlzLmVycm9yKSB7XG4gICAgICB0aGlzLm91dHB1dFRleHQgKz0gdGhpcy5lcnJvck1zZy5zcGxpdCgnXFxuJykucmVkdWNlKChhLCBsLCBpKSA9PiBhICsgYFxcbiR7aSA/IGAgYCA6IGZpZ3VyZXMucG9pbnRlclNtYWxsfSAke2NvbG9yLnJlZCgpLml0YWxpYyhsKX1gLCBgYCk7XG4gICAgfVxuXG4gICAgdGhpcy5vdXQud3JpdGUoZXJhc2UubGluZSArIGN1cnNvci50bygwKSArIHRoaXMub3V0cHV0VGV4dCk7XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGVQcm9tcHQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgVGV4dFByb21wdDogcmVxdWlyZSgnLi90ZXh0JyksXG4gIFNlbGVjdFByb21wdDogcmVxdWlyZSgnLi9zZWxlY3QnKSxcbiAgVG9nZ2xlUHJvbXB0OiByZXF1aXJlKCcuL3RvZ2dsZScpLFxuICBEYXRlUHJvbXB0OiByZXF1aXJlKCcuL2RhdGUnKSxcbiAgTnVtYmVyUHJvbXB0OiByZXF1aXJlKCcuL251bWJlcicpLFxuICBNdWx0aXNlbGVjdFByb21wdDogcmVxdWlyZSgnLi9tdWx0aXNlbGVjdCcpLFxuICBBdXRvY29tcGxldGVQcm9tcHQ6IHJlcXVpcmUoJy4vYXV0b2NvbXBsZXRlJyksXG4gIEF1dG9jb21wbGV0ZU11bHRpc2VsZWN0UHJvbXB0OiByZXF1aXJlKCcuL2F1dG9jb21wbGV0ZU11bHRpc2VsZWN0JyksXG4gIENvbmZpcm1Qcm9tcHQ6IHJlcXVpcmUoJy4vY29uZmlybScpXG59OyIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY29sb3IgPSByZXF1aXJlKCdrbGV1cicpO1xuXG5jb25zdCBfcmVxdWlyZSA9IHJlcXVpcmUoJ3Npc3RlcmFuc2knKSxcbiAgICAgIGN1cnNvciA9IF9yZXF1aXJlLmN1cnNvcjtcblxuY29uc3QgUHJvbXB0ID0gcmVxdWlyZSgnLi9wcm9tcHQnKTtcblxuY29uc3QgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi4vdXRpbCcpLFxuICAgICAgY2xlYXIgPSBfcmVxdWlyZTIuY2xlYXIsXG4gICAgICBmaWd1cmVzID0gX3JlcXVpcmUyLmZpZ3VyZXMsXG4gICAgICBzdHlsZSA9IF9yZXF1aXJlMi5zdHlsZSxcbiAgICAgIHdyYXAgPSBfcmVxdWlyZTIud3JhcCxcbiAgICAgIGVudHJpZXNUb0Rpc3BsYXkgPSBfcmVxdWlyZTIuZW50cmllc1RvRGlzcGxheTtcbi8qKlxuICogTXVsdGlzZWxlY3RQcm9tcHQgQmFzZSBFbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5tZXNzYWdlIE1lc3NhZ2VcbiAqIEBwYXJhbSB7QXJyYXl9IG9wdHMuY2hvaWNlcyBBcnJheSBvZiBjaG9pY2Ugb2JqZWN0c1xuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLmhpbnRdIEhpbnQgdG8gZGlzcGxheVxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLndhcm5dIEhpbnQgc2hvd24gZm9yIGRpc2FibGVkIGNob2ljZXNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5tYXhdIE1heCBjaG9pY2VzXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMuY3Vyc29yPTBdIEN1cnNvciBzdGFydCBwb3NpdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLm9wdGlvbnNQZXJQYWdlPTEwXSBNYXggb3B0aW9ucyB0byBkaXNwbGF5IGF0IG9uY2VcbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICovXG5cblxuY2xhc3MgTXVsdGlzZWxlY3RQcm9tcHQgZXh0ZW5kcyBQcm9tcHQge1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgICB0aGlzLm1zZyA9IG9wdHMubWVzc2FnZTtcbiAgICB0aGlzLmN1cnNvciA9IG9wdHMuY3Vyc29yIHx8IDA7XG4gICAgdGhpcy5zY3JvbGxJbmRleCA9IG9wdHMuY3Vyc29yIHx8IDA7XG4gICAgdGhpcy5oaW50ID0gb3B0cy5oaW50IHx8ICcnO1xuICAgIHRoaXMud2FybiA9IG9wdHMud2FybiB8fCAnLSBUaGlzIG9wdGlvbiBpcyBkaXNhYmxlZCAtJztcbiAgICB0aGlzLm1pblNlbGVjdGVkID0gb3B0cy5taW47XG4gICAgdGhpcy5zaG93TWluRXJyb3IgPSBmYWxzZTtcbiAgICB0aGlzLm1heENob2ljZXMgPSBvcHRzLm1heDtcbiAgICB0aGlzLmluc3RydWN0aW9ucyA9IG9wdHMuaW5zdHJ1Y3Rpb25zO1xuICAgIHRoaXMub3B0aW9uc1BlclBhZ2UgPSBvcHRzLm9wdGlvbnNQZXJQYWdlIHx8IDEwO1xuICAgIHRoaXMudmFsdWUgPSBvcHRzLmNob2ljZXMubWFwKChjaCwgaWR4KSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGNoID09PSAnc3RyaW5nJykgY2ggPSB7XG4gICAgICAgIHRpdGxlOiBjaCxcbiAgICAgICAgdmFsdWU6IGlkeFxuICAgICAgfTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRpdGxlOiBjaCAmJiAoY2gudGl0bGUgfHwgY2gudmFsdWUgfHwgY2gpLFxuICAgICAgICBkZXNjcmlwdGlvbjogY2ggJiYgY2guZGVzY3JpcHRpb24sXG4gICAgICAgIHZhbHVlOiBjaCAmJiAoY2gudmFsdWUgPT09IHVuZGVmaW5lZCA/IGlkeCA6IGNoLnZhbHVlKSxcbiAgICAgICAgc2VsZWN0ZWQ6IGNoICYmIGNoLnNlbGVjdGVkLFxuICAgICAgICBkaXNhYmxlZDogY2ggJiYgY2guZGlzYWJsZWRcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdGhpcy5jbGVhciA9IGNsZWFyKCcnLCB0aGlzLm91dC5jb2x1bW5zKTtcblxuICAgIGlmICghb3B0cy5vdmVycmlkZVJlbmRlcikge1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLnZhbHVlLm1hcCh2ID0+ICF2LnNlbGVjdGVkKTtcbiAgICB0aGlzLmN1cnNvciA9IDA7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHNlbGVjdGVkKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlLmZpbHRlcih2ID0+IHYuc2VsZWN0ZWQpO1xuICB9XG5cbiAgZXhpdCgpIHtcbiAgICB0aGlzLmFib3J0KCk7XG4gIH1cblxuICBhYm9ydCgpIHtcbiAgICB0aGlzLmRvbmUgPSB0aGlzLmFib3J0ZWQgPSB0cnVlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIHN1Ym1pdCgpIHtcbiAgICBjb25zdCBzZWxlY3RlZCA9IHRoaXMudmFsdWUuZmlsdGVyKGUgPT4gZS5zZWxlY3RlZCk7XG5cbiAgICBpZiAodGhpcy5taW5TZWxlY3RlZCAmJiBzZWxlY3RlZC5sZW5ndGggPCB0aGlzLm1pblNlbGVjdGVkKSB7XG4gICAgICB0aGlzLnNob3dNaW5FcnJvciA9IHRydWU7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgICAgdGhpcy5hYm9ydGVkID0gZmFsc2U7XG4gICAgICB0aGlzLmZpcmUoKTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICB0aGlzLm91dC53cml0ZSgnXFxuJyk7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgZmlyc3QoKSB7XG4gICAgdGhpcy5jdXJzb3IgPSAwO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBsYXN0KCkge1xuICAgIHRoaXMuY3Vyc29yID0gdGhpcy52YWx1ZS5sZW5ndGggLSAxO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBuZXh0KCkge1xuICAgIHRoaXMuY3Vyc29yID0gKHRoaXMuY3Vyc29yICsgMSkgJSB0aGlzLnZhbHVlLmxlbmd0aDtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgdXAoKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yID09PSAwKSB7XG4gICAgICB0aGlzLmN1cnNvciA9IHRoaXMudmFsdWUubGVuZ3RoIC0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jdXJzb3ItLTtcbiAgICB9XG5cbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICBpZiAodGhpcy5jdXJzb3IgPT09IHRoaXMudmFsdWUubGVuZ3RoIC0gMSkge1xuICAgICAgdGhpcy5jdXJzb3IgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnNvcisrO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBsZWZ0KCkge1xuICAgIHRoaXMudmFsdWVbdGhpcy5jdXJzb3JdLnNlbGVjdGVkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHJpZ2h0KCkge1xuICAgIGlmICh0aGlzLnZhbHVlLmZpbHRlcihlID0+IGUuc2VsZWN0ZWQpLmxlbmd0aCA+PSB0aGlzLm1heENob2ljZXMpIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB0aGlzLnZhbHVlW3RoaXMuY3Vyc29yXS5zZWxlY3RlZCA9IHRydWU7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGhhbmRsZVNwYWNlVG9nZ2xlKCkge1xuICAgIGNvbnN0IHYgPSB0aGlzLnZhbHVlW3RoaXMuY3Vyc29yXTtcblxuICAgIGlmICh2LnNlbGVjdGVkKSB7XG4gICAgICB2LnNlbGVjdGVkID0gZmFsc2U7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH0gZWxzZSBpZiAodi5kaXNhYmxlZCB8fCB0aGlzLnZhbHVlLmZpbHRlcihlID0+IGUuc2VsZWN0ZWQpLmxlbmd0aCA+PSB0aGlzLm1heENob2ljZXMpIHtcbiAgICAgIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdi5zZWxlY3RlZCA9IHRydWU7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiAgfVxuXG4gIHRvZ2dsZUFsbCgpIHtcbiAgICBpZiAodGhpcy5tYXhDaG9pY2VzICE9PSB1bmRlZmluZWQgfHwgdGhpcy52YWx1ZVt0aGlzLmN1cnNvcl0uZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB9XG5cbiAgICBjb25zdCBuZXdTZWxlY3RlZCA9ICF0aGlzLnZhbHVlW3RoaXMuY3Vyc29yXS5zZWxlY3RlZDtcbiAgICB0aGlzLnZhbHVlLmZpbHRlcih2ID0+ICF2LmRpc2FibGVkKS5mb3JFYWNoKHYgPT4gdi5zZWxlY3RlZCA9IG5ld1NlbGVjdGVkKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgXyhjLCBrZXkpIHtcbiAgICBpZiAoYyA9PT0gJyAnKSB7XG4gICAgICB0aGlzLmhhbmRsZVNwYWNlVG9nZ2xlKCk7XG4gICAgfSBlbHNlIGlmIChjID09PSAnYScpIHtcbiAgICAgIHRoaXMudG9nZ2xlQWxsKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXJJbnN0cnVjdGlvbnMoKSB7XG4gICAgaWYgKHRoaXMuaW5zdHJ1Y3Rpb25zID09PSB1bmRlZmluZWQgfHwgdGhpcy5pbnN0cnVjdGlvbnMpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5pbnN0cnVjdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmluc3RydWN0aW9ucztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICdcXG5JbnN0cnVjdGlvbnM6XFxuJyArIGAgICAgJHtmaWd1cmVzLmFycm93VXB9LyR7ZmlndXJlcy5hcnJvd0Rvd259OiBIaWdobGlnaHQgb3B0aW9uXFxuYCArIGAgICAgJHtmaWd1cmVzLmFycm93TGVmdH0vJHtmaWd1cmVzLmFycm93UmlnaHR9L1tzcGFjZV06IFRvZ2dsZSBzZWxlY3Rpb25cXG5gICsgKHRoaXMubWF4Q2hvaWNlcyA9PT0gdW5kZWZpbmVkID8gYCAgICBhOiBUb2dnbGUgYWxsXFxuYCA6ICcnKSArIGAgICAgZW50ZXIvcmV0dXJuOiBDb21wbGV0ZSBhbnN3ZXJgO1xuICAgIH1cblxuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHJlbmRlck9wdGlvbihjdXJzb3IsIHYsIGksIGFycm93SW5kaWNhdG9yKSB7XG4gICAgY29uc3QgcHJlZml4ID0gKHYuc2VsZWN0ZWQgPyBjb2xvci5ncmVlbihmaWd1cmVzLnJhZGlvT24pIDogZmlndXJlcy5yYWRpb09mZikgKyAnICcgKyBhcnJvd0luZGljYXRvciArICcgJztcbiAgICBsZXQgdGl0bGUsIGRlc2M7XG5cbiAgICBpZiAodi5kaXNhYmxlZCkge1xuICAgICAgdGl0bGUgPSBjdXJzb3IgPT09IGkgPyBjb2xvci5ncmF5KCkudW5kZXJsaW5lKHYudGl0bGUpIDogY29sb3Iuc3RyaWtldGhyb3VnaCgpLmdyYXkodi50aXRsZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpdGxlID0gY3Vyc29yID09PSBpID8gY29sb3IuY3lhbigpLnVuZGVybGluZSh2LnRpdGxlKSA6IHYudGl0bGU7XG5cbiAgICAgIGlmIChjdXJzb3IgPT09IGkgJiYgdi5kZXNjcmlwdGlvbikge1xuICAgICAgICBkZXNjID0gYCAtICR7di5kZXNjcmlwdGlvbn1gO1xuXG4gICAgICAgIGlmIChwcmVmaXgubGVuZ3RoICsgdGl0bGUubGVuZ3RoICsgZGVzYy5sZW5ndGggPj0gdGhpcy5vdXQuY29sdW1ucyB8fCB2LmRlc2NyaXB0aW9uLnNwbGl0KC9cXHI/XFxuLykubGVuZ3RoID4gMSkge1xuICAgICAgICAgIGRlc2MgPSAnXFxuJyArIHdyYXAodi5kZXNjcmlwdGlvbiwge1xuICAgICAgICAgICAgbWFyZ2luOiBwcmVmaXgubGVuZ3RoLFxuICAgICAgICAgICAgd2lkdGg6IHRoaXMub3V0LmNvbHVtbnNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwcmVmaXggKyB0aXRsZSArIGNvbG9yLmdyYXkoZGVzYyB8fCAnJyk7XG4gIH0gLy8gc2hhcmVkIHdpdGggYXV0b2NvbXBsZXRlTXVsdGlzZWxlY3RcblxuXG4gIHBhZ2luYXRlT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gY29sb3IucmVkKCdObyBtYXRjaGVzIGZvciB0aGlzIHF1ZXJ5LicpO1xuICAgIH1cblxuICAgIGxldCBfZW50cmllc1RvRGlzcGxheSA9IGVudHJpZXNUb0Rpc3BsYXkodGhpcy5jdXJzb3IsIG9wdGlvbnMubGVuZ3RoLCB0aGlzLm9wdGlvbnNQZXJQYWdlKSxcbiAgICAgICAgc3RhcnRJbmRleCA9IF9lbnRyaWVzVG9EaXNwbGF5LnN0YXJ0SW5kZXgsXG4gICAgICAgIGVuZEluZGV4ID0gX2VudHJpZXNUb0Rpc3BsYXkuZW5kSW5kZXg7XG5cbiAgICBsZXQgcHJlZml4LFxuICAgICAgICBzdHlsZWRPcHRpb25zID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gc3RhcnRJbmRleDsgaSA8IGVuZEluZGV4OyBpKyspIHtcbiAgICAgIGlmIChpID09PSBzdGFydEluZGV4ICYmIHN0YXJ0SW5kZXggPiAwKSB7XG4gICAgICAgIHByZWZpeCA9IGZpZ3VyZXMuYXJyb3dVcDtcbiAgICAgIH0gZWxzZSBpZiAoaSA9PT0gZW5kSW5kZXggLSAxICYmIGVuZEluZGV4IDwgb3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgcHJlZml4ID0gZmlndXJlcy5hcnJvd0Rvd247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcmVmaXggPSAnICc7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlZE9wdGlvbnMucHVzaCh0aGlzLnJlbmRlck9wdGlvbih0aGlzLmN1cnNvciwgb3B0aW9uc1tpXSwgaSwgcHJlZml4KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICdcXG4nICsgc3R5bGVkT3B0aW9ucy5qb2luKCdcXG4nKTtcbiAgfSAvLyBzaGFyZWQgd2l0aCBhdXRvY29tbGV0ZU11bHRpc2VsZWN0XG5cblxuICByZW5kZXJPcHRpb25zKG9wdGlvbnMpIHtcbiAgICBpZiAoIXRoaXMuZG9uZSkge1xuICAgICAgcmV0dXJuIHRoaXMucGFnaW5hdGVPcHRpb25zKG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHJlbmRlckRvbmVPckluc3RydWN0aW9ucygpIHtcbiAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZS5maWx0ZXIoZSA9PiBlLnNlbGVjdGVkKS5tYXAodiA9PiB2LnRpdGxlKS5qb2luKCcsICcpO1xuICAgIH1cblxuICAgIGNvbnN0IG91dHB1dCA9IFtjb2xvci5ncmF5KHRoaXMuaGludCksIHRoaXMucmVuZGVySW5zdHJ1Y3Rpb25zKCldO1xuXG4gICAgaWYgKHRoaXMudmFsdWVbdGhpcy5jdXJzb3JdLmRpc2FibGVkKSB7XG4gICAgICBvdXRwdXQucHVzaChjb2xvci55ZWxsb3codGhpcy53YXJuKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dHB1dC5qb2luKCcgJyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuY2xvc2VkKSByZXR1cm47XG4gICAgaWYgKHRoaXMuZmlyc3RSZW5kZXIpIHRoaXMub3V0LndyaXRlKGN1cnNvci5oaWRlKTtcbiAgICBzdXBlci5yZW5kZXIoKTsgLy8gcHJpbnQgcHJvbXB0XG5cbiAgICBsZXQgcHJvbXB0ID0gW3N0eWxlLnN5bWJvbCh0aGlzLmRvbmUsIHRoaXMuYWJvcnRlZCksIGNvbG9yLmJvbGQodGhpcy5tc2cpLCBzdHlsZS5kZWxpbWl0ZXIoZmFsc2UpLCB0aGlzLnJlbmRlckRvbmVPckluc3RydWN0aW9ucygpXS5qb2luKCcgJyk7XG5cbiAgICBpZiAodGhpcy5zaG93TWluRXJyb3IpIHtcbiAgICAgIHByb21wdCArPSBjb2xvci5yZWQoYFlvdSBtdXN0IHNlbGVjdCBhIG1pbmltdW0gb2YgJHt0aGlzLm1pblNlbGVjdGVkfSBjaG9pY2VzLmApO1xuICAgICAgdGhpcy5zaG93TWluRXJyb3IgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBwcm9tcHQgKz0gdGhpcy5yZW5kZXJPcHRpb25zKHRoaXMudmFsdWUpO1xuICAgIHRoaXMub3V0LndyaXRlKHRoaXMuY2xlYXIgKyBwcm9tcHQpO1xuICAgIHRoaXMuY2xlYXIgPSBjbGVhcihwcm9tcHQsIHRoaXMub3V0LmNvbHVtbnMpO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNdWx0aXNlbGVjdFByb21wdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfVxuXG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH1cblxuY29uc3QgY29sb3IgPSByZXF1aXJlKCdrbGV1cicpO1xuXG5jb25zdCBQcm9tcHQgPSByZXF1aXJlKCcuL3Byb21wdCcpO1xuXG5jb25zdCBfcmVxdWlyZSA9IHJlcXVpcmUoJ3Npc3RlcmFuc2knKSxcbiAgICAgIGN1cnNvciA9IF9yZXF1aXJlLmN1cnNvcixcbiAgICAgIGVyYXNlID0gX3JlcXVpcmUuZXJhc2U7XG5cbmNvbnN0IF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4uL3V0aWwnKSxcbiAgICAgIHN0eWxlID0gX3JlcXVpcmUyLnN0eWxlLFxuICAgICAgZmlndXJlcyA9IF9yZXF1aXJlMi5maWd1cmVzLFxuICAgICAgY2xlYXIgPSBfcmVxdWlyZTIuY2xlYXIsXG4gICAgICBsaW5lcyA9IF9yZXF1aXJlMi5saW5lcztcblxuY29uc3QgaXNOdW1iZXIgPSAvWzAtOV0vO1xuXG5jb25zdCBpc0RlZiA9IGFueSA9PiBhbnkgIT09IHVuZGVmaW5lZDtcblxuY29uc3Qgcm91bmQgPSAobnVtYmVyLCBwcmVjaXNpb24pID0+IHtcbiAgbGV0IGZhY3RvciA9IE1hdGgucG93KDEwLCBwcmVjaXNpb24pO1xuICByZXR1cm4gTWF0aC5yb3VuZChudW1iZXIgKiBmYWN0b3IpIC8gZmFjdG9yO1xufTtcbi8qKlxuICogTnVtYmVyUHJvbXB0IEJhc2UgRWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IG9wdHMubWVzc2FnZSBNZXNzYWdlXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMuc3R5bGU9J2RlZmF1bHQnXSBSZW5kZXIgc3R5bGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5pbml0aWFsXSBEZWZhdWx0IHZhbHVlXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMubWF4PStJbmZpbml0eV0gTWF4IHZhbHVlXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMubWluPS1JbmZpbml0eV0gTWluIHZhbHVlXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRzLmZsb2F0PWZhbHNlXSBQYXJzZSBpbnB1dCBhcyBmbG9hdHNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5yb3VuZD0yXSBSb3VuZCBmbG9hdHMgdG8geCBkZWNpbWFsc1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmluY3JlbWVudD0xXSBOdW1iZXIgdG8gaW5jcmVtZW50IGJ5IHdoZW4gdXNpbmcgYXJyb3cta2V5c1xuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMudmFsaWRhdGVdIFZhbGlkYXRlIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5lcnJvcl0gVGhlIGludmFsaWQgZXJyb3IgbGFiZWxcbiAqL1xuXG5cbmNsYXNzIE51bWJlclByb21wdCBleHRlbmRzIFByb21wdCB7XG4gIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICAgIHRoaXMudHJhbnNmb3JtID0gc3R5bGUucmVuZGVyKG9wdHMuc3R5bGUpO1xuICAgIHRoaXMubXNnID0gb3B0cy5tZXNzYWdlO1xuICAgIHRoaXMuaW5pdGlhbCA9IGlzRGVmKG9wdHMuaW5pdGlhbCkgPyBvcHRzLmluaXRpYWwgOiAnJztcbiAgICB0aGlzLmZsb2F0ID0gISFvcHRzLmZsb2F0O1xuICAgIHRoaXMucm91bmQgPSBvcHRzLnJvdW5kIHx8IDI7XG4gICAgdGhpcy5pbmMgPSBvcHRzLmluY3JlbWVudCB8fCAxO1xuICAgIHRoaXMubWluID0gaXNEZWYob3B0cy5taW4pID8gb3B0cy5taW4gOiAtSW5maW5pdHk7XG4gICAgdGhpcy5tYXggPSBpc0RlZihvcHRzLm1heCkgPyBvcHRzLm1heCA6IEluZmluaXR5O1xuICAgIHRoaXMuZXJyb3JNc2cgPSBvcHRzLmVycm9yIHx8IGBQbGVhc2UgRW50ZXIgQSBWYWxpZCBWYWx1ZWA7XG5cbiAgICB0aGlzLnZhbGlkYXRvciA9IG9wdHMudmFsaWRhdGUgfHwgKCgpID0+IHRydWUpO1xuXG4gICAgdGhpcy5jb2xvciA9IGBjeWFuYDtcbiAgICB0aGlzLnZhbHVlID0gYGA7XG4gICAgdGhpcy50eXBlZCA9IGBgO1xuICAgIHRoaXMubGFzdEhpdCA9IDA7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHNldCB2YWx1ZSh2KSB7XG4gICAgaWYgKCF2ICYmIHYgIT09IDApIHtcbiAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgdGhpcy5yZW5kZXJlZCA9IGNvbG9yLmdyYXkodGhpcy50cmFuc2Zvcm0ucmVuZGVyKGAke3RoaXMuaW5pdGlhbH1gKSk7XG4gICAgICB0aGlzLl92YWx1ZSA9IGBgO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBsYWNlaG9sZGVyID0gZmFsc2U7XG4gICAgICB0aGlzLnJlbmRlcmVkID0gdGhpcy50cmFuc2Zvcm0ucmVuZGVyKGAke3JvdW5kKHYsIHRoaXMucm91bmQpfWApO1xuICAgICAgdGhpcy5fdmFsdWUgPSByb3VuZCh2LCB0aGlzLnJvdW5kKTtcbiAgICB9XG5cbiAgICB0aGlzLmZpcmUoKTtcbiAgfVxuXG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICBwYXJzZSh4KSB7XG4gICAgcmV0dXJuIHRoaXMuZmxvYXQgPyBwYXJzZUZsb2F0KHgpIDogcGFyc2VJbnQoeCk7XG4gIH1cblxuICB2YWxpZChjKSB7XG4gICAgcmV0dXJuIGMgPT09IGAtYCB8fCBjID09PSBgLmAgJiYgdGhpcy5mbG9hdCB8fCBpc051bWJlci50ZXN0KGMpO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy50eXBlZCA9IGBgO1xuICAgIHRoaXMudmFsdWUgPSBgYDtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZXhpdCgpIHtcbiAgICB0aGlzLmFib3J0KCk7XG4gIH1cblxuICBhYm9ydCgpIHtcbiAgICBsZXQgeCA9IHRoaXMudmFsdWU7XG4gICAgdGhpcy52YWx1ZSA9IHggIT09IGBgID8geCA6IHRoaXMuaW5pdGlhbDtcbiAgICB0aGlzLmRvbmUgPSB0aGlzLmFib3J0ZWQgPSB0cnVlO1xuICAgIHRoaXMuZXJyb3IgPSBmYWxzZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMub3V0LndyaXRlKGBcXG5gKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICB2YWxpZGF0ZSgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKGZ1bmN0aW9uKiAoKSB7XG4gICAgICBsZXQgdmFsaWQgPSB5aWVsZCBfdGhpcy52YWxpZGF0b3IoX3RoaXMudmFsdWUpO1xuXG4gICAgICBpZiAodHlwZW9mIHZhbGlkID09PSBgc3RyaW5nYCkge1xuICAgICAgICBfdGhpcy5lcnJvck1zZyA9IHZhbGlkO1xuICAgICAgICB2YWxpZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5lcnJvciA9ICF2YWxpZDtcbiAgICB9KSgpO1xuICB9XG5cbiAgc3VibWl0KCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKGZ1bmN0aW9uKiAoKSB7XG4gICAgICB5aWVsZCBfdGhpczIudmFsaWRhdGUoKTtcblxuICAgICAgaWYgKF90aGlzMi5lcnJvcikge1xuICAgICAgICBfdGhpczIuY29sb3IgPSBgcmVkYDtcblxuICAgICAgICBfdGhpczIuZmlyZSgpO1xuXG4gICAgICAgIF90aGlzMi5yZW5kZXIoKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCB4ID0gX3RoaXMyLnZhbHVlO1xuICAgICAgX3RoaXMyLnZhbHVlID0geCAhPT0gYGAgPyB4IDogX3RoaXMyLmluaXRpYWw7XG4gICAgICBfdGhpczIuZG9uZSA9IHRydWU7XG4gICAgICBfdGhpczIuYWJvcnRlZCA9IGZhbHNlO1xuICAgICAgX3RoaXMyLmVycm9yID0gZmFsc2U7XG5cbiAgICAgIF90aGlzMi5maXJlKCk7XG5cbiAgICAgIF90aGlzMi5yZW5kZXIoKTtcblxuICAgICAgX3RoaXMyLm91dC53cml0ZShgXFxuYCk7XG5cbiAgICAgIF90aGlzMi5jbG9zZSgpO1xuICAgIH0pKCk7XG4gIH1cblxuICB1cCgpIHtcbiAgICB0aGlzLnR5cGVkID0gYGA7XG5cbiAgICBpZiAodGhpcy52YWx1ZSA9PT0gJycpIHtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLm1pbiAtIHRoaXMuaW5jO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnZhbHVlID49IHRoaXMubWF4KSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy52YWx1ZSArPSB0aGlzLmluYztcbiAgICB0aGlzLmNvbG9yID0gYGN5YW5gO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIHRoaXMudHlwZWQgPSBgYDtcblxuICAgIGlmICh0aGlzLnZhbHVlID09PSAnJykge1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMubWluICsgdGhpcy5pbmM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudmFsdWUgPD0gdGhpcy5taW4pIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB0aGlzLnZhbHVlIC09IHRoaXMuaW5jO1xuICAgIHRoaXMuY29sb3IgPSBgY3lhbmA7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGRlbGV0ZSgpIHtcbiAgICBsZXQgdmFsID0gdGhpcy52YWx1ZS50b1N0cmluZygpO1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy52YWx1ZSA9IHRoaXMucGFyc2UodmFsID0gdmFsLnNsaWNlKDAsIC0xKSkgfHwgYGA7XG5cbiAgICBpZiAodGhpcy52YWx1ZSAhPT0gJycgJiYgdGhpcy52YWx1ZSA8IHRoaXMubWluKSB7XG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy5taW47XG4gICAgfVxuXG4gICAgdGhpcy5jb2xvciA9IGBjeWFuYDtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbmV4dCgpIHtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy5pbml0aWFsO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBfKGMsIGtleSkge1xuICAgIGlmICghdGhpcy52YWxpZChjKSkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgaWYgKG5vdyAtIHRoaXMubGFzdEhpdCA+IDEwMDApIHRoaXMudHlwZWQgPSBgYDsgLy8gMXMgZWxhcHNlZFxuXG4gICAgdGhpcy50eXBlZCArPSBjO1xuICAgIHRoaXMubGFzdEhpdCA9IG5vdztcbiAgICB0aGlzLmNvbG9yID0gYGN5YW5gO1xuICAgIGlmIChjID09PSBgLmApIHJldHVybiB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnZhbHVlID0gTWF0aC5taW4odGhpcy5wYXJzZSh0aGlzLnR5cGVkKSwgdGhpcy5tYXgpO1xuICAgIGlmICh0aGlzLnZhbHVlID4gdGhpcy5tYXgpIHRoaXMudmFsdWUgPSB0aGlzLm1heDtcbiAgICBpZiAodGhpcy52YWx1ZSA8IHRoaXMubWluKSB0aGlzLnZhbHVlID0gdGhpcy5taW47XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5jbG9zZWQpIHJldHVybjtcblxuICAgIGlmICghdGhpcy5maXJzdFJlbmRlcikge1xuICAgICAgaWYgKHRoaXMub3V0cHV0RXJyb3IpIHRoaXMub3V0LndyaXRlKGN1cnNvci5kb3duKGxpbmVzKHRoaXMub3V0cHV0RXJyb3IsIHRoaXMub3V0LmNvbHVtbnMpIC0gMSkgKyBjbGVhcih0aGlzLm91dHB1dEVycm9yLCB0aGlzLm91dC5jb2x1bW5zKSk7XG4gICAgICB0aGlzLm91dC53cml0ZShjbGVhcih0aGlzLm91dHB1dFRleHQsIHRoaXMub3V0LmNvbHVtbnMpKTtcbiAgICB9XG5cbiAgICBzdXBlci5yZW5kZXIoKTtcbiAgICB0aGlzLm91dHB1dEVycm9yID0gJyc7IC8vIFByaW50IHByb21wdFxuXG4gICAgdGhpcy5vdXRwdXRUZXh0ID0gW3N0eWxlLnN5bWJvbCh0aGlzLmRvbmUsIHRoaXMuYWJvcnRlZCksIGNvbG9yLmJvbGQodGhpcy5tc2cpLCBzdHlsZS5kZWxpbWl0ZXIodGhpcy5kb25lKSwgIXRoaXMuZG9uZSB8fCAhdGhpcy5kb25lICYmICF0aGlzLnBsYWNlaG9sZGVyID8gY29sb3JbdGhpcy5jb2xvcl0oKS51bmRlcmxpbmUodGhpcy5yZW5kZXJlZCkgOiB0aGlzLnJlbmRlcmVkXS5qb2luKGAgYCk7IC8vIFByaW50IGVycm9yXG5cbiAgICBpZiAodGhpcy5lcnJvcikge1xuICAgICAgdGhpcy5vdXRwdXRFcnJvciArPSB0aGlzLmVycm9yTXNnLnNwbGl0KGBcXG5gKS5yZWR1Y2UoKGEsIGwsIGkpID0+IGEgKyBgXFxuJHtpID8gYCBgIDogZmlndXJlcy5wb2ludGVyU21hbGx9ICR7Y29sb3IucmVkKCkuaXRhbGljKGwpfWAsIGBgKTtcbiAgICB9XG5cbiAgICB0aGlzLm91dC53cml0ZShlcmFzZS5saW5lICsgY3Vyc29yLnRvKDApICsgdGhpcy5vdXRwdXRUZXh0ICsgY3Vyc29yLnNhdmUgKyB0aGlzLm91dHB1dEVycm9yICsgY3Vyc29yLnJlc3RvcmUpO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBOdW1iZXJQcm9tcHQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCByZWFkbGluZSA9IHJlcXVpcmUoJ3JlYWRsaW5lJyk7XG5cbmNvbnN0IF9yZXF1aXJlID0gcmVxdWlyZSgnLi4vdXRpbCcpLFxuICAgICAgYWN0aW9uID0gX3JlcXVpcmUuYWN0aW9uO1xuXG5jb25zdCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKTtcblxuY29uc3QgX3JlcXVpcmUyID0gcmVxdWlyZSgnc2lzdGVyYW5zaScpLFxuICAgICAgYmVlcCA9IF9yZXF1aXJlMi5iZWVwLFxuICAgICAgY3Vyc29yID0gX3JlcXVpcmUyLmN1cnNvcjtcblxuY29uc3QgY29sb3IgPSByZXF1aXJlKCdrbGV1cicpO1xuLyoqXG4gKiBCYXNlIHByb21wdCBza2VsZXRvblxuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKi9cblxuXG5jbGFzcyBQcm9tcHQgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZmlyc3RSZW5kZXIgPSB0cnVlO1xuICAgIHRoaXMuaW4gPSBvcHRzLnN0ZGluIHx8IHByb2Nlc3Muc3RkaW47XG4gICAgdGhpcy5vdXQgPSBvcHRzLnN0ZG91dCB8fCBwcm9jZXNzLnN0ZG91dDtcblxuICAgIHRoaXMub25SZW5kZXIgPSAob3B0cy5vblJlbmRlciB8fCAoKCkgPT4gdm9pZCAwKSkuYmluZCh0aGlzKTtcblxuICAgIGNvbnN0IHJsID0gcmVhZGxpbmUuY3JlYXRlSW50ZXJmYWNlKHtcbiAgICAgIGlucHV0OiB0aGlzLmluLFxuICAgICAgZXNjYXBlQ29kZVRpbWVvdXQ6IDUwXG4gICAgfSk7XG4gICAgcmVhZGxpbmUuZW1pdEtleXByZXNzRXZlbnRzKHRoaXMuaW4sIHJsKTtcbiAgICBpZiAodGhpcy5pbi5pc1RUWSkgdGhpcy5pbi5zZXRSYXdNb2RlKHRydWUpO1xuICAgIGNvbnN0IGlzU2VsZWN0ID0gWydTZWxlY3RQcm9tcHQnLCAnTXVsdGlzZWxlY3RQcm9tcHQnXS5pbmRleE9mKHRoaXMuY29uc3RydWN0b3IubmFtZSkgPiAtMTtcblxuICAgIGNvbnN0IGtleXByZXNzID0gKHN0ciwga2V5KSA9PiB7XG4gICAgICBsZXQgYSA9IGFjdGlvbihrZXksIGlzU2VsZWN0KTtcblxuICAgICAgaWYgKGEgPT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuXyAmJiB0aGlzLl8oc3RyLCBrZXkpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpc1thXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzW2FdKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmJlbGwoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5jbG9zZSA9ICgpID0+IHtcbiAgICAgIHRoaXMub3V0LndyaXRlKGN1cnNvci5zaG93KTtcbiAgICAgIHRoaXMuaW4ucmVtb3ZlTGlzdGVuZXIoJ2tleXByZXNzJywga2V5cHJlc3MpO1xuICAgICAgaWYgKHRoaXMuaW4uaXNUVFkpIHRoaXMuaW4uc2V0UmF3TW9kZShmYWxzZSk7XG4gICAgICBybC5jbG9zZSgpO1xuICAgICAgdGhpcy5lbWl0KHRoaXMuYWJvcnRlZCA/ICdhYm9ydCcgOiB0aGlzLmV4aXRlZCA/ICdleGl0JyA6ICdzdWJtaXQnLCB0aGlzLnZhbHVlKTtcbiAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgdGhpcy5pbi5vbigna2V5cHJlc3MnLCBrZXlwcmVzcyk7XG4gIH1cblxuICBmaXJlKCkge1xuICAgIHRoaXMuZW1pdCgnc3RhdGUnLCB7XG4gICAgICB2YWx1ZTogdGhpcy52YWx1ZSxcbiAgICAgIGFib3J0ZWQ6ICEhdGhpcy5hYm9ydGVkLFxuICAgICAgZXhpdGVkOiAhIXRoaXMuZXhpdGVkXG4gICAgfSk7XG4gIH1cblxuICBiZWxsKCkge1xuICAgIHRoaXMub3V0LndyaXRlKGJlZXApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHRoaXMub25SZW5kZXIoY29sb3IpO1xuICAgIGlmICh0aGlzLmZpcnN0UmVuZGVyKSB0aGlzLmZpcnN0UmVuZGVyID0gZmFsc2U7XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21wdDsiLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNvbG9yID0gcmVxdWlyZSgna2xldXInKTtcblxuY29uc3QgUHJvbXB0ID0gcmVxdWlyZSgnLi9wcm9tcHQnKTtcblxuY29uc3QgX3JlcXVpcmUgPSByZXF1aXJlKCcuLi91dGlsJyksXG4gICAgICBzdHlsZSA9IF9yZXF1aXJlLnN0eWxlLFxuICAgICAgY2xlYXIgPSBfcmVxdWlyZS5jbGVhcixcbiAgICAgIGZpZ3VyZXMgPSBfcmVxdWlyZS5maWd1cmVzLFxuICAgICAgd3JhcCA9IF9yZXF1aXJlLndyYXAsXG4gICAgICBlbnRyaWVzVG9EaXNwbGF5ID0gX3JlcXVpcmUuZW50cmllc1RvRGlzcGxheTtcblxuY29uc3QgX3JlcXVpcmUyID0gcmVxdWlyZSgnc2lzdGVyYW5zaScpLFxuICAgICAgY3Vyc29yID0gX3JlcXVpcmUyLmN1cnNvcjtcbi8qKlxuICogU2VsZWN0UHJvbXB0IEJhc2UgRWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IG9wdHMubWVzc2FnZSBNZXNzYWdlXG4gKiBAcGFyYW0ge0FycmF5fSBvcHRzLmNob2ljZXMgQXJyYXkgb2YgY2hvaWNlIG9iamVjdHNcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5oaW50XSBIaW50IHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5pbml0aWFsXSBJbmRleCBvZiBkZWZhdWx0IHZhbHVlXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5vcHRpb25zUGVyUGFnZT0xMF0gTWF4IG9wdGlvbnMgdG8gZGlzcGxheSBhdCBvbmNlXG4gKi9cblxuXG5jbGFzcyBTZWxlY3RQcm9tcHQgZXh0ZW5kcyBQcm9tcHQge1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgICB0aGlzLm1zZyA9IG9wdHMubWVzc2FnZTtcbiAgICB0aGlzLmhpbnQgPSBvcHRzLmhpbnQgfHwgJy0gVXNlIGFycm93LWtleXMuIFJldHVybiB0byBzdWJtaXQuJztcbiAgICB0aGlzLndhcm4gPSBvcHRzLndhcm4gfHwgJy0gVGhpcyBvcHRpb24gaXMgZGlzYWJsZWQnO1xuICAgIHRoaXMuY3Vyc29yID0gb3B0cy5pbml0aWFsIHx8IDA7XG4gICAgdGhpcy5jaG9pY2VzID0gb3B0cy5jaG9pY2VzLm1hcCgoY2gsIGlkeCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBjaCA9PT0gJ3N0cmluZycpIGNoID0ge1xuICAgICAgICB0aXRsZTogY2gsXG4gICAgICAgIHZhbHVlOiBpZHhcbiAgICAgIH07XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0aXRsZTogY2ggJiYgKGNoLnRpdGxlIHx8IGNoLnZhbHVlIHx8IGNoKSxcbiAgICAgICAgdmFsdWU6IGNoICYmIChjaC52YWx1ZSA9PT0gdW5kZWZpbmVkID8gaWR4IDogY2gudmFsdWUpLFxuICAgICAgICBkZXNjcmlwdGlvbjogY2ggJiYgY2guZGVzY3JpcHRpb24sXG4gICAgICAgIHNlbGVjdGVkOiBjaCAmJiBjaC5zZWxlY3RlZCxcbiAgICAgICAgZGlzYWJsZWQ6IGNoICYmIGNoLmRpc2FibGVkXG4gICAgICB9O1xuICAgIH0pO1xuICAgIHRoaXMub3B0aW9uc1BlclBhZ2UgPSBvcHRzLm9wdGlvbnNQZXJQYWdlIHx8IDEwO1xuICAgIHRoaXMudmFsdWUgPSAodGhpcy5jaG9pY2VzW3RoaXMuY3Vyc29yXSB8fCB7fSkudmFsdWU7XG4gICAgdGhpcy5jbGVhciA9IGNsZWFyKCcnLCB0aGlzLm91dC5jb2x1bW5zKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbW92ZUN1cnNvcihuKSB7XG4gICAgdGhpcy5jdXJzb3IgPSBuO1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLmNob2ljZXNbbl0udmFsdWU7XG4gICAgdGhpcy5maXJlKCk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLm1vdmVDdXJzb3IoMCk7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGV4aXQoKSB7XG4gICAgdGhpcy5hYm9ydCgpO1xuICB9XG5cbiAgYWJvcnQoKSB7XG4gICAgdGhpcy5kb25lID0gdGhpcy5hYm9ydGVkID0gdHJ1ZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICBzdWJtaXQoKSB7XG4gICAgaWYgKCF0aGlzLnNlbGVjdGlvbi5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICAgIHRoaXMuYWJvcnRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5maXJlKCk7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH0gZWxzZSB0aGlzLmJlbGwoKTtcbiAgfVxuXG4gIGZpcnN0KCkge1xuICAgIHRoaXMubW92ZUN1cnNvcigwKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbGFzdCgpIHtcbiAgICB0aGlzLm1vdmVDdXJzb3IodGhpcy5jaG9pY2VzLmxlbmd0aCAtIDEpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICB1cCgpIHtcbiAgICBpZiAodGhpcy5jdXJzb3IgPT09IDApIHtcbiAgICAgIHRoaXMubW92ZUN1cnNvcih0aGlzLmNob2ljZXMubGVuZ3RoIC0gMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubW92ZUN1cnNvcih0aGlzLmN1cnNvciAtIDEpO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIGlmICh0aGlzLmN1cnNvciA9PT0gdGhpcy5jaG9pY2VzLmxlbmd0aCAtIDEpIHtcbiAgICAgIHRoaXMubW92ZUN1cnNvcigwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tb3ZlQ3Vyc29yKHRoaXMuY3Vyc29yICsgMSk7XG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIG5leHQoKSB7XG4gICAgdGhpcy5tb3ZlQ3Vyc29yKCh0aGlzLmN1cnNvciArIDEpICUgdGhpcy5jaG9pY2VzLmxlbmd0aCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIF8oYywga2V5KSB7XG4gICAgaWYgKGMgPT09ICcgJykgcmV0dXJuIHRoaXMuc3VibWl0KCk7XG4gIH1cblxuICBnZXQgc2VsZWN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmNob2ljZXNbdGhpcy5jdXJzb3JdO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLmNsb3NlZCkgcmV0dXJuO1xuICAgIGlmICh0aGlzLmZpcnN0UmVuZGVyKSB0aGlzLm91dC53cml0ZShjdXJzb3IuaGlkZSk7ZWxzZSB0aGlzLm91dC53cml0ZShjbGVhcih0aGlzLm91dHB1dFRleHQsIHRoaXMub3V0LmNvbHVtbnMpKTtcbiAgICBzdXBlci5yZW5kZXIoKTtcblxuICAgIGxldCBfZW50cmllc1RvRGlzcGxheSA9IGVudHJpZXNUb0Rpc3BsYXkodGhpcy5jdXJzb3IsIHRoaXMuY2hvaWNlcy5sZW5ndGgsIHRoaXMub3B0aW9uc1BlclBhZ2UpLFxuICAgICAgICBzdGFydEluZGV4ID0gX2VudHJpZXNUb0Rpc3BsYXkuc3RhcnRJbmRleCxcbiAgICAgICAgZW5kSW5kZXggPSBfZW50cmllc1RvRGlzcGxheS5lbmRJbmRleDsgLy8gUHJpbnQgcHJvbXB0XG5cblxuICAgIHRoaXMub3V0cHV0VGV4dCA9IFtzdHlsZS5zeW1ib2wodGhpcy5kb25lLCB0aGlzLmFib3J0ZWQpLCBjb2xvci5ib2xkKHRoaXMubXNnKSwgc3R5bGUuZGVsaW1pdGVyKGZhbHNlKSwgdGhpcy5kb25lID8gdGhpcy5zZWxlY3Rpb24udGl0bGUgOiB0aGlzLnNlbGVjdGlvbi5kaXNhYmxlZCA/IGNvbG9yLnllbGxvdyh0aGlzLndhcm4pIDogY29sb3IuZ3JheSh0aGlzLmhpbnQpXS5qb2luKCcgJyk7IC8vIFByaW50IGNob2ljZXNcblxuICAgIGlmICghdGhpcy5kb25lKSB7XG4gICAgICB0aGlzLm91dHB1dFRleHQgKz0gJ1xcbic7XG5cbiAgICAgIGZvciAobGV0IGkgPSBzdGFydEluZGV4OyBpIDwgZW5kSW5kZXg7IGkrKykge1xuICAgICAgICBsZXQgdGl0bGUsXG4gICAgICAgICAgICBwcmVmaXgsXG4gICAgICAgICAgICBkZXNjID0gJycsXG4gICAgICAgICAgICB2ID0gdGhpcy5jaG9pY2VzW2ldOyAvLyBEZXRlcm1pbmUgd2hldGhlciB0byBkaXNwbGF5IFwibW9yZSBjaG9pY2VzXCIgaW5kaWNhdG9yc1xuXG4gICAgICAgIGlmIChpID09PSBzdGFydEluZGV4ICYmIHN0YXJ0SW5kZXggPiAwKSB7XG4gICAgICAgICAgcHJlZml4ID0gZmlndXJlcy5hcnJvd1VwO1xuICAgICAgICB9IGVsc2UgaWYgKGkgPT09IGVuZEluZGV4IC0gMSAmJiBlbmRJbmRleCA8IHRoaXMuY2hvaWNlcy5sZW5ndGgpIHtcbiAgICAgICAgICBwcmVmaXggPSBmaWd1cmVzLmFycm93RG93bjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmVmaXggPSAnICc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodi5kaXNhYmxlZCkge1xuICAgICAgICAgIHRpdGxlID0gdGhpcy5jdXJzb3IgPT09IGkgPyBjb2xvci5ncmF5KCkudW5kZXJsaW5lKHYudGl0bGUpIDogY29sb3Iuc3RyaWtldGhyb3VnaCgpLmdyYXkodi50aXRsZSk7XG4gICAgICAgICAgcHJlZml4ID0gKHRoaXMuY3Vyc29yID09PSBpID8gY29sb3IuYm9sZCgpLmdyYXkoZmlndXJlcy5wb2ludGVyKSArICcgJyA6ICcgICcpICsgcHJlZml4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpdGxlID0gdGhpcy5jdXJzb3IgPT09IGkgPyBjb2xvci5jeWFuKCkudW5kZXJsaW5lKHYudGl0bGUpIDogdi50aXRsZTtcbiAgICAgICAgICBwcmVmaXggPSAodGhpcy5jdXJzb3IgPT09IGkgPyBjb2xvci5jeWFuKGZpZ3VyZXMucG9pbnRlcikgKyAnICcgOiAnICAnKSArIHByZWZpeDtcblxuICAgICAgICAgIGlmICh2LmRlc2NyaXB0aW9uICYmIHRoaXMuY3Vyc29yID09PSBpKSB7XG4gICAgICAgICAgICBkZXNjID0gYCAtICR7di5kZXNjcmlwdGlvbn1gO1xuXG4gICAgICAgICAgICBpZiAocHJlZml4Lmxlbmd0aCArIHRpdGxlLmxlbmd0aCArIGRlc2MubGVuZ3RoID49IHRoaXMub3V0LmNvbHVtbnMgfHwgdi5kZXNjcmlwdGlvbi5zcGxpdCgvXFxyP1xcbi8pLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgZGVzYyA9ICdcXG4nICsgd3JhcCh2LmRlc2NyaXB0aW9uLCB7XG4gICAgICAgICAgICAgICAgbWFyZ2luOiAzLFxuICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLm91dC5jb2x1bW5zXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub3V0cHV0VGV4dCArPSBgJHtwcmVmaXh9ICR7dGl0bGV9JHtjb2xvci5ncmF5KGRlc2MpfVxcbmA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5vdXQud3JpdGUodGhpcy5vdXRwdXRUZXh0KTtcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2VsZWN0UHJvbXB0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9XG5cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCB2YWx1ZSk7IH0gZnVuY3Rpb24gX3Rocm93KGVycikgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfVxuXG5jb25zdCBjb2xvciA9IHJlcXVpcmUoJ2tsZXVyJyk7XG5cbmNvbnN0IFByb21wdCA9IHJlcXVpcmUoJy4vcHJvbXB0Jyk7XG5cbmNvbnN0IF9yZXF1aXJlID0gcmVxdWlyZSgnc2lzdGVyYW5zaScpLFxuICAgICAgZXJhc2UgPSBfcmVxdWlyZS5lcmFzZSxcbiAgICAgIGN1cnNvciA9IF9yZXF1aXJlLmN1cnNvcjtcblxuY29uc3QgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi4vdXRpbCcpLFxuICAgICAgc3R5bGUgPSBfcmVxdWlyZTIuc3R5bGUsXG4gICAgICBjbGVhciA9IF9yZXF1aXJlMi5jbGVhcixcbiAgICAgIGxpbmVzID0gX3JlcXVpcmUyLmxpbmVzLFxuICAgICAgZmlndXJlcyA9IF9yZXF1aXJlMi5maWd1cmVzO1xuLyoqXG4gKiBUZXh0UHJvbXB0IEJhc2UgRWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IG9wdHMubWVzc2FnZSBNZXNzYWdlXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMuc3R5bGU9J2RlZmF1bHQnXSBSZW5kZXIgc3R5bGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5pbml0aWFsXSBEZWZhdWx0IHZhbHVlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy52YWxpZGF0ZV0gVmFsaWRhdGUgZnVuY3Rpb25cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLmVycm9yXSBUaGUgaW52YWxpZCBlcnJvciBsYWJlbFxuICovXG5cblxuY2xhc3MgVGV4dFByb21wdCBleHRlbmRzIFByb21wdCB7XG4gIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICAgIHRoaXMudHJhbnNmb3JtID0gc3R5bGUucmVuZGVyKG9wdHMuc3R5bGUpO1xuICAgIHRoaXMuc2NhbGUgPSB0aGlzLnRyYW5zZm9ybS5zY2FsZTtcbiAgICB0aGlzLm1zZyA9IG9wdHMubWVzc2FnZTtcbiAgICB0aGlzLmluaXRpYWwgPSBvcHRzLmluaXRpYWwgfHwgYGA7XG5cbiAgICB0aGlzLnZhbGlkYXRvciA9IG9wdHMudmFsaWRhdGUgfHwgKCgpID0+IHRydWUpO1xuXG4gICAgdGhpcy52YWx1ZSA9IGBgO1xuICAgIHRoaXMuZXJyb3JNc2cgPSBvcHRzLmVycm9yIHx8IGBQbGVhc2UgRW50ZXIgQSBWYWxpZCBWYWx1ZWA7XG4gICAgdGhpcy5jdXJzb3IgPSBOdW1iZXIoISF0aGlzLmluaXRpYWwpO1xuICAgIHRoaXMuY2xlYXIgPSBjbGVhcihgYCwgdGhpcy5vdXQuY29sdW1ucyk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHNldCB2YWx1ZSh2KSB7XG4gICAgaWYgKCF2ICYmIHRoaXMuaW5pdGlhbCkge1xuICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICB0aGlzLnJlbmRlcmVkID0gY29sb3IuZ3JheSh0aGlzLnRyYW5zZm9ybS5yZW5kZXIodGhpcy5pbml0aWFsKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSBmYWxzZTtcbiAgICAgIHRoaXMucmVuZGVyZWQgPSB0aGlzLnRyYW5zZm9ybS5yZW5kZXIodik7XG4gICAgfVxuXG4gICAgdGhpcy5fdmFsdWUgPSB2O1xuICAgIHRoaXMuZmlyZSgpO1xuICB9XG5cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMudmFsdWUgPSBgYDtcbiAgICB0aGlzLmN1cnNvciA9IE51bWJlcighIXRoaXMuaW5pdGlhbCk7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGV4aXQoKSB7XG4gICAgdGhpcy5hYm9ydCgpO1xuICB9XG5cbiAgYWJvcnQoKSB7XG4gICAgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWUgfHwgdGhpcy5pbml0aWFsO1xuICAgIHRoaXMuZG9uZSA9IHRoaXMuYWJvcnRlZCA9IHRydWU7XG4gICAgdGhpcy5lcnJvciA9IGZhbHNlO1xuICAgIHRoaXMucmVkID0gZmFsc2U7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLm91dC53cml0ZSgnXFxuJyk7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG5cbiAgdmFsaWRhdGUoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvcihmdW5jdGlvbiogKCkge1xuICAgICAgbGV0IHZhbGlkID0geWllbGQgX3RoaXMudmFsaWRhdG9yKF90aGlzLnZhbHVlKTtcblxuICAgICAgaWYgKHR5cGVvZiB2YWxpZCA9PT0gYHN0cmluZ2ApIHtcbiAgICAgICAgX3RoaXMuZXJyb3JNc2cgPSB2YWxpZDtcbiAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuZXJyb3IgPSAhdmFsaWQ7XG4gICAgfSkoKTtcbiAgfVxuXG4gIHN1Ym1pdCgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvcihmdW5jdGlvbiogKCkge1xuICAgICAgX3RoaXMyLnZhbHVlID0gX3RoaXMyLnZhbHVlIHx8IF90aGlzMi5pbml0aWFsO1xuICAgICAgeWllbGQgX3RoaXMyLnZhbGlkYXRlKCk7XG5cbiAgICAgIGlmIChfdGhpczIuZXJyb3IpIHtcbiAgICAgICAgX3RoaXMyLnJlZCA9IHRydWU7XG5cbiAgICAgICAgX3RoaXMyLmZpcmUoKTtcblxuICAgICAgICBfdGhpczIucmVuZGVyKCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpczIuZG9uZSA9IHRydWU7XG4gICAgICBfdGhpczIuYWJvcnRlZCA9IGZhbHNlO1xuXG4gICAgICBfdGhpczIuZmlyZSgpO1xuXG4gICAgICBfdGhpczIucmVuZGVyKCk7XG5cbiAgICAgIF90aGlzMi5vdXQud3JpdGUoJ1xcbicpO1xuXG4gICAgICBfdGhpczIuY2xvc2UoKTtcbiAgICB9KSgpO1xuICB9XG5cbiAgbmV4dCgpIHtcbiAgICBpZiAoIXRoaXMucGxhY2Vob2xkZXIpIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy5pbml0aWFsO1xuICAgIHRoaXMuY3Vyc29yID0gdGhpcy5yZW5kZXJlZC5sZW5ndGg7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIG1vdmVDdXJzb3Iobikge1xuICAgIGlmICh0aGlzLnBsYWNlaG9sZGVyKSByZXR1cm47XG4gICAgdGhpcy5jdXJzb3IgPSB0aGlzLmN1cnNvciArIG47XG4gIH1cblxuICBfKGMsIGtleSkge1xuICAgIGxldCBzMSA9IHRoaXMudmFsdWUuc2xpY2UoMCwgdGhpcy5jdXJzb3IpO1xuICAgIGxldCBzMiA9IHRoaXMudmFsdWUuc2xpY2UodGhpcy5jdXJzb3IpO1xuICAgIHRoaXMudmFsdWUgPSBgJHtzMX0ke2N9JHtzMn1gO1xuICAgIHRoaXMucmVkID0gZmFsc2U7XG4gICAgdGhpcy5jdXJzb3IgPSB0aGlzLnBsYWNlaG9sZGVyID8gMCA6IHMxLmxlbmd0aCArIDE7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGRlbGV0ZSgpIHtcbiAgICBpZiAodGhpcy5jdXJzb3IgPT09IDApIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICBsZXQgczEgPSB0aGlzLnZhbHVlLnNsaWNlKDAsIHRoaXMuY3Vyc29yIC0gMSk7XG4gICAgbGV0IHMyID0gdGhpcy52YWx1ZS5zbGljZSh0aGlzLmN1cnNvcik7XG4gICAgdGhpcy52YWx1ZSA9IGAke3MxfSR7czJ9YDtcbiAgICB0aGlzLnJlZCA9IGZhbHNlO1xuICAgIHRoaXMubW92ZUN1cnNvcigtMSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGRlbGV0ZUZvcndhcmQoKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yICogdGhpcy5zY2FsZSA+PSB0aGlzLnJlbmRlcmVkLmxlbmd0aCB8fCB0aGlzLnBsYWNlaG9sZGVyKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgbGV0IHMxID0gdGhpcy52YWx1ZS5zbGljZSgwLCB0aGlzLmN1cnNvcik7XG4gICAgbGV0IHMyID0gdGhpcy52YWx1ZS5zbGljZSh0aGlzLmN1cnNvciArIDEpO1xuICAgIHRoaXMudmFsdWUgPSBgJHtzMX0ke3MyfWA7XG4gICAgdGhpcy5yZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZmlyc3QoKSB7XG4gICAgdGhpcy5jdXJzb3IgPSAwO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBsYXN0KCkge1xuICAgIHRoaXMuY3Vyc29yID0gdGhpcy52YWx1ZS5sZW5ndGg7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGxlZnQoKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yIDw9IDAgfHwgdGhpcy5wbGFjZWhvbGRlcikgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMubW92ZUN1cnNvcigtMSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHJpZ2h0KCkge1xuICAgIGlmICh0aGlzLmN1cnNvciAqIHRoaXMuc2NhbGUgPj0gdGhpcy5yZW5kZXJlZC5sZW5ndGggfHwgdGhpcy5wbGFjZWhvbGRlcikgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMubW92ZUN1cnNvcigxKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLmNsb3NlZCkgcmV0dXJuO1xuXG4gICAgaWYgKCF0aGlzLmZpcnN0UmVuZGVyKSB7XG4gICAgICBpZiAodGhpcy5vdXRwdXRFcnJvcikgdGhpcy5vdXQud3JpdGUoY3Vyc29yLmRvd24obGluZXModGhpcy5vdXRwdXRFcnJvciwgdGhpcy5vdXQuY29sdW1ucykgLSAxKSArIGNsZWFyKHRoaXMub3V0cHV0RXJyb3IsIHRoaXMub3V0LmNvbHVtbnMpKTtcbiAgICAgIHRoaXMub3V0LndyaXRlKGNsZWFyKHRoaXMub3V0cHV0VGV4dCwgdGhpcy5vdXQuY29sdW1ucykpO1xuICAgIH1cblxuICAgIHN1cGVyLnJlbmRlcigpO1xuICAgIHRoaXMub3V0cHV0RXJyb3IgPSAnJztcbiAgICB0aGlzLm91dHB1dFRleHQgPSBbc3R5bGUuc3ltYm9sKHRoaXMuZG9uZSwgdGhpcy5hYm9ydGVkKSwgY29sb3IuYm9sZCh0aGlzLm1zZyksIHN0eWxlLmRlbGltaXRlcih0aGlzLmRvbmUpLCB0aGlzLnJlZCA/IGNvbG9yLnJlZCh0aGlzLnJlbmRlcmVkKSA6IHRoaXMucmVuZGVyZWRdLmpvaW4oYCBgKTtcblxuICAgIGlmICh0aGlzLmVycm9yKSB7XG4gICAgICB0aGlzLm91dHB1dEVycm9yICs9IHRoaXMuZXJyb3JNc2cuc3BsaXQoYFxcbmApLnJlZHVjZSgoYSwgbCwgaSkgPT4gYSArIGBcXG4ke2kgPyAnICcgOiBmaWd1cmVzLnBvaW50ZXJTbWFsbH0gJHtjb2xvci5yZWQoKS5pdGFsaWMobCl9YCwgYGApO1xuICAgIH1cblxuICAgIHRoaXMub3V0LndyaXRlKGVyYXNlLmxpbmUgKyBjdXJzb3IudG8oMCkgKyB0aGlzLm91dHB1dFRleHQgKyBjdXJzb3Iuc2F2ZSArIHRoaXMub3V0cHV0RXJyb3IgKyBjdXJzb3IucmVzdG9yZSk7XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRleHRQcm9tcHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IGNvbG9yID0gcmVxdWlyZSgna2xldXInKTtcblxuY29uc3QgUHJvbXB0ID0gcmVxdWlyZSgnLi9wcm9tcHQnKTtcblxuY29uc3QgX3JlcXVpcmUgPSByZXF1aXJlKCcuLi91dGlsJyksXG4gICAgICBzdHlsZSA9IF9yZXF1aXJlLnN0eWxlLFxuICAgICAgY2xlYXIgPSBfcmVxdWlyZS5jbGVhcjtcblxuY29uc3QgX3JlcXVpcmUyID0gcmVxdWlyZSgnc2lzdGVyYW5zaScpLFxuICAgICAgY3Vyc29yID0gX3JlcXVpcmUyLmN1cnNvcixcbiAgICAgIGVyYXNlID0gX3JlcXVpcmUyLmVyYXNlO1xuLyoqXG4gKiBUb2dnbGVQcm9tcHQgQmFzZSBFbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5tZXNzYWdlIE1lc3NhZ2VcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdHMuaW5pdGlhbD1mYWxzZV0gRGVmYXVsdCB2YWx1ZVxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLmFjdGl2ZT0nbm8nXSBBY3RpdmUgbGFiZWxcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5pbmFjdGl2ZT0nb2ZmJ10gSW5hY3RpdmUgbGFiZWxcbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICovXG5cblxuY2xhc3MgVG9nZ2xlUHJvbXB0IGV4dGVuZHMgUHJvbXB0IHtcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgdGhpcy5tc2cgPSBvcHRzLm1lc3NhZ2U7XG4gICAgdGhpcy52YWx1ZSA9ICEhb3B0cy5pbml0aWFsO1xuICAgIHRoaXMuYWN0aXZlID0gb3B0cy5hY3RpdmUgfHwgJ29uJztcbiAgICB0aGlzLmluYWN0aXZlID0gb3B0cy5pbmFjdGl2ZSB8fCAnb2ZmJztcbiAgICB0aGlzLmluaXRpYWxWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLmluaXRpYWxWYWx1ZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZXhpdCgpIHtcbiAgICB0aGlzLmFib3J0KCk7XG4gIH1cblxuICBhYm9ydCgpIHtcbiAgICB0aGlzLmRvbmUgPSB0aGlzLmFib3J0ZWQgPSB0cnVlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIHN1Ym1pdCgpIHtcbiAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgIHRoaXMuYWJvcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIGRlYWN0aXZhdGUoKSB7XG4gICAgaWYgKHRoaXMudmFsdWUgPT09IGZhbHNlKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy52YWx1ZSA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBhY3RpdmF0ZSgpIHtcbiAgICBpZiAodGhpcy52YWx1ZSA9PT0gdHJ1ZSkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMudmFsdWUgPSB0cnVlO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkZWxldGUoKSB7XG4gICAgdGhpcy5kZWFjdGl2YXRlKCk7XG4gIH1cblxuICBsZWZ0KCkge1xuICAgIHRoaXMuZGVhY3RpdmF0ZSgpO1xuICB9XG5cbiAgcmlnaHQoKSB7XG4gICAgdGhpcy5hY3RpdmF0ZSgpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICB0aGlzLmRlYWN0aXZhdGUoKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIHRoaXMuYWN0aXZhdGUoKTtcbiAgfVxuXG4gIG5leHQoKSB7XG4gICAgdGhpcy52YWx1ZSA9ICF0aGlzLnZhbHVlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBfKGMsIGtleSkge1xuICAgIGlmIChjID09PSAnICcpIHtcbiAgICAgIHRoaXMudmFsdWUgPSAhdGhpcy52YWx1ZTtcbiAgICB9IGVsc2UgaWYgKGMgPT09ICcxJykge1xuICAgICAgdGhpcy52YWx1ZSA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChjID09PSAnMCcpIHtcbiAgICAgIHRoaXMudmFsdWUgPSBmYWxzZTtcbiAgICB9IGVsc2UgcmV0dXJuIHRoaXMuYmVsbCgpO1xuXG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5jbG9zZWQpIHJldHVybjtcbiAgICBpZiAodGhpcy5maXJzdFJlbmRlcikgdGhpcy5vdXQud3JpdGUoY3Vyc29yLmhpZGUpO2Vsc2UgdGhpcy5vdXQud3JpdGUoY2xlYXIodGhpcy5vdXRwdXRUZXh0LCB0aGlzLm91dC5jb2x1bW5zKSk7XG4gICAgc3VwZXIucmVuZGVyKCk7XG4gICAgdGhpcy5vdXRwdXRUZXh0ID0gW3N0eWxlLnN5bWJvbCh0aGlzLmRvbmUsIHRoaXMuYWJvcnRlZCksIGNvbG9yLmJvbGQodGhpcy5tc2cpLCBzdHlsZS5kZWxpbWl0ZXIodGhpcy5kb25lKSwgdGhpcy52YWx1ZSA/IHRoaXMuaW5hY3RpdmUgOiBjb2xvci5jeWFuKCkudW5kZXJsaW5lKHRoaXMuaW5hY3RpdmUpLCBjb2xvci5ncmF5KCcvJyksIHRoaXMudmFsdWUgPyBjb2xvci5jeWFuKCkudW5kZXJsaW5lKHRoaXMuYWN0aXZlKSA6IHRoaXMuYWN0aXZlXS5qb2luKCcgJyk7XG4gICAgdGhpcy5vdXQud3JpdGUoZXJhc2UubGluZSArIGN1cnNvci50bygwKSArIHRoaXMub3V0cHV0VGV4dCk7XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRvZ2dsZVByb21wdDsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQ7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8IG9bU3ltYm9sLml0ZXJhdG9yXSA9PSBudWxsKSB7IGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UpIHsgdGhyb3cgX2U7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH0gdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBkaWRFcnIgPSBmYWxzZSwgZXJyOyByZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkgeyBpdCA9IG9bU3ltYm9sLml0ZXJhdG9yXSgpOyB9LCBuOiBmdW5jdGlvbiBuKCkgeyB2YXIgc3RlcCA9IGl0Lm5leHQoKTsgbm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZTsgcmV0dXJuIHN0ZXA7IH0sIGU6IGZ1bmN0aW9uIGUoX2UyKSB7IGRpZEVyciA9IHRydWU7IGVyciA9IF9lMjsgfSwgZjogZnVuY3Rpb24gZigpIHsgdHJ5IHsgaWYgKCFub3JtYWxDb21wbGV0aW9uICYmIGl0LnJldHVybiAhPSBudWxsKSBpdC5yZXR1cm4oKTsgfSBmaW5hbGx5IHsgaWYgKGRpZEVycikgdGhyb3cgZXJyOyB9IH0gfTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTsgcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfVxuXG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH1cblxuY29uc3QgcHJvbXB0cyA9IHJlcXVpcmUoJy4vcHJvbXB0cycpO1xuXG5jb25zdCBwYXNzT24gPSBbJ3N1Z2dlc3QnLCAnZm9ybWF0JywgJ29uU3RhdGUnLCAndmFsaWRhdGUnLCAnb25SZW5kZXInLCAndHlwZSddO1xuXG5jb25zdCBub29wID0gKCkgPT4ge307XG4vKipcbiAqIFByb21wdCBmb3IgYSBzZXJpZXMgb2YgcXVlc3Rpb25zXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gcXVlc3Rpb25zIFNpbmdsZSBxdWVzdGlvbiBvYmplY3Qgb3IgQXJyYXkgb2YgcXVlc3Rpb24gb2JqZWN0c1xuICogQHBhcmFtIHtGdW5jdGlvbn0gW29uU3VibWl0XSBDYWxsYmFjayBmdW5jdGlvbiBjYWxsZWQgb24gcHJvbXB0IHN1Ym1pdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29uQ2FuY2VsXSBDYWxsYmFjayBmdW5jdGlvbiBjYWxsZWQgb24gY2FuY2VsL2Fib3J0XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBPYmplY3Qgd2l0aCB2YWx1ZXMgZnJvbSB1c2VyIGlucHV0XG4gKi9cblxuXG5mdW5jdGlvbiBwcm9tcHQoKSB7XG4gIHJldHVybiBfcHJvbXB0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9wcm9tcHQoKSB7XG4gIF9wcm9tcHQgPSBfYXN5bmNUb0dlbmVyYXRvcihmdW5jdGlvbiogKHF1ZXN0aW9ucyA9IFtdLCB7XG4gICAgb25TdWJtaXQgPSBub29wLFxuICAgIG9uQ2FuY2VsID0gbm9vcFxuICB9ID0ge30pIHtcbiAgICBjb25zdCBhbnN3ZXJzID0ge307XG4gICAgY29uc3Qgb3ZlcnJpZGUgPSBwcm9tcHQuX292ZXJyaWRlIHx8IHt9O1xuICAgIHF1ZXN0aW9ucyA9IFtdLmNvbmNhdChxdWVzdGlvbnMpO1xuICAgIGxldCBhbnN3ZXIsIHF1ZXN0aW9uLCBxdWl0LCBuYW1lLCB0eXBlLCBsYXN0UHJvbXB0O1xuXG4gICAgY29uc3QgZ2V0Rm9ybWF0dGVkQW5zd2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoZnVuY3Rpb24qIChxdWVzdGlvbiwgYW5zd2VyLCBza2lwVmFsaWRhdGlvbiA9IGZhbHNlKSB7XG4gICAgICAgIGlmICghc2tpcFZhbGlkYXRpb24gJiYgcXVlc3Rpb24udmFsaWRhdGUgJiYgcXVlc3Rpb24udmFsaWRhdGUoYW5zd2VyKSAhPT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBxdWVzdGlvbi5mb3JtYXQgPyB5aWVsZCBxdWVzdGlvbi5mb3JtYXQoYW5zd2VyLCBhbnN3ZXJzKSA6IGFuc3dlcjtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gZ2V0Rm9ybWF0dGVkQW5zd2VyKF94LCBfeDIpIHtcbiAgICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfSgpO1xuXG4gICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHF1ZXN0aW9ucyksXG4gICAgICAgIF9zdGVwO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgIHF1ZXN0aW9uID0gX3N0ZXAudmFsdWU7XG4gICAgICAgIHZhciBfcXVlc3Rpb24gPSBxdWVzdGlvbjtcbiAgICAgICAgbmFtZSA9IF9xdWVzdGlvbi5uYW1lO1xuICAgICAgICB0eXBlID0gX3F1ZXN0aW9uLnR5cGU7XG5cbiAgICAgICAgLy8gZXZhbHVhdGUgdHlwZSBmaXJzdCBhbmQgc2tpcCBpZiB0eXBlIGlzIGEgZmFsc3kgdmFsdWVcbiAgICAgICAgaWYgKHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdHlwZSA9IHlpZWxkIHR5cGUoYW5zd2VyLCBfb2JqZWN0U3ByZWFkKHt9LCBhbnN3ZXJzKSwgcXVlc3Rpb24pO1xuICAgICAgICAgIHF1ZXN0aW9uWyd0eXBlJ10gPSB0eXBlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0eXBlKSBjb250aW51ZTsgLy8gaWYgcHJvcGVydHkgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IHVubGVzcyBpdCdzIGEgc3BlY2lhbCBmdW5jdGlvblxuXG4gICAgICAgIGZvciAobGV0IGtleSBpbiBxdWVzdGlvbikge1xuICAgICAgICAgIGlmIChwYXNzT24uaW5jbHVkZXMoa2V5KSkgY29udGludWU7XG4gICAgICAgICAgbGV0IHZhbHVlID0gcXVlc3Rpb25ba2V5XTtcbiAgICAgICAgICBxdWVzdGlvbltrZXldID0gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nID8geWllbGQgdmFsdWUoYW5zd2VyLCBfb2JqZWN0U3ByZWFkKHt9LCBhbnN3ZXJzKSwgbGFzdFByb21wdCkgOiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhc3RQcm9tcHQgPSBxdWVzdGlvbjtcblxuICAgICAgICBpZiAodHlwZW9mIHF1ZXN0aW9uLm1lc3NhZ2UgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwcm9tcHQgbWVzc2FnZSBpcyByZXF1aXJlZCcpO1xuICAgICAgICB9IC8vIHVwZGF0ZSB2YXJzIGluIGNhc2UgdGhleSBjaGFuZ2VkXG5cblxuICAgICAgICB2YXIgX3F1ZXN0aW9uMiA9IHF1ZXN0aW9uO1xuICAgICAgICBuYW1lID0gX3F1ZXN0aW9uMi5uYW1lO1xuICAgICAgICB0eXBlID0gX3F1ZXN0aW9uMi50eXBlO1xuXG4gICAgICAgIGlmIChwcm9tcHRzW3R5cGVdID09PSB2b2lkIDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHByb21wdCB0eXBlICgke3R5cGV9KSBpcyBub3QgZGVmaW5lZGApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG92ZXJyaWRlW3F1ZXN0aW9uLm5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBhbnN3ZXIgPSB5aWVsZCBnZXRGb3JtYXR0ZWRBbnN3ZXIocXVlc3Rpb24sIG92ZXJyaWRlW3F1ZXN0aW9uLm5hbWVdKTtcblxuICAgICAgICAgIGlmIChhbnN3ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYW5zd2Vyc1tuYW1lXSA9IGFuc3dlcjtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gR2V0IHRoZSBpbmplY3RlZCBhbnN3ZXIgaWYgdGhlcmUgaXMgb25lIG9yIHByb21wdCB0aGUgdXNlclxuICAgICAgICAgIGFuc3dlciA9IHByb21wdC5faW5qZWN0ZWQgPyBnZXRJbmplY3RlZEFuc3dlcihwcm9tcHQuX2luamVjdGVkLCBxdWVzdGlvbi5pbml0aWFsKSA6IHlpZWxkIHByb21wdHNbdHlwZV0ocXVlc3Rpb24pO1xuICAgICAgICAgIGFuc3dlcnNbbmFtZV0gPSBhbnN3ZXIgPSB5aWVsZCBnZXRGb3JtYXR0ZWRBbnN3ZXIocXVlc3Rpb24sIGFuc3dlciwgdHJ1ZSk7XG4gICAgICAgICAgcXVpdCA9IHlpZWxkIG9uU3VibWl0KHF1ZXN0aW9uLCBhbnN3ZXIsIGFuc3dlcnMpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBxdWl0ID0gISh5aWVsZCBvbkNhbmNlbChxdWVzdGlvbiwgYW5zd2VycykpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHF1aXQpIHJldHVybiBhbnN3ZXJzO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgX2l0ZXJhdG9yLmYoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYW5zd2VycztcbiAgfSk7XG4gIHJldHVybiBfcHJvbXB0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGdldEluamVjdGVkQW5zd2VyKGluamVjdGVkLCBkZWFmdWx0VmFsdWUpIHtcbiAgY29uc3QgYW5zd2VyID0gaW5qZWN0ZWQuc2hpZnQoKTtcblxuICBpZiAoYW5zd2VyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICB0aHJvdyBhbnN3ZXI7XG4gIH1cblxuICByZXR1cm4gYW5zd2VyID09PSB1bmRlZmluZWQgPyBkZWFmdWx0VmFsdWUgOiBhbnN3ZXI7XG59XG5cbmZ1bmN0aW9uIGluamVjdChhbnN3ZXJzKSB7XG4gIHByb21wdC5faW5qZWN0ZWQgPSAocHJvbXB0Ll9pbmplY3RlZCB8fCBbXSkuY29uY2F0KGFuc3dlcnMpO1xufVxuXG5mdW5jdGlvbiBvdmVycmlkZShhbnN3ZXJzKSB7XG4gIHByb21wdC5fb3ZlcnJpZGUgPSBPYmplY3QuYXNzaWduKHt9LCBhbnN3ZXJzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKHByb21wdCwge1xuICBwcm9tcHQsXG4gIHByb21wdHMsXG4gIGluamVjdCxcbiAgb3ZlcnJpZGVcbn0pOyIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgJCA9IGV4cG9ydHM7XG5cbmNvbnN0IGVsID0gcmVxdWlyZSgnLi9lbGVtZW50cycpO1xuXG5jb25zdCBub29wID0gdiA9PiB2O1xuXG5mdW5jdGlvbiB0b1Byb21wdCh0eXBlLCBhcmdzLCBvcHRzID0ge30pIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXMsIHJlaikgPT4ge1xuICAgIGNvbnN0IHAgPSBuZXcgZWxbdHlwZV0oYXJncyk7XG4gICAgY29uc3Qgb25BYm9ydCA9IG9wdHMub25BYm9ydCB8fCBub29wO1xuICAgIGNvbnN0IG9uU3VibWl0ID0gb3B0cy5vblN1Ym1pdCB8fCBub29wO1xuICAgIGNvbnN0IG9uRXhpdCA9IG9wdHMub25FeGl0IHx8IG5vb3A7XG4gICAgcC5vbignc3RhdGUnLCBhcmdzLm9uU3RhdGUgfHwgbm9vcCk7XG4gICAgcC5vbignc3VibWl0JywgeCA9PiByZXMob25TdWJtaXQoeCkpKTtcbiAgICBwLm9uKCdleGl0JywgeCA9PiByZXMob25FeGl0KHgpKSk7XG4gICAgcC5vbignYWJvcnQnLCB4ID0+IHJlaihvbkFib3J0KHgpKSk7XG4gIH0pO1xufVxuLyoqXG4gKiBUZXh0IHByb21wdFxuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3MuaW5pdGlhbF0gRGVmYXVsdCBzdHJpbmcgdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbYXJncy5zdHlsZT1cImRlZmF1bHRcIl0gUmVuZGVyIHN0eWxlICgnZGVmYXVsdCcsICdwYXNzd29yZCcsICdpbnZpc2libGUnKVxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3Mub25TdGF0ZV0gT24gc3RhdGUgY2hhbmdlIGNhbGxiYWNrXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy52YWxpZGF0ZV0gRnVuY3Rpb24gdG8gdmFsaWRhdGUgdXNlciBpbnB1dFxuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB3aXRoIHVzZXIgaW5wdXRcbiAqL1xuXG5cbiQudGV4dCA9IGFyZ3MgPT4gdG9Qcm9tcHQoJ1RleHRQcm9tcHQnLCBhcmdzKTtcbi8qKlxuICogUGFzc3dvcmQgcHJvbXB0IHdpdGggbWFza2VkIGlucHV0XG4gKiBAcGFyYW0ge3N0cmluZ30gYXJncy5tZXNzYWdlIFByb21wdCBtZXNzYWdlIHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7c3RyaW5nfSBbYXJncy5pbml0aWFsXSBEZWZhdWx0IHN0cmluZyB2YWx1ZVxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3Mub25TdGF0ZV0gT24gc3RhdGUgY2hhbmdlIGNhbGxiYWNrXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy52YWxpZGF0ZV0gRnVuY3Rpb24gdG8gdmFsaWRhdGUgdXNlciBpbnB1dFxuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB3aXRoIHVzZXIgaW5wdXRcbiAqL1xuXG5cbiQucGFzc3dvcmQgPSBhcmdzID0+IHtcbiAgYXJncy5zdHlsZSA9ICdwYXNzd29yZCc7XG4gIHJldHVybiAkLnRleHQoYXJncyk7XG59O1xuLyoqXG4gKiBQcm9tcHQgd2hlcmUgaW5wdXQgaXMgaW52aXNpYmxlLCBsaWtlIHN1ZG9cbiAqIEBwYXJhbSB7c3RyaW5nfSBhcmdzLm1lc3NhZ2UgUHJvbXB0IG1lc3NhZ2UgdG8gZGlzcGxheVxuICogQHBhcmFtIHtzdHJpbmd9IFthcmdzLmluaXRpYWxdIERlZmF1bHQgc3RyaW5nIHZhbHVlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy5vblN0YXRlXSBPbiBzdGF0ZSBjaGFuZ2UgY2FsbGJhY2tcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLnZhbGlkYXRlXSBGdW5jdGlvbiB0byB2YWxpZGF0ZSB1c2VyIGlucHV0XG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIHdpdGggdXNlciBpbnB1dFxuICovXG5cblxuJC5pbnZpc2libGUgPSBhcmdzID0+IHtcbiAgYXJncy5zdHlsZSA9ICdpbnZpc2libGUnO1xuICByZXR1cm4gJC50ZXh0KGFyZ3MpO1xufTtcbi8qKlxuICogTnVtYmVyIHByb21wdFxuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge251bWJlcn0gYXJncy5pbml0aWFsIERlZmF1bHQgbnVtYmVyIHZhbHVlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy5vblN0YXRlXSBPbiBzdGF0ZSBjaGFuZ2UgY2FsbGJhY2tcbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXJncy5tYXhdIE1heCB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IFthcmdzLm1pbl0gTWluIHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3Muc3R5bGU9XCJkZWZhdWx0XCJdIFJlbmRlciBzdHlsZSAoJ2RlZmF1bHQnLCAncGFzc3dvcmQnLCAnaW52aXNpYmxlJylcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdHMuZmxvYXQ9ZmFsc2VdIFBhcnNlIGlucHV0IGFzIGZsb2F0c1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLnJvdW5kPTJdIFJvdW5kIGZsb2F0cyB0byB4IGRlY2ltYWxzXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMuaW5jcmVtZW50PTFdIE51bWJlciB0byBpbmNyZW1lbnQgYnkgd2hlbiB1c2luZyBhcnJvdy1rZXlzXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy52YWxpZGF0ZV0gRnVuY3Rpb24gdG8gdmFsaWRhdGUgdXNlciBpbnB1dFxuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB3aXRoIHVzZXIgaW5wdXRcbiAqL1xuXG5cbiQubnVtYmVyID0gYXJncyA9PiB0b1Byb21wdCgnTnVtYmVyUHJvbXB0JywgYXJncyk7XG4vKipcbiAqIERhdGUgcHJvbXB0XG4gKiBAcGFyYW0ge3N0cmluZ30gYXJncy5tZXNzYWdlIFByb21wdCBtZXNzYWdlIHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7bnVtYmVyfSBhcmdzLmluaXRpYWwgRGVmYXVsdCBudW1iZXIgdmFsdWVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLm9uU3RhdGVdIE9uIHN0YXRlIGNoYW5nZSBjYWxsYmFja1xuICogQHBhcmFtIHtudW1iZXJ9IFthcmdzLm1heF0gTWF4IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gW2FyZ3MubWluXSBNaW4gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbYXJncy5zdHlsZT1cImRlZmF1bHRcIl0gUmVuZGVyIHN0eWxlICgnZGVmYXVsdCcsICdwYXNzd29yZCcsICdpbnZpc2libGUnKVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0cy5mbG9hdD1mYWxzZV0gUGFyc2UgaW5wdXQgYXMgZmxvYXRzXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMucm91bmQ9Ml0gUm91bmQgZmxvYXRzIHRvIHggZGVjaW1hbHNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5pbmNyZW1lbnQ9MV0gTnVtYmVyIHRvIGluY3JlbWVudCBieSB3aGVuIHVzaW5nIGFycm93LWtleXNcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLnZhbGlkYXRlXSBGdW5jdGlvbiB0byB2YWxpZGF0ZSB1c2VyIGlucHV0XG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIHdpdGggdXNlciBpbnB1dFxuICovXG5cblxuJC5kYXRlID0gYXJncyA9PiB0b1Byb21wdCgnRGF0ZVByb21wdCcsIGFyZ3MpO1xuLyoqXG4gKiBDbGFzc2ljIHllcy9ubyBwcm9tcHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcmdzLm1lc3NhZ2UgUHJvbXB0IG1lc3NhZ2UgdG8gZGlzcGxheVxuICogQHBhcmFtIHtib29sZWFufSBbYXJncy5pbml0aWFsPWZhbHNlXSBEZWZhdWx0IHZhbHVlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy5vblN0YXRlXSBPbiBzdGF0ZSBjaGFuZ2UgY2FsbGJhY2tcbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugd2l0aCB1c2VyIGlucHV0XG4gKi9cblxuXG4kLmNvbmZpcm0gPSBhcmdzID0+IHRvUHJvbXB0KCdDb25maXJtUHJvbXB0JywgYXJncyk7XG4vKipcbiAqIExpc3QgcHJvbXB0LCBzcGxpdCBpbnRwdXQgc3RyaW5nIGJ5IGBzZXBlcmF0b3JgXG4gKiBAcGFyYW0ge3N0cmluZ30gYXJncy5tZXNzYWdlIFByb21wdCBtZXNzYWdlIHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7c3RyaW5nfSBbYXJncy5pbml0aWFsXSBEZWZhdWx0IHN0cmluZyB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IFthcmdzLnN0eWxlPVwiZGVmYXVsdFwiXSBSZW5kZXIgc3R5bGUgKCdkZWZhdWx0JywgJ3Bhc3N3b3JkJywgJ2ludmlzaWJsZScpXG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3Muc2VwYXJhdG9yXSBTdHJpbmcgc2VwYXJhdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy5vblN0YXRlXSBPbiBzdGF0ZSBjaGFuZ2UgY2FsbGJhY2tcbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugd2l0aCB1c2VyIGlucHV0LCBpbiBmb3JtIG9mIGFuIGBBcnJheWBcbiAqL1xuXG5cbiQubGlzdCA9IGFyZ3MgPT4ge1xuICBjb25zdCBzZXAgPSBhcmdzLnNlcGFyYXRvciB8fCAnLCc7XG4gIHJldHVybiB0b1Byb21wdCgnVGV4dFByb21wdCcsIGFyZ3MsIHtcbiAgICBvblN1Ym1pdDogc3RyID0+IHN0ci5zcGxpdChzZXApLm1hcChzID0+IHMudHJpbSgpKVxuICB9KTtcbn07XG4vKipcbiAqIFRvZ2dsZS9zd2l0Y2ggcHJvbXB0XG4gKiBAcGFyYW0ge3N0cmluZ30gYXJncy5tZXNzYWdlIFByb21wdCBtZXNzYWdlIHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2FyZ3MuaW5pdGlhbD1mYWxzZV0gRGVmYXVsdCB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IFthcmdzLmFjdGl2ZT1cIm9uXCJdIFRleHQgZm9yIGBhY3RpdmVgIHN0YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3MuaW5hY3RpdmU9XCJvZmZcIl0gVGV4dCBmb3IgYGluYWN0aXZlYCBzdGF0ZVxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3Mub25TdGF0ZV0gT24gc3RhdGUgY2hhbmdlIGNhbGxiYWNrXG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW2FyZ3Muc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIHdpdGggdXNlciBpbnB1dFxuICovXG5cblxuJC50b2dnbGUgPSBhcmdzID0+IHRvUHJvbXB0KCdUb2dnbGVQcm9tcHQnLCBhcmdzKTtcbi8qKlxuICogSW50ZXJhY3RpdmUgc2VsZWN0IHByb21wdFxuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzLmNob2ljZXMgQXJyYXkgb2YgY2hvaWNlcyBvYmplY3RzIGBbeyB0aXRsZSwgdmFsdWUgfSwgLi4uXWBcbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXJncy5pbml0aWFsXSBJbmRleCBvZiBkZWZhdWx0IHZhbHVlXG4gKiBAcGFyYW0ge1N0cmluZ30gW2FyZ3MuaGludF0gSGludCB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy5vblN0YXRlXSBPbiBzdGF0ZSBjaGFuZ2UgY2FsbGJhY2tcbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugd2l0aCB1c2VyIGlucHV0XG4gKi9cblxuXG4kLnNlbGVjdCA9IGFyZ3MgPT4gdG9Qcm9tcHQoJ1NlbGVjdFByb21wdCcsIGFyZ3MpO1xuLyoqXG4gKiBJbnRlcmFjdGl2ZSBtdWx0aS1zZWxlY3QgLyBhdXRvY29tcGxldGVNdWx0aXNlbGVjdCBwcm9tcHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcmdzLm1lc3NhZ2UgUHJvbXB0IG1lc3NhZ2UgdG8gZGlzcGxheVxuICogQHBhcmFtIHtBcnJheX0gYXJncy5jaG9pY2VzIEFycmF5IG9mIGNob2ljZXMgb2JqZWN0cyBgW3sgdGl0bGUsIHZhbHVlLCBbc2VsZWN0ZWRdIH0sIC4uLl1gXG4gKiBAcGFyYW0ge251bWJlcn0gW2FyZ3MubWF4XSBNYXggc2VsZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3MuaGludF0gSGludCB0byBkaXNwbGF5IHVzZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbYXJncy5jdXJzb3I9MF0gQ3Vyc29yIHN0YXJ0IHBvc2l0aW9uXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy5vblN0YXRlXSBPbiBzdGF0ZSBjaGFuZ2UgY2FsbGJhY2tcbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugd2l0aCB1c2VyIGlucHV0XG4gKi9cblxuXG4kLm11bHRpc2VsZWN0ID0gYXJncyA9PiB7XG4gIGFyZ3MuY2hvaWNlcyA9IFtdLmNvbmNhdChhcmdzLmNob2ljZXMgfHwgW10pO1xuXG4gIGNvbnN0IHRvU2VsZWN0ZWQgPSBpdGVtcyA9PiBpdGVtcy5maWx0ZXIoaXRlbSA9PiBpdGVtLnNlbGVjdGVkKS5tYXAoaXRlbSA9PiBpdGVtLnZhbHVlKTtcblxuICByZXR1cm4gdG9Qcm9tcHQoJ011bHRpc2VsZWN0UHJvbXB0JywgYXJncywge1xuICAgIG9uQWJvcnQ6IHRvU2VsZWN0ZWQsXG4gICAgb25TdWJtaXQ6IHRvU2VsZWN0ZWRcbiAgfSk7XG59O1xuXG4kLmF1dG9jb21wbGV0ZU11bHRpc2VsZWN0ID0gYXJncyA9PiB7XG4gIGFyZ3MuY2hvaWNlcyA9IFtdLmNvbmNhdChhcmdzLmNob2ljZXMgfHwgW10pO1xuXG4gIGNvbnN0IHRvU2VsZWN0ZWQgPSBpdGVtcyA9PiBpdGVtcy5maWx0ZXIoaXRlbSA9PiBpdGVtLnNlbGVjdGVkKS5tYXAoaXRlbSA9PiBpdGVtLnZhbHVlKTtcblxuICByZXR1cm4gdG9Qcm9tcHQoJ0F1dG9jb21wbGV0ZU11bHRpc2VsZWN0UHJvbXB0JywgYXJncywge1xuICAgIG9uQWJvcnQ6IHRvU2VsZWN0ZWQsXG4gICAgb25TdWJtaXQ6IHRvU2VsZWN0ZWRcbiAgfSk7XG59O1xuXG5jb25zdCBieVRpdGxlID0gKGlucHV0LCBjaG9pY2VzKSA9PiBQcm9taXNlLnJlc29sdmUoY2hvaWNlcy5maWx0ZXIoaXRlbSA9PiBpdGVtLnRpdGxlLnNsaWNlKDAsIGlucHV0Lmxlbmd0aCkudG9Mb3dlckNhc2UoKSA9PT0gaW5wdXQudG9Mb3dlckNhc2UoKSkpO1xuLyoqXG4gKiBJbnRlcmFjdGl2ZSBhdXRvLWNvbXBsZXRlIHByb21wdFxuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzLmNob2ljZXMgQXJyYXkgb2YgYXV0by1jb21wbGV0ZSBjaG9pY2VzIG9iamVjdHMgYFt7IHRpdGxlLCB2YWx1ZSB9LCAuLi5dYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2FyZ3Muc3VnZ2VzdF0gRnVuY3Rpb24gdG8gZmlsdGVyIHJlc3VsdHMgYmFzZWQgb24gdXNlciBpbnB1dC4gRGVmYXVsdHMgdG8gc29ydCBieSBgdGl0bGVgXG4gKiBAcGFyYW0ge251bWJlcn0gW2FyZ3MubGltaXQ9MTBdIE1heCBudW1iZXIgb2YgcmVzdWx0cyB0byBzaG93XG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3Muc3R5bGU9XCJkZWZhdWx0XCJdIFJlbmRlciBzdHlsZSAoJ2RlZmF1bHQnLCAncGFzc3dvcmQnLCAnaW52aXNpYmxlJylcbiAqIEBwYXJhbSB7U3RyaW5nfSBbYXJncy5pbml0aWFsXSBJbmRleCBvZiB0aGUgZGVmYXVsdCB2YWx1ZVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5jbGVhckZpcnN0XSBUaGUgZmlyc3QgRVNDQVBFIGtleXByZXNzIHdpbGwgY2xlYXIgdGhlIGlucHV0XG4gKiBAcGFyYW0ge1N0cmluZ30gW2FyZ3MuZmFsbGJhY2tdIEZhbGxiYWNrIG1lc3NhZ2UgLSBkZWZhdWx0cyB0byBpbml0aWFsIHZhbHVlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy5vblN0YXRlXSBPbiBzdGF0ZSBjaGFuZ2UgY2FsbGJhY2tcbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugd2l0aCB1c2VyIGlucHV0XG4gKi9cblxuXG4kLmF1dG9jb21wbGV0ZSA9IGFyZ3MgPT4ge1xuICBhcmdzLnN1Z2dlc3QgPSBhcmdzLnN1Z2dlc3QgfHwgYnlUaXRsZTtcbiAgYXJncy5jaG9pY2VzID0gW10uY29uY2F0KGFyZ3MuY2hvaWNlcyB8fCBbXSk7XG4gIHJldHVybiB0b1Byb21wdCgnQXV0b2NvbXBsZXRlUHJvbXB0JywgYXJncyk7XG59OyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSAoa2V5LCBpc1NlbGVjdCkgPT4ge1xuICBpZiAoa2V5Lm1ldGEgJiYga2V5Lm5hbWUgIT09ICdlc2NhcGUnKSByZXR1cm47XG5cbiAgaWYgKGtleS5jdHJsKSB7XG4gICAgaWYgKGtleS5uYW1lID09PSAnYScpIHJldHVybiAnZmlyc3QnO1xuICAgIGlmIChrZXkubmFtZSA9PT0gJ2MnKSByZXR1cm4gJ2Fib3J0JztcbiAgICBpZiAoa2V5Lm5hbWUgPT09ICdkJykgcmV0dXJuICdhYm9ydCc7XG4gICAgaWYgKGtleS5uYW1lID09PSAnZScpIHJldHVybiAnbGFzdCc7XG4gICAgaWYgKGtleS5uYW1lID09PSAnZycpIHJldHVybiAncmVzZXQnO1xuICB9XG5cbiAgaWYgKGlzU2VsZWN0KSB7XG4gICAgaWYgKGtleS5uYW1lID09PSAnaicpIHJldHVybiAnZG93bic7XG4gICAgaWYgKGtleS5uYW1lID09PSAnaycpIHJldHVybiAndXAnO1xuICB9XG5cbiAgaWYgKGtleS5uYW1lID09PSAncmV0dXJuJykgcmV0dXJuICdzdWJtaXQnO1xuICBpZiAoa2V5Lm5hbWUgPT09ICdlbnRlcicpIHJldHVybiAnc3VibWl0JzsgLy8gY3RybCArIEpcblxuICBpZiAoa2V5Lm5hbWUgPT09ICdiYWNrc3BhY2UnKSByZXR1cm4gJ2RlbGV0ZSc7XG4gIGlmIChrZXkubmFtZSA9PT0gJ2RlbGV0ZScpIHJldHVybiAnZGVsZXRlRm9yd2FyZCc7XG4gIGlmIChrZXkubmFtZSA9PT0gJ2Fib3J0JykgcmV0dXJuICdhYm9ydCc7XG4gIGlmIChrZXkubmFtZSA9PT0gJ2VzY2FwZScpIHJldHVybiAnZXhpdCc7XG4gIGlmIChrZXkubmFtZSA9PT0gJ3RhYicpIHJldHVybiAnbmV4dCc7XG4gIGlmIChrZXkubmFtZSA9PT0gJ3BhZ2Vkb3duJykgcmV0dXJuICduZXh0UGFnZSc7XG4gIGlmIChrZXkubmFtZSA9PT0gJ3BhZ2V1cCcpIHJldHVybiAncHJldlBhZ2UnOyAvLyBUT0RPIGNyZWF0ZSBob21lKCkgaW4gcHJvbXB0IHR5cGVzIChlLmcuIFRleHRQcm9tcHQpXG5cbiAgaWYgKGtleS5uYW1lID09PSAnaG9tZScpIHJldHVybiAnaG9tZSc7IC8vIFRPRE8gY3JlYXRlIGVuZCgpIGluIHByb21wdCB0eXBlcyAoZS5nLiBUZXh0UHJvbXB0KVxuXG4gIGlmIChrZXkubmFtZSA9PT0gJ2VuZCcpIHJldHVybiAnZW5kJztcbiAgaWYgKGtleS5uYW1lID09PSAndXAnKSByZXR1cm4gJ3VwJztcbiAgaWYgKGtleS5uYW1lID09PSAnZG93bicpIHJldHVybiAnZG93bic7XG4gIGlmIChrZXkubmFtZSA9PT0gJ3JpZ2h0JykgcmV0dXJuICdyaWdodCc7XG4gIGlmIChrZXkubmFtZSA9PT0gJ2xlZnQnKSByZXR1cm4gJ2xlZnQnO1xuICByZXR1cm4gZmFsc2U7XG59OyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0OyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCBvW1N5bWJvbC5pdGVyYXRvcl0gPT0gbnVsbCkgeyBpZiAoQXJyYXkuaXNBcnJheShvKSB8fCAoaXQgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSB7IGlmIChpdCkgbyA9IGl0OyB2YXIgaSA9IDA7IHZhciBGID0gZnVuY3Rpb24gRigpIHt9OyByZXR1cm4geyBzOiBGLCBuOiBmdW5jdGlvbiBuKCkgeyBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9OyByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG9baSsrXSB9OyB9LCBlOiBmdW5jdGlvbiBlKF9lKSB7IHRocm93IF9lOyB9LCBmOiBGIH07IH0gdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9IHZhciBub3JtYWxDb21wbGV0aW9uID0gdHJ1ZSwgZGlkRXJyID0gZmFsc2UsIGVycjsgcmV0dXJuIHsgczogZnVuY3Rpb24gcygpIHsgaXQgPSBvW1N5bWJvbC5pdGVyYXRvcl0oKTsgfSwgbjogZnVuY3Rpb24gbigpIHsgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7IG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7IHJldHVybiBzdGVwOyB9LCBlOiBmdW5jdGlvbiBlKF9lMikgeyBkaWRFcnIgPSB0cnVlOyBlcnIgPSBfZTI7IH0sIGY6IGZ1bmN0aW9uIGYoKSB7IHRyeSB7IGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdC5yZXR1cm4gIT0gbnVsbCkgaXQucmV0dXJuKCk7IH0gZmluYWxseSB7IGlmIChkaWRFcnIpIHRocm93IGVycjsgfSB9IH07IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07IHJldHVybiBhcnIyOyB9XG5cbmNvbnN0IHN0cmlwID0gcmVxdWlyZSgnLi9zdHJpcCcpO1xuXG5jb25zdCBfcmVxdWlyZSA9IHJlcXVpcmUoJ3Npc3RlcmFuc2knKSxcbiAgICAgIGVyYXNlID0gX3JlcXVpcmUuZXJhc2UsXG4gICAgICBjdXJzb3IgPSBfcmVxdWlyZS5jdXJzb3I7XG5cbmNvbnN0IHdpZHRoID0gc3RyID0+IFsuLi5zdHJpcChzdHIpXS5sZW5ndGg7XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9tcHRcbiAqIEBwYXJhbSB7bnVtYmVyfSBwZXJMaW5lXG4gKi9cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwcm9tcHQsIHBlckxpbmUpIHtcbiAgaWYgKCFwZXJMaW5lKSByZXR1cm4gZXJhc2UubGluZSArIGN1cnNvci50bygwKTtcbiAgbGV0IHJvd3MgPSAwO1xuICBjb25zdCBsaW5lcyA9IHByb21wdC5zcGxpdCgvXFxyP1xcbi8pO1xuXG4gIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihsaW5lcyksXG4gICAgICBfc3RlcDtcblxuICB0cnkge1xuICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICBsZXQgbGluZSA9IF9zdGVwLnZhbHVlO1xuICAgICAgcm93cyArPSAxICsgTWF0aC5mbG9vcihNYXRoLm1heCh3aWR0aChsaW5lKSAtIDEsIDApIC8gcGVyTGluZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfaXRlcmF0b3IuZShlcnIpO1xuICB9IGZpbmFsbHkge1xuICAgIF9pdGVyYXRvci5mKCk7XG4gIH1cblxuICByZXR1cm4gZXJhc2UubGluZXMocm93cyk7XG59OyIsIid1c2Ugc3RyaWN0Jztcbi8qKlxuICogRGV0ZXJtaW5lIHdoYXQgZW50cmllcyBzaG91bGQgYmUgZGlzcGxheWVkIG9uIHRoZSBzY3JlZW4sIGJhc2VkIG9uIHRoZVxuICogY3VycmVudGx5IHNlbGVjdGVkIGluZGV4IGFuZCB0aGUgbWF4aW11bSB2aXNpYmxlLiBVc2VkIGluIGxpc3QtYmFzZWRcbiAqIHByb21wdHMgbGlrZSBgc2VsZWN0YCBhbmQgYG11bHRpc2VsZWN0YC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gY3Vyc29yIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgZW50cnlcbiAqIEBwYXJhbSB7bnVtYmVyfSB0b3RhbCB0aGUgdG90YWwgZW50cmllcyBhdmFpbGFibGUgdG8gZGlzcGxheVxuICogQHBhcmFtIHtudW1iZXJ9IFttYXhWaXNpYmxlXSB0aGUgbnVtYmVyIG9mIGVudHJpZXMgdGhhdCBjYW4gYmUgZGlzcGxheWVkXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSAoY3Vyc29yLCB0b3RhbCwgbWF4VmlzaWJsZSkgPT4ge1xuICBtYXhWaXNpYmxlID0gbWF4VmlzaWJsZSB8fCB0b3RhbDtcbiAgbGV0IHN0YXJ0SW5kZXggPSBNYXRoLm1pbih0b3RhbCAtIG1heFZpc2libGUsIGN1cnNvciAtIE1hdGguZmxvb3IobWF4VmlzaWJsZSAvIDIpKTtcbiAgaWYgKHN0YXJ0SW5kZXggPCAwKSBzdGFydEluZGV4ID0gMDtcbiAgbGV0IGVuZEluZGV4ID0gTWF0aC5taW4oc3RhcnRJbmRleCArIG1heFZpc2libGUsIHRvdGFsKTtcbiAgcmV0dXJuIHtcbiAgICBzdGFydEluZGV4LFxuICAgIGVuZEluZGV4XG4gIH07XG59OyIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbWFpbiA9IHtcbiAgYXJyb3dVcDogJ+KGkScsXG4gIGFycm93RG93bjogJ+KGkycsXG4gIGFycm93TGVmdDogJ+KGkCcsXG4gIGFycm93UmlnaHQ6ICfihpInLFxuICByYWRpb09uOiAn4peJJyxcbiAgcmFkaW9PZmY6ICfil68nLFxuICB0aWNrOiAn4pyUJyxcbiAgY3Jvc3M6ICfinJYnLFxuICBlbGxpcHNpczogJ+KApicsXG4gIHBvaW50ZXJTbWFsbDogJ+KAuicsXG4gIGxpbmU6ICfilIAnLFxuICBwb2ludGVyOiAn4p2vJ1xufTtcbmNvbnN0IHdpbiA9IHtcbiAgYXJyb3dVcDogbWFpbi5hcnJvd1VwLFxuICBhcnJvd0Rvd246IG1haW4uYXJyb3dEb3duLFxuICBhcnJvd0xlZnQ6IG1haW4uYXJyb3dMZWZ0LFxuICBhcnJvd1JpZ2h0OiBtYWluLmFycm93UmlnaHQsXG4gIHJhZGlvT246ICcoKiknLFxuICByYWRpb09mZjogJyggKScsXG4gIHRpY2s6ICfiiJonLFxuICBjcm9zczogJ8OXJyxcbiAgZWxsaXBzaXM6ICcuLi4nLFxuICBwb2ludGVyU21hbGw6ICfCuycsXG4gIGxpbmU6ICfilIAnLFxuICBwb2ludGVyOiAnPidcbn07XG5jb25zdCBmaWd1cmVzID0gcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJyA/IHdpbiA6IG1haW47XG5tb2R1bGUuZXhwb3J0cyA9IGZpZ3VyZXM7IiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYWN0aW9uOiByZXF1aXJlKCcuL2FjdGlvbicpLFxuICBjbGVhcjogcmVxdWlyZSgnLi9jbGVhcicpLFxuICBzdHlsZTogcmVxdWlyZSgnLi9zdHlsZScpLFxuICBzdHJpcDogcmVxdWlyZSgnLi9zdHJpcCcpLFxuICBmaWd1cmVzOiByZXF1aXJlKCcuL2ZpZ3VyZXMnKSxcbiAgbGluZXM6IHJlcXVpcmUoJy4vbGluZXMnKSxcbiAgd3JhcDogcmVxdWlyZSgnLi93cmFwJyksXG4gIGVudHJpZXNUb0Rpc3BsYXk6IHJlcXVpcmUoJy4vZW50cmllc1RvRGlzcGxheScpXG59OyIsIid1c2Ugc3RyaWN0JztcblxuY29uc3Qgc3RyaXAgPSByZXF1aXJlKCcuL3N0cmlwJyk7XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBtc2dcbiAqIEBwYXJhbSB7bnVtYmVyfSBwZXJMaW5lXG4gKi9cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtc2csIHBlckxpbmUpIHtcbiAgbGV0IGxpbmVzID0gU3RyaW5nKHN0cmlwKG1zZykgfHwgJycpLnNwbGl0KC9cXHI/XFxuLyk7XG4gIGlmICghcGVyTGluZSkgcmV0dXJuIGxpbmVzLmxlbmd0aDtcbiAgcmV0dXJuIGxpbmVzLm1hcChsID0+IE1hdGguY2VpbChsLmxlbmd0aCAvIHBlckxpbmUpKS5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0ciA9PiB7XG4gIGNvbnN0IHBhdHRlcm4gPSBbJ1tcXFxcdTAwMUJcXFxcdTAwOUJdW1tcXFxcXSgpIzs/XSooPzooPzooPzpbYS16QS1aXFxcXGRdKig/OjtbYS16QS1aXFxcXGRdKikqKT9cXFxcdTAwMDcpJywgJyg/Oig/OlxcXFxkezEsNH0oPzo7XFxcXGR7MCw0fSkqKT9bXFxcXGRBLVBSWmNmLW50cXJ5PT48fl0pKSddLmpvaW4oJ3wnKTtcbiAgY29uc3QgUkdYID0gbmV3IFJlZ0V4cChwYXR0ZXJuLCAnZycpO1xuICByZXR1cm4gdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgPyBzdHIucmVwbGFjZShSR1gsICcnKSA6IHN0cjtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjID0gcmVxdWlyZSgna2xldXInKTtcblxuY29uc3QgZmlndXJlcyA9IHJlcXVpcmUoJy4vZmlndXJlcycpOyAvLyByZW5kZXJpbmcgdXNlciBpbnB1dC5cblxuXG5jb25zdCBzdHlsZXMgPSBPYmplY3QuZnJlZXplKHtcbiAgcGFzc3dvcmQ6IHtcbiAgICBzY2FsZTogMSxcbiAgICByZW5kZXI6IGlucHV0ID0+ICcqJy5yZXBlYXQoaW5wdXQubGVuZ3RoKVxuICB9LFxuICBlbW9qaToge1xuICAgIHNjYWxlOiAyLFxuICAgIHJlbmRlcjogaW5wdXQgPT4gJ/CfmIMnLnJlcGVhdChpbnB1dC5sZW5ndGgpXG4gIH0sXG4gIGludmlzaWJsZToge1xuICAgIHNjYWxlOiAwLFxuICAgIHJlbmRlcjogaW5wdXQgPT4gJydcbiAgfSxcbiAgZGVmYXVsdDoge1xuICAgIHNjYWxlOiAxLFxuICAgIHJlbmRlcjogaW5wdXQgPT4gYCR7aW5wdXR9YFxuICB9XG59KTtcblxuY29uc3QgcmVuZGVyID0gdHlwZSA9PiBzdHlsZXNbdHlwZV0gfHwgc3R5bGVzLmRlZmF1bHQ7IC8vIGljb24gdG8gc2lnbmFsaXplIGEgcHJvbXB0LlxuXG5cbmNvbnN0IHN5bWJvbHMgPSBPYmplY3QuZnJlZXplKHtcbiAgYWJvcnRlZDogYy5yZWQoZmlndXJlcy5jcm9zcyksXG4gIGRvbmU6IGMuZ3JlZW4oZmlndXJlcy50aWNrKSxcbiAgZXhpdGVkOiBjLnllbGxvdyhmaWd1cmVzLmNyb3NzKSxcbiAgZGVmYXVsdDogYy5jeWFuKCc/Jylcbn0pO1xuXG5jb25zdCBzeW1ib2wgPSAoZG9uZSwgYWJvcnRlZCwgZXhpdGVkKSA9PiBhYm9ydGVkID8gc3ltYm9scy5hYm9ydGVkIDogZXhpdGVkID8gc3ltYm9scy5leGl0ZWQgOiBkb25lID8gc3ltYm9scy5kb25lIDogc3ltYm9scy5kZWZhdWx0OyAvLyBiZXR3ZWVuIHRoZSBxdWVzdGlvbiBhbmQgdGhlIHVzZXIncyBpbnB1dC5cblxuXG5jb25zdCBkZWxpbWl0ZXIgPSBjb21wbGV0aW5nID0+IGMuZ3JheShjb21wbGV0aW5nID8gZmlndXJlcy5lbGxpcHNpcyA6IGZpZ3VyZXMucG9pbnRlclNtYWxsKTtcblxuY29uc3QgaXRlbSA9IChleHBhbmRhYmxlLCBleHBhbmRlZCkgPT4gYy5ncmF5KGV4cGFuZGFibGUgPyBleHBhbmRlZCA/IGZpZ3VyZXMucG9pbnRlclNtYWxsIDogJysnIDogZmlndXJlcy5saW5lKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHN0eWxlcyxcbiAgcmVuZGVyLFxuICBzeW1ib2xzLFxuICBzeW1ib2wsXG4gIGRlbGltaXRlcixcbiAgaXRlbVxufTsiLCIndXNlIHN0cmljdCc7XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBtc2cgVGhlIG1lc3NhZ2UgdG8gd3JhcFxuICogQHBhcmFtIHtvYmplY3R9IG9wdHNcbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gW29wdHMubWFyZ2luXSBMZWZ0IG1hcmdpblxuICogQHBhcmFtIHtudW1iZXJ9IG9wdHMud2lkdGggTWF4aW11bSBjaGFyYWN0ZXJzIHBlciBsaW5lIGluY2x1ZGluZyB0aGUgbWFyZ2luXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSAobXNnLCBvcHRzID0ge30pID0+IHtcbiAgY29uc3QgdGFiID0gTnVtYmVyLmlzU2FmZUludGVnZXIocGFyc2VJbnQob3B0cy5tYXJnaW4pKSA/IG5ldyBBcnJheShwYXJzZUludChvcHRzLm1hcmdpbikpLmZpbGwoJyAnKS5qb2luKCcnKSA6IG9wdHMubWFyZ2luIHx8ICcnO1xuICBjb25zdCB3aWR0aCA9IG9wdHMud2lkdGg7XG4gIHJldHVybiAobXNnIHx8ICcnKS5zcGxpdCgvXFxyP1xcbi9nKS5tYXAobGluZSA9PiBsaW5lLnNwbGl0KC9cXHMrL2cpLnJlZHVjZSgoYXJyLCB3KSA9PiB7XG4gICAgaWYgKHcubGVuZ3RoICsgdGFiLmxlbmd0aCA+PSB3aWR0aCB8fCBhcnJbYXJyLmxlbmd0aCAtIDFdLmxlbmd0aCArIHcubGVuZ3RoICsgMSA8IHdpZHRoKSBhcnJbYXJyLmxlbmd0aCAtIDFdICs9IGAgJHt3fWA7ZWxzZSBhcnIucHVzaChgJHt0YWJ9JHt3fWApO1xuICAgIHJldHVybiBhcnI7XG4gIH0sIFt0YWJdKS5qb2luKCdcXG4nKSkuam9pbignXFxuJyk7XG59OyIsImZ1bmN0aW9uIGlzTm9kZUxUKHRhcikge1xuICB0YXIgPSAoQXJyYXkuaXNBcnJheSh0YXIpID8gdGFyIDogdGFyLnNwbGl0KCcuJykpLm1hcChOdW1iZXIpO1xuICBsZXQgaT0wLCBzcmM9cHJvY2Vzcy52ZXJzaW9ucy5ub2RlLnNwbGl0KCcuJykubWFwKE51bWJlcik7XG4gIGZvciAoOyBpIDwgdGFyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHNyY1tpXSA+IHRhcltpXSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh0YXJbaV0gPiBzcmNbaV0pIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPVxuICBpc05vZGVMVCgnOC42LjAnKVxuICAgID8gcmVxdWlyZSgnLi9kaXN0L2luZGV4LmpzJylcbiAgICA6IHJlcXVpcmUoJy4vbGliL2luZGV4LmpzJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNsYXNzIERhdGVQYXJ0IHtcbiAgY29uc3RydWN0b3Ioe3Rva2VuLCBkYXRlLCBwYXJ0cywgbG9jYWxlc30pIHtcbiAgICB0aGlzLnRva2VuID0gdG9rZW47XG4gICAgdGhpcy5kYXRlID0gZGF0ZSB8fCBuZXcgRGF0ZSgpO1xuICAgIHRoaXMucGFydHMgPSBwYXJ0cyB8fCBbdGhpc107XG4gICAgdGhpcy5sb2NhbGVzID0gbG9jYWxlcyB8fCB7fTtcbiAgfVxuXG4gIHVwKCkge31cblxuICBkb3duKCkge31cblxuICBuZXh0KCkge1xuICAgIGNvbnN0IGN1cnJlbnRJZHggPSB0aGlzLnBhcnRzLmluZGV4T2YodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucGFydHMuZmluZCgocGFydCwgaWR4KSA9PiBpZHggPiBjdXJyZW50SWR4ICYmIHBhcnQgaW5zdGFuY2VvZiBEYXRlUGFydCk7XG4gIH1cblxuICBzZXRUbyh2YWwpIHt9XG5cbiAgcHJldigpIHtcbiAgICBsZXQgcGFydHMgPSBbXS5jb25jYXQodGhpcy5wYXJ0cykucmV2ZXJzZSgpO1xuICAgIGNvbnN0IGN1cnJlbnRJZHggPSBwYXJ0cy5pbmRleE9mKHRoaXMpO1xuICAgIHJldHVybiBwYXJ0cy5maW5kKChwYXJ0LCBpZHgpID0+IGlkeCA+IGN1cnJlbnRJZHggJiYgcGFydCBpbnN0YW5jZW9mIERhdGVQYXJ0KTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBTdHJpbmcodGhpcy5kYXRlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGVQYXJ0O1xuXG5cbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRGF0ZVBhcnQgPSByZXF1aXJlKCcuL2RhdGVwYXJ0Jyk7XG5cbmNvbnN0IHBvcyA9IG4gPT4ge1xuICBuID0gbiAlIDEwO1xuICByZXR1cm4gbiA9PT0gMSA/ICdzdCdcbiAgICAgICA6IG4gPT09IDIgPyAnbmQnXG4gICAgICAgOiBuID09PSAzID8gJ3JkJ1xuICAgICAgIDogJ3RoJztcbn1cblxuY2xhc3MgRGF5IGV4dGVuZHMgRGF0ZVBhcnQge1xuICBjb25zdHJ1Y3RvcihvcHRzPXt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gIH1cblxuICB1cCgpIHtcbiAgICB0aGlzLmRhdGUuc2V0RGF0ZSh0aGlzLmRhdGUuZ2V0RGF0ZSgpICsgMSk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIHRoaXMuZGF0ZS5zZXREYXRlKHRoaXMuZGF0ZS5nZXREYXRlKCkgLSAxKTtcbiAgfVxuXG4gIHNldFRvKHZhbCkge1xuICAgIHRoaXMuZGF0ZS5zZXREYXRlKHBhcnNlSW50KHZhbC5zdWJzdHIoLTIpKSk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICBsZXQgZGF0ZSA9IHRoaXMuZGF0ZS5nZXREYXRlKCk7XG4gICAgbGV0IGRheSA9IHRoaXMuZGF0ZS5nZXREYXkoKTtcbiAgICByZXR1cm4gdGhpcy50b2tlbiA9PT0gJ0REJyA/IFN0cmluZyhkYXRlKS5wYWRTdGFydCgyLCAnMCcpXG4gICAgICAgICA6IHRoaXMudG9rZW4gPT09ICdEbycgPyBkYXRlICsgcG9zKGRhdGUpXG4gICAgICAgICA6IHRoaXMudG9rZW4gPT09ICdkJyA/IGRheSArIDFcbiAgICAgICAgIDogdGhpcy50b2tlbiA9PT0gJ2RkZCcgPyB0aGlzLmxvY2FsZXMud2Vla2RheXNTaG9ydFtkYXldXG4gICAgICAgICA6IHRoaXMudG9rZW4gPT09ICdkZGRkJyA/IHRoaXMubG9jYWxlcy53ZWVrZGF5c1tkYXldXG4gICAgICAgICA6IGRhdGU7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEYXk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IERhdGVQYXJ0ID0gcmVxdWlyZSgnLi9kYXRlcGFydCcpO1xuXG5jbGFzcyBIb3VycyBleHRlbmRzIERhdGVQYXJ0IHtcbiAgY29uc3RydWN0b3Iob3B0cz17fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICB9XG5cbiAgdXAoKSB7XG4gICAgdGhpcy5kYXRlLnNldEhvdXJzKHRoaXMuZGF0ZS5nZXRIb3VycygpICsgMSk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIHRoaXMuZGF0ZS5zZXRIb3Vycyh0aGlzLmRhdGUuZ2V0SG91cnMoKSAtIDEpO1xuICB9XG5cbiAgc2V0VG8odmFsKSB7XG4gICAgdGhpcy5kYXRlLnNldEhvdXJzKHBhcnNlSW50KHZhbC5zdWJzdHIoLTIpKSk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICBsZXQgaG91cnMgPSB0aGlzLmRhdGUuZ2V0SG91cnMoKTtcbiAgICBpZiAoL2gvLnRlc3QodGhpcy50b2tlbikpXG4gICAgICBob3VycyA9IChob3VycyAlIDEyKSB8fCAxMjtcbiAgICByZXR1cm4gdGhpcy50b2tlbi5sZW5ndGggPiAxID8gU3RyaW5nKGhvdXJzKS5wYWRTdGFydCgyLCAnMCcpIDogaG91cnM7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBIb3VycztcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIERhdGVQYXJ0OiByZXF1aXJlKCcuL2RhdGVwYXJ0JyksXG4gIE1lcmlkaWVtOiByZXF1aXJlKCcuL21lcmlkaWVtJyksXG4gIERheTogcmVxdWlyZSgnLi9kYXknKSxcbiAgSG91cnM6IHJlcXVpcmUoJy4vaG91cnMnKSxcbiAgTWlsbGlzZWNvbmRzOiByZXF1aXJlKCcuL21pbGxpc2Vjb25kcycpLFxuICBNaW51dGVzOiByZXF1aXJlKCcuL21pbnV0ZXMnKSxcbiAgTW9udGg6IHJlcXVpcmUoJy4vbW9udGgnKSxcbiAgU2Vjb25kczogcmVxdWlyZSgnLi9zZWNvbmRzJyksXG4gIFllYXI6IHJlcXVpcmUoJy4veWVhcicpLFxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBEYXRlUGFydCA9IHJlcXVpcmUoJy4vZGF0ZXBhcnQnKTtcblxuY2xhc3MgTWVyaWRpZW0gZXh0ZW5kcyBEYXRlUGFydCB7XG4gIGNvbnN0cnVjdG9yKG9wdHM9e30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIHRoaXMuZGF0ZS5zZXRIb3VycygodGhpcy5kYXRlLmdldEhvdXJzKCkgKyAxMikgJSAyNCk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIHRoaXMudXAoKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGxldCBtZXJpZGllbSA9IHRoaXMuZGF0ZS5nZXRIb3VycygpID4gMTIgPyAncG0nIDogJ2FtJztcbiAgICByZXR1cm4gL1xcQS8udGVzdCh0aGlzLnRva2VuKSA/IG1lcmlkaWVtLnRvVXBwZXJDYXNlKCkgOiBtZXJpZGllbTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1lcmlkaWVtO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBEYXRlUGFydCA9IHJlcXVpcmUoJy4vZGF0ZXBhcnQnKTtcblxuY2xhc3MgTWlsbGlzZWNvbmRzIGV4dGVuZHMgRGF0ZVBhcnQge1xuICBjb25zdHJ1Y3RvcihvcHRzPXt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gIH1cblxuICB1cCgpIHtcbiAgICB0aGlzLmRhdGUuc2V0TWlsbGlzZWNvbmRzKHRoaXMuZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSArIDEpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICB0aGlzLmRhdGUuc2V0TWlsbGlzZWNvbmRzKHRoaXMuZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSAtIDEpO1xuICB9XG5cbiAgc2V0VG8odmFsKSB7XG4gICAgdGhpcy5kYXRlLnNldE1pbGxpc2Vjb25kcyhwYXJzZUludCh2YWwuc3Vic3RyKC0odGhpcy50b2tlbi5sZW5ndGgpKSkpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIFN0cmluZyh0aGlzLmRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkpLnBhZFN0YXJ0KDQsICcwJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3Vic3RyKDAsIHRoaXMudG9rZW4ubGVuZ3RoKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1pbGxpc2Vjb25kcztcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRGF0ZVBhcnQgPSByZXF1aXJlKCcuL2RhdGVwYXJ0Jyk7XG5cbmNsYXNzIE1pbnV0ZXMgZXh0ZW5kcyBEYXRlUGFydCB7XG4gIGNvbnN0cnVjdG9yKG9wdHM9e30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIHRoaXMuZGF0ZS5zZXRNaW51dGVzKHRoaXMuZGF0ZS5nZXRNaW51dGVzKCkgKyAxKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgdGhpcy5kYXRlLnNldE1pbnV0ZXModGhpcy5kYXRlLmdldE1pbnV0ZXMoKSAtIDEpO1xuICB9XG5cbiAgc2V0VG8odmFsKSB7XG4gICAgdGhpcy5kYXRlLnNldE1pbnV0ZXMocGFyc2VJbnQodmFsLnN1YnN0cigtMikpKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGxldCBtID0gdGhpcy5kYXRlLmdldE1pbnV0ZXMoKTtcbiAgICByZXR1cm4gdGhpcy50b2tlbi5sZW5ndGggPiAxID8gU3RyaW5nKG0pLnBhZFN0YXJ0KDIsICcwJykgOiBtO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTWludXRlcztcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRGF0ZVBhcnQgPSByZXF1aXJlKCcuL2RhdGVwYXJ0Jyk7XG5cbmNsYXNzIE1vbnRoIGV4dGVuZHMgRGF0ZVBhcnQge1xuICBjb25zdHJ1Y3RvcihvcHRzPXt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gIH1cblxuICB1cCgpIHtcbiAgICB0aGlzLmRhdGUuc2V0TW9udGgodGhpcy5kYXRlLmdldE1vbnRoKCkgKyAxKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgdGhpcy5kYXRlLnNldE1vbnRoKHRoaXMuZGF0ZS5nZXRNb250aCgpIC0gMSk7XG4gIH1cblxuICBzZXRUbyh2YWwpIHtcbiAgICB2YWwgPSBwYXJzZUludCh2YWwuc3Vic3RyKC0yKSkgLSAxO1xuICAgIHRoaXMuZGF0ZS5zZXRNb250aCh2YWwgPCAwID8gMCA6IHZhbCk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICBsZXQgbW9udGggPSB0aGlzLmRhdGUuZ2V0TW9udGgoKTtcbiAgICBsZXQgdGwgPSB0aGlzLnRva2VuLmxlbmd0aDtcbiAgICByZXR1cm4gdGwgPT09IDIgPyBTdHJpbmcobW9udGggKyAxKS5wYWRTdGFydCgyLCAnMCcpXG4gICAgICAgICAgIDogdGwgPT09IDMgPyB0aGlzLmxvY2FsZXMubW9udGhzU2hvcnRbbW9udGhdXG4gICAgICAgICAgICAgOiB0bCA9PT0gNCA/IHRoaXMubG9jYWxlcy5tb250aHNbbW9udGhdXG4gICAgICAgICAgICAgICA6IFN0cmluZyhtb250aCArIDEpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTW9udGg7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IERhdGVQYXJ0ID0gcmVxdWlyZSgnLi9kYXRlcGFydCcpO1xuXG5jbGFzcyBTZWNvbmRzIGV4dGVuZHMgRGF0ZVBhcnQge1xuICBjb25zdHJ1Y3RvcihvcHRzPXt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gIH1cblxuICB1cCgpIHtcbiAgICB0aGlzLmRhdGUuc2V0U2Vjb25kcyh0aGlzLmRhdGUuZ2V0U2Vjb25kcygpICsgMSk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIHRoaXMuZGF0ZS5zZXRTZWNvbmRzKHRoaXMuZGF0ZS5nZXRTZWNvbmRzKCkgLSAxKTtcbiAgfVxuXG4gIHNldFRvKHZhbCkge1xuICAgIHRoaXMuZGF0ZS5zZXRTZWNvbmRzKHBhcnNlSW50KHZhbC5zdWJzdHIoLTIpKSk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICBsZXQgcyA9IHRoaXMuZGF0ZS5nZXRTZWNvbmRzKCk7XG4gICAgcmV0dXJuIHRoaXMudG9rZW4ubGVuZ3RoID4gMSA/IFN0cmluZyhzKS5wYWRTdGFydCgyLCAnMCcpIDogcztcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNlY29uZHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IERhdGVQYXJ0ID0gcmVxdWlyZSgnLi9kYXRlcGFydCcpO1xuXG5jbGFzcyBZZWFyIGV4dGVuZHMgRGF0ZVBhcnQge1xuICBjb25zdHJ1Y3RvcihvcHRzPXt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gIH1cblxuICB1cCgpIHtcbiAgICB0aGlzLmRhdGUuc2V0RnVsbFllYXIodGhpcy5kYXRlLmdldEZ1bGxZZWFyKCkgKyAxKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgdGhpcy5kYXRlLnNldEZ1bGxZZWFyKHRoaXMuZGF0ZS5nZXRGdWxsWWVhcigpIC0gMSk7XG4gIH1cblxuICBzZXRUbyh2YWwpIHtcbiAgICB0aGlzLmRhdGUuc2V0RnVsbFllYXIodmFsLnN1YnN0cigtNCkpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgbGV0IHllYXIgPSBTdHJpbmcodGhpcy5kYXRlLmdldEZ1bGxZZWFyKCkpLnBhZFN0YXJ0KDQsICcwJyk7XG4gICAgcmV0dXJuIHRoaXMudG9rZW4ubGVuZ3RoID09PSAyID8geWVhci5zdWJzdHIoLTIpIDogeWVhcjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFllYXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNvbG9yID0gcmVxdWlyZSgna2xldXInKTtcbmNvbnN0IFByb21wdCA9IHJlcXVpcmUoJy4vcHJvbXB0Jyk7XG5jb25zdCB7IGVyYXNlLCBjdXJzb3IgfSA9IHJlcXVpcmUoJ3Npc3RlcmFuc2knKTtcbmNvbnN0IHsgc3R5bGUsIGNsZWFyLCBmaWd1cmVzLCB3cmFwLCBlbnRyaWVzVG9EaXNwbGF5IH0gPSByZXF1aXJlKCcuLi91dGlsJyk7XG5cbmNvbnN0IGdldFZhbCA9IChhcnIsIGkpID0+IGFycltpXSAmJiAoYXJyW2ldLnZhbHVlIHx8IGFycltpXS50aXRsZSB8fCBhcnJbaV0pO1xuY29uc3QgZ2V0VGl0bGUgPSAoYXJyLCBpKSA9PiBhcnJbaV0gJiYgKGFycltpXS50aXRsZSB8fCBhcnJbaV0udmFsdWUgfHwgYXJyW2ldKTtcbmNvbnN0IGdldEluZGV4ID0gKGFyciwgdmFsT3JUaXRsZSkgPT4ge1xuICBjb25zdCBpbmRleCA9IGFyci5maW5kSW5kZXgoZWwgPT4gZWwudmFsdWUgPT09IHZhbE9yVGl0bGUgfHwgZWwudGl0bGUgPT09IHZhbE9yVGl0bGUpO1xuICByZXR1cm4gaW5kZXggPiAtMSA/IGluZGV4IDogdW5kZWZpbmVkO1xufTtcblxuLyoqXG4gKiBUZXh0UHJvbXB0IEJhc2UgRWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IG9wdHMubWVzc2FnZSBNZXNzYWdlXG4gKiBAcGFyYW0ge0FycmF5fSBvcHRzLmNob2ljZXMgQXJyYXkgb2YgYXV0by1jb21wbGV0ZSBjaG9pY2VzIG9iamVjdHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLnN1Z2dlc3RdIEZpbHRlciBmdW5jdGlvbi4gRGVmYXVsdHMgdG8gc29ydCBieSB0aXRsZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmxpbWl0PTEwXSBNYXggbnVtYmVyIG9mIHJlc3VsdHMgdG8gc2hvd1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmN1cnNvcj0wXSBDdXJzb3Igc3RhcnQgcG9zaXRpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5zdHlsZT0nZGVmYXVsdCddIFJlbmRlciBzdHlsZVxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLmZhbGxiYWNrXSBGYWxsYmFjayBtZXNzYWdlIC0gaW5pdGlhbCB0byBkZWZhdWx0IHZhbHVlXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMuaW5pdGlhbF0gSW5kZXggb2YgdGhlIGRlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdHMuY2xlYXJGaXJzdF0gVGhlIGZpcnN0IEVTQ0FQRSBrZXlwcmVzcyB3aWxsIGNsZWFyIHRoZSBpbnB1dFxuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMubm9NYXRjaGVzXSBUaGUgbm8gbWF0Y2hlcyBmb3VuZCBsYWJlbFxuICovXG5jbGFzcyBBdXRvY29tcGxldGVQcm9tcHQgZXh0ZW5kcyBQcm9tcHQge1xuICBjb25zdHJ1Y3RvcihvcHRzPXt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgdGhpcy5tc2cgPSBvcHRzLm1lc3NhZ2U7XG4gICAgdGhpcy5zdWdnZXN0ID0gb3B0cy5zdWdnZXN0O1xuICAgIHRoaXMuY2hvaWNlcyA9IG9wdHMuY2hvaWNlcztcbiAgICB0aGlzLmluaXRpYWwgPSB0eXBlb2Ygb3B0cy5pbml0aWFsID09PSAnbnVtYmVyJ1xuICAgICAgPyBvcHRzLmluaXRpYWxcbiAgICAgIDogZ2V0SW5kZXgob3B0cy5jaG9pY2VzLCBvcHRzLmluaXRpYWwpO1xuICAgIHRoaXMuc2VsZWN0ID0gdGhpcy5pbml0aWFsIHx8IG9wdHMuY3Vyc29yIHx8IDA7XG4gICAgdGhpcy5pMThuID0geyBub01hdGNoZXM6IG9wdHMubm9NYXRjaGVzIHx8ICdubyBtYXRjaGVzIGZvdW5kJyB9O1xuICAgIHRoaXMuZmFsbGJhY2sgPSBvcHRzLmZhbGxiYWNrIHx8IHRoaXMuaW5pdGlhbDtcbiAgICB0aGlzLmNsZWFyRmlyc3QgPSBvcHRzLmNsZWFyRmlyc3QgfHwgZmFsc2U7XG4gICAgdGhpcy5zdWdnZXN0aW9ucyA9IFtdO1xuICAgIHRoaXMuaW5wdXQgPSAnJztcbiAgICB0aGlzLmxpbWl0ID0gb3B0cy5saW1pdCB8fCAxMDtcbiAgICB0aGlzLmN1cnNvciA9IDA7XG4gICAgdGhpcy50cmFuc2Zvcm0gPSBzdHlsZS5yZW5kZXIob3B0cy5zdHlsZSk7XG4gICAgdGhpcy5zY2FsZSA9IHRoaXMudHJhbnNmb3JtLnNjYWxlO1xuICAgIHRoaXMucmVuZGVyID0gdGhpcy5yZW5kZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNvbXBsZXRlID0gdGhpcy5jb21wbGV0ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY2xlYXIgPSBjbGVhcignJywgdGhpcy5vdXQuY29sdW1ucyk7XG4gICAgdGhpcy5jb21wbGV0ZSh0aGlzLnJlbmRlcik7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHNldCBmYWxsYmFjayhmYikge1xuICAgIHRoaXMuX2ZiID0gTnVtYmVyLmlzU2FmZUludGVnZXIocGFyc2VJbnQoZmIpKSA/IHBhcnNlSW50KGZiKSA6IGZiO1xuICB9XG5cbiAgZ2V0IGZhbGxiYWNrKCkge1xuICAgIGxldCBjaG9pY2U7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl9mYiA9PT0gJ251bWJlcicpXG4gICAgICBjaG9pY2UgPSB0aGlzLmNob2ljZXNbdGhpcy5fZmJdO1xuICAgIGVsc2UgaWYgKHR5cGVvZiB0aGlzLl9mYiA9PT0gJ3N0cmluZycpXG4gICAgICBjaG9pY2UgPSB7IHRpdGxlOiB0aGlzLl9mYiB9O1xuICAgIHJldHVybiBjaG9pY2UgfHwgdGhpcy5fZmIgfHwgeyB0aXRsZTogdGhpcy5pMThuLm5vTWF0Y2hlcyB9O1xuICB9XG5cbiAgbW92ZVNlbGVjdChpKSB7XG4gICAgdGhpcy5zZWxlY3QgPSBpO1xuICAgIGlmICh0aGlzLnN1Z2dlc3Rpb25zLmxlbmd0aCA+IDApXG4gICAgICB0aGlzLnZhbHVlID0gZ2V0VmFsKHRoaXMuc3VnZ2VzdGlvbnMsIGkpO1xuICAgIGVsc2UgdGhpcy52YWx1ZSA9IHRoaXMuZmFsbGJhY2sudmFsdWU7XG4gICAgdGhpcy5maXJlKCk7XG4gIH1cblxuICBhc3luYyBjb21wbGV0ZShjYikge1xuICAgIGNvbnN0IHAgPSAodGhpcy5jb21wbGV0aW5nID0gdGhpcy5zdWdnZXN0KHRoaXMuaW5wdXQsIHRoaXMuY2hvaWNlcykpO1xuICAgIGNvbnN0IHN1Z2dlc3Rpb25zID0gYXdhaXQgcDtcblxuICAgIGlmICh0aGlzLmNvbXBsZXRpbmcgIT09IHApIHJldHVybjtcbiAgICB0aGlzLnN1Z2dlc3Rpb25zID0gc3VnZ2VzdGlvbnNcbiAgICAgIC5tYXAoKHMsIGksIGFycikgPT4gKHsgdGl0bGU6IGdldFRpdGxlKGFyciwgaSksIHZhbHVlOiBnZXRWYWwoYXJyLCBpKSwgZGVzY3JpcHRpb246IHMuZGVzY3JpcHRpb24gfSkpO1xuICAgIHRoaXMuY29tcGxldGluZyA9IGZhbHNlO1xuICAgIGNvbnN0IGwgPSBNYXRoLm1heChzdWdnZXN0aW9ucy5sZW5ndGggLSAxLCAwKTtcbiAgICB0aGlzLm1vdmVTZWxlY3QoTWF0aC5taW4obCwgdGhpcy5zZWxlY3QpKTtcblxuICAgIGNiICYmIGNiKCk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLmlucHV0ID0gJyc7XG4gICAgdGhpcy5jb21wbGV0ZSgoKSA9PiB7XG4gICAgICB0aGlzLm1vdmVTZWxlY3QodGhpcy5pbml0aWFsICE9PSB2b2lkIDAgPyB0aGlzLmluaXRpYWwgOiAwKTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGV4aXQoKSB7XG4gICAgaWYgKHRoaXMuY2xlYXJGaXJzdCAmJiB0aGlzLmlucHV0Lmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kb25lID0gdGhpcy5leGl0ZWQgPSB0cnVlOyBcbiAgICAgIHRoaXMuYWJvcnRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5maXJlKCk7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIGFib3J0KCkge1xuICAgIHRoaXMuZG9uZSA9IHRoaXMuYWJvcnRlZCA9IHRydWU7XG4gICAgdGhpcy5leGl0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICBzdWJtaXQoKSB7XG4gICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICB0aGlzLmFib3J0ZWQgPSB0aGlzLmV4aXRlZCA9IGZhbHNlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIF8oYywga2V5KSB7XG4gICAgbGV0IHMxID0gdGhpcy5pbnB1dC5zbGljZSgwLCB0aGlzLmN1cnNvcik7XG4gICAgbGV0IHMyID0gdGhpcy5pbnB1dC5zbGljZSh0aGlzLmN1cnNvcik7XG4gICAgdGhpcy5pbnB1dCA9IGAke3MxfSR7Y30ke3MyfWA7XG4gICAgdGhpcy5jdXJzb3IgPSBzMS5sZW5ndGgrMTtcbiAgICB0aGlzLmNvbXBsZXRlKHRoaXMucmVuZGVyKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZGVsZXRlKCkge1xuICAgIGlmICh0aGlzLmN1cnNvciA9PT0gMCkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIGxldCBzMSA9IHRoaXMuaW5wdXQuc2xpY2UoMCwgdGhpcy5jdXJzb3ItMSk7XG4gICAgbGV0IHMyID0gdGhpcy5pbnB1dC5zbGljZSh0aGlzLmN1cnNvcik7XG4gICAgdGhpcy5pbnB1dCA9IGAke3MxfSR7czJ9YDtcbiAgICB0aGlzLmNvbXBsZXRlKHRoaXMucmVuZGVyKTtcbiAgICB0aGlzLmN1cnNvciA9IHRoaXMuY3Vyc29yLTE7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGRlbGV0ZUZvcndhcmQoKSB7XG4gICAgaWYodGhpcy5jdXJzb3IqdGhpcy5zY2FsZSA+PSB0aGlzLnJlbmRlcmVkLmxlbmd0aCkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIGxldCBzMSA9IHRoaXMuaW5wdXQuc2xpY2UoMCwgdGhpcy5jdXJzb3IpO1xuICAgIGxldCBzMiA9IHRoaXMuaW5wdXQuc2xpY2UodGhpcy5jdXJzb3IrMSk7XG4gICAgdGhpcy5pbnB1dCA9IGAke3MxfSR7czJ9YDtcbiAgICB0aGlzLmNvbXBsZXRlKHRoaXMucmVuZGVyKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZmlyc3QoKSB7XG4gICAgdGhpcy5tb3ZlU2VsZWN0KDApO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBsYXN0KCkge1xuICAgIHRoaXMubW92ZVNlbGVjdCh0aGlzLnN1Z2dlc3Rpb25zLmxlbmd0aCAtIDEpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICB1cCgpIHtcbiAgICBpZiAodGhpcy5zZWxlY3QgPT09IDApIHtcbiAgICAgIHRoaXMubW92ZVNlbGVjdCh0aGlzLnN1Z2dlc3Rpb25zLmxlbmd0aCAtIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm1vdmVTZWxlY3QodGhpcy5zZWxlY3QgLSAxKTtcbiAgICB9XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGRvd24oKSB7XG4gICAgaWYgKHRoaXMuc2VsZWN0ID09PSB0aGlzLnN1Z2dlc3Rpb25zLmxlbmd0aCAtIDEpIHtcbiAgICAgIHRoaXMubW92ZVNlbGVjdCgwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tb3ZlU2VsZWN0KHRoaXMuc2VsZWN0ICsgMSk7XG4gICAgfVxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBuZXh0KCkge1xuICAgIGlmICh0aGlzLnNlbGVjdCA9PT0gdGhpcy5zdWdnZXN0aW9ucy5sZW5ndGggLSAxKSB7XG4gICAgICB0aGlzLm1vdmVTZWxlY3QoMCk7XG4gICAgfSBlbHNlIHRoaXMubW92ZVNlbGVjdCh0aGlzLnNlbGVjdCArIDEpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBuZXh0UGFnZSgpIHtcbiAgICB0aGlzLm1vdmVTZWxlY3QoTWF0aC5taW4odGhpcy5zZWxlY3QgKyB0aGlzLmxpbWl0LCB0aGlzLnN1Z2dlc3Rpb25zLmxlbmd0aCAtIDEpKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcHJldlBhZ2UoKSB7XG4gICAgdGhpcy5tb3ZlU2VsZWN0KE1hdGgubWF4KHRoaXMuc2VsZWN0IC0gdGhpcy5saW1pdCwgMCkpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBsZWZ0KCkge1xuICAgIGlmICh0aGlzLmN1cnNvciA8PSAwKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy5jdXJzb3IgPSB0aGlzLmN1cnNvci0xO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByaWdodCgpIHtcbiAgICBpZiAodGhpcy5jdXJzb3IqdGhpcy5zY2FsZSA+PSB0aGlzLnJlbmRlcmVkLmxlbmd0aCkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMuY3Vyc29yID0gdGhpcy5jdXJzb3IrMTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcmVuZGVyT3B0aW9uKHYsIGhvdmVyZWQsIGlzU3RhcnQsIGlzRW5kKSB7XG4gICAgbGV0IGRlc2M7XG4gICAgbGV0IHByZWZpeCA9IGlzU3RhcnQgPyBmaWd1cmVzLmFycm93VXAgOiBpc0VuZCA/IGZpZ3VyZXMuYXJyb3dEb3duIDogJyAnO1xuICAgIGxldCB0aXRsZSA9IGhvdmVyZWQgPyBjb2xvci5jeWFuKCkudW5kZXJsaW5lKHYudGl0bGUpIDogdi50aXRsZTtcbiAgICBwcmVmaXggPSAoaG92ZXJlZCA/IGNvbG9yLmN5YW4oZmlndXJlcy5wb2ludGVyKSArICcgJyA6ICcgICcpICsgcHJlZml4O1xuICAgIGlmICh2LmRlc2NyaXB0aW9uKSB7XG4gICAgICBkZXNjID0gYCAtICR7di5kZXNjcmlwdGlvbn1gO1xuICAgICAgaWYgKHByZWZpeC5sZW5ndGggKyB0aXRsZS5sZW5ndGggKyBkZXNjLmxlbmd0aCA+PSB0aGlzLm91dC5jb2x1bW5zXG4gICAgICAgIHx8IHYuZGVzY3JpcHRpb24uc3BsaXQoL1xccj9cXG4vKS5sZW5ndGggPiAxKSB7XG4gICAgICAgIGRlc2MgPSAnXFxuJyArIHdyYXAodi5kZXNjcmlwdGlvbiwgeyBtYXJnaW46IDMsIHdpZHRoOiB0aGlzLm91dC5jb2x1bW5zIH0pXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcmVmaXggKyAnICcgKyB0aXRsZSArIGNvbG9yLmdyYXkoZGVzYyB8fCAnJyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuY2xvc2VkKSByZXR1cm47XG4gICAgaWYgKHRoaXMuZmlyc3RSZW5kZXIpIHRoaXMub3V0LndyaXRlKGN1cnNvci5oaWRlKTtcbiAgICBlbHNlIHRoaXMub3V0LndyaXRlKGNsZWFyKHRoaXMub3V0cHV0VGV4dCwgdGhpcy5vdXQuY29sdW1ucykpO1xuICAgIHN1cGVyLnJlbmRlcigpO1xuXG4gICAgbGV0IHsgc3RhcnRJbmRleCwgZW5kSW5kZXggfSA9IGVudHJpZXNUb0Rpc3BsYXkodGhpcy5zZWxlY3QsIHRoaXMuY2hvaWNlcy5sZW5ndGgsIHRoaXMubGltaXQpO1xuXG4gICAgdGhpcy5vdXRwdXRUZXh0ID0gW1xuICAgICAgc3R5bGUuc3ltYm9sKHRoaXMuZG9uZSwgdGhpcy5hYm9ydGVkLCB0aGlzLmV4aXRlZCksXG4gICAgICBjb2xvci5ib2xkKHRoaXMubXNnKSxcbiAgICAgIHN0eWxlLmRlbGltaXRlcih0aGlzLmNvbXBsZXRpbmcpLFxuICAgICAgdGhpcy5kb25lICYmIHRoaXMuc3VnZ2VzdGlvbnNbdGhpcy5zZWxlY3RdXG4gICAgICAgID8gdGhpcy5zdWdnZXN0aW9uc1t0aGlzLnNlbGVjdF0udGl0bGVcbiAgICAgICAgOiB0aGlzLnJlbmRlcmVkID0gdGhpcy50cmFuc2Zvcm0ucmVuZGVyKHRoaXMuaW5wdXQpXG4gICAgXS5qb2luKCcgJyk7XG5cbiAgICBpZiAoIXRoaXMuZG9uZSkge1xuICAgICAgY29uc3Qgc3VnZ2VzdGlvbnMgPSB0aGlzLnN1Z2dlc3Rpb25zXG4gICAgICAgIC5zbGljZShzdGFydEluZGV4LCBlbmRJbmRleClcbiAgICAgICAgLm1hcCgoaXRlbSwgaSkgPT4gIHRoaXMucmVuZGVyT3B0aW9uKGl0ZW0sXG4gICAgICAgICAgdGhpcy5zZWxlY3QgPT09IGkgKyBzdGFydEluZGV4LFxuICAgICAgICAgIGkgPT09IDAgJiYgc3RhcnRJbmRleCA+IDAsXG4gICAgICAgICAgaSArIHN0YXJ0SW5kZXggPT09IGVuZEluZGV4IC0gMSAmJiBlbmRJbmRleCA8IHRoaXMuY2hvaWNlcy5sZW5ndGgpKVxuICAgICAgICAuam9pbignXFxuJyk7XG4gICAgICB0aGlzLm91dHB1dFRleHQgKz0gYFxcbmAgKyAoc3VnZ2VzdGlvbnMgfHwgY29sb3IuZ3JheSh0aGlzLmZhbGxiYWNrLnRpdGxlKSk7XG4gICAgfVxuXG4gICAgdGhpcy5vdXQud3JpdGUoZXJhc2UubGluZSArIGN1cnNvci50bygwKSArIHRoaXMub3V0cHV0VGV4dCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBdXRvY29tcGxldGVQcm9tcHQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNvbG9yID0gcmVxdWlyZSgna2xldXInKTtcbmNvbnN0IHsgY3Vyc29yIH0gPSByZXF1aXJlKCdzaXN0ZXJhbnNpJyk7XG5jb25zdCBNdWx0aXNlbGVjdFByb21wdCA9IHJlcXVpcmUoJy4vbXVsdGlzZWxlY3QnKTtcbmNvbnN0IHsgY2xlYXIsIHN0eWxlLCBmaWd1cmVzIH0gPSByZXF1aXJlKCcuLi91dGlsJyk7XG4vKipcbiAqIE11bHRpc2VsZWN0UHJvbXB0IEJhc2UgRWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IG9wdHMubWVzc2FnZSBNZXNzYWdlXG4gKiBAcGFyYW0ge0FycmF5fSBvcHRzLmNob2ljZXMgQXJyYXkgb2YgY2hvaWNlIG9iamVjdHNcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5oaW50XSBIaW50IHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy53YXJuXSBIaW50IHNob3duIGZvciBkaXNhYmxlZCBjaG9pY2VzXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMubWF4XSBNYXggY2hvaWNlc1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmN1cnNvcj0wXSBDdXJzb3Igc3RhcnQgcG9zaXRpb25cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICovXG5jbGFzcyBBdXRvY29tcGxldGVNdWx0aXNlbGVjdFByb21wdCBleHRlbmRzIE11bHRpc2VsZWN0UHJvbXB0IHtcbiAgY29uc3RydWN0b3Iob3B0cz17fSkge1xuICAgIG9wdHMub3ZlcnJpZGVSZW5kZXIgPSB0cnVlO1xuICAgIHN1cGVyKG9wdHMpO1xuICAgIHRoaXMuaW5wdXRWYWx1ZSA9ICcnO1xuICAgIHRoaXMuY2xlYXIgPSBjbGVhcignJywgdGhpcy5vdXQuY29sdW1ucyk7XG4gICAgdGhpcy5maWx0ZXJlZE9wdGlvbnMgPSB0aGlzLnZhbHVlO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBsYXN0KCkge1xuICAgIHRoaXMuY3Vyc29yID0gdGhpcy5maWx0ZXJlZE9wdGlvbnMubGVuZ3RoIC0gMTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG4gIG5leHQoKSB7XG4gICAgdGhpcy5jdXJzb3IgPSAodGhpcy5jdXJzb3IgKyAxKSAlIHRoaXMuZmlsdGVyZWRPcHRpb25zLmxlbmd0aDtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgdXAoKSB7XG4gICAgaWYgKHRoaXMuY3Vyc29yID09PSAwKSB7XG4gICAgICB0aGlzLmN1cnNvciA9IHRoaXMuZmlsdGVyZWRPcHRpb25zLmxlbmd0aCAtIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3Vyc29yLS07XG4gICAgfVxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIGlmICh0aGlzLmN1cnNvciA9PT0gdGhpcy5maWx0ZXJlZE9wdGlvbnMubGVuZ3RoIC0gMSkge1xuICAgICAgdGhpcy5jdXJzb3IgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnNvcisrO1xuICAgIH1cbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbGVmdCgpIHtcbiAgICB0aGlzLmZpbHRlcmVkT3B0aW9uc1t0aGlzLmN1cnNvcl0uc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcmlnaHQoKSB7XG4gICAgaWYgKHRoaXMudmFsdWUuZmlsdGVyKGUgPT4gZS5zZWxlY3RlZCkubGVuZ3RoID49IHRoaXMubWF4Q2hvaWNlcykgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMuZmlsdGVyZWRPcHRpb25zW3RoaXMuY3Vyc29yXS5zZWxlY3RlZCA9IHRydWU7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGRlbGV0ZSgpIHtcbiAgICBpZiAodGhpcy5pbnB1dFZhbHVlLmxlbmd0aCkge1xuICAgICAgdGhpcy5pbnB1dFZhbHVlID0gdGhpcy5pbnB1dFZhbHVlLnN1YnN0cigwLCB0aGlzLmlucHV0VmFsdWUubGVuZ3RoIC0gMSk7XG4gICAgICB0aGlzLnVwZGF0ZUZpbHRlcmVkT3B0aW9ucygpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUZpbHRlcmVkT3B0aW9ucygpIHtcbiAgICBjb25zdCBjdXJyZW50SGlnaGxpZ2h0ID0gdGhpcy5maWx0ZXJlZE9wdGlvbnNbdGhpcy5jdXJzb3JdO1xuICAgIHRoaXMuZmlsdGVyZWRPcHRpb25zID0gdGhpcy52YWx1ZVxuICAgICAgLmZpbHRlcih2ID0+IHtcbiAgICAgICAgaWYgKHRoaXMuaW5wdXRWYWx1ZSkge1xuICAgICAgICAgIGlmICh0eXBlb2Ygdi50aXRsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmICh2LnRpdGxlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXModGhpcy5pbnB1dFZhbHVlLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIHYudmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAodi52YWx1ZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHRoaXMuaW5wdXRWYWx1ZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSk7XG4gICAgY29uc3QgbmV3SGlnaGxpZ2h0SW5kZXggPSB0aGlzLmZpbHRlcmVkT3B0aW9ucy5maW5kSW5kZXgodiA9PiB2ID09PSBjdXJyZW50SGlnaGxpZ2h0KVxuICAgIHRoaXMuY3Vyc29yID0gbmV3SGlnaGxpZ2h0SW5kZXggPCAwID8gMCA6IG5ld0hpZ2hsaWdodEluZGV4O1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBoYW5kbGVTcGFjZVRvZ2dsZSgpIHtcbiAgICBjb25zdCB2ID0gdGhpcy5maWx0ZXJlZE9wdGlvbnNbdGhpcy5jdXJzb3JdO1xuXG4gICAgaWYgKHYuc2VsZWN0ZWQpIHtcbiAgICAgIHYuc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfSBlbHNlIGlmICh2LmRpc2FibGVkIHx8IHRoaXMudmFsdWUuZmlsdGVyKGUgPT4gZS5zZWxlY3RlZCkubGVuZ3RoID49IHRoaXMubWF4Q2hvaWNlcykge1xuICAgICAgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2LnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlSW5wdXRDaGFuZ2UoYykge1xuICAgIHRoaXMuaW5wdXRWYWx1ZSA9IHRoaXMuaW5wdXRWYWx1ZSArIGM7XG4gICAgdGhpcy51cGRhdGVGaWx0ZXJlZE9wdGlvbnMoKTtcbiAgfVxuXG4gIF8oYywga2V5KSB7XG4gICAgaWYgKGMgPT09ICcgJykge1xuICAgICAgdGhpcy5oYW5kbGVTcGFjZVRvZ2dsZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhhbmRsZUlucHV0Q2hhbmdlKGMpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlckluc3RydWN0aW9ucygpIHtcbiAgICBpZiAodGhpcy5pbnN0cnVjdGlvbnMgPT09IHVuZGVmaW5lZCB8fCB0aGlzLmluc3RydWN0aW9ucykge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLmluc3RydWN0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdHJ1Y3Rpb25zO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGBcbkluc3RydWN0aW9uczpcbiAgICAke2ZpZ3VyZXMuYXJyb3dVcH0vJHtmaWd1cmVzLmFycm93RG93bn06IEhpZ2hsaWdodCBvcHRpb25cbiAgICAke2ZpZ3VyZXMuYXJyb3dMZWZ0fS8ke2ZpZ3VyZXMuYXJyb3dSaWdodH0vW3NwYWNlXTogVG9nZ2xlIHNlbGVjdGlvblxuICAgIFthLGIsY10vZGVsZXRlOiBGaWx0ZXIgY2hvaWNlc1xuICAgIGVudGVyL3JldHVybjogQ29tcGxldGUgYW5zd2VyXG5gO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICByZW5kZXJDdXJyZW50SW5wdXQoKSB7XG4gICAgcmV0dXJuIGBcbkZpbHRlcmVkIHJlc3VsdHMgZm9yOiAke3RoaXMuaW5wdXRWYWx1ZSA/IHRoaXMuaW5wdXRWYWx1ZSA6IGNvbG9yLmdyYXkoJ0VudGVyIHNvbWV0aGluZyB0byBmaWx0ZXInKX1cXG5gO1xuICB9XG5cbiAgcmVuZGVyT3B0aW9uKGN1cnNvciwgdiwgaSkge1xuICAgIGxldCB0aXRsZTtcbiAgICBpZiAodi5kaXNhYmxlZCkgdGl0bGUgPSBjdXJzb3IgPT09IGkgPyBjb2xvci5ncmF5KCkudW5kZXJsaW5lKHYudGl0bGUpIDogY29sb3Iuc3RyaWtldGhyb3VnaCgpLmdyYXkodi50aXRsZSk7XG4gICAgZWxzZSB0aXRsZSA9IGN1cnNvciA9PT0gaSA/IGNvbG9yLmN5YW4oKS51bmRlcmxpbmUodi50aXRsZSkgOiB2LnRpdGxlO1xuICAgIHJldHVybiAodi5zZWxlY3RlZCA/IGNvbG9yLmdyZWVuKGZpZ3VyZXMucmFkaW9PbikgOiBmaWd1cmVzLnJhZGlvT2ZmKSArICcgICcgKyB0aXRsZVxuICB9XG5cbiAgcmVuZGVyRG9uZU9ySW5zdHJ1Y3Rpb25zKCkge1xuICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlXG4gICAgICAgIC5maWx0ZXIoZSA9PiBlLnNlbGVjdGVkKVxuICAgICAgICAubWFwKHYgPT4gdi50aXRsZSlcbiAgICAgICAgLmpvaW4oJywgJyk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3V0cHV0ID0gW2NvbG9yLmdyYXkodGhpcy5oaW50KSwgdGhpcy5yZW5kZXJJbnN0cnVjdGlvbnMoKSwgdGhpcy5yZW5kZXJDdXJyZW50SW5wdXQoKV07XG5cbiAgICBpZiAodGhpcy5maWx0ZXJlZE9wdGlvbnMubGVuZ3RoICYmIHRoaXMuZmlsdGVyZWRPcHRpb25zW3RoaXMuY3Vyc29yXS5kaXNhYmxlZCkge1xuICAgICAgb3V0cHV0LnB1c2goY29sb3IueWVsbG93KHRoaXMud2FybikpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0LmpvaW4oJyAnKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5jbG9zZWQpIHJldHVybjtcbiAgICBpZiAodGhpcy5maXJzdFJlbmRlcikgdGhpcy5vdXQud3JpdGUoY3Vyc29yLmhpZGUpO1xuICAgIHN1cGVyLnJlbmRlcigpO1xuXG4gICAgLy8gcHJpbnQgcHJvbXB0XG5cbiAgICBsZXQgcHJvbXB0ID0gW1xuICAgICAgc3R5bGUuc3ltYm9sKHRoaXMuZG9uZSwgdGhpcy5hYm9ydGVkKSxcbiAgICAgIGNvbG9yLmJvbGQodGhpcy5tc2cpLFxuICAgICAgc3R5bGUuZGVsaW1pdGVyKGZhbHNlKSxcbiAgICAgIHRoaXMucmVuZGVyRG9uZU9ySW5zdHJ1Y3Rpb25zKClcbiAgICBdLmpvaW4oJyAnKTtcblxuICAgIGlmICh0aGlzLnNob3dNaW5FcnJvcikge1xuICAgICAgcHJvbXB0ICs9IGNvbG9yLnJlZChgWW91IG11c3Qgc2VsZWN0IGEgbWluaW11bSBvZiAke3RoaXMubWluU2VsZWN0ZWR9IGNob2ljZXMuYCk7XG4gICAgICB0aGlzLnNob3dNaW5FcnJvciA9IGZhbHNlO1xuICAgIH1cbiAgICBwcm9tcHQgKz0gdGhpcy5yZW5kZXJPcHRpb25zKHRoaXMuZmlsdGVyZWRPcHRpb25zKTtcblxuICAgIHRoaXMub3V0LndyaXRlKHRoaXMuY2xlYXIgKyBwcm9tcHQpO1xuICAgIHRoaXMuY2xlYXIgPSBjbGVhcihwcm9tcHQsIHRoaXMub3V0LmNvbHVtbnMpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXV0b2NvbXBsZXRlTXVsdGlzZWxlY3RQcm9tcHQ7XG4iLCJjb25zdCBjb2xvciA9IHJlcXVpcmUoJ2tsZXVyJyk7XG5jb25zdCBQcm9tcHQgPSByZXF1aXJlKCcuL3Byb21wdCcpO1xuY29uc3QgeyBzdHlsZSwgY2xlYXIgfSA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcbmNvbnN0IHsgZXJhc2UsIGN1cnNvciB9ID0gcmVxdWlyZSgnc2lzdGVyYW5zaScpO1xuXG4vKipcbiAqIENvbmZpcm1Qcm9tcHQgQmFzZSBFbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5tZXNzYWdlIE1lc3NhZ2VcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdHMuaW5pdGlhbF0gRGVmYXVsdCB2YWx1ZSAodHJ1ZS9mYWxzZSlcbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLnllc10gVGhlIFwiWWVzXCIgbGFiZWxcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy55ZXNPcHRpb25dIFRoZSBcIlllc1wiIG9wdGlvbiB3aGVuIGNob29zaW5nIGJldHdlZW4geWVzL25vXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMubm9dIFRoZSBcIk5vXCIgbGFiZWxcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5ub09wdGlvbl0gVGhlIFwiTm9cIiBvcHRpb24gd2hlbiBjaG9vc2luZyBiZXR3ZWVuIHllcy9ub1xuICovXG5jbGFzcyBDb25maXJtUHJvbXB0IGV4dGVuZHMgUHJvbXB0IHtcbiAgY29uc3RydWN0b3Iob3B0cz17fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICAgIHRoaXMubXNnID0gb3B0cy5tZXNzYWdlO1xuICAgIHRoaXMudmFsdWUgPSBvcHRzLmluaXRpYWw7XG4gICAgdGhpcy5pbml0aWFsVmFsdWUgPSAhIW9wdHMuaW5pdGlhbDtcbiAgICB0aGlzLnllc01zZyA9IG9wdHMueWVzIHx8ICd5ZXMnO1xuICAgIHRoaXMueWVzT3B0aW9uID0gb3B0cy55ZXNPcHRpb24gfHwgJyhZL24pJztcbiAgICB0aGlzLm5vTXNnID0gb3B0cy5ubyB8fCAnbm8nO1xuICAgIHRoaXMubm9PcHRpb24gPSBvcHRzLm5vT3B0aW9uIHx8ICcoeS9OKSc7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLmluaXRpYWxWYWx1ZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZXhpdCgpIHtcbiAgICB0aGlzLmFib3J0KCk7XG4gIH1cblxuICBhYm9ydCgpIHtcbiAgICB0aGlzLmRvbmUgPSB0aGlzLmFib3J0ZWQgPSB0cnVlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIHN1Ym1pdCgpIHtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy52YWx1ZSB8fCBmYWxzZTtcbiAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgIHRoaXMuYWJvcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIF8oYywga2V5KSB7XG4gICAgaWYgKGMudG9Mb3dlckNhc2UoKSA9PT0gJ3knKSB7XG4gICAgICB0aGlzLnZhbHVlID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzLnN1Ym1pdCgpO1xuICAgIH1cbiAgICBpZiAoYy50b0xvd2VyQ2FzZSgpID09PSAnbicpIHtcbiAgICAgIHRoaXMudmFsdWUgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0aGlzLnN1Ym1pdCgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5iZWxsKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuY2xvc2VkKSByZXR1cm47XG4gICAgaWYgKHRoaXMuZmlyc3RSZW5kZXIpIHRoaXMub3V0LndyaXRlKGN1cnNvci5oaWRlKTtcbiAgICBlbHNlIHRoaXMub3V0LndyaXRlKGNsZWFyKHRoaXMub3V0cHV0VGV4dCwgdGhpcy5vdXQuY29sdW1ucykpO1xuICAgIHN1cGVyLnJlbmRlcigpO1xuXG4gICAgdGhpcy5vdXRwdXRUZXh0ID0gW1xuICAgICAgc3R5bGUuc3ltYm9sKHRoaXMuZG9uZSwgdGhpcy5hYm9ydGVkKSxcbiAgICAgIGNvbG9yLmJvbGQodGhpcy5tc2cpLFxuICAgICAgc3R5bGUuZGVsaW1pdGVyKHRoaXMuZG9uZSksXG4gICAgICB0aGlzLmRvbmUgPyAodGhpcy52YWx1ZSA/IHRoaXMueWVzTXNnIDogdGhpcy5ub01zZylcbiAgICAgICAgICA6IGNvbG9yLmdyYXkodGhpcy5pbml0aWFsVmFsdWUgPyB0aGlzLnllc09wdGlvbiA6IHRoaXMubm9PcHRpb24pXG4gICAgXS5qb2luKCcgJyk7XG5cbiAgICB0aGlzLm91dC53cml0ZShlcmFzZS5saW5lICsgY3Vyc29yLnRvKDApICsgdGhpcy5vdXRwdXRUZXh0KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbmZpcm1Qcm9tcHQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNvbG9yID0gcmVxdWlyZSgna2xldXInKTtcbmNvbnN0IFByb21wdCA9IHJlcXVpcmUoJy4vcHJvbXB0Jyk7XG5jb25zdCB7IHN0eWxlLCBjbGVhciwgZmlndXJlcyB9ID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuY29uc3QgeyBlcmFzZSwgY3Vyc29yIH0gPSByZXF1aXJlKCdzaXN0ZXJhbnNpJyk7XG5jb25zdCB7IERhdGVQYXJ0LCBNZXJpZGllbSwgRGF5LCBIb3VycywgTWlsbGlzZWNvbmRzLCBNaW51dGVzLCBNb250aCwgU2Vjb25kcywgWWVhciB9ID0gcmVxdWlyZSgnLi4vZGF0ZXBhcnRzJyk7XG5cbmNvbnN0IHJlZ2V4ID0gL1xcXFwoLil8XCIoKD86XFxcXFtcIlxcXFxdfFteXCJdKSspXCJ8KERbRG9dP3xkezMsNH18ZCl8KE17MSw0fSl8KFlZKD86WVkpPyl8KFthQV0pfChbSGhdezEsMn0pfChtezEsMn0pfChzezEsMn0pfChTezEsNH0pfC4vZztcbmNvbnN0IHJlZ2V4R3JvdXBzID0ge1xuICAxOiAoe3Rva2VufSkgPT4gdG9rZW4ucmVwbGFjZSgvXFxcXCguKS9nLCAnJDEnKSxcbiAgMjogKG9wdHMpID0+IG5ldyBEYXkob3B0cyksIC8vIERheSAvLyBUT0RPXG4gIDM6IChvcHRzKSA9PiBuZXcgTW9udGgob3B0cyksIC8vIE1vbnRoXG4gIDQ6IChvcHRzKSA9PiBuZXcgWWVhcihvcHRzKSwgLy8gWWVhclxuICA1OiAob3B0cykgPT4gbmV3IE1lcmlkaWVtKG9wdHMpLCAvLyBBTS9QTSAvLyBUT0RPIChzcGVjaWFsKVxuICA2OiAob3B0cykgPT4gbmV3IEhvdXJzKG9wdHMpLCAvLyBIb3Vyc1xuICA3OiAob3B0cykgPT4gbmV3IE1pbnV0ZXMob3B0cyksIC8vIE1pbnV0ZXNcbiAgODogKG9wdHMpID0+IG5ldyBTZWNvbmRzKG9wdHMpLCAvLyBTZWNvbmRzXG4gIDk6IChvcHRzKSA9PiBuZXcgTWlsbGlzZWNvbmRzKG9wdHMpLCAvLyBGcmFjdGlvbmFsIHNlY29uZHNcbn1cblxuY29uc3QgZGZsdExvY2FsZXMgPSB7XG4gIG1vbnRoczogJ0phbnVhcnksRmVicnVhcnksTWFyY2gsQXByaWwsTWF5LEp1bmUsSnVseSxBdWd1c3QsU2VwdGVtYmVyLE9jdG9iZXIsTm92ZW1iZXIsRGVjZW1iZXInLnNwbGl0KCcsJyksXG4gIG1vbnRoc1Nob3J0OiAnSmFuLEZlYixNYXIsQXByLE1heSxKdW4sSnVsLEF1ZyxTZXAsT2N0LE5vdixEZWMnLnNwbGl0KCcsJyksXG4gIHdlZWtkYXlzOiAnU3VuZGF5LE1vbmRheSxUdWVzZGF5LFdlZG5lc2RheSxUaHVyc2RheSxGcmlkYXksU2F0dXJkYXknLnNwbGl0KCcsJyksXG4gIHdlZWtkYXlzU2hvcnQ6ICdTdW4sTW9uLFR1ZSxXZWQsVGh1LEZyaSxTYXQnLnNwbGl0KCcsJylcbn1cblxuXG4vKipcbiAqIERhdGVQcm9tcHQgQmFzZSBFbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5tZXNzYWdlIE1lc3NhZ2VcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5pbml0aWFsXSBJbmRleCBvZiBkZWZhdWx0IHZhbHVlXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMubWFza10gVGhlIGZvcm1hdCBtYXNrXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdHMubG9jYWxlc10gVGhlIGRhdGUgbG9jYWxlc1xuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLmVycm9yXSBUaGUgZXJyb3IgbWVzc2FnZSBzaG93biBvbiBpbnZhbGlkIHZhbHVlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy52YWxpZGF0ZV0gRnVuY3Rpb24gdG8gdmFsaWRhdGUgdGhlIHN1Ym1pdHRlZCB2YWx1ZVxuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKi9cbmNsYXNzIERhdGVQcm9tcHQgZXh0ZW5kcyBQcm9tcHQge1xuICBjb25zdHJ1Y3RvcihvcHRzPXt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgdGhpcy5tc2cgPSBvcHRzLm1lc3NhZ2U7XG4gICAgdGhpcy5jdXJzb3IgPSAwO1xuICAgIHRoaXMudHlwZWQgPSAnJztcbiAgICB0aGlzLmxvY2FsZXMgPSBPYmplY3QuYXNzaWduKGRmbHRMb2NhbGVzLCBvcHRzLmxvY2FsZXMpO1xuICAgIHRoaXMuX2RhdGUgPSBvcHRzLmluaXRpYWwgfHwgbmV3IERhdGUoKTtcbiAgICB0aGlzLmVycm9yTXNnID0gb3B0cy5lcnJvciB8fCAnUGxlYXNlIEVudGVyIEEgVmFsaWQgVmFsdWUnO1xuICAgIHRoaXMudmFsaWRhdG9yID0gb3B0cy52YWxpZGF0ZSB8fCAoKCkgPT4gdHJ1ZSk7XG4gICAgdGhpcy5tYXNrID0gb3B0cy5tYXNrIHx8ICdZWVlZLU1NLUREIEhIOm1tOnNzJztcbiAgICB0aGlzLmNsZWFyID0gY2xlYXIoJycsIHRoaXMub3V0LmNvbHVtbnMpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0ZVxuICB9XG5cbiAgZ2V0IGRhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGU7XG4gIH1cblxuICBzZXQgZGF0ZShkYXRlKSB7XG4gICAgaWYgKGRhdGUpIHRoaXMuX2RhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSk7XG4gIH1cblxuICBzZXQgbWFzayhtYXNrKSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICB0aGlzLnBhcnRzID0gW107XG4gICAgd2hpbGUocmVzdWx0ID0gcmVnZXguZXhlYyhtYXNrKSkge1xuICAgICAgbGV0IG1hdGNoID0gcmVzdWx0LnNoaWZ0KCk7XG4gICAgICBsZXQgaWR4ID0gcmVzdWx0LmZpbmRJbmRleChnciA9PiBnciAhPSBudWxsKTtcbiAgICAgIHRoaXMucGFydHMucHVzaChpZHggaW4gcmVnZXhHcm91cHNcbiAgICAgICAgPyByZWdleEdyb3Vwc1tpZHhdKHsgdG9rZW46IHJlc3VsdFtpZHhdIHx8IG1hdGNoLCBkYXRlOiB0aGlzLmRhdGUsIHBhcnRzOiB0aGlzLnBhcnRzLCBsb2NhbGVzOiB0aGlzLmxvY2FsZXMgfSlcbiAgICAgICAgOiByZXN1bHRbaWR4XSB8fCBtYXRjaCk7XG4gICAgfVxuXG4gICAgbGV0IHBhcnRzID0gdGhpcy5wYXJ0cy5yZWR1Y2UoKGFyciwgaSkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBpID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgYXJyW2Fyci5sZW5ndGggLSAxXSA9PT0gJ3N0cmluZycpXG4gICAgICAgIGFyclthcnIubGVuZ3RoIC0gMV0gKz0gaTtcbiAgICAgIGVsc2UgYXJyLnB1c2goaSk7XG4gICAgICByZXR1cm4gYXJyO1xuICAgIH0sIFtdKTtcblxuICAgIHRoaXMucGFydHMuc3BsaWNlKDApO1xuICAgIHRoaXMucGFydHMucHVzaCguLi5wYXJ0cyk7XG4gICAgdGhpcy5yZXNldCgpO1xuICB9XG5cbiAgbW92ZUN1cnNvcihuKSB7XG4gICAgdGhpcy50eXBlZCA9ICcnO1xuICAgIHRoaXMuY3Vyc29yID0gbjtcbiAgICB0aGlzLmZpcmUoKTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMubW92ZUN1cnNvcih0aGlzLnBhcnRzLmZpbmRJbmRleChwID0+IHAgaW5zdGFuY2VvZiBEYXRlUGFydCkpO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBleGl0KCkge1xuICAgIHRoaXMuYWJvcnQoKTtcbiAgfVxuXG4gIGFib3J0KCkge1xuICAgIHRoaXMuZG9uZSA9IHRoaXMuYWJvcnRlZCA9IHRydWU7XG4gICAgdGhpcy5lcnJvciA9IGZhbHNlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIGFzeW5jIHZhbGlkYXRlKCkge1xuICAgIGxldCB2YWxpZCA9IGF3YWl0IHRoaXMudmFsaWRhdG9yKHRoaXMudmFsdWUpO1xuICAgIGlmICh0eXBlb2YgdmFsaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLmVycm9yTXNnID0gdmFsaWQ7XG4gICAgICB2YWxpZCA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmVycm9yID0gIXZhbGlkO1xuICB9XG5cbiAgYXN5bmMgc3VibWl0KCkge1xuICAgIGF3YWl0IHRoaXMudmFsaWRhdGUoKTtcbiAgICBpZiAodGhpcy5lcnJvcikge1xuICAgICAgdGhpcy5jb2xvciA9ICdyZWQnO1xuICAgICAgdGhpcy5maXJlKCk7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgIHRoaXMuYWJvcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIHRoaXMudHlwZWQgPSAnJztcbiAgICB0aGlzLnBhcnRzW3RoaXMuY3Vyc29yXS51cCgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIHRoaXMudHlwZWQgPSAnJztcbiAgICB0aGlzLnBhcnRzW3RoaXMuY3Vyc29yXS5kb3duKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGxlZnQoKSB7XG4gICAgbGV0IHByZXYgPSB0aGlzLnBhcnRzW3RoaXMuY3Vyc29yXS5wcmV2KCk7XG4gICAgaWYgKHByZXYgPT0gbnVsbCkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMubW92ZUN1cnNvcih0aGlzLnBhcnRzLmluZGV4T2YocHJldikpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByaWdodCgpIHtcbiAgICBsZXQgbmV4dCA9IHRoaXMucGFydHNbdGhpcy5jdXJzb3JdLm5leHQoKTtcbiAgICBpZiAobmV4dCA9PSBudWxsKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy5tb3ZlQ3Vyc29yKHRoaXMucGFydHMuaW5kZXhPZihuZXh0KSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIG5leHQoKSB7XG4gICAgbGV0IG5leHQgPSB0aGlzLnBhcnRzW3RoaXMuY3Vyc29yXS5uZXh0KCk7XG4gICAgdGhpcy5tb3ZlQ3Vyc29yKG5leHRcbiAgICAgID8gdGhpcy5wYXJ0cy5pbmRleE9mKG5leHQpXG4gICAgICA6IHRoaXMucGFydHMuZmluZEluZGV4KChwYXJ0KSA9PiBwYXJ0IGluc3RhbmNlb2YgRGF0ZVBhcnQpKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgXyhjKSB7XG4gICAgaWYgKC9cXGQvLnRlc3QoYykpIHtcbiAgICAgIHRoaXMudHlwZWQgKz0gYztcbiAgICAgIHRoaXMucGFydHNbdGhpcy5jdXJzb3JdLnNldFRvKHRoaXMudHlwZWQpO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuY2xvc2VkKSByZXR1cm47XG4gICAgaWYgKHRoaXMuZmlyc3RSZW5kZXIpIHRoaXMub3V0LndyaXRlKGN1cnNvci5oaWRlKTtcbiAgICBlbHNlIHRoaXMub3V0LndyaXRlKGNsZWFyKHRoaXMub3V0cHV0VGV4dCwgdGhpcy5vdXQuY29sdW1ucykpO1xuICAgIHN1cGVyLnJlbmRlcigpO1xuXG4gICAgLy8gUHJpbnQgcHJvbXB0XG4gICAgdGhpcy5vdXRwdXRUZXh0ID0gW1xuICAgICAgc3R5bGUuc3ltYm9sKHRoaXMuZG9uZSwgdGhpcy5hYm9ydGVkKSxcbiAgICAgIGNvbG9yLmJvbGQodGhpcy5tc2cpLFxuICAgICAgc3R5bGUuZGVsaW1pdGVyKGZhbHNlKSxcbiAgICAgIHRoaXMucGFydHMucmVkdWNlKChhcnIsIHAsIGlkeCkgPT4gYXJyLmNvbmNhdChpZHggPT09IHRoaXMuY3Vyc29yICYmICF0aGlzLmRvbmUgPyBjb2xvci5jeWFuKCkudW5kZXJsaW5lKHAudG9TdHJpbmcoKSkgOiBwKSwgW10pXG4gICAgICAgICAgLmpvaW4oJycpXG4gICAgXS5qb2luKCcgJyk7XG5cbiAgICAvLyBQcmludCBlcnJvclxuICAgIGlmICh0aGlzLmVycm9yKSB7XG4gICAgICB0aGlzLm91dHB1dFRleHQgKz0gdGhpcy5lcnJvck1zZy5zcGxpdCgnXFxuJykucmVkdWNlKFxuICAgICAgICAgIChhLCBsLCBpKSA9PiBhICsgYFxcbiR7aSA/IGAgYCA6IGZpZ3VyZXMucG9pbnRlclNtYWxsfSAke2NvbG9yLnJlZCgpLml0YWxpYyhsKX1gLCBgYCk7XG4gICAgfVxuXG4gICAgdGhpcy5vdXQud3JpdGUoZXJhc2UubGluZSArIGN1cnNvci50bygwKSArIHRoaXMub3V0cHV0VGV4dCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEYXRlUHJvbXB0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgVGV4dFByb21wdDogcmVxdWlyZSgnLi90ZXh0JyksXG4gIFNlbGVjdFByb21wdDogcmVxdWlyZSgnLi9zZWxlY3QnKSxcbiAgVG9nZ2xlUHJvbXB0OiByZXF1aXJlKCcuL3RvZ2dsZScpLFxuICBEYXRlUHJvbXB0OiByZXF1aXJlKCcuL2RhdGUnKSxcbiAgTnVtYmVyUHJvbXB0OiByZXF1aXJlKCcuL251bWJlcicpLFxuICBNdWx0aXNlbGVjdFByb21wdDogcmVxdWlyZSgnLi9tdWx0aXNlbGVjdCcpLFxuICBBdXRvY29tcGxldGVQcm9tcHQ6IHJlcXVpcmUoJy4vYXV0b2NvbXBsZXRlJyksXG4gIEF1dG9jb21wbGV0ZU11bHRpc2VsZWN0UHJvbXB0OiByZXF1aXJlKCcuL2F1dG9jb21wbGV0ZU11bHRpc2VsZWN0JyksXG4gIENvbmZpcm1Qcm9tcHQ6IHJlcXVpcmUoJy4vY29uZmlybScpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb2xvciA9IHJlcXVpcmUoJ2tsZXVyJyk7XG5jb25zdCB7IGN1cnNvciB9ID0gcmVxdWlyZSgnc2lzdGVyYW5zaScpO1xuY29uc3QgUHJvbXB0ID0gcmVxdWlyZSgnLi9wcm9tcHQnKTtcbmNvbnN0IHsgY2xlYXIsIGZpZ3VyZXMsIHN0eWxlLCB3cmFwLCBlbnRyaWVzVG9EaXNwbGF5IH0gPSByZXF1aXJlKCcuLi91dGlsJyk7XG5cbi8qKlxuICogTXVsdGlzZWxlY3RQcm9tcHQgQmFzZSBFbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5tZXNzYWdlIE1lc3NhZ2VcbiAqIEBwYXJhbSB7QXJyYXl9IG9wdHMuY2hvaWNlcyBBcnJheSBvZiBjaG9pY2Ugb2JqZWN0c1xuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLmhpbnRdIEhpbnQgdG8gZGlzcGxheVxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLndhcm5dIEhpbnQgc2hvd24gZm9yIGRpc2FibGVkIGNob2ljZXNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5tYXhdIE1heCBjaG9pY2VzXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMuY3Vyc29yPTBdIEN1cnNvciBzdGFydCBwb3NpdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLm9wdGlvbnNQZXJQYWdlPTEwXSBNYXggb3B0aW9ucyB0byBkaXNwbGF5IGF0IG9uY2VcbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICovXG5jbGFzcyBNdWx0aXNlbGVjdFByb21wdCBleHRlbmRzIFByb21wdCB7XG4gIGNvbnN0cnVjdG9yKG9wdHM9e30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgICB0aGlzLm1zZyA9IG9wdHMubWVzc2FnZTtcbiAgICB0aGlzLmN1cnNvciA9IG9wdHMuY3Vyc29yIHx8IDA7XG4gICAgdGhpcy5zY3JvbGxJbmRleCA9IG9wdHMuY3Vyc29yIHx8IDA7XG4gICAgdGhpcy5oaW50ID0gb3B0cy5oaW50IHx8ICcnO1xuICAgIHRoaXMud2FybiA9IG9wdHMud2FybiB8fCAnLSBUaGlzIG9wdGlvbiBpcyBkaXNhYmxlZCAtJztcbiAgICB0aGlzLm1pblNlbGVjdGVkID0gb3B0cy5taW47XG4gICAgdGhpcy5zaG93TWluRXJyb3IgPSBmYWxzZTtcbiAgICB0aGlzLm1heENob2ljZXMgPSBvcHRzLm1heDtcbiAgICB0aGlzLmluc3RydWN0aW9ucyA9IG9wdHMuaW5zdHJ1Y3Rpb25zO1xuICAgIHRoaXMub3B0aW9uc1BlclBhZ2UgPSBvcHRzLm9wdGlvbnNQZXJQYWdlIHx8IDEwO1xuICAgIHRoaXMudmFsdWUgPSBvcHRzLmNob2ljZXMubWFwKChjaCwgaWR4KSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGNoID09PSAnc3RyaW5nJylcbiAgICAgICAgY2ggPSB7dGl0bGU6IGNoLCB2YWx1ZTogaWR4fTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRpdGxlOiBjaCAmJiAoY2gudGl0bGUgfHwgY2gudmFsdWUgfHwgY2gpLFxuICAgICAgICBkZXNjcmlwdGlvbjogY2ggJiYgY2guZGVzY3JpcHRpb24sXG4gICAgICAgIHZhbHVlOiBjaCAmJiAoY2gudmFsdWUgPT09IHVuZGVmaW5lZCA/IGlkeCA6IGNoLnZhbHVlKSxcbiAgICAgICAgc2VsZWN0ZWQ6IGNoICYmIGNoLnNlbGVjdGVkLFxuICAgICAgICBkaXNhYmxlZDogY2ggJiYgY2guZGlzYWJsZWRcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdGhpcy5jbGVhciA9IGNsZWFyKCcnLCB0aGlzLm91dC5jb2x1bW5zKTtcbiAgICBpZiAoIW9wdHMub3ZlcnJpZGVSZW5kZXIpIHtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy52YWx1ZS5tYXAodiA9PiAhdi5zZWxlY3RlZCk7XG4gICAgdGhpcy5jdXJzb3IgPSAwO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBzZWxlY3RlZCgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZS5maWx0ZXIodiA9PiB2LnNlbGVjdGVkKTtcbiAgfVxuXG4gIGV4aXQoKSB7XG4gICAgdGhpcy5hYm9ydCgpO1xuICB9XG5cbiAgYWJvcnQoKSB7XG4gICAgdGhpcy5kb25lID0gdGhpcy5hYm9ydGVkID0gdHJ1ZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICBzdWJtaXQoKSB7XG4gICAgY29uc3Qgc2VsZWN0ZWQgPSB0aGlzLnZhbHVlXG4gICAgICAuZmlsdGVyKGUgPT4gZS5zZWxlY3RlZCk7XG4gICAgaWYgKHRoaXMubWluU2VsZWN0ZWQgJiYgc2VsZWN0ZWQubGVuZ3RoIDwgdGhpcy5taW5TZWxlY3RlZCkge1xuICAgICAgdGhpcy5zaG93TWluRXJyb3IgPSB0cnVlO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICAgIHRoaXMuYWJvcnRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5maXJlKCk7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZpcnN0KCkge1xuICAgIHRoaXMuY3Vyc29yID0gMDtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbGFzdCgpIHtcbiAgICB0aGlzLmN1cnNvciA9IHRoaXMudmFsdWUubGVuZ3RoIC0gMTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG4gIG5leHQoKSB7XG4gICAgdGhpcy5jdXJzb3IgPSAodGhpcy5jdXJzb3IgKyAxKSAlIHRoaXMudmFsdWUubGVuZ3RoO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICB1cCgpIHtcbiAgICBpZiAodGhpcy5jdXJzb3IgPT09IDApIHtcbiAgICAgIHRoaXMuY3Vyc29yID0gdGhpcy52YWx1ZS5sZW5ndGggLSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnNvci0tO1xuICAgIH1cbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICBpZiAodGhpcy5jdXJzb3IgPT09IHRoaXMudmFsdWUubGVuZ3RoIC0gMSkge1xuICAgICAgdGhpcy5jdXJzb3IgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnNvcisrO1xuICAgIH1cbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbGVmdCgpIHtcbiAgICB0aGlzLnZhbHVlW3RoaXMuY3Vyc29yXS5zZWxlY3RlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByaWdodCgpIHtcbiAgICBpZiAodGhpcy52YWx1ZS5maWx0ZXIoZSA9PiBlLnNlbGVjdGVkKS5sZW5ndGggPj0gdGhpcy5tYXhDaG9pY2VzKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy52YWx1ZVt0aGlzLmN1cnNvcl0uc2VsZWN0ZWQgPSB0cnVlO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBoYW5kbGVTcGFjZVRvZ2dsZSgpIHtcbiAgICBjb25zdCB2ID0gdGhpcy52YWx1ZVt0aGlzLmN1cnNvcl07XG5cbiAgICBpZiAodi5zZWxlY3RlZCkge1xuICAgICAgdi5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9IGVsc2UgaWYgKHYuZGlzYWJsZWQgfHwgdGhpcy52YWx1ZS5maWx0ZXIoZSA9PiBlLnNlbGVjdGVkKS5sZW5ndGggPj0gdGhpcy5tYXhDaG9pY2VzKSB7XG4gICAgICByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHYuc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gIH1cblxuICB0b2dnbGVBbGwoKSB7XG4gICAgaWYgKHRoaXMubWF4Q2hvaWNlcyAhPT0gdW5kZWZpbmVkIHx8IHRoaXMudmFsdWVbdGhpcy5jdXJzb3JdLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgfVxuXG4gICAgY29uc3QgbmV3U2VsZWN0ZWQgPSAhdGhpcy52YWx1ZVt0aGlzLmN1cnNvcl0uc2VsZWN0ZWQ7XG4gICAgdGhpcy52YWx1ZS5maWx0ZXIodiA9PiAhdi5kaXNhYmxlZCkuZm9yRWFjaCh2ID0+IHYuc2VsZWN0ZWQgPSBuZXdTZWxlY3RlZCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIF8oYywga2V5KSB7XG4gICAgaWYgKGMgPT09ICcgJykge1xuICAgICAgdGhpcy5oYW5kbGVTcGFjZVRvZ2dsZSgpO1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gJ2EnKSB7XG4gICAgICB0aGlzLnRvZ2dsZUFsbCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVySW5zdHJ1Y3Rpb25zKCkge1xuICAgIGlmICh0aGlzLmluc3RydWN0aW9ucyA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuaW5zdHJ1Y3Rpb25zKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMuaW5zdHJ1Y3Rpb25zID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnN0cnVjdGlvbnM7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ1xcbkluc3RydWN0aW9uczpcXG4nXG4gICAgICAgICsgYCAgICAke2ZpZ3VyZXMuYXJyb3dVcH0vJHtmaWd1cmVzLmFycm93RG93bn06IEhpZ2hsaWdodCBvcHRpb25cXG5gXG4gICAgICAgICsgYCAgICAke2ZpZ3VyZXMuYXJyb3dMZWZ0fS8ke2ZpZ3VyZXMuYXJyb3dSaWdodH0vW3NwYWNlXTogVG9nZ2xlIHNlbGVjdGlvblxcbmBcbiAgICAgICAgKyAodGhpcy5tYXhDaG9pY2VzID09PSB1bmRlZmluZWQgPyBgICAgIGE6IFRvZ2dsZSBhbGxcXG5gIDogJycpXG4gICAgICAgICsgYCAgICBlbnRlci9yZXR1cm46IENvbXBsZXRlIGFuc3dlcmA7XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHJlbmRlck9wdGlvbihjdXJzb3IsIHYsIGksIGFycm93SW5kaWNhdG9yKSB7XG4gICAgY29uc3QgcHJlZml4ID0gKHYuc2VsZWN0ZWQgPyBjb2xvci5ncmVlbihmaWd1cmVzLnJhZGlvT24pIDogZmlndXJlcy5yYWRpb09mZikgKyAnICcgKyBhcnJvd0luZGljYXRvciArICcgJztcbiAgICBsZXQgdGl0bGUsIGRlc2M7XG5cbiAgICBpZiAodi5kaXNhYmxlZCkge1xuICAgICAgdGl0bGUgPSBjdXJzb3IgPT09IGkgPyBjb2xvci5ncmF5KCkudW5kZXJsaW5lKHYudGl0bGUpIDogY29sb3Iuc3RyaWtldGhyb3VnaCgpLmdyYXkodi50aXRsZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpdGxlID0gY3Vyc29yID09PSBpID8gY29sb3IuY3lhbigpLnVuZGVybGluZSh2LnRpdGxlKSA6IHYudGl0bGU7XG4gICAgICBpZiAoY3Vyc29yID09PSBpICYmIHYuZGVzY3JpcHRpb24pIHtcbiAgICAgICAgZGVzYyA9IGAgLSAke3YuZGVzY3JpcHRpb259YDtcbiAgICAgICAgaWYgKHByZWZpeC5sZW5ndGggKyB0aXRsZS5sZW5ndGggKyBkZXNjLmxlbmd0aCA+PSB0aGlzLm91dC5jb2x1bW5zXG4gICAgICAgICAgfHwgdi5kZXNjcmlwdGlvbi5zcGxpdCgvXFxyP1xcbi8pLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBkZXNjID0gJ1xcbicgKyB3cmFwKHYuZGVzY3JpcHRpb24sIHsgbWFyZ2luOiBwcmVmaXgubGVuZ3RoLCB3aWR0aDogdGhpcy5vdXQuY29sdW1ucyB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwcmVmaXggKyB0aXRsZSArIGNvbG9yLmdyYXkoZGVzYyB8fCAnJyk7XG4gIH1cblxuICAvLyBzaGFyZWQgd2l0aCBhdXRvY29tcGxldGVNdWx0aXNlbGVjdFxuICBwYWdpbmF0ZU9wdGlvbnMob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGNvbG9yLnJlZCgnTm8gbWF0Y2hlcyBmb3IgdGhpcyBxdWVyeS4nKTtcbiAgICB9XG5cbiAgICBsZXQgeyBzdGFydEluZGV4LCBlbmRJbmRleCB9ID0gZW50cmllc1RvRGlzcGxheSh0aGlzLmN1cnNvciwgb3B0aW9ucy5sZW5ndGgsIHRoaXMub3B0aW9uc1BlclBhZ2UpO1xuICAgIGxldCBwcmVmaXgsIHN0eWxlZE9wdGlvbnMgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSBzdGFydEluZGV4OyBpIDwgZW5kSW5kZXg7IGkrKykge1xuICAgICAgaWYgKGkgPT09IHN0YXJ0SW5kZXggJiYgc3RhcnRJbmRleCA+IDApIHtcbiAgICAgICAgcHJlZml4ID0gZmlndXJlcy5hcnJvd1VwO1xuICAgICAgfSBlbHNlIGlmIChpID09PSBlbmRJbmRleCAtIDEgJiYgZW5kSW5kZXggPCBvcHRpb25zLmxlbmd0aCkge1xuICAgICAgICBwcmVmaXggPSBmaWd1cmVzLmFycm93RG93bjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByZWZpeCA9ICcgJztcbiAgICAgIH1cbiAgICAgIHN0eWxlZE9wdGlvbnMucHVzaCh0aGlzLnJlbmRlck9wdGlvbih0aGlzLmN1cnNvciwgb3B0aW9uc1tpXSwgaSwgcHJlZml4KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICdcXG4nICsgc3R5bGVkT3B0aW9ucy5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIC8vIHNoYXJlZCB3aXRoIGF1dG9jb21sZXRlTXVsdGlzZWxlY3RcbiAgcmVuZGVyT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgaWYgKCF0aGlzLmRvbmUpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhZ2luYXRlT3B0aW9ucyhvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgcmVuZGVyRG9uZU9ySW5zdHJ1Y3Rpb25zKCkge1xuICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlXG4gICAgICAgIC5maWx0ZXIoZSA9PiBlLnNlbGVjdGVkKVxuICAgICAgICAubWFwKHYgPT4gdi50aXRsZSlcbiAgICAgICAgLmpvaW4oJywgJyk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3V0cHV0ID0gW2NvbG9yLmdyYXkodGhpcy5oaW50KSwgdGhpcy5yZW5kZXJJbnN0cnVjdGlvbnMoKV07XG5cbiAgICBpZiAodGhpcy52YWx1ZVt0aGlzLmN1cnNvcl0uZGlzYWJsZWQpIHtcbiAgICAgIG91dHB1dC5wdXNoKGNvbG9yLnllbGxvdyh0aGlzLndhcm4pKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dC5qb2luKCcgJyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuY2xvc2VkKSByZXR1cm47XG4gICAgaWYgKHRoaXMuZmlyc3RSZW5kZXIpIHRoaXMub3V0LndyaXRlKGN1cnNvci5oaWRlKTtcbiAgICBzdXBlci5yZW5kZXIoKTtcblxuICAgIC8vIHByaW50IHByb21wdFxuICAgIGxldCBwcm9tcHQgPSBbXG4gICAgICBzdHlsZS5zeW1ib2wodGhpcy5kb25lLCB0aGlzLmFib3J0ZWQpLFxuICAgICAgY29sb3IuYm9sZCh0aGlzLm1zZyksXG4gICAgICBzdHlsZS5kZWxpbWl0ZXIoZmFsc2UpLFxuICAgICAgdGhpcy5yZW5kZXJEb25lT3JJbnN0cnVjdGlvbnMoKVxuICAgIF0uam9pbignICcpO1xuICAgIGlmICh0aGlzLnNob3dNaW5FcnJvcikge1xuICAgICAgcHJvbXB0ICs9IGNvbG9yLnJlZChgWW91IG11c3Qgc2VsZWN0IGEgbWluaW11bSBvZiAke3RoaXMubWluU2VsZWN0ZWR9IGNob2ljZXMuYCk7XG4gICAgICB0aGlzLnNob3dNaW5FcnJvciA9IGZhbHNlO1xuICAgIH1cbiAgICBwcm9tcHQgKz0gdGhpcy5yZW5kZXJPcHRpb25zKHRoaXMudmFsdWUpO1xuXG4gICAgdGhpcy5vdXQud3JpdGUodGhpcy5jbGVhciArIHByb21wdCk7XG4gICAgdGhpcy5jbGVhciA9IGNsZWFyKHByb21wdCwgdGhpcy5vdXQuY29sdW1ucyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNdWx0aXNlbGVjdFByb21wdDtcbiIsImNvbnN0IGNvbG9yID0gcmVxdWlyZSgna2xldXInKTtcbmNvbnN0IFByb21wdCA9IHJlcXVpcmUoJy4vcHJvbXB0Jyk7XG5jb25zdCB7IGN1cnNvciwgZXJhc2UgfSA9IHJlcXVpcmUoJ3Npc3RlcmFuc2knKTtcbmNvbnN0IHsgc3R5bGUsIGZpZ3VyZXMsIGNsZWFyLCBsaW5lcyB9ID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuXG5jb25zdCBpc051bWJlciA9IC9bMC05XS87XG5jb25zdCBpc0RlZiA9IGFueSA9PiBhbnkgIT09IHVuZGVmaW5lZDtcbmNvbnN0IHJvdW5kID0gKG51bWJlciwgcHJlY2lzaW9uKSA9PiB7XG4gIGxldCBmYWN0b3IgPSBNYXRoLnBvdygxMCwgcHJlY2lzaW9uKTtcbiAgcmV0dXJuIE1hdGgucm91bmQobnVtYmVyICogZmFjdG9yKSAvIGZhY3Rvcjtcbn1cblxuLyoqXG4gKiBOdW1iZXJQcm9tcHQgQmFzZSBFbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5tZXNzYWdlIE1lc3NhZ2VcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5zdHlsZT0nZGVmYXVsdCddIFJlbmRlciBzdHlsZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmluaXRpYWxdIERlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5tYXg9K0luZmluaXR5XSBNYXggdmFsdWVcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5taW49LUluZmluaXR5XSBNaW4gdmFsdWVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdHMuZmxvYXQ9ZmFsc2VdIFBhcnNlIGlucHV0IGFzIGZsb2F0c1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLnJvdW5kPTJdIFJvdW5kIGZsb2F0cyB0byB4IGRlY2ltYWxzXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMuaW5jcmVtZW50PTFdIE51bWJlciB0byBpbmNyZW1lbnQgYnkgd2hlbiB1c2luZyBhcnJvdy1rZXlzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy52YWxpZGF0ZV0gVmFsaWRhdGUgZnVuY3Rpb25cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLmVycm9yXSBUaGUgaW52YWxpZCBlcnJvciBsYWJlbFxuICovXG5jbGFzcyBOdW1iZXJQcm9tcHQgZXh0ZW5kcyBQcm9tcHQge1xuICBjb25zdHJ1Y3RvcihvcHRzPXt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgdGhpcy50cmFuc2Zvcm0gPSBzdHlsZS5yZW5kZXIob3B0cy5zdHlsZSk7XG4gICAgdGhpcy5tc2cgPSBvcHRzLm1lc3NhZ2U7XG4gICAgdGhpcy5pbml0aWFsID0gaXNEZWYob3B0cy5pbml0aWFsKSA/IG9wdHMuaW5pdGlhbCA6ICcnO1xuICAgIHRoaXMuZmxvYXQgPSAhIW9wdHMuZmxvYXQ7XG4gICAgdGhpcy5yb3VuZCA9IG9wdHMucm91bmQgfHwgMjtcbiAgICB0aGlzLmluYyA9IG9wdHMuaW5jcmVtZW50IHx8IDE7XG4gICAgdGhpcy5taW4gPSBpc0RlZihvcHRzLm1pbikgPyBvcHRzLm1pbiA6IC1JbmZpbml0eTtcbiAgICB0aGlzLm1heCA9IGlzRGVmKG9wdHMubWF4KSA/IG9wdHMubWF4IDogSW5maW5pdHk7XG4gICAgdGhpcy5lcnJvck1zZyA9IG9wdHMuZXJyb3IgfHwgYFBsZWFzZSBFbnRlciBBIFZhbGlkIFZhbHVlYDtcbiAgICB0aGlzLnZhbGlkYXRvciA9IG9wdHMudmFsaWRhdGUgfHwgKCgpID0+IHRydWUpO1xuICAgIHRoaXMuY29sb3IgPSBgY3lhbmA7XG4gICAgdGhpcy52YWx1ZSA9IGBgO1xuICAgIHRoaXMudHlwZWQgPSBgYDtcbiAgICB0aGlzLmxhc3RIaXQgPSAwO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBzZXQgdmFsdWUodikge1xuICAgIGlmICghdiAmJiB2ICE9PSAwKSB7XG4gICAgICB0aGlzLnBsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgIHRoaXMucmVuZGVyZWQgPSBjb2xvci5ncmF5KHRoaXMudHJhbnNmb3JtLnJlbmRlcihgJHt0aGlzLmluaXRpYWx9YCkpO1xuICAgICAgdGhpcy5fdmFsdWUgPSBgYDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IGZhbHNlO1xuICAgICAgdGhpcy5yZW5kZXJlZCA9IHRoaXMudHJhbnNmb3JtLnJlbmRlcihgJHtyb3VuZCh2LCB0aGlzLnJvdW5kKX1gKTtcbiAgICAgIHRoaXMuX3ZhbHVlID0gcm91bmQodiwgdGhpcy5yb3VuZCk7XG4gICAgfVxuICAgIHRoaXMuZmlyZSgpO1xuICB9XG5cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuXG4gIHBhcnNlKHgpIHtcbiAgICByZXR1cm4gdGhpcy5mbG9hdCA/IHBhcnNlRmxvYXQoeCkgOiBwYXJzZUludCh4KTtcbiAgfVxuXG4gIHZhbGlkKGMpIHtcbiAgICByZXR1cm4gYyA9PT0gYC1gIHx8IGMgPT09IGAuYCAmJiB0aGlzLmZsb2F0IHx8IGlzTnVtYmVyLnRlc3QoYylcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMudHlwZWQgPSBgYDtcbiAgICB0aGlzLnZhbHVlID0gYGA7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGV4aXQoKSB7XG4gICAgdGhpcy5hYm9ydCgpO1xuICB9XG5cbiAgYWJvcnQoKSB7XG4gICAgbGV0IHggPSB0aGlzLnZhbHVlO1xuICAgIHRoaXMudmFsdWUgPSB4ICE9PSBgYCA/IHggOiB0aGlzLmluaXRpYWw7XG4gICAgdGhpcy5kb25lID0gdGhpcy5hYm9ydGVkID0gdHJ1ZTtcbiAgICB0aGlzLmVycm9yID0gZmFsc2U7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLm91dC53cml0ZShgXFxuYCk7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG5cbiAgYXN5bmMgdmFsaWRhdGUoKSB7XG4gICAgbGV0IHZhbGlkID0gYXdhaXQgdGhpcy52YWxpZGF0b3IodGhpcy52YWx1ZSk7XG4gICAgaWYgKHR5cGVvZiB2YWxpZCA9PT0gYHN0cmluZ2ApIHtcbiAgICAgIHRoaXMuZXJyb3JNc2cgPSB2YWxpZDtcbiAgICAgIHZhbGlkID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuZXJyb3IgPSAhdmFsaWQ7XG4gIH1cblxuICBhc3luYyBzdWJtaXQoKSB7XG4gICAgYXdhaXQgdGhpcy52YWxpZGF0ZSgpO1xuICAgIGlmICh0aGlzLmVycm9yKSB7XG4gICAgICB0aGlzLmNvbG9yID0gYHJlZGA7XG4gICAgICB0aGlzLmZpcmUoKTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCB4ID0gdGhpcy52YWx1ZTtcbiAgICB0aGlzLnZhbHVlID0geCAhPT0gYGAgPyB4IDogdGhpcy5pbml0aWFsO1xuICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gICAgdGhpcy5hYm9ydGVkID0gZmFsc2U7XG4gICAgdGhpcy5lcnJvciA9IGZhbHNlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoYFxcbmApO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIHVwKCkge1xuICAgIHRoaXMudHlwZWQgPSBgYDtcbiAgICBpZih0aGlzLnZhbHVlID09PSAnJykge1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMubWluIC0gdGhpcy5pbmM7XG4gICAgfVxuICAgIGlmICh0aGlzLnZhbHVlID49IHRoaXMubWF4KSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy52YWx1ZSArPSB0aGlzLmluYztcbiAgICB0aGlzLmNvbG9yID0gYGN5YW5gO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkb3duKCkge1xuICAgIHRoaXMudHlwZWQgPSBgYDtcbiAgICBpZih0aGlzLnZhbHVlID09PSAnJykge1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMubWluICsgdGhpcy5pbmM7XG4gICAgfVxuICAgIGlmICh0aGlzLnZhbHVlIDw9IHRoaXMubWluKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy52YWx1ZSAtPSB0aGlzLmluYztcbiAgICB0aGlzLmNvbG9yID0gYGN5YW5gO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBkZWxldGUoKSB7XG4gICAgbGV0IHZhbCA9IHRoaXMudmFsdWUudG9TdHJpbmcoKTtcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLnBhcnNlKCh2YWwgPSB2YWwuc2xpY2UoMCwgLTEpKSkgfHwgYGA7XG4gICAgaWYgKHRoaXMudmFsdWUgIT09ICcnICYmIHRoaXMudmFsdWUgPCB0aGlzLm1pbikge1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMubWluO1xuICAgIH1cbiAgICB0aGlzLmNvbG9yID0gYGN5YW5gO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBuZXh0KCkge1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLmluaXRpYWw7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIF8oYywga2V5KSB7XG4gICAgaWYgKCF0aGlzLnZhbGlkKGMpKSByZXR1cm4gdGhpcy5iZWxsKCk7XG5cbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgIGlmIChub3cgLSB0aGlzLmxhc3RIaXQgPiAxMDAwKSB0aGlzLnR5cGVkID0gYGA7IC8vIDFzIGVsYXBzZWRcbiAgICB0aGlzLnR5cGVkICs9IGM7XG4gICAgdGhpcy5sYXN0SGl0ID0gbm93O1xuICAgIHRoaXMuY29sb3IgPSBgY3lhbmA7XG5cbiAgICBpZiAoYyA9PT0gYC5gKSByZXR1cm4gdGhpcy5maXJlKCk7XG5cbiAgICB0aGlzLnZhbHVlID0gTWF0aC5taW4odGhpcy5wYXJzZSh0aGlzLnR5cGVkKSwgdGhpcy5tYXgpO1xuICAgIGlmICh0aGlzLnZhbHVlID4gdGhpcy5tYXgpIHRoaXMudmFsdWUgPSB0aGlzLm1heDtcbiAgICBpZiAodGhpcy52YWx1ZSA8IHRoaXMubWluKSB0aGlzLnZhbHVlID0gdGhpcy5taW47XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5jbG9zZWQpIHJldHVybjtcbiAgICBpZiAoIXRoaXMuZmlyc3RSZW5kZXIpIHtcbiAgICAgIGlmICh0aGlzLm91dHB1dEVycm9yKVxuICAgICAgICB0aGlzLm91dC53cml0ZShjdXJzb3IuZG93bihsaW5lcyh0aGlzLm91dHB1dEVycm9yLCB0aGlzLm91dC5jb2x1bW5zKSAtIDEpICsgY2xlYXIodGhpcy5vdXRwdXRFcnJvciwgdGhpcy5vdXQuY29sdW1ucykpO1xuICAgICAgdGhpcy5vdXQud3JpdGUoY2xlYXIodGhpcy5vdXRwdXRUZXh0LCB0aGlzLm91dC5jb2x1bW5zKSk7XG4gICAgfVxuICAgIHN1cGVyLnJlbmRlcigpO1xuICAgIHRoaXMub3V0cHV0RXJyb3IgPSAnJztcblxuICAgIC8vIFByaW50IHByb21wdFxuICAgIHRoaXMub3V0cHV0VGV4dCA9IFtcbiAgICAgIHN0eWxlLnN5bWJvbCh0aGlzLmRvbmUsIHRoaXMuYWJvcnRlZCksXG4gICAgICBjb2xvci5ib2xkKHRoaXMubXNnKSxcbiAgICAgIHN0eWxlLmRlbGltaXRlcih0aGlzLmRvbmUpLFxuICAgICAgIXRoaXMuZG9uZSB8fCAoIXRoaXMuZG9uZSAmJiAhdGhpcy5wbGFjZWhvbGRlcilcbiAgICAgICAgICA/IGNvbG9yW3RoaXMuY29sb3JdKCkudW5kZXJsaW5lKHRoaXMucmVuZGVyZWQpIDogdGhpcy5yZW5kZXJlZFxuICAgIF0uam9pbihgIGApO1xuXG4gICAgLy8gUHJpbnQgZXJyb3JcbiAgICBpZiAodGhpcy5lcnJvcikge1xuICAgICAgdGhpcy5vdXRwdXRFcnJvciArPSB0aGlzLmVycm9yTXNnLnNwbGl0KGBcXG5gKVxuICAgICAgICAgIC5yZWR1Y2UoKGEsIGwsIGkpID0+IGEgKyBgXFxuJHtpID8gYCBgIDogZmlndXJlcy5wb2ludGVyU21hbGx9ICR7Y29sb3IucmVkKCkuaXRhbGljKGwpfWAsIGBgKTtcbiAgICB9XG5cbiAgICB0aGlzLm91dC53cml0ZShlcmFzZS5saW5lICsgY3Vyc29yLnRvKDApICsgdGhpcy5vdXRwdXRUZXh0ICsgY3Vyc29yLnNhdmUgKyB0aGlzLm91dHB1dEVycm9yICsgY3Vyc29yLnJlc3RvcmUpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTnVtYmVyUHJvbXB0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCByZWFkbGluZSA9IHJlcXVpcmUoJ3JlYWRsaW5lJyk7XG5jb25zdCB7IGFjdGlvbiB9ID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5jb25zdCB7IGJlZXAsIGN1cnNvciB9ID0gcmVxdWlyZSgnc2lzdGVyYW5zaScpO1xuY29uc3QgY29sb3IgPSByZXF1aXJlKCdrbGV1cicpO1xuXG4vKipcbiAqIEJhc2UgcHJvbXB0IHNrZWxldG9uXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3RkaW5dIFRoZSBSZWFkYWJsZSBzdHJlYW0gdG8gbGlzdGVuIHRvXG4gKiBAcGFyYW0ge1N0cmVhbX0gW29wdHMuc3Rkb3V0XSBUaGUgV3JpdGFibGUgc3RyZWFtIHRvIHdyaXRlIHJlYWRsaW5lIGRhdGEgdG9cbiAqL1xuY2xhc3MgUHJvbXB0IGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3Iob3B0cz17fSkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLmZpcnN0UmVuZGVyID0gdHJ1ZTtcbiAgICB0aGlzLmluID0gb3B0cy5zdGRpbiB8fCBwcm9jZXNzLnN0ZGluO1xuICAgIHRoaXMub3V0ID0gb3B0cy5zdGRvdXQgfHwgcHJvY2Vzcy5zdGRvdXQ7XG4gICAgdGhpcy5vblJlbmRlciA9IChvcHRzLm9uUmVuZGVyIHx8ICgoKSA9PiB2b2lkIDApKS5iaW5kKHRoaXMpO1xuICAgIGNvbnN0IHJsID0gcmVhZGxpbmUuY3JlYXRlSW50ZXJmYWNlKHsgaW5wdXQ6dGhpcy5pbiwgZXNjYXBlQ29kZVRpbWVvdXQ6NTAgfSk7XG4gICAgcmVhZGxpbmUuZW1pdEtleXByZXNzRXZlbnRzKHRoaXMuaW4sIHJsKTtcblxuICAgIGlmICh0aGlzLmluLmlzVFRZKSB0aGlzLmluLnNldFJhd01vZGUodHJ1ZSk7XG4gICAgY29uc3QgaXNTZWxlY3QgPSBbICdTZWxlY3RQcm9tcHQnLCAnTXVsdGlzZWxlY3RQcm9tcHQnIF0uaW5kZXhPZih0aGlzLmNvbnN0cnVjdG9yLm5hbWUpID4gLTE7XG4gICAgY29uc3Qga2V5cHJlc3MgPSAoc3RyLCBrZXkpID0+IHtcbiAgICAgIGxldCBhID0gYWN0aW9uKGtleSwgaXNTZWxlY3QpO1xuICAgICAgaWYgKGEgPT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuXyAmJiB0aGlzLl8oc3RyLCBrZXkpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpc1thXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzW2FdKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmJlbGwoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5jbG9zZSA9ICgpID0+IHtcbiAgICAgIHRoaXMub3V0LndyaXRlKGN1cnNvci5zaG93KTtcbiAgICAgIHRoaXMuaW4ucmVtb3ZlTGlzdGVuZXIoJ2tleXByZXNzJywga2V5cHJlc3MpO1xuICAgICAgaWYgKHRoaXMuaW4uaXNUVFkpIHRoaXMuaW4uc2V0UmF3TW9kZShmYWxzZSk7XG4gICAgICBybC5jbG9zZSgpO1xuICAgICAgdGhpcy5lbWl0KHRoaXMuYWJvcnRlZCA/ICdhYm9ydCcgOiB0aGlzLmV4aXRlZCA/ICdleGl0JyA6ICdzdWJtaXQnLCB0aGlzLnZhbHVlKTtcbiAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgdGhpcy5pbi5vbigna2V5cHJlc3MnLCBrZXlwcmVzcyk7XG4gIH1cblxuICBmaXJlKCkge1xuICAgIHRoaXMuZW1pdCgnc3RhdGUnLCB7XG4gICAgICB2YWx1ZTogdGhpcy52YWx1ZSxcbiAgICAgIGFib3J0ZWQ6ICEhdGhpcy5hYm9ydGVkLFxuICAgICAgZXhpdGVkOiAhIXRoaXMuZXhpdGVkXG4gICAgfSk7XG4gIH1cblxuICBiZWxsKCkge1xuICAgIHRoaXMub3V0LndyaXRlKGJlZXApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHRoaXMub25SZW5kZXIoY29sb3IpO1xuICAgIGlmICh0aGlzLmZpcnN0UmVuZGVyKSB0aGlzLmZpcnN0UmVuZGVyID0gZmFsc2U7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQcm9tcHQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNvbG9yID0gcmVxdWlyZSgna2xldXInKTtcbmNvbnN0IFByb21wdCA9IHJlcXVpcmUoJy4vcHJvbXB0Jyk7XG5jb25zdCB7IHN0eWxlLCBjbGVhciwgZmlndXJlcywgd3JhcCwgZW50cmllc1RvRGlzcGxheSB9ID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuY29uc3QgeyBjdXJzb3IgfSA9IHJlcXVpcmUoJ3Npc3RlcmFuc2knKTtcblxuLyoqXG4gKiBTZWxlY3RQcm9tcHQgQmFzZSBFbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5tZXNzYWdlIE1lc3NhZ2VcbiAqIEBwYXJhbSB7QXJyYXl9IG9wdHMuY2hvaWNlcyBBcnJheSBvZiBjaG9pY2Ugb2JqZWN0c1xuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLmhpbnRdIEhpbnQgdG8gZGlzcGxheVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmluaXRpYWxdIEluZGV4IG9mIGRlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbb3B0cy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLm9wdGlvbnNQZXJQYWdlPTEwXSBNYXggb3B0aW9ucyB0byBkaXNwbGF5IGF0IG9uY2VcbiAqL1xuY2xhc3MgU2VsZWN0UHJvbXB0IGV4dGVuZHMgUHJvbXB0IHtcbiAgY29uc3RydWN0b3Iob3B0cz17fSkge1xuICAgIHN1cGVyKG9wdHMpO1xuICAgIHRoaXMubXNnID0gb3B0cy5tZXNzYWdlO1xuICAgIHRoaXMuaGludCA9IG9wdHMuaGludCB8fCAnLSBVc2UgYXJyb3cta2V5cy4gUmV0dXJuIHRvIHN1Ym1pdC4nO1xuICAgIHRoaXMud2FybiA9IG9wdHMud2FybiB8fCAnLSBUaGlzIG9wdGlvbiBpcyBkaXNhYmxlZCc7XG4gICAgdGhpcy5jdXJzb3IgPSBvcHRzLmluaXRpYWwgfHwgMDtcbiAgICB0aGlzLmNob2ljZXMgPSBvcHRzLmNob2ljZXMubWFwKChjaCwgaWR4KSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGNoID09PSAnc3RyaW5nJylcbiAgICAgICAgY2ggPSB7dGl0bGU6IGNoLCB2YWx1ZTogaWR4fTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRpdGxlOiBjaCAmJiAoY2gudGl0bGUgfHwgY2gudmFsdWUgfHwgY2gpLFxuICAgICAgICB2YWx1ZTogY2ggJiYgKGNoLnZhbHVlID09PSB1bmRlZmluZWQgPyBpZHggOiBjaC52YWx1ZSksXG4gICAgICAgIGRlc2NyaXB0aW9uOiBjaCAmJiBjaC5kZXNjcmlwdGlvbixcbiAgICAgICAgc2VsZWN0ZWQ6IGNoICYmIGNoLnNlbGVjdGVkLFxuICAgICAgICBkaXNhYmxlZDogY2ggJiYgY2guZGlzYWJsZWRcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdGhpcy5vcHRpb25zUGVyUGFnZSA9IG9wdHMub3B0aW9uc1BlclBhZ2UgfHwgMTA7XG4gICAgdGhpcy52YWx1ZSA9ICh0aGlzLmNob2ljZXNbdGhpcy5jdXJzb3JdIHx8IHt9KS52YWx1ZTtcbiAgICB0aGlzLmNsZWFyID0gY2xlYXIoJycsIHRoaXMub3V0LmNvbHVtbnMpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBtb3ZlQ3Vyc29yKG4pIHtcbiAgICB0aGlzLmN1cnNvciA9IG47XG4gICAgdGhpcy52YWx1ZSA9IHRoaXMuY2hvaWNlc1tuXS52YWx1ZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMubW92ZUN1cnNvcigwKTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZXhpdCgpIHtcbiAgICB0aGlzLmFib3J0KCk7XG4gIH1cblxuICBhYm9ydCgpIHtcbiAgICB0aGlzLmRvbmUgPSB0aGlzLmFib3J0ZWQgPSB0cnVlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5vdXQud3JpdGUoJ1xcbicpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIHN1Ym1pdCgpIHtcbiAgICBpZiAoIXRoaXMuc2VsZWN0aW9uLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgICAgdGhpcy5hYm9ydGVkID0gZmFsc2U7XG4gICAgICB0aGlzLmZpcmUoKTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICB0aGlzLm91dC53cml0ZSgnXFxuJyk7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfSBlbHNlXG4gICAgICB0aGlzLmJlbGwoKTtcbiAgfVxuXG4gIGZpcnN0KCkge1xuICAgIHRoaXMubW92ZUN1cnNvcigwKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbGFzdCgpIHtcbiAgICB0aGlzLm1vdmVDdXJzb3IodGhpcy5jaG9pY2VzLmxlbmd0aCAtIDEpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICB1cCgpIHtcbiAgICBpZiAodGhpcy5jdXJzb3IgPT09IDApIHtcbiAgICAgIHRoaXMubW92ZUN1cnNvcih0aGlzLmNob2ljZXMubGVuZ3RoIC0gMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubW92ZUN1cnNvcih0aGlzLmN1cnNvciAtIDEpO1xuICAgIH1cbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZG93bigpIHtcbiAgICBpZiAodGhpcy5jdXJzb3IgPT09IHRoaXMuY2hvaWNlcy5sZW5ndGggLSAxKSB7XG4gICAgICB0aGlzLm1vdmVDdXJzb3IoMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubW92ZUN1cnNvcih0aGlzLmN1cnNvciArIDEpO1xuICAgIH1cbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbmV4dCgpIHtcbiAgICB0aGlzLm1vdmVDdXJzb3IoKHRoaXMuY3Vyc29yICsgMSkgJSB0aGlzLmNob2ljZXMubGVuZ3RoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgXyhjLCBrZXkpIHtcbiAgICBpZiAoYyA9PT0gJyAnKSByZXR1cm4gdGhpcy5zdWJtaXQoKTtcbiAgfVxuXG4gIGdldCBzZWxlY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hvaWNlc1t0aGlzLmN1cnNvcl07XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuY2xvc2VkKSByZXR1cm47XG4gICAgaWYgKHRoaXMuZmlyc3RSZW5kZXIpIHRoaXMub3V0LndyaXRlKGN1cnNvci5oaWRlKTtcbiAgICBlbHNlIHRoaXMub3V0LndyaXRlKGNsZWFyKHRoaXMub3V0cHV0VGV4dCwgdGhpcy5vdXQuY29sdW1ucykpO1xuICAgIHN1cGVyLnJlbmRlcigpO1xuXG4gICAgbGV0IHsgc3RhcnRJbmRleCwgZW5kSW5kZXggfSA9IGVudHJpZXNUb0Rpc3BsYXkodGhpcy5jdXJzb3IsIHRoaXMuY2hvaWNlcy5sZW5ndGgsIHRoaXMub3B0aW9uc1BlclBhZ2UpO1xuXG4gICAgLy8gUHJpbnQgcHJvbXB0XG4gICAgdGhpcy5vdXRwdXRUZXh0ID0gW1xuICAgICAgc3R5bGUuc3ltYm9sKHRoaXMuZG9uZSwgdGhpcy5hYm9ydGVkKSxcbiAgICAgIGNvbG9yLmJvbGQodGhpcy5tc2cpLFxuICAgICAgc3R5bGUuZGVsaW1pdGVyKGZhbHNlKSxcbiAgICAgIHRoaXMuZG9uZSA/IHRoaXMuc2VsZWN0aW9uLnRpdGxlIDogdGhpcy5zZWxlY3Rpb24uZGlzYWJsZWRcbiAgICAgICAgICA/IGNvbG9yLnllbGxvdyh0aGlzLndhcm4pIDogY29sb3IuZ3JheSh0aGlzLmhpbnQpXG4gICAgXS5qb2luKCcgJyk7XG5cbiAgICAvLyBQcmludCBjaG9pY2VzXG4gICAgaWYgKCF0aGlzLmRvbmUpIHtcbiAgICAgIHRoaXMub3V0cHV0VGV4dCArPSAnXFxuJztcbiAgICAgIGZvciAobGV0IGkgPSBzdGFydEluZGV4OyBpIDwgZW5kSW5kZXg7IGkrKykge1xuICAgICAgICBsZXQgdGl0bGUsIHByZWZpeCwgZGVzYyA9ICcnLCB2ID0gdGhpcy5jaG9pY2VzW2ldO1xuXG4gICAgICAgIC8vIERldGVybWluZSB3aGV0aGVyIHRvIGRpc3BsYXkgXCJtb3JlIGNob2ljZXNcIiBpbmRpY2F0b3JzXG4gICAgICAgIGlmIChpID09PSBzdGFydEluZGV4ICYmIHN0YXJ0SW5kZXggPiAwKSB7XG4gICAgICAgICAgcHJlZml4ID0gZmlndXJlcy5hcnJvd1VwO1xuICAgICAgICB9IGVsc2UgaWYgKGkgPT09IGVuZEluZGV4IC0gMSAmJiBlbmRJbmRleCA8IHRoaXMuY2hvaWNlcy5sZW5ndGgpIHtcbiAgICAgICAgICBwcmVmaXggPSBmaWd1cmVzLmFycm93RG93bjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmVmaXggPSAnICc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodi5kaXNhYmxlZCkge1xuICAgICAgICAgIHRpdGxlID0gdGhpcy5jdXJzb3IgPT09IGkgPyBjb2xvci5ncmF5KCkudW5kZXJsaW5lKHYudGl0bGUpIDogY29sb3Iuc3RyaWtldGhyb3VnaCgpLmdyYXkodi50aXRsZSk7XG4gICAgICAgICAgcHJlZml4ID0gKHRoaXMuY3Vyc29yID09PSBpID8gY29sb3IuYm9sZCgpLmdyYXkoZmlndXJlcy5wb2ludGVyKSArICcgJyA6ICcgICcpICsgcHJlZml4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpdGxlID0gdGhpcy5jdXJzb3IgPT09IGkgPyBjb2xvci5jeWFuKCkudW5kZXJsaW5lKHYudGl0bGUpIDogdi50aXRsZTtcbiAgICAgICAgICBwcmVmaXggPSAodGhpcy5jdXJzb3IgPT09IGkgPyBjb2xvci5jeWFuKGZpZ3VyZXMucG9pbnRlcikgKyAnICcgOiAnICAnKSArIHByZWZpeDtcbiAgICAgICAgICBpZiAodi5kZXNjcmlwdGlvbiAmJiB0aGlzLmN1cnNvciA9PT0gaSkge1xuICAgICAgICAgICAgZGVzYyA9IGAgLSAke3YuZGVzY3JpcHRpb259YDtcbiAgICAgICAgICAgIGlmIChwcmVmaXgubGVuZ3RoICsgdGl0bGUubGVuZ3RoICsgZGVzYy5sZW5ndGggPj0gdGhpcy5vdXQuY29sdW1uc1xuICAgICAgICAgICAgICAgIHx8IHYuZGVzY3JpcHRpb24uc3BsaXQoL1xccj9cXG4vKS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgIGRlc2MgPSAnXFxuJyArIHdyYXAodi5kZXNjcmlwdGlvbiwgeyBtYXJnaW46IDMsIHdpZHRoOiB0aGlzLm91dC5jb2x1bW5zIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub3V0cHV0VGV4dCArPSBgJHtwcmVmaXh9ICR7dGl0bGV9JHtjb2xvci5ncmF5KGRlc2MpfVxcbmA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5vdXQud3JpdGUodGhpcy5vdXRwdXRUZXh0KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNlbGVjdFByb21wdDtcbiIsImNvbnN0IGNvbG9yID0gcmVxdWlyZSgna2xldXInKTtcbmNvbnN0IFByb21wdCA9IHJlcXVpcmUoJy4vcHJvbXB0Jyk7XG5jb25zdCB7IGVyYXNlLCBjdXJzb3IgfSA9IHJlcXVpcmUoJ3Npc3RlcmFuc2knKTtcbmNvbnN0IHsgc3R5bGUsIGNsZWFyLCBsaW5lcywgZmlndXJlcyB9ID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuXG4vKipcbiAqIFRleHRQcm9tcHQgQmFzZSBFbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5tZXNzYWdlIE1lc3NhZ2VcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0cy5zdHlsZT0nZGVmYXVsdCddIFJlbmRlciBzdHlsZVxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLmluaXRpYWxdIERlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLnZhbGlkYXRlXSBWYWxpZGF0ZSBmdW5jdGlvblxuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMuZXJyb3JdIFRoZSBpbnZhbGlkIGVycm9yIGxhYmVsXG4gKi9cbmNsYXNzIFRleHRQcm9tcHQgZXh0ZW5kcyBQcm9tcHQge1xuICBjb25zdHJ1Y3RvcihvcHRzPXt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgdGhpcy50cmFuc2Zvcm0gPSBzdHlsZS5yZW5kZXIob3B0cy5zdHlsZSk7XG4gICAgdGhpcy5zY2FsZSA9IHRoaXMudHJhbnNmb3JtLnNjYWxlO1xuICAgIHRoaXMubXNnID0gb3B0cy5tZXNzYWdlO1xuICAgIHRoaXMuaW5pdGlhbCA9IG9wdHMuaW5pdGlhbCB8fCBgYDtcbiAgICB0aGlzLnZhbGlkYXRvciA9IG9wdHMudmFsaWRhdGUgfHwgKCgpID0+IHRydWUpO1xuICAgIHRoaXMudmFsdWUgPSBgYDtcbiAgICB0aGlzLmVycm9yTXNnID0gb3B0cy5lcnJvciB8fCBgUGxlYXNlIEVudGVyIEEgVmFsaWQgVmFsdWVgO1xuICAgIHRoaXMuY3Vyc29yID0gTnVtYmVyKCEhdGhpcy5pbml0aWFsKTtcbiAgICB0aGlzLmNsZWFyID0gY2xlYXIoYGAsIHRoaXMub3V0LmNvbHVtbnMpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBzZXQgdmFsdWUodikge1xuICAgIGlmICghdiAmJiB0aGlzLmluaXRpYWwpIHtcbiAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgdGhpcy5yZW5kZXJlZCA9IGNvbG9yLmdyYXkodGhpcy50cmFuc2Zvcm0ucmVuZGVyKHRoaXMuaW5pdGlhbCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBsYWNlaG9sZGVyID0gZmFsc2U7XG4gICAgICB0aGlzLnJlbmRlcmVkID0gdGhpcy50cmFuc2Zvcm0ucmVuZGVyKHYpO1xuICAgIH1cbiAgICB0aGlzLl92YWx1ZSA9IHY7XG4gICAgdGhpcy5maXJlKCk7XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy52YWx1ZSA9IGBgO1xuICAgIHRoaXMuY3Vyc29yID0gTnVtYmVyKCEhdGhpcy5pbml0aWFsKTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZXhpdCgpIHtcbiAgICB0aGlzLmFib3J0KCk7XG4gIH1cblxuICBhYm9ydCgpIHtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy52YWx1ZSB8fCB0aGlzLmluaXRpYWw7XG4gICAgdGhpcy5kb25lID0gdGhpcy5hYm9ydGVkID0gdHJ1ZTtcbiAgICB0aGlzLmVycm9yID0gZmFsc2U7XG4gICAgdGhpcy5yZWQgPSBmYWxzZTtcbiAgICB0aGlzLmZpcmUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMub3V0LndyaXRlKCdcXG4nKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICBhc3luYyB2YWxpZGF0ZSgpIHtcbiAgICBsZXQgdmFsaWQgPSBhd2FpdCB0aGlzLnZhbGlkYXRvcih0aGlzLnZhbHVlKTtcbiAgICBpZiAodHlwZW9mIHZhbGlkID09PSBgc3RyaW5nYCkge1xuICAgICAgdGhpcy5lcnJvck1zZyA9IHZhbGlkO1xuICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5lcnJvciA9ICF2YWxpZDtcbiAgfVxuXG4gIGFzeW5jIHN1Ym1pdCgpIHtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy52YWx1ZSB8fCB0aGlzLmluaXRpYWw7XG4gICAgYXdhaXQgdGhpcy52YWxpZGF0ZSgpO1xuICAgIGlmICh0aGlzLmVycm9yKSB7XG4gICAgICB0aGlzLnJlZCA9IHRydWU7XG4gICAgICB0aGlzLmZpcmUoKTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gICAgdGhpcy5hYm9ydGVkID0gZmFsc2U7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLm91dC53cml0ZSgnXFxuJyk7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG5cbiAgbmV4dCgpIHtcbiAgICBpZiAoIXRoaXMucGxhY2Vob2xkZXIpIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy5pbml0aWFsO1xuICAgIHRoaXMuY3Vyc29yID0gdGhpcy5yZW5kZXJlZC5sZW5ndGg7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIG1vdmVDdXJzb3Iobikge1xuICAgIGlmICh0aGlzLnBsYWNlaG9sZGVyKSByZXR1cm47XG4gICAgdGhpcy5jdXJzb3IgPSB0aGlzLmN1cnNvcituO1xuICB9XG5cbiAgXyhjLCBrZXkpIHtcbiAgICBsZXQgczEgPSB0aGlzLnZhbHVlLnNsaWNlKDAsIHRoaXMuY3Vyc29yKTtcbiAgICBsZXQgczIgPSB0aGlzLnZhbHVlLnNsaWNlKHRoaXMuY3Vyc29yKTtcbiAgICB0aGlzLnZhbHVlID0gYCR7czF9JHtjfSR7czJ9YDtcbiAgICB0aGlzLnJlZCA9IGZhbHNlO1xuICAgIHRoaXMuY3Vyc29yID0gdGhpcy5wbGFjZWhvbGRlciA/IDAgOiBzMS5sZW5ndGgrMTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgZGVsZXRlKCkge1xuICAgIGlmICh0aGlzLmN1cnNvciA9PT0gMCkgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIGxldCBzMSA9IHRoaXMudmFsdWUuc2xpY2UoMCwgdGhpcy5jdXJzb3ItMSk7XG4gICAgbGV0IHMyID0gdGhpcy52YWx1ZS5zbGljZSh0aGlzLmN1cnNvcik7XG4gICAgdGhpcy52YWx1ZSA9IGAke3MxfSR7czJ9YDtcbiAgICB0aGlzLnJlZCA9IGZhbHNlO1xuICAgIHRoaXMubW92ZUN1cnNvcigtMSk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGRlbGV0ZUZvcndhcmQoKSB7XG4gICAgaWYodGhpcy5jdXJzb3IqdGhpcy5zY2FsZSA+PSB0aGlzLnJlbmRlcmVkLmxlbmd0aCB8fCB0aGlzLnBsYWNlaG9sZGVyKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgbGV0IHMxID0gdGhpcy52YWx1ZS5zbGljZSgwLCB0aGlzLmN1cnNvcik7XG4gICAgbGV0IHMyID0gdGhpcy52YWx1ZS5zbGljZSh0aGlzLmN1cnNvcisxKTtcbiAgICB0aGlzLnZhbHVlID0gYCR7czF9JHtzMn1gO1xuICAgIHRoaXMucmVkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGZpcnN0KCkge1xuICAgIHRoaXMuY3Vyc29yID0gMDtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbGFzdCgpIHtcbiAgICB0aGlzLmN1cnNvciA9IHRoaXMudmFsdWUubGVuZ3RoO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBsZWZ0KCkge1xuICAgIGlmICh0aGlzLmN1cnNvciA8PSAwIHx8IHRoaXMucGxhY2Vob2xkZXIpIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB0aGlzLm1vdmVDdXJzb3IoLTEpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByaWdodCgpIHtcbiAgICBpZiAodGhpcy5jdXJzb3IqdGhpcy5zY2FsZSA+PSB0aGlzLnJlbmRlcmVkLmxlbmd0aCB8fCB0aGlzLnBsYWNlaG9sZGVyKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy5tb3ZlQ3Vyc29yKDEpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuY2xvc2VkKSByZXR1cm47XG4gICAgaWYgKCF0aGlzLmZpcnN0UmVuZGVyKSB7XG4gICAgICBpZiAodGhpcy5vdXRwdXRFcnJvcilcbiAgICAgICAgdGhpcy5vdXQud3JpdGUoY3Vyc29yLmRvd24obGluZXModGhpcy5vdXRwdXRFcnJvciwgdGhpcy5vdXQuY29sdW1ucykgLSAxKSArIGNsZWFyKHRoaXMub3V0cHV0RXJyb3IsIHRoaXMub3V0LmNvbHVtbnMpKTtcbiAgICAgIHRoaXMub3V0LndyaXRlKGNsZWFyKHRoaXMub3V0cHV0VGV4dCwgdGhpcy5vdXQuY29sdW1ucykpO1xuICAgIH1cbiAgICBzdXBlci5yZW5kZXIoKTtcbiAgICB0aGlzLm91dHB1dEVycm9yID0gJyc7XG5cbiAgICB0aGlzLm91dHB1dFRleHQgPSBbXG4gICAgICBzdHlsZS5zeW1ib2wodGhpcy5kb25lLCB0aGlzLmFib3J0ZWQpLFxuICAgICAgY29sb3IuYm9sZCh0aGlzLm1zZyksXG4gICAgICBzdHlsZS5kZWxpbWl0ZXIodGhpcy5kb25lKSxcbiAgICAgIHRoaXMucmVkID8gY29sb3IucmVkKHRoaXMucmVuZGVyZWQpIDogdGhpcy5yZW5kZXJlZFxuICAgIF0uam9pbihgIGApO1xuXG4gICAgaWYgKHRoaXMuZXJyb3IpIHtcbiAgICAgIHRoaXMub3V0cHV0RXJyb3IgKz0gdGhpcy5lcnJvck1zZy5zcGxpdChgXFxuYClcbiAgICAgICAgICAucmVkdWNlKChhLCBsLCBpKSA9PiBhICsgYFxcbiR7aSA/ICcgJyA6IGZpZ3VyZXMucG9pbnRlclNtYWxsfSAke2NvbG9yLnJlZCgpLml0YWxpYyhsKX1gLCBgYCk7XG4gICAgfVxuXG4gICAgdGhpcy5vdXQud3JpdGUoZXJhc2UubGluZSArIGN1cnNvci50bygwKSArIHRoaXMub3V0cHV0VGV4dCArIGN1cnNvci5zYXZlICsgdGhpcy5vdXRwdXRFcnJvciArIGN1cnNvci5yZXN0b3JlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRleHRQcm9tcHQ7XG4iLCJjb25zdCBjb2xvciA9IHJlcXVpcmUoJ2tsZXVyJyk7XG5jb25zdCBQcm9tcHQgPSByZXF1aXJlKCcuL3Byb21wdCcpO1xuY29uc3QgeyBzdHlsZSwgY2xlYXIgfSA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcbmNvbnN0IHsgY3Vyc29yLCBlcmFzZSB9ID0gcmVxdWlyZSgnc2lzdGVyYW5zaScpO1xuXG4vKipcbiAqIFRvZ2dsZVByb21wdCBCYXNlIEVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBvcHRzLm1lc3NhZ2UgTWVzc2FnZVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0cy5pbml0aWFsPWZhbHNlXSBEZWZhdWx0IHZhbHVlXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdHMuYWN0aXZlPSdubyddIEFjdGl2ZSBsYWJlbFxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRzLmluYWN0aXZlPSdvZmYnXSBJbmFjdGl2ZSBsYWJlbFxuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFtvcHRzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKi9cbmNsYXNzIFRvZ2dsZVByb21wdCBleHRlbmRzIFByb21wdCB7XG4gIGNvbnN0cnVjdG9yKG9wdHM9e30pIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgICB0aGlzLm1zZyA9IG9wdHMubWVzc2FnZTtcbiAgICB0aGlzLnZhbHVlID0gISFvcHRzLmluaXRpYWw7XG4gICAgdGhpcy5hY3RpdmUgPSBvcHRzLmFjdGl2ZSB8fCAnb24nO1xuICAgIHRoaXMuaW5hY3RpdmUgPSBvcHRzLmluYWN0aXZlIHx8ICdvZmYnO1xuICAgIHRoaXMuaW5pdGlhbFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy52YWx1ZSA9IHRoaXMuaW5pdGlhbFZhbHVlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBleGl0KCkge1xuICAgIHRoaXMuYWJvcnQoKTtcbiAgfVxuXG4gIGFib3J0KCkge1xuICAgIHRoaXMuZG9uZSA9IHRoaXMuYWJvcnRlZCA9IHRydWU7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLm91dC53cml0ZSgnXFxuJyk7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG5cbiAgc3VibWl0KCkge1xuICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gICAgdGhpcy5hYm9ydGVkID0gZmFsc2U7XG4gICAgdGhpcy5maXJlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLm91dC53cml0ZSgnXFxuJyk7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG5cbiAgZGVhY3RpdmF0ZSgpIHtcbiAgICBpZiAodGhpcy52YWx1ZSA9PT0gZmFsc2UpIHJldHVybiB0aGlzLmJlbGwoKTtcbiAgICB0aGlzLnZhbHVlID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGFjdGl2YXRlKCkge1xuICAgIGlmICh0aGlzLnZhbHVlID09PSB0cnVlKSByZXR1cm4gdGhpcy5iZWxsKCk7XG4gICAgdGhpcy52YWx1ZSA9IHRydWU7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGRlbGV0ZSgpIHtcbiAgICB0aGlzLmRlYWN0aXZhdGUoKTtcbiAgfVxuICBsZWZ0KCkge1xuICAgIHRoaXMuZGVhY3RpdmF0ZSgpO1xuICB9XG4gIHJpZ2h0KCkge1xuICAgIHRoaXMuYWN0aXZhdGUoKTtcbiAgfVxuICBkb3duKCkge1xuICAgIHRoaXMuZGVhY3RpdmF0ZSgpO1xuICB9XG4gIHVwKCkge1xuICAgIHRoaXMuYWN0aXZhdGUoKTtcbiAgfVxuXG4gIG5leHQoKSB7XG4gICAgdGhpcy52YWx1ZSA9ICF0aGlzLnZhbHVlO1xuICAgIHRoaXMuZmlyZSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBfKGMsIGtleSkge1xuICAgIGlmIChjID09PSAnICcpIHtcbiAgICAgIHRoaXMudmFsdWUgPSAhdGhpcy52YWx1ZTtcbiAgICB9IGVsc2UgaWYgKGMgPT09ICcxJykge1xuICAgICAgdGhpcy52YWx1ZSA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChjID09PSAnMCcpIHtcbiAgICAgIHRoaXMudmFsdWUgPSBmYWxzZTtcbiAgICB9IGVsc2UgcmV0dXJuIHRoaXMuYmVsbCgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuY2xvc2VkKSByZXR1cm47XG4gICAgaWYgKHRoaXMuZmlyc3RSZW5kZXIpIHRoaXMub3V0LndyaXRlKGN1cnNvci5oaWRlKTtcbiAgICBlbHNlIHRoaXMub3V0LndyaXRlKGNsZWFyKHRoaXMub3V0cHV0VGV4dCwgdGhpcy5vdXQuY29sdW1ucykpO1xuICAgIHN1cGVyLnJlbmRlcigpO1xuXG4gICAgdGhpcy5vdXRwdXRUZXh0ID0gW1xuICAgICAgc3R5bGUuc3ltYm9sKHRoaXMuZG9uZSwgdGhpcy5hYm9ydGVkKSxcbiAgICAgIGNvbG9yLmJvbGQodGhpcy5tc2cpLFxuICAgICAgc3R5bGUuZGVsaW1pdGVyKHRoaXMuZG9uZSksXG4gICAgICB0aGlzLnZhbHVlID8gdGhpcy5pbmFjdGl2ZSA6IGNvbG9yLmN5YW4oKS51bmRlcmxpbmUodGhpcy5pbmFjdGl2ZSksXG4gICAgICBjb2xvci5ncmF5KCcvJyksXG4gICAgICB0aGlzLnZhbHVlID8gY29sb3IuY3lhbigpLnVuZGVybGluZSh0aGlzLmFjdGl2ZSkgOiB0aGlzLmFjdGl2ZVxuICAgIF0uam9pbignICcpO1xuXG4gICAgdGhpcy5vdXQud3JpdGUoZXJhc2UubGluZSArIGN1cnNvci50bygwKSArIHRoaXMub3V0cHV0VGV4dCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUb2dnbGVQcm9tcHQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHByb21wdHMgPSByZXF1aXJlKCcuL3Byb21wdHMnKTtcblxuY29uc3QgcGFzc09uID0gWydzdWdnZXN0JywgJ2Zvcm1hdCcsICdvblN0YXRlJywgJ3ZhbGlkYXRlJywgJ29uUmVuZGVyJywgJ3R5cGUnXTtcbmNvbnN0IG5vb3AgPSAoKSA9PiB7fTtcblxuLyoqXG4gKiBQcm9tcHQgZm9yIGEgc2VyaWVzIG9mIHF1ZXN0aW9uc1xuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IHF1ZXN0aW9ucyBTaW5nbGUgcXVlc3Rpb24gb2JqZWN0IG9yIEFycmF5IG9mIHF1ZXN0aW9uIG9iamVjdHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvblN1Ym1pdF0gQ2FsbGJhY2sgZnVuY3Rpb24gY2FsbGVkIG9uIHByb21wdCBzdWJtaXRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvbkNhbmNlbF0gQ2FsbGJhY2sgZnVuY3Rpb24gY2FsbGVkIG9uIGNhbmNlbC9hYm9ydFxuICogQHJldHVybnMge09iamVjdH0gT2JqZWN0IHdpdGggdmFsdWVzIGZyb20gdXNlciBpbnB1dFxuICovXG5hc3luYyBmdW5jdGlvbiBwcm9tcHQocXVlc3Rpb25zPVtdLCB7IG9uU3VibWl0PW5vb3AsIG9uQ2FuY2VsPW5vb3AgfT17fSkge1xuICBjb25zdCBhbnN3ZXJzID0ge307XG4gIGNvbnN0IG92ZXJyaWRlID0gcHJvbXB0Ll9vdmVycmlkZSB8fCB7fTtcbiAgcXVlc3Rpb25zID0gW10uY29uY2F0KHF1ZXN0aW9ucyk7XG4gIGxldCBhbnN3ZXIsIHF1ZXN0aW9uLCBxdWl0LCBuYW1lLCB0eXBlLCBsYXN0UHJvbXB0O1xuXG4gIGNvbnN0IGdldEZvcm1hdHRlZEFuc3dlciA9IGFzeW5jIChxdWVzdGlvbiwgYW5zd2VyLCBza2lwVmFsaWRhdGlvbiA9IGZhbHNlKSA9PiB7XG4gICAgaWYgKCFza2lwVmFsaWRhdGlvbiAmJiBxdWVzdGlvbi52YWxpZGF0ZSAmJiBxdWVzdGlvbi52YWxpZGF0ZShhbnN3ZXIpICE9PSB0cnVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBxdWVzdGlvbi5mb3JtYXQgPyBhd2FpdCBxdWVzdGlvbi5mb3JtYXQoYW5zd2VyLCBhbnN3ZXJzKSA6IGFuc3dlclxuICB9O1xuXG4gIGZvciAocXVlc3Rpb24gb2YgcXVlc3Rpb25zKSB7XG4gICAgKHsgbmFtZSwgdHlwZSB9ID0gcXVlc3Rpb24pO1xuXG4gICAgLy8gZXZhbHVhdGUgdHlwZSBmaXJzdCBhbmQgc2tpcCBpZiB0eXBlIGlzIGEgZmFsc3kgdmFsdWVcbiAgICBpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHR5cGUgPSBhd2FpdCB0eXBlKGFuc3dlciwgeyAuLi5hbnN3ZXJzIH0sIHF1ZXN0aW9uKVxuICAgICAgcXVlc3Rpb25bJ3R5cGUnXSA9IHR5cGVcbiAgICB9XG4gICAgaWYgKCF0eXBlKSBjb250aW51ZTtcblxuICAgIC8vIGlmIHByb3BlcnR5IGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCB1bmxlc3MgaXQncyBhIHNwZWNpYWwgZnVuY3Rpb25cbiAgICBmb3IgKGxldCBrZXkgaW4gcXVlc3Rpb24pIHtcbiAgICAgIGlmIChwYXNzT24uaW5jbHVkZXMoa2V5KSkgY29udGludWU7XG4gICAgICBsZXQgdmFsdWUgPSBxdWVzdGlvbltrZXldO1xuICAgICAgcXVlc3Rpb25ba2V5XSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IGF3YWl0IHZhbHVlKGFuc3dlciwgeyAuLi5hbnN3ZXJzIH0sIGxhc3RQcm9tcHQpIDogdmFsdWU7XG4gICAgfVxuXG4gICAgbGFzdFByb21wdCA9IHF1ZXN0aW9uO1xuXG4gICAgaWYgKHR5cGVvZiBxdWVzdGlvbi5tZXNzYWdlICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdwcm9tcHQgbWVzc2FnZSBpcyByZXF1aXJlZCcpO1xuICAgIH1cblxuICAgIC8vIHVwZGF0ZSB2YXJzIGluIGNhc2UgdGhleSBjaGFuZ2VkXG4gICAgKHsgbmFtZSwgdHlwZSB9ID0gcXVlc3Rpb24pO1xuXG4gICAgaWYgKHByb21wdHNbdHlwZV0gPT09IHZvaWQgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBwcm9tcHQgdHlwZSAoJHt0eXBlfSkgaXMgbm90IGRlZmluZWRgKTtcbiAgICB9XG5cbiAgICBpZiAob3ZlcnJpZGVbcXVlc3Rpb24ubmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgYW5zd2VyID0gYXdhaXQgZ2V0Rm9ybWF0dGVkQW5zd2VyKHF1ZXN0aW9uLCBvdmVycmlkZVtxdWVzdGlvbi5uYW1lXSk7XG4gICAgICBpZiAoYW5zd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYW5zd2Vyc1tuYW1lXSA9IGFuc3dlcjtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIC8vIEdldCB0aGUgaW5qZWN0ZWQgYW5zd2VyIGlmIHRoZXJlIGlzIG9uZSBvciBwcm9tcHQgdGhlIHVzZXJcbiAgICAgIGFuc3dlciA9IHByb21wdC5faW5qZWN0ZWQgPyBnZXRJbmplY3RlZEFuc3dlcihwcm9tcHQuX2luamVjdGVkLCBxdWVzdGlvbi5pbml0aWFsKSA6IGF3YWl0IHByb21wdHNbdHlwZV0ocXVlc3Rpb24pO1xuICAgICAgYW5zd2Vyc1tuYW1lXSA9IGFuc3dlciA9IGF3YWl0IGdldEZvcm1hdHRlZEFuc3dlcihxdWVzdGlvbiwgYW5zd2VyLCB0cnVlKTtcbiAgICAgIHF1aXQgPSBhd2FpdCBvblN1Ym1pdChxdWVzdGlvbiwgYW5zd2VyLCBhbnN3ZXJzKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHF1aXQgPSAhKGF3YWl0IG9uQ2FuY2VsKHF1ZXN0aW9uLCBhbnN3ZXJzKSk7XG4gICAgfVxuXG4gICAgaWYgKHF1aXQpIHJldHVybiBhbnN3ZXJzO1xuICB9XG5cbiAgcmV0dXJuIGFuc3dlcnM7XG59XG5cbmZ1bmN0aW9uIGdldEluamVjdGVkQW5zd2VyKGluamVjdGVkLCBkZWFmdWx0VmFsdWUpIHtcbiAgY29uc3QgYW5zd2VyID0gaW5qZWN0ZWQuc2hpZnQoKTtcbiAgICBpZiAoYW5zd2VyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHRocm93IGFuc3dlcjtcbiAgICB9XG5cbiAgICByZXR1cm4gKGFuc3dlciA9PT0gdW5kZWZpbmVkKSA/IGRlYWZ1bHRWYWx1ZSA6IGFuc3dlcjtcbn1cblxuZnVuY3Rpb24gaW5qZWN0KGFuc3dlcnMpIHtcbiAgcHJvbXB0Ll9pbmplY3RlZCA9IChwcm9tcHQuX2luamVjdGVkIHx8IFtdKS5jb25jYXQoYW5zd2Vycyk7XG59XG5cbmZ1bmN0aW9uIG92ZXJyaWRlKGFuc3dlcnMpIHtcbiAgcHJvbXB0Ll9vdmVycmlkZSA9IE9iamVjdC5hc3NpZ24oe30sIGFuc3dlcnMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24ocHJvbXB0LCB7IHByb21wdCwgcHJvbXB0cywgaW5qZWN0LCBvdmVycmlkZSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbmNvbnN0ICQgPSBleHBvcnRzO1xuY29uc3QgZWwgPSByZXF1aXJlKCcuL2VsZW1lbnRzJyk7XG5jb25zdCBub29wID0gdiA9PiB2O1xuXG5mdW5jdGlvbiB0b1Byb21wdCh0eXBlLCBhcmdzLCBvcHRzPXt9KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzLCByZWopID0+IHtcbiAgICBjb25zdCBwID0gbmV3IGVsW3R5cGVdKGFyZ3MpO1xuICAgIGNvbnN0IG9uQWJvcnQgPSBvcHRzLm9uQWJvcnQgfHwgbm9vcDtcbiAgICBjb25zdCBvblN1Ym1pdCA9IG9wdHMub25TdWJtaXQgfHwgbm9vcDtcbiAgICBjb25zdCBvbkV4aXQgPSBvcHRzLm9uRXhpdCB8fCBub29wO1xuICAgIHAub24oJ3N0YXRlJywgYXJncy5vblN0YXRlIHx8IG5vb3ApO1xuICAgIHAub24oJ3N1Ym1pdCcsIHggPT4gcmVzKG9uU3VibWl0KHgpKSk7XG4gICAgcC5vbignZXhpdCcsIHggPT4gcmVzKG9uRXhpdCh4KSkpO1xuICAgIHAub24oJ2Fib3J0JywgeCA9PiByZWoob25BYm9ydCh4KSkpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUZXh0IHByb21wdFxuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3MuaW5pdGlhbF0gRGVmYXVsdCBzdHJpbmcgdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbYXJncy5zdHlsZT1cImRlZmF1bHRcIl0gUmVuZGVyIHN0eWxlICgnZGVmYXVsdCcsICdwYXNzd29yZCcsICdpbnZpc2libGUnKVxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3Mub25TdGF0ZV0gT24gc3RhdGUgY2hhbmdlIGNhbGxiYWNrXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy52YWxpZGF0ZV0gRnVuY3Rpb24gdG8gdmFsaWRhdGUgdXNlciBpbnB1dFxuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB3aXRoIHVzZXIgaW5wdXRcbiAqL1xuJC50ZXh0ID0gYXJncyA9PiB0b1Byb21wdCgnVGV4dFByb21wdCcsIGFyZ3MpO1xuXG4vKipcbiAqIFBhc3N3b3JkIHByb21wdCB3aXRoIG1hc2tlZCBpbnB1dFxuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3MuaW5pdGlhbF0gRGVmYXVsdCBzdHJpbmcgdmFsdWVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLm9uU3RhdGVdIE9uIHN0YXRlIGNoYW5nZSBjYWxsYmFja1xuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3MudmFsaWRhdGVdIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIHVzZXIgaW5wdXRcbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugd2l0aCB1c2VyIGlucHV0XG4gKi9cbiQucGFzc3dvcmQgPSBhcmdzID0+IHtcbiAgYXJncy5zdHlsZSA9ICdwYXNzd29yZCc7XG4gIHJldHVybiAkLnRleHQoYXJncyk7XG59O1xuXG4vKipcbiAqIFByb21wdCB3aGVyZSBpbnB1dCBpcyBpbnZpc2libGUsIGxpa2Ugc3Vkb1xuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3MuaW5pdGlhbF0gRGVmYXVsdCBzdHJpbmcgdmFsdWVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLm9uU3RhdGVdIE9uIHN0YXRlIGNoYW5nZSBjYWxsYmFja1xuICogQHBhcmFtIHtmdW5jdGlvbn0gW2FyZ3MudmFsaWRhdGVdIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIHVzZXIgaW5wdXRcbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugd2l0aCB1c2VyIGlucHV0XG4gKi9cbiQuaW52aXNpYmxlID0gYXJncyA9PiB7XG4gIGFyZ3Muc3R5bGUgPSAnaW52aXNpYmxlJztcbiAgcmV0dXJuICQudGV4dChhcmdzKTtcbn07XG5cbi8qKlxuICogTnVtYmVyIHByb21wdFxuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge251bWJlcn0gYXJncy5pbml0aWFsIERlZmF1bHQgbnVtYmVyIHZhbHVlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy5vblN0YXRlXSBPbiBzdGF0ZSBjaGFuZ2UgY2FsbGJhY2tcbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXJncy5tYXhdIE1heCB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IFthcmdzLm1pbl0gTWluIHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3Muc3R5bGU9XCJkZWZhdWx0XCJdIFJlbmRlciBzdHlsZSAoJ2RlZmF1bHQnLCAncGFzc3dvcmQnLCAnaW52aXNpYmxlJylcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdHMuZmxvYXQ9ZmFsc2VdIFBhcnNlIGlucHV0IGFzIGZsb2F0c1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLnJvdW5kPTJdIFJvdW5kIGZsb2F0cyB0byB4IGRlY2ltYWxzXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMuaW5jcmVtZW50PTFdIE51bWJlciB0byBpbmNyZW1lbnQgYnkgd2hlbiB1c2luZyBhcnJvdy1rZXlzXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy52YWxpZGF0ZV0gRnVuY3Rpb24gdG8gdmFsaWRhdGUgdXNlciBpbnB1dFxuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB3aXRoIHVzZXIgaW5wdXRcbiAqL1xuJC5udW1iZXIgPSBhcmdzID0+IHRvUHJvbXB0KCdOdW1iZXJQcm9tcHQnLCBhcmdzKTtcblxuLyoqXG4gKiBEYXRlIHByb21wdFxuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge251bWJlcn0gYXJncy5pbml0aWFsIERlZmF1bHQgbnVtYmVyIHZhbHVlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy5vblN0YXRlXSBPbiBzdGF0ZSBjaGFuZ2UgY2FsbGJhY2tcbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXJncy5tYXhdIE1heCB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IFthcmdzLm1pbl0gTWluIHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3Muc3R5bGU9XCJkZWZhdWx0XCJdIFJlbmRlciBzdHlsZSAoJ2RlZmF1bHQnLCAncGFzc3dvcmQnLCAnaW52aXNpYmxlJylcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdHMuZmxvYXQ9ZmFsc2VdIFBhcnNlIGlucHV0IGFzIGZsb2F0c1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLnJvdW5kPTJdIFJvdW5kIGZsb2F0cyB0byB4IGRlY2ltYWxzXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdHMuaW5jcmVtZW50PTFdIE51bWJlciB0byBpbmNyZW1lbnQgYnkgd2hlbiB1c2luZyBhcnJvdy1rZXlzXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy52YWxpZGF0ZV0gRnVuY3Rpb24gdG8gdmFsaWRhdGUgdXNlciBpbnB1dFxuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB3aXRoIHVzZXIgaW5wdXRcbiAqL1xuJC5kYXRlID0gYXJncyA9PiB0b1Byb21wdCgnRGF0ZVByb21wdCcsIGFyZ3MpO1xuXG4vKipcbiAqIENsYXNzaWMgeWVzL25vIHByb21wdFxuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFthcmdzLmluaXRpYWw9ZmFsc2VdIERlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLm9uU3RhdGVdIE9uIHN0YXRlIGNoYW5nZSBjYWxsYmFja1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB3aXRoIHVzZXIgaW5wdXRcbiAqL1xuJC5jb25maXJtID0gYXJncyA9PiB0b1Byb21wdCgnQ29uZmlybVByb21wdCcsIGFyZ3MpO1xuXG4vKipcbiAqIExpc3QgcHJvbXB0LCBzcGxpdCBpbnRwdXQgc3RyaW5nIGJ5IGBzZXBlcmF0b3JgXG4gKiBAcGFyYW0ge3N0cmluZ30gYXJncy5tZXNzYWdlIFByb21wdCBtZXNzYWdlIHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7c3RyaW5nfSBbYXJncy5pbml0aWFsXSBEZWZhdWx0IHN0cmluZyB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IFthcmdzLnN0eWxlPVwiZGVmYXVsdFwiXSBSZW5kZXIgc3R5bGUgKCdkZWZhdWx0JywgJ3Bhc3N3b3JkJywgJ2ludmlzaWJsZScpXG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3Muc2VwYXJhdG9yXSBTdHJpbmcgc2VwYXJhdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy5vblN0YXRlXSBPbiBzdGF0ZSBjaGFuZ2UgY2FsbGJhY2tcbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugd2l0aCB1c2VyIGlucHV0LCBpbiBmb3JtIG9mIGFuIGBBcnJheWBcbiAqL1xuJC5saXN0ID0gYXJncyA9PiB7XG4gIGNvbnN0IHNlcCA9IGFyZ3Muc2VwYXJhdG9yIHx8ICcsJztcbiAgcmV0dXJuIHRvUHJvbXB0KCdUZXh0UHJvbXB0JywgYXJncywge1xuICAgIG9uU3VibWl0OiBzdHIgPT4gc3RyLnNwbGl0KHNlcCkubWFwKHMgPT4gcy50cmltKCkpXG4gIH0pO1xufTtcblxuLyoqXG4gKiBUb2dnbGUvc3dpdGNoIHByb21wdFxuICogQHBhcmFtIHtzdHJpbmd9IGFyZ3MubWVzc2FnZSBQcm9tcHQgbWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFthcmdzLmluaXRpYWw9ZmFsc2VdIERlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbYXJncy5hY3RpdmU9XCJvblwiXSBUZXh0IGZvciBgYWN0aXZlYCBzdGF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IFthcmdzLmluYWN0aXZlPVwib2ZmXCJdIFRleHQgZm9yIGBpbmFjdGl2ZWAgc3RhdGVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLm9uU3RhdGVdIE9uIHN0YXRlIGNoYW5nZSBjYWxsYmFja1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB3aXRoIHVzZXIgaW5wdXRcbiAqL1xuJC50b2dnbGUgPSBhcmdzID0+IHRvUHJvbXB0KCdUb2dnbGVQcm9tcHQnLCBhcmdzKTtcblxuLyoqXG4gKiBJbnRlcmFjdGl2ZSBzZWxlY3QgcHJvbXB0XG4gKiBAcGFyYW0ge3N0cmluZ30gYXJncy5tZXNzYWdlIFByb21wdCBtZXNzYWdlIHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MuY2hvaWNlcyBBcnJheSBvZiBjaG9pY2VzIG9iamVjdHMgYFt7IHRpdGxlLCB2YWx1ZSB9LCAuLi5dYFxuICogQHBhcmFtIHtudW1iZXJ9IFthcmdzLmluaXRpYWxdIEluZGV4IG9mIGRlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSB7U3RyaW5nfSBbYXJncy5oaW50XSBIaW50IHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLm9uU3RhdGVdIE9uIHN0YXRlIGNoYW5nZSBjYWxsYmFja1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB3aXRoIHVzZXIgaW5wdXRcbiAqL1xuJC5zZWxlY3QgPSBhcmdzID0+IHRvUHJvbXB0KCdTZWxlY3RQcm9tcHQnLCBhcmdzKTtcblxuLyoqXG4gKiBJbnRlcmFjdGl2ZSBtdWx0aS1zZWxlY3QgLyBhdXRvY29tcGxldGVNdWx0aXNlbGVjdCBwcm9tcHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcmdzLm1lc3NhZ2UgUHJvbXB0IG1lc3NhZ2UgdG8gZGlzcGxheVxuICogQHBhcmFtIHtBcnJheX0gYXJncy5jaG9pY2VzIEFycmF5IG9mIGNob2ljZXMgb2JqZWN0cyBgW3sgdGl0bGUsIHZhbHVlLCBbc2VsZWN0ZWRdIH0sIC4uLl1gXG4gKiBAcGFyYW0ge251bWJlcn0gW2FyZ3MubWF4XSBNYXggc2VsZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZ3MuaGludF0gSGludCB0byBkaXNwbGF5IHVzZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbYXJncy5jdXJzb3I9MF0gQ3Vyc29yIHN0YXJ0IHBvc2l0aW9uXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbYXJncy5vblN0YXRlXSBPbiBzdGF0ZSBjaGFuZ2UgY2FsbGJhY2tcbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRpbl0gVGhlIFJlYWRhYmxlIHN0cmVhbSB0byBsaXN0ZW4gdG9cbiAqIEBwYXJhbSB7U3RyZWFtfSBbYXJncy5zdGRvdXRdIFRoZSBXcml0YWJsZSBzdHJlYW0gdG8gd3JpdGUgcmVhZGxpbmUgZGF0YSB0b1xuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugd2l0aCB1c2VyIGlucHV0XG4gKi9cbiQubXVsdGlzZWxlY3QgPSBhcmdzID0+IHtcbiAgYXJncy5jaG9pY2VzID0gW10uY29uY2F0KGFyZ3MuY2hvaWNlcyB8fCBbXSk7XG4gIGNvbnN0IHRvU2VsZWN0ZWQgPSBpdGVtcyA9PiBpdGVtcy5maWx0ZXIoaXRlbSA9PiBpdGVtLnNlbGVjdGVkKS5tYXAoaXRlbSA9PiBpdGVtLnZhbHVlKTtcbiAgcmV0dXJuIHRvUHJvbXB0KCdNdWx0aXNlbGVjdFByb21wdCcsIGFyZ3MsIHtcbiAgICBvbkFib3J0OiB0b1NlbGVjdGVkLFxuICAgIG9uU3VibWl0OiB0b1NlbGVjdGVkXG4gIH0pO1xufTtcblxuJC5hdXRvY29tcGxldGVNdWx0aXNlbGVjdCA9IGFyZ3MgPT4ge1xuICBhcmdzLmNob2ljZXMgPSBbXS5jb25jYXQoYXJncy5jaG9pY2VzIHx8IFtdKTtcbiAgY29uc3QgdG9TZWxlY3RlZCA9IGl0ZW1zID0+IGl0ZW1zLmZpbHRlcihpdGVtID0+IGl0ZW0uc2VsZWN0ZWQpLm1hcChpdGVtID0+IGl0ZW0udmFsdWUpO1xuICByZXR1cm4gdG9Qcm9tcHQoJ0F1dG9jb21wbGV0ZU11bHRpc2VsZWN0UHJvbXB0JywgYXJncywge1xuICAgIG9uQWJvcnQ6IHRvU2VsZWN0ZWQsXG4gICAgb25TdWJtaXQ6IHRvU2VsZWN0ZWRcbiAgfSk7XG59O1xuXG5jb25zdCBieVRpdGxlID0gKGlucHV0LCBjaG9pY2VzKSA9PiBQcm9taXNlLnJlc29sdmUoXG4gIGNob2ljZXMuZmlsdGVyKGl0ZW0gPT4gaXRlbS50aXRsZS5zbGljZSgwLCBpbnB1dC5sZW5ndGgpLnRvTG93ZXJDYXNlKCkgPT09IGlucHV0LnRvTG93ZXJDYXNlKCkpXG4pO1xuXG4vKipcbiAqIEludGVyYWN0aXZlIGF1dG8tY29tcGxldGUgcHJvbXB0XG4gKiBAcGFyYW0ge3N0cmluZ30gYXJncy5tZXNzYWdlIFByb21wdCBtZXNzYWdlIHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MuY2hvaWNlcyBBcnJheSBvZiBhdXRvLWNvbXBsZXRlIGNob2ljZXMgb2JqZWN0cyBgW3sgdGl0bGUsIHZhbHVlIH0sIC4uLl1gXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbYXJncy5zdWdnZXN0XSBGdW5jdGlvbiB0byBmaWx0ZXIgcmVzdWx0cyBiYXNlZCBvbiB1c2VyIGlucHV0LiBEZWZhdWx0cyB0byBzb3J0IGJ5IGB0aXRsZWBcbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXJncy5saW1pdD0xMF0gTWF4IG51bWJlciBvZiByZXN1bHRzIHRvIHNob3dcbiAqIEBwYXJhbSB7c3RyaW5nfSBbYXJncy5zdHlsZT1cImRlZmF1bHRcIl0gUmVuZGVyIHN0eWxlICgnZGVmYXVsdCcsICdwYXNzd29yZCcsICdpbnZpc2libGUnKVxuICogQHBhcmFtIHtTdHJpbmd9IFthcmdzLmluaXRpYWxdIEluZGV4IG9mIHRoZSBkZWZhdWx0IHZhbHVlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmNsZWFyRmlyc3RdIFRoZSBmaXJzdCBFU0NBUEUga2V5cHJlc3Mgd2lsbCBjbGVhciB0aGUgaW5wdXRcbiAqIEBwYXJhbSB7U3RyaW5nfSBbYXJncy5mYWxsYmFja10gRmFsbGJhY2sgbWVzc2FnZSAtIGRlZmF1bHRzIHRvIGluaXRpYWwgdmFsdWVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFthcmdzLm9uU3RhdGVdIE9uIHN0YXRlIGNoYW5nZSBjYWxsYmFja1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZGluXSBUaGUgUmVhZGFibGUgc3RyZWFtIHRvIGxpc3RlbiB0b1xuICogQHBhcmFtIHtTdHJlYW19IFthcmdzLnN0ZG91dF0gVGhlIFdyaXRhYmxlIHN0cmVhbSB0byB3cml0ZSByZWFkbGluZSBkYXRhIHRvXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB3aXRoIHVzZXIgaW5wdXRcbiAqL1xuJC5hdXRvY29tcGxldGUgPSBhcmdzID0+IHtcbiAgYXJncy5zdWdnZXN0ID0gYXJncy5zdWdnZXN0IHx8IGJ5VGl0bGU7XG4gIGFyZ3MuY2hvaWNlcyA9IFtdLmNvbmNhdChhcmdzLmNob2ljZXMgfHwgW10pO1xuICByZXR1cm4gdG9Qcm9tcHQoJ0F1dG9jb21wbGV0ZVByb21wdCcsIGFyZ3MpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSAoa2V5LCBpc1NlbGVjdCkgPT4ge1xuICBpZiAoa2V5Lm1ldGEgJiYga2V5Lm5hbWUgIT09ICdlc2NhcGUnKSByZXR1cm47XG4gIFxuICBpZiAoa2V5LmN0cmwpIHtcbiAgICBpZiAoa2V5Lm5hbWUgPT09ICdhJykgcmV0dXJuICdmaXJzdCc7XG4gICAgaWYgKGtleS5uYW1lID09PSAnYycpIHJldHVybiAnYWJvcnQnO1xuICAgIGlmIChrZXkubmFtZSA9PT0gJ2QnKSByZXR1cm4gJ2Fib3J0JztcbiAgICBpZiAoa2V5Lm5hbWUgPT09ICdlJykgcmV0dXJuICdsYXN0JztcbiAgICBpZiAoa2V5Lm5hbWUgPT09ICdnJykgcmV0dXJuICdyZXNldCc7XG4gIH1cbiAgXG4gIGlmIChpc1NlbGVjdCkge1xuICAgIGlmIChrZXkubmFtZSA9PT0gJ2onKSByZXR1cm4gJ2Rvd24nO1xuICAgIGlmIChrZXkubmFtZSA9PT0gJ2snKSByZXR1cm4gJ3VwJztcbiAgfVxuXG4gIGlmIChrZXkubmFtZSA9PT0gJ3JldHVybicpIHJldHVybiAnc3VibWl0JztcbiAgaWYgKGtleS5uYW1lID09PSAnZW50ZXInKSByZXR1cm4gJ3N1Ym1pdCc7IC8vIGN0cmwgKyBKXG4gIGlmIChrZXkubmFtZSA9PT0gJ2JhY2tzcGFjZScpIHJldHVybiAnZGVsZXRlJztcbiAgaWYgKGtleS5uYW1lID09PSAnZGVsZXRlJykgcmV0dXJuICdkZWxldGVGb3J3YXJkJztcbiAgaWYgKGtleS5uYW1lID09PSAnYWJvcnQnKSByZXR1cm4gJ2Fib3J0JztcbiAgaWYgKGtleS5uYW1lID09PSAnZXNjYXBlJykgcmV0dXJuICdleGl0JztcbiAgaWYgKGtleS5uYW1lID09PSAndGFiJykgcmV0dXJuICduZXh0JztcbiAgaWYgKGtleS5uYW1lID09PSAncGFnZWRvd24nKSByZXR1cm4gJ25leHRQYWdlJztcbiAgaWYgKGtleS5uYW1lID09PSAncGFnZXVwJykgcmV0dXJuICdwcmV2UGFnZSc7XG4gIC8vIFRPRE8gY3JlYXRlIGhvbWUoKSBpbiBwcm9tcHQgdHlwZXMgKGUuZy4gVGV4dFByb21wdClcbiAgaWYgKGtleS5uYW1lID09PSAnaG9tZScpIHJldHVybiAnaG9tZSc7XG4gIC8vIFRPRE8gY3JlYXRlIGVuZCgpIGluIHByb21wdCB0eXBlcyAoZS5nLiBUZXh0UHJvbXB0KVxuICBpZiAoa2V5Lm5hbWUgPT09ICdlbmQnKSByZXR1cm4gJ2VuZCc7XG5cbiAgaWYgKGtleS5uYW1lID09PSAndXAnKSByZXR1cm4gJ3VwJztcbiAgaWYgKGtleS5uYW1lID09PSAnZG93bicpIHJldHVybiAnZG93bic7XG4gIGlmIChrZXkubmFtZSA9PT0gJ3JpZ2h0JykgcmV0dXJuICdyaWdodCc7XG4gIGlmIChrZXkubmFtZSA9PT0gJ2xlZnQnKSByZXR1cm4gJ2xlZnQnO1xuXG4gIHJldHVybiBmYWxzZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHN0cmlwID0gcmVxdWlyZSgnLi9zdHJpcCcpO1xuY29uc3QgeyBlcmFzZSwgY3Vyc29yIH0gPSByZXF1aXJlKCdzaXN0ZXJhbnNpJyk7XG5cbmNvbnN0IHdpZHRoID0gc3RyID0+IFsuLi5zdHJpcChzdHIpXS5sZW5ndGg7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHByb21wdFxuICogQHBhcmFtIHtudW1iZXJ9IHBlckxpbmVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihwcm9tcHQsIHBlckxpbmUpIHtcbiAgaWYgKCFwZXJMaW5lKSByZXR1cm4gZXJhc2UubGluZSArIGN1cnNvci50bygwKTtcblxuICBsZXQgcm93cyA9IDA7XG4gIGNvbnN0IGxpbmVzID0gcHJvbXB0LnNwbGl0KC9cXHI/XFxuLyk7XG4gIGZvciAobGV0IGxpbmUgb2YgbGluZXMpIHtcbiAgICByb3dzICs9IDEgKyBNYXRoLmZsb29yKE1hdGgubWF4KHdpZHRoKGxpbmUpIC0gMSwgMCkgLyBwZXJMaW5lKTtcbiAgfVxuXG4gIHJldHVybiBlcmFzZS5saW5lcyhyb3dzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIHdoYXQgZW50cmllcyBzaG91bGQgYmUgZGlzcGxheWVkIG9uIHRoZSBzY3JlZW4sIGJhc2VkIG9uIHRoZVxuICogY3VycmVudGx5IHNlbGVjdGVkIGluZGV4IGFuZCB0aGUgbWF4aW11bSB2aXNpYmxlLiBVc2VkIGluIGxpc3QtYmFzZWRcbiAqIHByb21wdHMgbGlrZSBgc2VsZWN0YCBhbmQgYG11bHRpc2VsZWN0YC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gY3Vyc29yIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgZW50cnlcbiAqIEBwYXJhbSB7bnVtYmVyfSB0b3RhbCB0aGUgdG90YWwgZW50cmllcyBhdmFpbGFibGUgdG8gZGlzcGxheVxuICogQHBhcmFtIHtudW1iZXJ9IFttYXhWaXNpYmxlXSB0aGUgbnVtYmVyIG9mIGVudHJpZXMgdGhhdCBjYW4gYmUgZGlzcGxheWVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gKGN1cnNvciwgdG90YWwsIG1heFZpc2libGUpICA9PiB7XG4gIG1heFZpc2libGUgPSBtYXhWaXNpYmxlIHx8IHRvdGFsO1xuXG4gIGxldCBzdGFydEluZGV4ID0gTWF0aC5taW4odG90YWwtIG1heFZpc2libGUsIGN1cnNvciAtIE1hdGguZmxvb3IobWF4VmlzaWJsZSAvIDIpKTtcbiAgaWYgKHN0YXJ0SW5kZXggPCAwKSBzdGFydEluZGV4ID0gMDtcblxuICBsZXQgZW5kSW5kZXggPSBNYXRoLm1pbihzdGFydEluZGV4ICsgbWF4VmlzaWJsZSwgdG90YWwpO1xuXG4gIHJldHVybiB7IHN0YXJ0SW5kZXgsIGVuZEluZGV4IH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1x0XG5cbiBjb25zdCBtYWluID0ge1xuICBhcnJvd1VwOiAn4oaRJyxcbiAgYXJyb3dEb3duOiAn4oaTJyxcbiAgYXJyb3dMZWZ0OiAn4oaQJyxcbiAgYXJyb3dSaWdodDogJ+KGkicsXG4gIHJhZGlvT246ICfil4knLFxuICByYWRpb09mZjogJ+KXrycsXG4gIHRpY2s6ICfinJQnLFx0XG4gIGNyb3NzOiAn4pyWJyxcdFxuICBlbGxpcHNpczogJ+KApicsXHRcbiAgcG9pbnRlclNtYWxsOiAn4oC6JyxcdFxuICBsaW5lOiAn4pSAJyxcdFxuICBwb2ludGVyOiAn4p2vJ1x0XG59O1x0XG5jb25zdCB3aW4gPSB7XG4gIGFycm93VXA6IG1haW4uYXJyb3dVcCxcbiAgYXJyb3dEb3duOiBtYWluLmFycm93RG93bixcbiAgYXJyb3dMZWZ0OiBtYWluLmFycm93TGVmdCxcbiAgYXJyb3dSaWdodDogbWFpbi5hcnJvd1JpZ2h0LFxuICByYWRpb09uOiAnKCopJyxcbiAgcmFkaW9PZmY6ICcoICknLFx0XG4gIHRpY2s6ICfiiJonLFx0XG4gIGNyb3NzOiAnw5cnLFx0XG4gIGVsbGlwc2lzOiAnLi4uJyxcdFxuICBwb2ludGVyU21hbGw6ICfCuycsXHRcbiAgbGluZTogJ+KUgCcsXHRcbiAgcG9pbnRlcjogJz4nXHRcbn07XHRcbmNvbnN0IGZpZ3VyZXMgPSBwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInID8gd2luIDogbWFpbjtcdFxuXG4gbW9kdWxlLmV4cG9ydHMgPSBmaWd1cmVzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYWN0aW9uOiByZXF1aXJlKCcuL2FjdGlvbicpLFxuICBjbGVhcjogcmVxdWlyZSgnLi9jbGVhcicpLFxuICBzdHlsZTogcmVxdWlyZSgnLi9zdHlsZScpLFxuICBzdHJpcDogcmVxdWlyZSgnLi9zdHJpcCcpLFxuICBmaWd1cmVzOiByZXF1aXJlKCcuL2ZpZ3VyZXMnKSxcbiAgbGluZXM6IHJlcXVpcmUoJy4vbGluZXMnKSxcbiAgd3JhcDogcmVxdWlyZSgnLi93cmFwJyksXG4gIGVudHJpZXNUb0Rpc3BsYXk6IHJlcXVpcmUoJy4vZW50cmllc1RvRGlzcGxheScpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBzdHJpcCA9IHJlcXVpcmUoJy4vc3RyaXAnKTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbXNnXG4gKiBAcGFyYW0ge251bWJlcn0gcGVyTGluZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtc2csIHBlckxpbmUpIHtcbiAgbGV0IGxpbmVzID0gU3RyaW5nKHN0cmlwKG1zZykgfHwgJycpLnNwbGl0KC9cXHI/XFxuLyk7XG5cbiAgaWYgKCFwZXJMaW5lKSByZXR1cm4gbGluZXMubGVuZ3RoO1xuICByZXR1cm4gbGluZXMubWFwKGwgPT4gTWF0aC5jZWlsKGwubGVuZ3RoIC8gcGVyTGluZSkpXG4gICAgICAucmVkdWNlKChhLCBiKSA9PiBhICsgYik7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0ciA9PiB7XG4gIGNvbnN0IHBhdHRlcm4gPSBbXG4gICAgJ1tcXFxcdTAwMUJcXFxcdTAwOUJdW1tcXFxcXSgpIzs/XSooPzooPzooPzpbYS16QS1aXFxcXGRdKig/OjtbYS16QS1aXFxcXGRdKikqKT9cXFxcdTAwMDcpJyxcbiAgICAnKD86KD86XFxcXGR7MSw0fSg/OjtcXFxcZHswLDR9KSopP1tcXFxcZEEtUFJaY2YtbnRxcnk9Pjx+XSkpJ1xuICBdLmpvaW4oJ3wnKTtcblxuICBjb25zdCBSR1ggPSBuZXcgUmVnRXhwKHBhdHRlcm4sICdnJyk7XG4gIHJldHVybiB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyA/IHN0ci5yZXBsYWNlKFJHWCwgJycpIDogc3RyO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgYyA9IHJlcXVpcmUoJ2tsZXVyJyk7XG5jb25zdCBmaWd1cmVzID0gcmVxdWlyZSgnLi9maWd1cmVzJyk7XG5cbi8vIHJlbmRlcmluZyB1c2VyIGlucHV0LlxuY29uc3Qgc3R5bGVzID0gT2JqZWN0LmZyZWV6ZSh7XG4gIHBhc3N3b3JkOiB7IHNjYWxlOiAxLCByZW5kZXI6IGlucHV0ID0+ICcqJy5yZXBlYXQoaW5wdXQubGVuZ3RoKSB9LFxuICBlbW9qaTogeyBzY2FsZTogMiwgcmVuZGVyOiBpbnB1dCA9PiAn8J+YgycucmVwZWF0KGlucHV0Lmxlbmd0aCkgfSxcbiAgaW52aXNpYmxlOiB7IHNjYWxlOiAwLCByZW5kZXI6IGlucHV0ID0+ICcnIH0sXG4gIGRlZmF1bHQ6IHsgc2NhbGU6IDEsIHJlbmRlcjogaW5wdXQgPT4gYCR7aW5wdXR9YCB9XG59KTtcbmNvbnN0IHJlbmRlciA9IHR5cGUgPT4gc3R5bGVzW3R5cGVdIHx8IHN0eWxlcy5kZWZhdWx0O1xuXG4vLyBpY29uIHRvIHNpZ25hbGl6ZSBhIHByb21wdC5cbmNvbnN0IHN5bWJvbHMgPSBPYmplY3QuZnJlZXplKHtcbiAgYWJvcnRlZDogYy5yZWQoZmlndXJlcy5jcm9zcyksXG4gIGRvbmU6IGMuZ3JlZW4oZmlndXJlcy50aWNrKSxcbiAgZXhpdGVkOiBjLnllbGxvdyhmaWd1cmVzLmNyb3NzKSxcbiAgZGVmYXVsdDogYy5jeWFuKCc/Jylcbn0pO1xuXG5jb25zdCBzeW1ib2wgPSAoZG9uZSwgYWJvcnRlZCwgZXhpdGVkKSA9PlxuICBhYm9ydGVkID8gc3ltYm9scy5hYm9ydGVkIDogZXhpdGVkID8gc3ltYm9scy5leGl0ZWQgOiBkb25lID8gc3ltYm9scy5kb25lIDogc3ltYm9scy5kZWZhdWx0O1xuXG4vLyBiZXR3ZWVuIHRoZSBxdWVzdGlvbiBhbmQgdGhlIHVzZXIncyBpbnB1dC5cbmNvbnN0IGRlbGltaXRlciA9IGNvbXBsZXRpbmcgPT5cbiAgYy5ncmF5KGNvbXBsZXRpbmcgPyBmaWd1cmVzLmVsbGlwc2lzIDogZmlndXJlcy5wb2ludGVyU21hbGwpO1xuXG5jb25zdCBpdGVtID0gKGV4cGFuZGFibGUsIGV4cGFuZGVkKSA9PlxuICBjLmdyYXkoZXhwYW5kYWJsZSA/IChleHBhbmRlZCA/IGZpZ3VyZXMucG9pbnRlclNtYWxsIDogJysnKSA6IGZpZ3VyZXMubGluZSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzdHlsZXMsXG4gIHJlbmRlcixcbiAgc3ltYm9scyxcbiAgc3ltYm9sLFxuICBkZWxpbWl0ZXIsXG4gIGl0ZW1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG1zZyBUaGUgbWVzc2FnZSB0byB3cmFwXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0c1xuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBbb3B0cy5tYXJnaW5dIExlZnQgbWFyZ2luXG4gKiBAcGFyYW0ge251bWJlcn0gb3B0cy53aWR0aCBNYXhpbXVtIGNoYXJhY3RlcnMgcGVyIGxpbmUgaW5jbHVkaW5nIHRoZSBtYXJnaW5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSAobXNnLCBvcHRzID0ge30pID0+IHtcbiAgY29uc3QgdGFiID0gTnVtYmVyLmlzU2FmZUludGVnZXIocGFyc2VJbnQob3B0cy5tYXJnaW4pKVxuICAgID8gbmV3IEFycmF5KHBhcnNlSW50KG9wdHMubWFyZ2luKSkuZmlsbCgnICcpLmpvaW4oJycpXG4gICAgOiAob3B0cy5tYXJnaW4gfHwgJycpO1xuXG4gIGNvbnN0IHdpZHRoID0gb3B0cy53aWR0aDtcblxuICByZXR1cm4gKG1zZyB8fCAnJykuc3BsaXQoL1xccj9cXG4vZylcbiAgICAubWFwKGxpbmUgPT4gbGluZVxuICAgICAgLnNwbGl0KC9cXHMrL2cpXG4gICAgICAucmVkdWNlKChhcnIsIHcpID0+IHtcbiAgICAgICAgaWYgKHcubGVuZ3RoICsgdGFiLmxlbmd0aCA+PSB3aWR0aCB8fCBhcnJbYXJyLmxlbmd0aCAtIDFdLmxlbmd0aCArIHcubGVuZ3RoICsgMSA8IHdpZHRoKVxuICAgICAgICAgIGFyclthcnIubGVuZ3RoIC0gMV0gKz0gYCAke3d9YDtcbiAgICAgICAgZWxzZSBhcnIucHVzaChgJHt0YWJ9JHt3fWApO1xuICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgfSwgWyB0YWIgXSlcbiAgICAgIC5qb2luKCdcXG4nKSlcbiAgICAuam9pbignXFxuJyk7XG59O1xuIiwidmFyIG9uY2UgPSByZXF1aXJlKCdvbmNlJylcbnZhciBlb3MgPSByZXF1aXJlKCdlbmQtb2Ytc3RyZWFtJylcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJykgLy8gd2Ugb25seSBuZWVkIGZzIHRvIGdldCB0aGUgUmVhZFN0cmVhbSBhbmQgV3JpdGVTdHJlYW0gcHJvdG90eXBlc1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHt9XG52YXIgYW5jaWVudCA9IC9edj9cXC4wLy50ZXN0KHByb2Nlc3MudmVyc2lvbilcblxudmFyIGlzRm4gPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJ1xufVxuXG52YXIgaXNGUyA9IGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgaWYgKCFhbmNpZW50KSByZXR1cm4gZmFsc2UgLy8gbmV3ZXIgbm9kZSB2ZXJzaW9uIGRvIG5vdCBuZWVkIHRvIGNhcmUgYWJvdXQgZnMgaXMgYSBzcGVjaWFsIHdheVxuICBpZiAoIWZzKSByZXR1cm4gZmFsc2UgLy8gYnJvd3NlclxuICByZXR1cm4gKHN0cmVhbSBpbnN0YW5jZW9mIChmcy5SZWFkU3RyZWFtIHx8IG5vb3ApIHx8IHN0cmVhbSBpbnN0YW5jZW9mIChmcy5Xcml0ZVN0cmVhbSB8fCBub29wKSkgJiYgaXNGbihzdHJlYW0uY2xvc2UpXG59XG5cbnZhciBpc1JlcXVlc3QgPSBmdW5jdGlvbiAoc3RyZWFtKSB7XG4gIHJldHVybiBzdHJlYW0uc2V0SGVhZGVyICYmIGlzRm4oc3RyZWFtLmFib3J0KVxufVxuXG52YXIgZGVzdHJveWVyID0gZnVuY3Rpb24gKHN0cmVhbSwgcmVhZGluZywgd3JpdGluZywgY2FsbGJhY2spIHtcbiAgY2FsbGJhY2sgPSBvbmNlKGNhbGxiYWNrKVxuXG4gIHZhciBjbG9zZWQgPSBmYWxzZVxuICBzdHJlYW0ub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgIGNsb3NlZCA9IHRydWVcbiAgfSlcblxuICBlb3Moc3RyZWFtLCB7cmVhZGFibGU6IHJlYWRpbmcsIHdyaXRhYmxlOiB3cml0aW5nfSwgZnVuY3Rpb24gKGVycikge1xuICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpXG4gICAgY2xvc2VkID0gdHJ1ZVxuICAgIGNhbGxiYWNrKClcbiAgfSlcblxuICB2YXIgZGVzdHJveWVkID0gZmFsc2VcbiAgcmV0dXJuIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoY2xvc2VkKSByZXR1cm5cbiAgICBpZiAoZGVzdHJveWVkKSByZXR1cm5cbiAgICBkZXN0cm95ZWQgPSB0cnVlXG5cbiAgICBpZiAoaXNGUyhzdHJlYW0pKSByZXR1cm4gc3RyZWFtLmNsb3NlKG5vb3ApIC8vIHVzZSBjbG9zZSBmb3IgZnMgc3RyZWFtcyB0byBhdm9pZCBmZCBsZWFrc1xuICAgIGlmIChpc1JlcXVlc3Qoc3RyZWFtKSkgcmV0dXJuIHN0cmVhbS5hYm9ydCgpIC8vIHJlcXVlc3QuZGVzdHJveSBqdXN0IGRvIC5lbmQgLSAuYWJvcnQgaXMgd2hhdCB3ZSB3YW50XG5cbiAgICBpZiAoaXNGbihzdHJlYW0uZGVzdHJveSkpIHJldHVybiBzdHJlYW0uZGVzdHJveSgpXG5cbiAgICBjYWxsYmFjayhlcnIgfHwgbmV3IEVycm9yKCdzdHJlYW0gd2FzIGRlc3Ryb3llZCcpKVxuICB9XG59XG5cbnZhciBjYWxsID0gZnVuY3Rpb24gKGZuKSB7XG4gIGZuKClcbn1cblxudmFyIHBpcGUgPSBmdW5jdGlvbiAoZnJvbSwgdG8pIHtcbiAgcmV0dXJuIGZyb20ucGlwZSh0bylcbn1cblxudmFyIHB1bXAgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdHJlYW1zID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKVxuICB2YXIgY2FsbGJhY2sgPSBpc0ZuKHN0cmVhbXNbc3RyZWFtcy5sZW5ndGggLSAxXSB8fCBub29wKSAmJiBzdHJlYW1zLnBvcCgpIHx8IG5vb3BcblxuICBpZiAoQXJyYXkuaXNBcnJheShzdHJlYW1zWzBdKSkgc3RyZWFtcyA9IHN0cmVhbXNbMF1cbiAgaWYgKHN0cmVhbXMubGVuZ3RoIDwgMikgdGhyb3cgbmV3IEVycm9yKCdwdW1wIHJlcXVpcmVzIHR3byBzdHJlYW1zIHBlciBtaW5pbXVtJylcblxuICB2YXIgZXJyb3JcbiAgdmFyIGRlc3Ryb3lzID0gc3RyZWFtcy5tYXAoZnVuY3Rpb24gKHN0cmVhbSwgaSkge1xuICAgIHZhciByZWFkaW5nID0gaSA8IHN0cmVhbXMubGVuZ3RoIC0gMVxuICAgIHZhciB3cml0aW5nID0gaSA+IDBcbiAgICByZXR1cm4gZGVzdHJveWVyKHN0cmVhbSwgcmVhZGluZywgd3JpdGluZywgZnVuY3Rpb24gKGVycikge1xuICAgICAgaWYgKCFlcnJvcikgZXJyb3IgPSBlcnJcbiAgICAgIGlmIChlcnIpIGRlc3Ryb3lzLmZvckVhY2goY2FsbClcbiAgICAgIGlmIChyZWFkaW5nKSByZXR1cm5cbiAgICAgIGRlc3Ryb3lzLmZvckVhY2goY2FsbClcbiAgICAgIGNhbGxiYWNrKGVycm9yKVxuICAgIH0pXG4gIH0pXG5cbiAgcmV0dXJuIHN0cmVhbXMucmVkdWNlKHBpcGUpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gcHVtcFxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jbGFzcyBRdWlja0xSVSB7XG5cdGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuXHRcdGlmICghKG9wdGlvbnMubWF4U2l6ZSAmJiBvcHRpb25zLm1heFNpemUgPiAwKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignYG1heFNpemVgIG11c3QgYmUgYSBudW1iZXIgZ3JlYXRlciB0aGFuIDAnKTtcblx0XHR9XG5cblx0XHR0aGlzLm1heFNpemUgPSBvcHRpb25zLm1heFNpemU7XG5cdFx0dGhpcy5vbkV2aWN0aW9uID0gb3B0aW9ucy5vbkV2aWN0aW9uO1xuXHRcdHRoaXMuY2FjaGUgPSBuZXcgTWFwKCk7XG5cdFx0dGhpcy5vbGRDYWNoZSA9IG5ldyBNYXAoKTtcblx0XHR0aGlzLl9zaXplID0gMDtcblx0fVxuXG5cdF9zZXQoa2V5LCB2YWx1ZSkge1xuXHRcdHRoaXMuY2FjaGUuc2V0KGtleSwgdmFsdWUpO1xuXHRcdHRoaXMuX3NpemUrKztcblxuXHRcdGlmICh0aGlzLl9zaXplID49IHRoaXMubWF4U2l6ZSkge1xuXHRcdFx0dGhpcy5fc2l6ZSA9IDA7XG5cblx0XHRcdGlmICh0eXBlb2YgdGhpcy5vbkV2aWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHRoaXMub2xkQ2FjaGUuZW50cmllcygpKSB7XG5cdFx0XHRcdFx0dGhpcy5vbkV2aWN0aW9uKGtleSwgdmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMub2xkQ2FjaGUgPSB0aGlzLmNhY2hlO1xuXHRcdFx0dGhpcy5jYWNoZSA9IG5ldyBNYXAoKTtcblx0XHR9XG5cdH1cblxuXHRnZXQoa2V5KSB7XG5cdFx0aWYgKHRoaXMuY2FjaGUuaGFzKGtleSkpIHtcblx0XHRcdHJldHVybiB0aGlzLmNhY2hlLmdldChrZXkpO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLm9sZENhY2hlLmhhcyhrZXkpKSB7XG5cdFx0XHRjb25zdCB2YWx1ZSA9IHRoaXMub2xkQ2FjaGUuZ2V0KGtleSk7XG5cdFx0XHR0aGlzLm9sZENhY2hlLmRlbGV0ZShrZXkpO1xuXHRcdFx0dGhpcy5fc2V0KGtleSwgdmFsdWUpO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblx0fVxuXG5cdHNldChrZXksIHZhbHVlKSB7XG5cdFx0aWYgKHRoaXMuY2FjaGUuaGFzKGtleSkpIHtcblx0XHRcdHRoaXMuY2FjaGUuc2V0KGtleSwgdmFsdWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9zZXQoa2V5LCB2YWx1ZSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRoYXMoa2V5KSB7XG5cdFx0cmV0dXJuIHRoaXMuY2FjaGUuaGFzKGtleSkgfHwgdGhpcy5vbGRDYWNoZS5oYXMoa2V5KTtcblx0fVxuXG5cdHBlZWsoa2V5KSB7XG5cdFx0aWYgKHRoaXMuY2FjaGUuaGFzKGtleSkpIHtcblx0XHRcdHJldHVybiB0aGlzLmNhY2hlLmdldChrZXkpO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLm9sZENhY2hlLmhhcyhrZXkpKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vbGRDYWNoZS5nZXQoa2V5KTtcblx0XHR9XG5cdH1cblxuXHRkZWxldGUoa2V5KSB7XG5cdFx0Y29uc3QgZGVsZXRlZCA9IHRoaXMuY2FjaGUuZGVsZXRlKGtleSk7XG5cdFx0aWYgKGRlbGV0ZWQpIHtcblx0XHRcdHRoaXMuX3NpemUtLTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5vbGRDYWNoZS5kZWxldGUoa2V5KSB8fCBkZWxldGVkO1xuXHR9XG5cblx0Y2xlYXIoKSB7XG5cdFx0dGhpcy5jYWNoZS5jbGVhcigpO1xuXHRcdHRoaXMub2xkQ2FjaGUuY2xlYXIoKTtcblx0XHR0aGlzLl9zaXplID0gMDtcblx0fVxuXG5cdCoga2V5cygpIHtcblx0XHRmb3IgKGNvbnN0IFtrZXldIG9mIHRoaXMpIHtcblx0XHRcdHlpZWxkIGtleTtcblx0XHR9XG5cdH1cblxuXHQqIHZhbHVlcygpIHtcblx0XHRmb3IgKGNvbnN0IFssIHZhbHVlXSBvZiB0aGlzKSB7XG5cdFx0XHR5aWVsZCB2YWx1ZTtcblx0XHR9XG5cdH1cblxuXHQqIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuXHRcdGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLmNhY2hlKSB7XG5cdFx0XHR5aWVsZCBpdGVtO1xuXHRcdH1cblxuXHRcdGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLm9sZENhY2hlKSB7XG5cdFx0XHRjb25zdCBba2V5XSA9IGl0ZW07XG5cdFx0XHRpZiAoIXRoaXMuY2FjaGUuaGFzKGtleSkpIHtcblx0XHRcdFx0eWllbGQgaXRlbTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRnZXQgc2l6ZSgpIHtcblx0XHRsZXQgb2xkQ2FjaGVTaXplID0gMDtcblx0XHRmb3IgKGNvbnN0IGtleSBvZiB0aGlzLm9sZENhY2hlLmtleXMoKSkge1xuXHRcdFx0aWYgKCF0aGlzLmNhY2hlLmhhcyhrZXkpKSB7XG5cdFx0XHRcdG9sZENhY2hlU2l6ZSsrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBNYXRoLm1pbih0aGlzLl9zaXplICsgb2xkQ2FjaGVTaXplLCB0aGlzLm1heFNpemUpO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUXVpY2tMUlU7XG4iLCIndXNlIHN0cmljdCc7XG5jb25zdCB0bHMgPSByZXF1aXJlKCd0bHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAob3B0aW9ucyA9IHt9KSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdGNvbnN0IHNvY2tldCA9IHRscy5jb25uZWN0KG9wdGlvbnMsICgpID0+IHtcblx0XHRpZiAob3B0aW9ucy5yZXNvbHZlU29ja2V0KSB7XG5cdFx0XHRzb2NrZXQub2ZmKCdlcnJvcicsIHJlamVjdCk7XG5cdFx0XHRyZXNvbHZlKHthbHBuUHJvdG9jb2w6IHNvY2tldC5hbHBuUHJvdG9jb2wsIHNvY2tldH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzb2NrZXQuZGVzdHJveSgpO1xuXHRcdFx0cmVzb2x2ZSh7YWxwblByb3RvY29sOiBzb2NrZXQuYWxwblByb3RvY29sfSk7XG5cdFx0fVxuXHR9KTtcblxuXHRzb2NrZXQub24oJ2Vycm9yJywgcmVqZWN0KTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBSZWFkYWJsZSA9IHJlcXVpcmUoJ3N0cmVhbScpLlJlYWRhYmxlO1xuY29uc3QgbG93ZXJjYXNlS2V5cyA9IHJlcXVpcmUoJ2xvd2VyY2FzZS1rZXlzJyk7XG5cbmNsYXNzIFJlc3BvbnNlIGV4dGVuZHMgUmVhZGFibGUge1xuXHRjb25zdHJ1Y3RvcihzdGF0dXNDb2RlLCBoZWFkZXJzLCBib2R5LCB1cmwpIHtcblx0XHRpZiAodHlwZW9mIHN0YXR1c0NvZGUgIT09ICdudW1iZXInKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBgc3RhdHVzQ29kZWAgc2hvdWxkIGJlIGEgbnVtYmVyJyk7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgaGVhZGVycyAhPT0gJ29iamVjdCcpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IGBoZWFkZXJzYCBzaG91bGQgYmUgYW4gb2JqZWN0Jyk7XG5cdFx0fVxuXHRcdGlmICghKGJvZHkgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBgYm9keWAgc2hvdWxkIGJlIGEgYnVmZmVyJyk7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgdXJsICE9PSAnc3RyaW5nJykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgYHVybGAgc2hvdWxkIGJlIGEgc3RyaW5nJyk7XG5cdFx0fVxuXG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xuXHRcdHRoaXMuaGVhZGVycyA9IGxvd2VyY2FzZUtleXMoaGVhZGVycyk7XG5cdFx0dGhpcy5ib2R5ID0gYm9keTtcblx0XHR0aGlzLnVybCA9IHVybDtcblx0fVxuXG5cdF9yZWFkKCkge1xuXHRcdHRoaXMucHVzaCh0aGlzLmJvZHkpO1xuXHRcdHRoaXMucHVzaChudWxsKTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlc3BvbnNlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBFU0MgPSAnXFx4MUInO1xuY29uc3QgQ1NJID0gYCR7RVNDfVtgO1xuY29uc3QgYmVlcCA9ICdcXHUwMDA3JztcblxuY29uc3QgY3Vyc29yID0ge1xuICB0byh4LCB5KSB7XG4gICAgaWYgKCF5KSByZXR1cm4gYCR7Q1NJfSR7eCArIDF9R2A7XG4gICAgcmV0dXJuIGAke0NTSX0ke3kgKyAxfTske3ggKyAxfUhgO1xuICB9LFxuICBtb3ZlKHgsIHkpIHtcbiAgICBsZXQgcmV0ID0gJyc7XG5cbiAgICBpZiAoeCA8IDApIHJldCArPSBgJHtDU0l9JHsteH1EYDtcbiAgICBlbHNlIGlmICh4ID4gMCkgcmV0ICs9IGAke0NTSX0ke3h9Q2A7XG5cbiAgICBpZiAoeSA8IDApIHJldCArPSBgJHtDU0l9JHsteX1BYDtcbiAgICBlbHNlIGlmICh5ID4gMCkgcmV0ICs9IGAke0NTSX0ke3l9QmA7XG5cbiAgICByZXR1cm4gcmV0O1xuICB9LFxuICB1cDogKGNvdW50ID0gMSkgPT4gYCR7Q1NJfSR7Y291bnR9QWAsXG4gIGRvd246IChjb3VudCA9IDEpID0+IGAke0NTSX0ke2NvdW50fUJgLFxuICBmb3J3YXJkOiAoY291bnQgPSAxKSA9PiBgJHtDU0l9JHtjb3VudH1DYCxcbiAgYmFja3dhcmQ6IChjb3VudCA9IDEpID0+IGAke0NTSX0ke2NvdW50fURgLFxuICBuZXh0TGluZTogKGNvdW50ID0gMSkgPT4gYCR7Q1NJfUVgLnJlcGVhdChjb3VudCksXG4gIHByZXZMaW5lOiAoY291bnQgPSAxKSA9PiBgJHtDU0l9RmAucmVwZWF0KGNvdW50KSxcbiAgbGVmdDogYCR7Q1NJfUdgLFxuICBoaWRlOiBgJHtDU0l9PzI1bGAsXG4gIHNob3c6IGAke0NTSX0/MjVoYCxcbiAgc2F2ZTogYCR7RVNDfTdgLFxuICByZXN0b3JlOiBgJHtFU0N9OGBcbn1cblxuY29uc3Qgc2Nyb2xsID0ge1xuICB1cDogKGNvdW50ID0gMSkgPT4gYCR7Q1NJfVNgLnJlcGVhdChjb3VudCksXG4gIGRvd246IChjb3VudCA9IDEpID0+IGAke0NTSX1UYC5yZXBlYXQoY291bnQpXG59XG5cbmNvbnN0IGVyYXNlID0ge1xuICBzY3JlZW46IGAke0NTSX0ySmAsXG4gIHVwOiAoY291bnQgPSAxKSA9PiBgJHtDU0l9MUpgLnJlcGVhdChjb3VudCksXG4gIGRvd246IChjb3VudCA9IDEpID0+IGAke0NTSX1KYC5yZXBlYXQoY291bnQpLFxuICBsaW5lOiBgJHtDU0l9MktgLFxuICBsaW5lRW5kOiBgJHtDU0l9S2AsXG4gIGxpbmVTdGFydDogYCR7Q1NJfTFLYCxcbiAgbGluZXMoY291bnQpIHtcbiAgICBsZXQgY2xlYXIgPSAnJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspXG4gICAgICBjbGVhciArPSB0aGlzLmxpbmUgKyAoaSA8IGNvdW50IC0gMSA/IGN1cnNvci51cCgpIDogJycpO1xuICAgIGlmIChjb3VudClcbiAgICAgIGNsZWFyICs9IGN1cnNvci5sZWZ0O1xuICAgIHJldHVybiBjbGVhcjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgY3Vyc29yLCBzY3JvbGwsIGVyYXNlLCBiZWVwIH07XG4iLCIvLyBSZXR1cm5zIGEgd3JhcHBlciBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSB3cmFwcGVkIGNhbGxiYWNrXG4vLyBUaGUgd3JhcHBlciBmdW5jdGlvbiBzaG91bGQgZG8gc29tZSBzdHVmZiwgYW5kIHJldHVybiBhXG4vLyBwcmVzdW1hYmx5IGRpZmZlcmVudCBjYWxsYmFjayBmdW5jdGlvbi5cbi8vIFRoaXMgbWFrZXMgc3VyZSB0aGF0IG93biBwcm9wZXJ0aWVzIGFyZSByZXRhaW5lZCwgc28gdGhhdFxuLy8gZGVjb3JhdGlvbnMgYW5kIHN1Y2ggYXJlIG5vdCBsb3N0IGFsb25nIHRoZSB3YXkuXG5tb2R1bGUuZXhwb3J0cyA9IHdyYXBweVxuZnVuY3Rpb24gd3JhcHB5IChmbiwgY2IpIHtcbiAgaWYgKGZuICYmIGNiKSByZXR1cm4gd3JhcHB5KGZuKShjYilcblxuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ25lZWQgd3JhcHBlciBmdW5jdGlvbicpXG5cbiAgT2JqZWN0LmtleXMoZm4pLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICB3cmFwcGVyW2tdID0gZm5ba11cbiAgfSlcblxuICByZXR1cm4gd3JhcHBlclxuXG4gIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV1cbiAgICB9XG4gICAgdmFyIHJldCA9IGZuLmFwcGx5KHRoaXMsIGFyZ3MpXG4gICAgdmFyIGNiID0gYXJnc1thcmdzLmxlbmd0aC0xXVxuICAgIGlmICh0eXBlb2YgcmV0ID09PSAnZnVuY3Rpb24nICYmIHJldCAhPT0gY2IpIHtcbiAgICAgIE9iamVjdC5rZXlzKGNiKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICAgIHJldFtrXSA9IGNiW2tdXG4gICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gcmV0XG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImJ1ZmZlclwiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZG5zXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJldmVudHNcIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImZzXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJodHRwXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJodHRwMlwiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiaHR0cHNcIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5ldFwiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwib3NcIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInBhdGhcIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlYWRsaW5lXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJzdHJlYW1cIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInRsc1wiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwidXJsXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ1dGlsXCIpOzsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ6bGliXCIpOzsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG5cdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IG1vZHVsZVsnZGVmYXVsdCddIDpcblx0XHQoKSA9PiBtb2R1bGU7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSIsImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cyc7XG5cbmZ1bmN0aW9uIHRvQXJyKGFueSkge1xuXHRyZXR1cm4gYW55ID09IG51bGwgPyBbXSA6IEFycmF5LmlzQXJyYXkoYW55KSA/IGFueSA6IFthbnldO1xufVxuXG5mdW5jdGlvbiB0b1ZhbChvdXQsIGtleSwgdmFsLCBvcHRzKSB7XG5cdHZhciB4LCBvbGQ9b3V0W2tleV0sIG54dD0oXG5cdFx0ISF+b3B0cy5zdHJpbmcuaW5kZXhPZihrZXkpID8gKHZhbCA9PSBudWxsIHx8IHZhbCA9PT0gdHJ1ZSA/ICcnIDogU3RyaW5nKHZhbCkpXG5cdFx0OiB0eXBlb2YgdmFsID09PSAnYm9vbGVhbicgPyB2YWxcblx0XHQ6ICEhfm9wdHMuYm9vbGVhbi5pbmRleE9mKGtleSkgPyAodmFsID09PSAnZmFsc2UnID8gZmFsc2UgOiB2YWwgPT09ICd0cnVlJyB8fCAob3V0Ll8ucHVzaCgoeCA9ICt2YWwseCAqIDAgPT09IDApID8geCA6IHZhbCksISF2YWwpKVxuXHRcdDogKHggPSArdmFsLHggKiAwID09PSAwKSA/IHggOiB2YWxcblx0KTtcblx0b3V0W2tleV0gPSBvbGQgPT0gbnVsbCA/IG54dCA6IChBcnJheS5pc0FycmF5KG9sZCkgPyBvbGQuY29uY2F0KG54dCkgOiBbb2xkLCBueHRdKTtcbn1cblxuZnVuY3Rpb24gbXJpMiAoYXJncywgb3B0cykge1xuXHRhcmdzID0gYXJncyB8fCBbXTtcblx0b3B0cyA9IG9wdHMgfHwge307XG5cblx0dmFyIGssIGFyciwgYXJnLCBuYW1lLCB2YWwsIG91dD17IF86W10gfTtcblx0dmFyIGk9MCwgaj0wLCBpZHg9MCwgbGVuPWFyZ3MubGVuZ3RoO1xuXG5cdGNvbnN0IGFsaWJpID0gb3B0cy5hbGlhcyAhPT0gdm9pZCAwO1xuXHRjb25zdCBzdHJpY3QgPSBvcHRzLnVua25vd24gIT09IHZvaWQgMDtcblx0Y29uc3QgZGVmYXVsdHMgPSBvcHRzLmRlZmF1bHQgIT09IHZvaWQgMDtcblxuXHRvcHRzLmFsaWFzID0gb3B0cy5hbGlhcyB8fCB7fTtcblx0b3B0cy5zdHJpbmcgPSB0b0FycihvcHRzLnN0cmluZyk7XG5cdG9wdHMuYm9vbGVhbiA9IHRvQXJyKG9wdHMuYm9vbGVhbik7XG5cblx0aWYgKGFsaWJpKSB7XG5cdFx0Zm9yIChrIGluIG9wdHMuYWxpYXMpIHtcblx0XHRcdGFyciA9IG9wdHMuYWxpYXNba10gPSB0b0FycihvcHRzLmFsaWFzW2tdKTtcblx0XHRcdGZvciAoaT0wOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdChvcHRzLmFsaWFzW2FycltpXV0gPSBhcnIuY29uY2F0KGspKS5zcGxpY2UoaSwgMSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Zm9yIChpPW9wdHMuYm9vbGVhbi5sZW5ndGg7IGktLSA+IDA7KSB7XG5cdFx0YXJyID0gb3B0cy5hbGlhc1tvcHRzLmJvb2xlYW5baV1dIHx8IFtdO1xuXHRcdGZvciAoaj1hcnIubGVuZ3RoOyBqLS0gPiAwOykgb3B0cy5ib29sZWFuLnB1c2goYXJyW2pdKTtcblx0fVxuXG5cdGZvciAoaT1vcHRzLnN0cmluZy5sZW5ndGg7IGktLSA+IDA7KSB7XG5cdFx0YXJyID0gb3B0cy5hbGlhc1tvcHRzLnN0cmluZ1tpXV0gfHwgW107XG5cdFx0Zm9yIChqPWFyci5sZW5ndGg7IGotLSA+IDA7KSBvcHRzLnN0cmluZy5wdXNoKGFycltqXSk7XG5cdH1cblxuXHRpZiAoZGVmYXVsdHMpIHtcblx0XHRmb3IgKGsgaW4gb3B0cy5kZWZhdWx0KSB7XG5cdFx0XHRuYW1lID0gdHlwZW9mIG9wdHMuZGVmYXVsdFtrXTtcblx0XHRcdGFyciA9IG9wdHMuYWxpYXNba10gPSBvcHRzLmFsaWFzW2tdIHx8IFtdO1xuXHRcdFx0aWYgKG9wdHNbbmFtZV0gIT09IHZvaWQgMCkge1xuXHRcdFx0XHRvcHRzW25hbWVdLnB1c2goayk7XG5cdFx0XHRcdGZvciAoaT0wOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0b3B0c1tuYW1lXS5wdXNoKGFycltpXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRjb25zdCBrZXlzID0gc3RyaWN0ID8gT2JqZWN0LmtleXMob3B0cy5hbGlhcykgOiBbXTtcblxuXHRmb3IgKGk9MDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0YXJnID0gYXJnc1tpXTtcblxuXHRcdGlmIChhcmcgPT09ICctLScpIHtcblx0XHRcdG91dC5fID0gb3V0Ll8uY29uY2F0KGFyZ3Muc2xpY2UoKytpKSk7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cblx0XHRmb3IgKGo9MDsgaiA8IGFyZy5sZW5ndGg7IGorKykge1xuXHRcdFx0aWYgKGFyZy5jaGFyQ29kZUF0KGopICE9PSA0NSkgYnJlYWs7IC8vIFwiLVwiXG5cdFx0fVxuXG5cdFx0aWYgKGogPT09IDApIHtcblx0XHRcdG91dC5fLnB1c2goYXJnKTtcblx0XHR9IGVsc2UgaWYgKGFyZy5zdWJzdHJpbmcoaiwgaiArIDMpID09PSAnbm8tJykge1xuXHRcdFx0bmFtZSA9IGFyZy5zdWJzdHJpbmcoaiArIDMpO1xuXHRcdFx0aWYgKHN0cmljdCAmJiAhfmtleXMuaW5kZXhPZihuYW1lKSkge1xuXHRcdFx0XHRyZXR1cm4gb3B0cy51bmtub3duKGFyZyk7XG5cdFx0XHR9XG5cdFx0XHRvdXRbbmFtZV0gPSBmYWxzZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yIChpZHg9aisxOyBpZHggPCBhcmcubGVuZ3RoOyBpZHgrKykge1xuXHRcdFx0XHRpZiAoYXJnLmNoYXJDb2RlQXQoaWR4KSA9PT0gNjEpIGJyZWFrOyAvLyBcIj1cIlxuXHRcdFx0fVxuXG5cdFx0XHRuYW1lID0gYXJnLnN1YnN0cmluZyhqLCBpZHgpO1xuXHRcdFx0dmFsID0gYXJnLnN1YnN0cmluZygrK2lkeCkgfHwgKGkrMSA9PT0gbGVuIHx8ICgnJythcmdzW2krMV0pLmNoYXJDb2RlQXQoMCkgPT09IDQ1IHx8IGFyZ3NbKytpXSk7XG5cdFx0XHRhcnIgPSAoaiA9PT0gMiA/IFtuYW1lXSA6IG5hbWUpO1xuXG5cdFx0XHRmb3IgKGlkeD0wOyBpZHggPCBhcnIubGVuZ3RoOyBpZHgrKykge1xuXHRcdFx0XHRuYW1lID0gYXJyW2lkeF07XG5cdFx0XHRcdGlmIChzdHJpY3QgJiYgIX5rZXlzLmluZGV4T2YobmFtZSkpIHJldHVybiBvcHRzLnVua25vd24oJy0nLnJlcGVhdChqKSArIG5hbWUpO1xuXHRcdFx0XHR0b1ZhbChvdXQsIG5hbWUsIChpZHggKyAxIDwgYXJyLmxlbmd0aCkgfHwgdmFsLCBvcHRzKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoZGVmYXVsdHMpIHtcblx0XHRmb3IgKGsgaW4gb3B0cy5kZWZhdWx0KSB7XG5cdFx0XHRpZiAob3V0W2tdID09PSB2b2lkIDApIHtcblx0XHRcdFx0b3V0W2tdID0gb3B0cy5kZWZhdWx0W2tdO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmIChhbGliaSkge1xuXHRcdGZvciAoayBpbiBvdXQpIHtcblx0XHRcdGFyciA9IG9wdHMuYWxpYXNba10gfHwgW107XG5cdFx0XHR3aGlsZSAoYXJyLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0b3V0W2Fyci5zaGlmdCgpXSA9IG91dFtrXTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gb3V0O1xufVxuXG5jb25zdCByZW1vdmVCcmFja2V0cyA9ICh2KSA9PiB2LnJlcGxhY2UoL1s8W10uKy8sIFwiXCIpLnRyaW0oKTtcbmNvbnN0IGZpbmRBbGxCcmFja2V0cyA9ICh2KSA9PiB7XG4gIGNvbnN0IEFOR0xFRF9CUkFDS0VUX1JFX0dMT0JBTCA9IC88KFtePl0rKT4vZztcbiAgY29uc3QgU1FVQVJFX0JSQUNLRVRfUkVfR0xPQkFMID0gL1xcWyhbXlxcXV0rKVxcXS9nO1xuICBjb25zdCByZXMgPSBbXTtcbiAgY29uc3QgcGFyc2UgPSAobWF0Y2gpID0+IHtcbiAgICBsZXQgdmFyaWFkaWMgPSBmYWxzZTtcbiAgICBsZXQgdmFsdWUgPSBtYXRjaFsxXTtcbiAgICBpZiAodmFsdWUuc3RhcnRzV2l0aChcIi4uLlwiKSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgzKTtcbiAgICAgIHZhcmlhZGljID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlcXVpcmVkOiBtYXRjaFswXS5zdGFydHNXaXRoKFwiPFwiKSxcbiAgICAgIHZhbHVlLFxuICAgICAgdmFyaWFkaWNcbiAgICB9O1xuICB9O1xuICBsZXQgYW5nbGVkTWF0Y2g7XG4gIHdoaWxlIChhbmdsZWRNYXRjaCA9IEFOR0xFRF9CUkFDS0VUX1JFX0dMT0JBTC5leGVjKHYpKSB7XG4gICAgcmVzLnB1c2gocGFyc2UoYW5nbGVkTWF0Y2gpKTtcbiAgfVxuICBsZXQgc3F1YXJlTWF0Y2g7XG4gIHdoaWxlIChzcXVhcmVNYXRjaCA9IFNRVUFSRV9CUkFDS0VUX1JFX0dMT0JBTC5leGVjKHYpKSB7XG4gICAgcmVzLnB1c2gocGFyc2Uoc3F1YXJlTWF0Y2gpKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufTtcbmNvbnN0IGdldE1yaU9wdGlvbnMgPSAob3B0aW9ucykgPT4ge1xuICBjb25zdCByZXN1bHQgPSB7YWxpYXM6IHt9LCBib29sZWFuOiBbXX07XG4gIGZvciAoY29uc3QgW2luZGV4LCBvcHRpb25dIG9mIG9wdGlvbnMuZW50cmllcygpKSB7XG4gICAgaWYgKG9wdGlvbi5uYW1lcy5sZW5ndGggPiAxKSB7XG4gICAgICByZXN1bHQuYWxpYXNbb3B0aW9uLm5hbWVzWzBdXSA9IG9wdGlvbi5uYW1lcy5zbGljZSgxKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbi5pc0Jvb2xlYW4pIHtcbiAgICAgIGlmIChvcHRpb24ubmVnYXRlZCkge1xuICAgICAgICBjb25zdCBoYXNTdHJpbmdUeXBlT3B0aW9uID0gb3B0aW9ucy5zb21lKChvLCBpKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGkgIT09IGluZGV4ICYmIG8ubmFtZXMuc29tZSgobmFtZSkgPT4gb3B0aW9uLm5hbWVzLmluY2x1ZGVzKG5hbWUpKSAmJiB0eXBlb2Ygby5yZXF1aXJlZCA9PT0gXCJib29sZWFuXCI7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWhhc1N0cmluZ1R5cGVPcHRpb24pIHtcbiAgICAgICAgICByZXN1bHQuYm9vbGVhbi5wdXNoKG9wdGlvbi5uYW1lc1swXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5ib29sZWFuLnB1c2gob3B0aW9uLm5hbWVzWzBdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5jb25zdCBmaW5kTG9uZ2VzdCA9IChhcnIpID0+IHtcbiAgcmV0dXJuIGFyci5zb3J0KChhLCBiKSA9PiB7XG4gICAgcmV0dXJuIGEubGVuZ3RoID4gYi5sZW5ndGggPyAtMSA6IDE7XG4gIH0pWzBdO1xufTtcbmNvbnN0IHBhZFJpZ2h0ID0gKHN0ciwgbGVuZ3RoKSA9PiB7XG4gIHJldHVybiBzdHIubGVuZ3RoID49IGxlbmd0aCA/IHN0ciA6IGAke3N0cn0ke1wiIFwiLnJlcGVhdChsZW5ndGggLSBzdHIubGVuZ3RoKX1gO1xufTtcbmNvbnN0IGNhbWVsY2FzZSA9IChpbnB1dCkgPT4ge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvKFthLXpdKS0oW2Etel0pL2csIChfLCBwMSwgcDIpID0+IHtcbiAgICByZXR1cm4gcDEgKyBwMi50b1VwcGVyQ2FzZSgpO1xuICB9KTtcbn07XG5jb25zdCBzZXREb3RQcm9wID0gKG9iaiwga2V5cywgdmFsKSA9PiB7XG4gIGxldCBpID0gMDtcbiAgbGV0IGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICBsZXQgdCA9IG9iajtcbiAgbGV0IHg7XG4gIGZvciAoOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB4ID0gdFtrZXlzW2ldXTtcbiAgICB0ID0gdFtrZXlzW2ldXSA9IGkgPT09IGxlbmd0aCAtIDEgPyB2YWwgOiB4ICE9IG51bGwgPyB4IDogISF+a2V5c1tpICsgMV0uaW5kZXhPZihcIi5cIikgfHwgISgra2V5c1tpICsgMV0gPiAtMSkgPyB7fSA6IFtdO1xuICB9XG59O1xuY29uc3Qgc2V0QnlUeXBlID0gKG9iaiwgdHJhbnNmb3JtcykgPT4ge1xuICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyh0cmFuc2Zvcm1zKSkge1xuICAgIGNvbnN0IHRyYW5zZm9ybSA9IHRyYW5zZm9ybXNba2V5XTtcbiAgICBpZiAodHJhbnNmb3JtLnNob3VsZFRyYW5zZm9ybSkge1xuICAgICAgb2JqW2tleV0gPSBBcnJheS5wcm90b3R5cGUuY29uY2F0LmNhbGwoW10sIG9ialtrZXldKTtcbiAgICAgIGlmICh0eXBlb2YgdHJhbnNmb3JtLnRyYW5zZm9ybUZ1bmN0aW9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgb2JqW2tleV0gPSBvYmpba2V5XS5tYXAodHJhbnNmb3JtLnRyYW5zZm9ybUZ1bmN0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5jb25zdCBnZXRGaWxlTmFtZSA9IChpbnB1dCkgPT4ge1xuICBjb25zdCBtID0gLyhbXlxcXFxcXC9dKykkLy5leGVjKGlucHV0KTtcbiAgcmV0dXJuIG0gPyBtWzFdIDogXCJcIjtcbn07XG5jb25zdCBjYW1lbGNhc2VPcHRpb25OYW1lID0gKG5hbWUpID0+IHtcbiAgcmV0dXJuIG5hbWUuc3BsaXQoXCIuXCIpLm1hcCgodiwgaSkgPT4ge1xuICAgIHJldHVybiBpID09PSAwID8gY2FtZWxjYXNlKHYpIDogdjtcbiAgfSkuam9pbihcIi5cIik7XG59O1xuY2xhc3MgQ0FDRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLm5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgaWYgKHR5cGVvZiBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGFjayA9IG5ldyBFcnJvcihtZXNzYWdlKS5zdGFjaztcbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgT3B0aW9uIHtcbiAgY29uc3RydWN0b3IocmF3TmFtZSwgZGVzY3JpcHRpb24sIGNvbmZpZykge1xuICAgIHRoaXMucmF3TmFtZSA9IHJhd05hbWU7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICAgIHRoaXMuY29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgY29uZmlnKTtcbiAgICByYXdOYW1lID0gcmF3TmFtZS5yZXBsYWNlKC9cXC5cXCovZywgXCJcIik7XG4gICAgdGhpcy5uZWdhdGVkID0gZmFsc2U7XG4gICAgdGhpcy5uYW1lcyA9IHJlbW92ZUJyYWNrZXRzKHJhd05hbWUpLnNwbGl0KFwiLFwiKS5tYXAoKHYpID0+IHtcbiAgICAgIGxldCBuYW1lID0gdi50cmltKCkucmVwbGFjZSgvXi17MSwyfS8sIFwiXCIpO1xuICAgICAgaWYgKG5hbWUuc3RhcnRzV2l0aChcIm5vLVwiKSkge1xuICAgICAgICB0aGlzLm5lZ2F0ZWQgPSB0cnVlO1xuICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC9ebm8tLywgXCJcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FtZWxjYXNlT3B0aW9uTmFtZShuYW1lKTtcbiAgICB9KS5zb3J0KChhLCBiKSA9PiBhLmxlbmd0aCA+IGIubGVuZ3RoID8gMSA6IC0xKTtcbiAgICB0aGlzLm5hbWUgPSB0aGlzLm5hbWVzW3RoaXMubmFtZXMubGVuZ3RoIC0gMV07XG4gICAgaWYgKHRoaXMubmVnYXRlZCkge1xuICAgICAgdGhpcy5jb25maWcuZGVmYXVsdCA9IHRydWU7XG4gICAgfVxuICAgIGlmIChyYXdOYW1lLmluY2x1ZGVzKFwiPFwiKSkge1xuICAgICAgdGhpcy5yZXF1aXJlZCA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChyYXdOYW1lLmluY2x1ZGVzKFwiW1wiKSkge1xuICAgICAgdGhpcy5yZXF1aXJlZCA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmlzQm9vbGVhbiA9IHRydWU7XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IHByb2Nlc3NBcmdzID0gcHJvY2Vzcy5hcmd2O1xuY29uc3QgcGxhdGZvcm1JbmZvID0gYCR7cHJvY2Vzcy5wbGF0Zm9ybX0tJHtwcm9jZXNzLmFyY2h9IG5vZGUtJHtwcm9jZXNzLnZlcnNpb259YDtcblxuY2xhc3MgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKHJhd05hbWUsIGRlc2NyaXB0aW9uLCBjb25maWcgPSB7fSwgY2xpKSB7XG4gICAgdGhpcy5yYXdOYW1lID0gcmF3TmFtZTtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy5jbGkgPSBjbGk7XG4gICAgdGhpcy5vcHRpb25zID0gW107XG4gICAgdGhpcy5hbGlhc05hbWVzID0gW107XG4gICAgdGhpcy5uYW1lID0gcmVtb3ZlQnJhY2tldHMocmF3TmFtZSk7XG4gICAgdGhpcy5hcmdzID0gZmluZEFsbEJyYWNrZXRzKHJhd05hbWUpO1xuICAgIHRoaXMuZXhhbXBsZXMgPSBbXTtcbiAgfVxuICB1c2FnZSh0ZXh0KSB7XG4gICAgdGhpcy51c2FnZVRleHQgPSB0ZXh0O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGFsbG93VW5rbm93bk9wdGlvbnMoKSB7XG4gICAgdGhpcy5jb25maWcuYWxsb3dVbmtub3duT3B0aW9ucyA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgaWdub3JlT3B0aW9uRGVmYXVsdFZhbHVlKCkge1xuICAgIHRoaXMuY29uZmlnLmlnbm9yZU9wdGlvbkRlZmF1bHRWYWx1ZSA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgdmVyc2lvbih2ZXJzaW9uLCBjdXN0b21GbGFncyA9IFwiLXYsIC0tdmVyc2lvblwiKSB7XG4gICAgdGhpcy52ZXJzaW9uTnVtYmVyID0gdmVyc2lvbjtcbiAgICB0aGlzLm9wdGlvbihjdXN0b21GbGFncywgXCJEaXNwbGF5IHZlcnNpb24gbnVtYmVyXCIpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGV4YW1wbGUoZXhhbXBsZSkge1xuICAgIHRoaXMuZXhhbXBsZXMucHVzaChleGFtcGxlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBvcHRpb24ocmF3TmFtZSwgZGVzY3JpcHRpb24sIGNvbmZpZykge1xuICAgIGNvbnN0IG9wdGlvbiA9IG5ldyBPcHRpb24ocmF3TmFtZSwgZGVzY3JpcHRpb24sIGNvbmZpZyk7XG4gICAgdGhpcy5vcHRpb25zLnB1c2gob3B0aW9uKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBhbGlhcyhuYW1lKSB7XG4gICAgdGhpcy5hbGlhc05hbWVzLnB1c2gobmFtZSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgYWN0aW9uKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5jb21tYW5kQWN0aW9uID0gY2FsbGJhY2s7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgaXNNYXRjaGVkKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lID09PSBuYW1lIHx8IHRoaXMuYWxpYXNOYW1lcy5pbmNsdWRlcyhuYW1lKTtcbiAgfVxuICBnZXQgaXNEZWZhdWx0Q29tbWFuZCgpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lID09PSBcIlwiIHx8IHRoaXMuYWxpYXNOYW1lcy5pbmNsdWRlcyhcIiFcIik7XG4gIH1cbiAgZ2V0IGlzR2xvYmFsQ29tbWFuZCgpIHtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIEdsb2JhbENvbW1hbmQ7XG4gIH1cbiAgaGFzT3B0aW9uKG5hbWUpIHtcbiAgICBuYW1lID0gbmFtZS5zcGxpdChcIi5cIilbMF07XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5maW5kKChvcHRpb24pID0+IHtcbiAgICAgIHJldHVybiBvcHRpb24ubmFtZXMuaW5jbHVkZXMobmFtZSk7XG4gICAgfSk7XG4gIH1cbiAgb3V0cHV0SGVscCgpIHtcbiAgICBjb25zdCB7bmFtZSwgY29tbWFuZHN9ID0gdGhpcy5jbGk7XG4gICAgY29uc3Qge1xuICAgICAgdmVyc2lvbk51bWJlcixcbiAgICAgIG9wdGlvbnM6IGdsb2JhbE9wdGlvbnMsXG4gICAgICBoZWxwQ2FsbGJhY2tcbiAgICB9ID0gdGhpcy5jbGkuZ2xvYmFsQ29tbWFuZDtcbiAgICBsZXQgc2VjdGlvbnMgPSBbXG4gICAgICB7XG4gICAgICAgIGJvZHk6IGAke25hbWV9JHt2ZXJzaW9uTnVtYmVyID8gYC8ke3ZlcnNpb25OdW1iZXJ9YCA6IFwiXCJ9YFxuICAgICAgfVxuICAgIF07XG4gICAgc2VjdGlvbnMucHVzaCh7XG4gICAgICB0aXRsZTogXCJVc2FnZVwiLFxuICAgICAgYm9keTogYCAgJCAke25hbWV9ICR7dGhpcy51c2FnZVRleHQgfHwgdGhpcy5yYXdOYW1lfWBcbiAgICB9KTtcbiAgICBjb25zdCBzaG93Q29tbWFuZHMgPSAodGhpcy5pc0dsb2JhbENvbW1hbmQgfHwgdGhpcy5pc0RlZmF1bHRDb21tYW5kKSAmJiBjb21tYW5kcy5sZW5ndGggPiAwO1xuICAgIGlmIChzaG93Q29tbWFuZHMpIHtcbiAgICAgIGNvbnN0IGxvbmdlc3RDb21tYW5kTmFtZSA9IGZpbmRMb25nZXN0KGNvbW1hbmRzLm1hcCgoY29tbWFuZCkgPT4gY29tbWFuZC5yYXdOYW1lKSk7XG4gICAgICBzZWN0aW9ucy5wdXNoKHtcbiAgICAgICAgdGl0bGU6IFwiQ29tbWFuZHNcIixcbiAgICAgICAgYm9keTogY29tbWFuZHMubWFwKChjb21tYW5kKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGAgICR7cGFkUmlnaHQoY29tbWFuZC5yYXdOYW1lLCBsb25nZXN0Q29tbWFuZE5hbWUubGVuZ3RoKX0gICR7Y29tbWFuZC5kZXNjcmlwdGlvbn1gO1xuICAgICAgICB9KS5qb2luKFwiXFxuXCIpXG4gICAgICB9KTtcbiAgICAgIHNlY3Rpb25zLnB1c2goe1xuICAgICAgICB0aXRsZTogYEZvciBtb3JlIGluZm8sIHJ1biBhbnkgY29tbWFuZCB3aXRoIHRoZSBcXGAtLWhlbHBcXGAgZmxhZ2AsXG4gICAgICAgIGJvZHk6IGNvbW1hbmRzLm1hcCgoY29tbWFuZCkgPT4gYCAgJCAke25hbWV9JHtjb21tYW5kLm5hbWUgPT09IFwiXCIgPyBcIlwiIDogYCAke2NvbW1hbmQubmFtZX1gfSAtLWhlbHBgKS5qb2luKFwiXFxuXCIpXG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuaXNHbG9iYWxDb21tYW5kID8gZ2xvYmFsT3B0aW9ucyA6IFsuLi50aGlzLm9wdGlvbnMsIC4uLmdsb2JhbE9wdGlvbnMgfHwgW11dO1xuICAgIGlmIChvcHRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGxvbmdlc3RPcHRpb25OYW1lID0gZmluZExvbmdlc3Qob3B0aW9ucy5tYXAoKG9wdGlvbikgPT4gb3B0aW9uLnJhd05hbWUpKTtcbiAgICAgIHNlY3Rpb25zLnB1c2goe1xuICAgICAgICB0aXRsZTogXCJPcHRpb25zXCIsXG4gICAgICAgIGJvZHk6IG9wdGlvbnMubWFwKChvcHRpb24pID0+IHtcbiAgICAgICAgICByZXR1cm4gYCAgJHtwYWRSaWdodChvcHRpb24ucmF3TmFtZSwgbG9uZ2VzdE9wdGlvbk5hbWUubGVuZ3RoKX0gICR7b3B0aW9uLmRlc2NyaXB0aW9ufSAke29wdGlvbi5jb25maWcuZGVmYXVsdCA9PT0gdm9pZCAwID8gXCJcIiA6IGAoZGVmYXVsdDogJHtvcHRpb24uY29uZmlnLmRlZmF1bHR9KWB9YDtcbiAgICAgICAgfSkuam9pbihcIlxcblwiKVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmV4YW1wbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHNlY3Rpb25zLnB1c2goe1xuICAgICAgICB0aXRsZTogXCJFeGFtcGxlc1wiLFxuICAgICAgICBib2R5OiB0aGlzLmV4YW1wbGVzLm1hcCgoZXhhbXBsZSkgPT4ge1xuICAgICAgICAgIGlmICh0eXBlb2YgZXhhbXBsZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhhbXBsZShuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGV4YW1wbGU7XG4gICAgICAgIH0pLmpvaW4oXCJcXG5cIilcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaGVscENhbGxiYWNrKSB7XG4gICAgICBzZWN0aW9ucyA9IGhlbHBDYWxsYmFjayhzZWN0aW9ucykgfHwgc2VjdGlvbnM7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKHNlY3Rpb25zLm1hcCgoc2VjdGlvbikgPT4ge1xuICAgICAgcmV0dXJuIHNlY3Rpb24udGl0bGUgPyBgJHtzZWN0aW9uLnRpdGxlfTpcbiR7c2VjdGlvbi5ib2R5fWAgOiBzZWN0aW9uLmJvZHk7XG4gICAgfSkuam9pbihcIlxcblxcblwiKSk7XG4gIH1cbiAgb3V0cHV0VmVyc2lvbigpIHtcbiAgICBjb25zdCB7bmFtZX0gPSB0aGlzLmNsaTtcbiAgICBjb25zdCB7dmVyc2lvbk51bWJlcn0gPSB0aGlzLmNsaS5nbG9iYWxDb21tYW5kO1xuICAgIGlmICh2ZXJzaW9uTnVtYmVyKSB7XG4gICAgICBjb25zb2xlLmxvZyhgJHtuYW1lfS8ke3ZlcnNpb25OdW1iZXJ9ICR7cGxhdGZvcm1JbmZvfWApO1xuICAgIH1cbiAgfVxuICBjaGVja1JlcXVpcmVkQXJncygpIHtcbiAgICBjb25zdCBtaW5pbWFsQXJnc0NvdW50ID0gdGhpcy5hcmdzLmZpbHRlcigoYXJnKSA9PiBhcmcucmVxdWlyZWQpLmxlbmd0aDtcbiAgICBpZiAodGhpcy5jbGkuYXJncy5sZW5ndGggPCBtaW5pbWFsQXJnc0NvdW50KSB7XG4gICAgICB0aHJvdyBuZXcgQ0FDRXJyb3IoYG1pc3NpbmcgcmVxdWlyZWQgYXJncyBmb3IgY29tbWFuZCBcXGAke3RoaXMucmF3TmFtZX1cXGBgKTtcbiAgICB9XG4gIH1cbiAgY2hlY2tVbmtub3duT3B0aW9ucygpIHtcbiAgICBjb25zdCB7b3B0aW9ucywgZ2xvYmFsQ29tbWFuZH0gPSB0aGlzLmNsaTtcbiAgICBpZiAoIXRoaXMuY29uZmlnLmFsbG93VW5rbm93bk9wdGlvbnMpIHtcbiAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBPYmplY3Qua2V5cyhvcHRpb25zKSkge1xuICAgICAgICBpZiAobmFtZSAhPT0gXCItLVwiICYmICF0aGlzLmhhc09wdGlvbihuYW1lKSAmJiAhZ2xvYmFsQ29tbWFuZC5oYXNPcHRpb24obmFtZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgQ0FDRXJyb3IoYFVua25vd24gb3B0aW9uIFxcYCR7bmFtZS5sZW5ndGggPiAxID8gYC0tJHtuYW1lfWAgOiBgLSR7bmFtZX1gfVxcYGApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNoZWNrT3B0aW9uVmFsdWUoKSB7XG4gICAgY29uc3Qge29wdGlvbnM6IHBhcnNlZE9wdGlvbnMsIGdsb2JhbENvbW1hbmR9ID0gdGhpcy5jbGk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IFsuLi5nbG9iYWxDb21tYW5kLm9wdGlvbnMsIC4uLnRoaXMub3B0aW9uc107XG4gICAgZm9yIChjb25zdCBvcHRpb24gb2Ygb3B0aW9ucykge1xuICAgICAgY29uc3QgdmFsdWUgPSBwYXJzZWRPcHRpb25zW29wdGlvbi5uYW1lLnNwbGl0KFwiLlwiKVswXV07XG4gICAgICBpZiAob3B0aW9uLnJlcXVpcmVkKSB7XG4gICAgICAgIGNvbnN0IGhhc05lZ2F0ZWQgPSBvcHRpb25zLnNvbWUoKG8pID0+IG8ubmVnYXRlZCAmJiBvLm5hbWVzLmluY2x1ZGVzKG9wdGlvbi5uYW1lKSk7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2UgJiYgIWhhc05lZ2F0ZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgQ0FDRXJyb3IoYG9wdGlvbiBcXGAke29wdGlvbi5yYXdOYW1lfVxcYCB2YWx1ZSBpcyBtaXNzaW5nYCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmNsYXNzIEdsb2JhbENvbW1hbmQgZXh0ZW5kcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoY2xpKSB7XG4gICAgc3VwZXIoXCJAQGdsb2JhbEBAXCIsIFwiXCIsIHt9LCBjbGkpO1xuICB9XG59XG5cbnZhciBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5jbGFzcyBDQUMgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvcihuYW1lID0gXCJcIikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmNvbW1hbmRzID0gW107XG4gICAgdGhpcy5yYXdBcmdzID0gW107XG4gICAgdGhpcy5hcmdzID0gW107XG4gICAgdGhpcy5vcHRpb25zID0ge307XG4gICAgdGhpcy5nbG9iYWxDb21tYW5kID0gbmV3IEdsb2JhbENvbW1hbmQodGhpcyk7XG4gICAgdGhpcy5nbG9iYWxDb21tYW5kLnVzYWdlKFwiPGNvbW1hbmQ+IFtvcHRpb25zXVwiKTtcbiAgfVxuICB1c2FnZSh0ZXh0KSB7XG4gICAgdGhpcy5nbG9iYWxDb21tYW5kLnVzYWdlKHRleHQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGNvbW1hbmQocmF3TmFtZSwgZGVzY3JpcHRpb24sIGNvbmZpZykge1xuICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgQ29tbWFuZChyYXdOYW1lLCBkZXNjcmlwdGlvbiB8fCBcIlwiLCBjb25maWcsIHRoaXMpO1xuICAgIGNvbW1hbmQuZ2xvYmFsQ29tbWFuZCA9IHRoaXMuZ2xvYmFsQ29tbWFuZDtcbiAgICB0aGlzLmNvbW1hbmRzLnB1c2goY29tbWFuZCk7XG4gICAgcmV0dXJuIGNvbW1hbmQ7XG4gIH1cbiAgb3B0aW9uKHJhd05hbWUsIGRlc2NyaXB0aW9uLCBjb25maWcpIHtcbiAgICB0aGlzLmdsb2JhbENvbW1hbmQub3B0aW9uKHJhd05hbWUsIGRlc2NyaXB0aW9uLCBjb25maWcpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGhlbHAoY2FsbGJhY2spIHtcbiAgICB0aGlzLmdsb2JhbENvbW1hbmQub3B0aW9uKFwiLWgsIC0taGVscFwiLCBcIkRpc3BsYXkgdGhpcyBtZXNzYWdlXCIpO1xuICAgIHRoaXMuZ2xvYmFsQ29tbWFuZC5oZWxwQ2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB0aGlzLnNob3dIZWxwT25FeGl0ID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICB2ZXJzaW9uKHZlcnNpb24sIGN1c3RvbUZsYWdzID0gXCItdiwgLS12ZXJzaW9uXCIpIHtcbiAgICB0aGlzLmdsb2JhbENvbW1hbmQudmVyc2lvbih2ZXJzaW9uLCBjdXN0b21GbGFncyk7XG4gICAgdGhpcy5zaG93VmVyc2lvbk9uRXhpdCA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZXhhbXBsZShleGFtcGxlKSB7XG4gICAgdGhpcy5nbG9iYWxDb21tYW5kLmV4YW1wbGUoZXhhbXBsZSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgb3V0cHV0SGVscCgpIHtcbiAgICBpZiAodGhpcy5tYXRjaGVkQ29tbWFuZCkge1xuICAgICAgdGhpcy5tYXRjaGVkQ29tbWFuZC5vdXRwdXRIZWxwKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZ2xvYmFsQ29tbWFuZC5vdXRwdXRIZWxwKCk7XG4gICAgfVxuICB9XG4gIG91dHB1dFZlcnNpb24oKSB7XG4gICAgdGhpcy5nbG9iYWxDb21tYW5kLm91dHB1dFZlcnNpb24oKTtcbiAgfVxuICBzZXRQYXJzZWRJbmZvKHthcmdzLCBvcHRpb25zfSwgbWF0Y2hlZENvbW1hbmQsIG1hdGNoZWRDb21tYW5kTmFtZSkge1xuICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICBpZiAobWF0Y2hlZENvbW1hbmQpIHtcbiAgICAgIHRoaXMubWF0Y2hlZENvbW1hbmQgPSBtYXRjaGVkQ29tbWFuZDtcbiAgICB9XG4gICAgaWYgKG1hdGNoZWRDb21tYW5kTmFtZSkge1xuICAgICAgdGhpcy5tYXRjaGVkQ29tbWFuZE5hbWUgPSBtYXRjaGVkQ29tbWFuZE5hbWU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHVuc2V0TWF0Y2hlZENvbW1hbmQoKSB7XG4gICAgdGhpcy5tYXRjaGVkQ29tbWFuZCA9IHZvaWQgMDtcbiAgICB0aGlzLm1hdGNoZWRDb21tYW5kTmFtZSA9IHZvaWQgMDtcbiAgfVxuICBwYXJzZShhcmd2ID0gcHJvY2Vzc0FyZ3MsIHtcbiAgICBydW4gPSB0cnVlXG4gIH0gPSB7fSkge1xuICAgIHRoaXMucmF3QXJncyA9IGFyZ3Y7XG4gICAgaWYgKCF0aGlzLm5hbWUpIHtcbiAgICAgIHRoaXMubmFtZSA9IGFyZ3ZbMV0gPyBnZXRGaWxlTmFtZShhcmd2WzFdKSA6IFwiY2xpXCI7XG4gICAgfVxuICAgIGxldCBzaG91bGRQYXJzZSA9IHRydWU7XG4gICAgZm9yIChjb25zdCBjb21tYW5kIG9mIHRoaXMuY29tbWFuZHMpIHtcbiAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMubXJpKGFyZ3Yuc2xpY2UoMiksIGNvbW1hbmQpO1xuICAgICAgY29uc3QgY29tbWFuZE5hbWUgPSBwYXJzZWQuYXJnc1swXTtcbiAgICAgIGlmIChjb21tYW5kLmlzTWF0Y2hlZChjb21tYW5kTmFtZSkpIHtcbiAgICAgICAgc2hvdWxkUGFyc2UgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgcGFyc2VkSW5mbyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBwYXJzZWQpLCB7XG4gICAgICAgICAgYXJnczogcGFyc2VkLmFyZ3Muc2xpY2UoMSlcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2V0UGFyc2VkSW5mbyhwYXJzZWRJbmZvLCBjb21tYW5kLCBjb21tYW5kTmFtZSk7XG4gICAgICAgIHRoaXMuZW1pdChgY29tbWFuZDoke2NvbW1hbmROYW1lfWAsIGNvbW1hbmQpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2hvdWxkUGFyc2UpIHtcbiAgICAgIGZvciAoY29uc3QgY29tbWFuZCBvZiB0aGlzLmNvbW1hbmRzKSB7XG4gICAgICAgIGlmIChjb21tYW5kLm5hbWUgPT09IFwiXCIpIHtcbiAgICAgICAgICBzaG91bGRQYXJzZSA9IGZhbHNlO1xuICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMubXJpKGFyZ3Yuc2xpY2UoMiksIGNvbW1hbmQpO1xuICAgICAgICAgIHRoaXMuc2V0UGFyc2VkSW5mbyhwYXJzZWQsIGNvbW1hbmQpO1xuICAgICAgICAgIHRoaXMuZW1pdChgY29tbWFuZDohYCwgY29tbWFuZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNob3VsZFBhcnNlKSB7XG4gICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLm1yaShhcmd2LnNsaWNlKDIpKTtcbiAgICAgIHRoaXMuc2V0UGFyc2VkSW5mbyhwYXJzZWQpO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLmhlbHAgJiYgdGhpcy5zaG93SGVscE9uRXhpdCkge1xuICAgICAgdGhpcy5vdXRwdXRIZWxwKCk7XG4gICAgICBydW4gPSBmYWxzZTtcbiAgICAgIHRoaXMudW5zZXRNYXRjaGVkQ29tbWFuZCgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLnZlcnNpb24gJiYgdGhpcy5zaG93VmVyc2lvbk9uRXhpdCkge1xuICAgICAgdGhpcy5vdXRwdXRWZXJzaW9uKCk7XG4gICAgICBydW4gPSBmYWxzZTtcbiAgICAgIHRoaXMudW5zZXRNYXRjaGVkQ29tbWFuZCgpO1xuICAgIH1cbiAgICBjb25zdCBwYXJzZWRBcmd2ID0ge2FyZ3M6IHRoaXMuYXJncywgb3B0aW9uczogdGhpcy5vcHRpb25zfTtcbiAgICBpZiAocnVuKSB7XG4gICAgICB0aGlzLnJ1bk1hdGNoZWRDb21tYW5kKCk7XG4gICAgfVxuICAgIGlmICghdGhpcy5tYXRjaGVkQ29tbWFuZCAmJiB0aGlzLmFyZ3NbMF0pIHtcbiAgICAgIHRoaXMuZW1pdChcImNvbW1hbmQ6KlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZEFyZ3Y7XG4gIH1cbiAgbXJpKGFyZ3YsIGNvbW1hbmQpIHtcbiAgICBjb25zdCBjbGlPcHRpb25zID0gW1xuICAgICAgLi4udGhpcy5nbG9iYWxDb21tYW5kLm9wdGlvbnMsXG4gICAgICAuLi5jb21tYW5kID8gY29tbWFuZC5vcHRpb25zIDogW11cbiAgICBdO1xuICAgIGNvbnN0IG1yaU9wdGlvbnMgPSBnZXRNcmlPcHRpb25zKGNsaU9wdGlvbnMpO1xuICAgIGxldCBhcmdzQWZ0ZXJEb3VibGVEYXNoZXMgPSBbXTtcbiAgICBjb25zdCBkb3VibGVEYXNoZXNJbmRleCA9IGFyZ3YuaW5kZXhPZihcIi0tXCIpO1xuICAgIGlmIChkb3VibGVEYXNoZXNJbmRleCA+IC0xKSB7XG4gICAgICBhcmdzQWZ0ZXJEb3VibGVEYXNoZXMgPSBhcmd2LnNsaWNlKGRvdWJsZURhc2hlc0luZGV4ICsgMSk7XG4gICAgICBhcmd2ID0gYXJndi5zbGljZSgwLCBkb3VibGVEYXNoZXNJbmRleCk7XG4gICAgfVxuICAgIGxldCBwYXJzZWQgPSBtcmkyKGFyZ3YsIG1yaU9wdGlvbnMpO1xuICAgIHBhcnNlZCA9IE9iamVjdC5rZXlzKHBhcnNlZCkucmVkdWNlKChyZXMsIG5hbWUpID0+IHtcbiAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcmVzKSwge1xuICAgICAgICBbY2FtZWxjYXNlT3B0aW9uTmFtZShuYW1lKV06IHBhcnNlZFtuYW1lXVxuICAgICAgfSk7XG4gICAgfSwge186IFtdfSk7XG4gICAgY29uc3QgYXJncyA9IHBhcnNlZC5fO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBcIi0tXCI6IGFyZ3NBZnRlckRvdWJsZURhc2hlc1xuICAgIH07XG4gICAgY29uc3QgaWdub3JlRGVmYXVsdCA9IGNvbW1hbmQgJiYgY29tbWFuZC5jb25maWcuaWdub3JlT3B0aW9uRGVmYXVsdFZhbHVlID8gY29tbWFuZC5jb25maWcuaWdub3JlT3B0aW9uRGVmYXVsdFZhbHVlIDogdGhpcy5nbG9iYWxDb21tYW5kLmNvbmZpZy5pZ25vcmVPcHRpb25EZWZhdWx0VmFsdWU7XG4gICAgbGV0IHRyYW5zZm9ybXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGZvciAoY29uc3QgY2xpT3B0aW9uIG9mIGNsaU9wdGlvbnMpIHtcbiAgICAgIGlmICghaWdub3JlRGVmYXVsdCAmJiBjbGlPcHRpb24uY29uZmlnLmRlZmF1bHQgIT09IHZvaWQgMCkge1xuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgY2xpT3B0aW9uLm5hbWVzKSB7XG4gICAgICAgICAgb3B0aW9uc1tuYW1lXSA9IGNsaU9wdGlvbi5jb25maWcuZGVmYXVsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2xpT3B0aW9uLmNvbmZpZy50eXBlKSkge1xuICAgICAgICBpZiAodHJhbnNmb3Jtc1tjbGlPcHRpb24ubmFtZV0gPT09IHZvaWQgMCkge1xuICAgICAgICAgIHRyYW5zZm9ybXNbY2xpT3B0aW9uLm5hbWVdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICB0cmFuc2Zvcm1zW2NsaU9wdGlvbi5uYW1lXVtcInNob3VsZFRyYW5zZm9ybVwiXSA9IHRydWU7XG4gICAgICAgICAgdHJhbnNmb3Jtc1tjbGlPcHRpb24ubmFtZV1bXCJ0cmFuc2Zvcm1GdW5jdGlvblwiXSA9IGNsaU9wdGlvbi5jb25maWcudHlwZVswXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhwYXJzZWQpKSB7XG4gICAgICBpZiAoa2V5ICE9PSBcIl9cIikge1xuICAgICAgICBjb25zdCBrZXlzID0ga2V5LnNwbGl0KFwiLlwiKTtcbiAgICAgICAgc2V0RG90UHJvcChvcHRpb25zLCBrZXlzLCBwYXJzZWRba2V5XSk7XG4gICAgICAgIHNldEJ5VHlwZShvcHRpb25zLCB0cmFuc2Zvcm1zKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGFyZ3MsXG4gICAgICBvcHRpb25zXG4gICAgfTtcbiAgfVxuICBydW5NYXRjaGVkQ29tbWFuZCgpIHtcbiAgICBjb25zdCB7YXJncywgb3B0aW9ucywgbWF0Y2hlZENvbW1hbmQ6IGNvbW1hbmR9ID0gdGhpcztcbiAgICBpZiAoIWNvbW1hbmQgfHwgIWNvbW1hbmQuY29tbWFuZEFjdGlvbilcbiAgICAgIHJldHVybjtcbiAgICBjb21tYW5kLmNoZWNrVW5rbm93bk9wdGlvbnMoKTtcbiAgICBjb21tYW5kLmNoZWNrT3B0aW9uVmFsdWUoKTtcbiAgICBjb21tYW5kLmNoZWNrUmVxdWlyZWRBcmdzKCk7XG4gICAgY29uc3QgYWN0aW9uQXJncyA9IFtdO1xuICAgIGNvbW1hbmQuYXJncy5mb3JFYWNoKChhcmcsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoYXJnLnZhcmlhZGljKSB7XG4gICAgICAgIGFjdGlvbkFyZ3MucHVzaChhcmdzLnNsaWNlKGluZGV4KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3Rpb25BcmdzLnB1c2goYXJnc1tpbmRleF0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGFjdGlvbkFyZ3MucHVzaChvcHRpb25zKTtcbiAgICByZXR1cm4gY29tbWFuZC5jb21tYW5kQWN0aW9uLmFwcGx5KHRoaXMsIGFjdGlvbkFyZ3MpO1xuICB9XG59XG5cbmNvbnN0IGNhYyA9IChuYW1lID0gXCJcIikgPT4gbmV3IENBQyhuYW1lKTtcbmlmICh0eXBlb2YgbW9kdWxlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gY2FjO1xuICBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gY2FjO1xuICBtb2R1bGUuZXhwb3J0cy5jYWMgPSBjYWM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNhYztcbmV4cG9ydCB7IENBQywgQ29tbWFuZCwgY2FjIH07XG4iLCJpbXBvcnQgQ0FDIGZyb20gXCJjYWNcIjtcbmltcG9ydCB7IHByb21wdHMsIFByb21wdE9iamVjdCB9IGZyb20gXCJwcm9tcHRzXCI7XG5pbXBvcnQgZG90ZW52IGZyb20gXCJkb3RlbnZcIjtcbmltcG9ydCBjcmVhdGVSYW5jaGVySW5zdGFuY2UgZnJvbSBcIi4vcHJvdmlzaW9uUmFuY2hlck9uRGlnaXRhbE9jZWFuL2luZGV4XCI7XG5cbmRvdGVudi5jb25maWcoKTsgLy8gd2Ugd2FudCB0byBpbml0aWFsaXplIG91ciBlbnZpcm9ubWVudCB2YXJpYWJsZXMgYXQgdGhlIHZlcnkgYmVnaW5uaW5nIG9mIHRoZSBwcm9ncmFtLiBSaWdodCBub3cgdGhleSBhcmUgbmVlZGVkIGluIHByb3Zpc2lvblJhbmNoZXJPbkRpZ2l0YWxPY2Vhbi9nZXREaWdpdGFsT2NlYW5QZXJzb25hbEFjY2Vzc1Rva2VuLnRzXG5cbmNvbnN0IGNsaSA9IENBQygpO1xuXG5jb25zdCBwYXJzZWQgPSBjbGkucGFyc2UoKTtcblxuY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkocGFyc2VkLCBudWxsLCAyKSk7XG5cbmNvbnN0IHByb21wdHNDb25maWc6IFByb21wdE9iamVjdCA9IHtcbiAgdHlwZTogXCJudW1iZXJcIixcbiAgbmFtZTogXCJ2YWx1ZVwiLFxuICBtZXNzYWdlOiBcImhvdyBvbGQgYXJlIHlvdVwiLFxuICB2YWxpZGF0ZTogKHZhbHVlOiBudW1iZXIpID0+ICh2YWx1ZSA8IDE4ID8gYE5pZ2h0Y2x1YiBpcyAxOCsgb25seWAgOiB0cnVlKSxcbn07XG5cbihhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcHJvbXB0cy5udW1iZXIocHJvbXB0c0NvbmZpZyk7XG4gIGF3YWl0IGNyZWF0ZVJhbmNoZXJJbnN0YW5jZSgpO1xufSkoKTtcbiIsImltcG9ydCBEaWdpdGFsT2NlYW4gZnJvbSBcImRvLXdyYXBwZXJcIjtcbmltcG9ydCBnZXRBdXRoVG9rZW4gZnJvbSBcIi4vZ2V0RGlnaXRhbE9jZWFuUGVyc29uYWxBY2Nlc3NUb2tlblwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVSYW5jaGVySW5zdGFuY2UoKTogdm9pZCB7XG4gIGxldCByYW5jaGVySW5zdGFuY2UgPSB7XG4gICAgbmFtZTogXCJ0ZXN0XCIsXG4gICAgcmVnaW9uOiBcIm55YzNcIixcbiAgICBzaXplOiBcInMtMXZjcHUtMWdiXCIsXG4gICAgaW1hZ2U6IFwicmFuY2hlcm9zXCIsXG4gICAgc3NoX2tleXM6IFsyNzYwODk4NiwgMjg0OTY0NTddLFxuICAgIGJhY2t1cHM6IGZhbHNlLFxuICAgIGlwdjY6IHRydWUsXG4gICAgcHJpdmF0ZV9uZXR3b3JraW5nOiB0cnVlLFxuICAgIG1vbml0b3Jpbmc6IHRydWUsXG4gICAgdXNlcl9kYXRhOiBcIlwiLFxuICAgIHZvbHVtZXM6IFtcIlwiXSxcbiAgICB0YWdzOiBcIlwiLFxuICB9O1xuXG4gIGNvbnN0IGF1dGhUb2tlbiA9IGdldEF1dGhUb2tlbigpO1xuICBjb25zdCBkaWdpdGFsT2NlYW5XcmFwcGVyID0gbmV3IERpZ2l0YWxPY2VhbihhdXRoVG9rZW4pO1xuICBkaWdpdGFsT2NlYW5XcmFwcGVyLmRyb3BsZXRzXG4gICAgLmNyZWF0ZShyYW5jaGVySW5zdGFuY2UpXG4gICAgLnRoZW4oKGRhdGEpID0+IGNvbnNvbGUubG9nKGRhdGEpKVxuICAgIC5jYXRjaCgoZXJyb3IpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpOiBzdHJpbmcge1xuICBmdW5jdGlvbiBwZXJzb25hbEFjY2Vzc1Rva2VuSXNVbmRlZmluZWQoXG4gICAgcGVyc29uYWxBY2Nlc3NUb2tlbjogc3RyaW5nIHwgdW5kZWZpbmVkXG4gICk6IHBlcnNvbmFsQWNjZXNzVG9rZW4gaXMgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gKHBlcnNvbmFsQWNjZXNzVG9rZW4gYXMgc3RyaW5nKS5sZW5ndGggPT0gdW5kZWZpbmVkO1xuICB9XG5cbiAgY29uc3QgYXV0aFRva2VuID0gcHJvY2Vzcy5lbnYuRElHSVRBTF9PQ0VBTl9QRVJTT05BTF9BQ0NFU1NfVE9LRU47XG5cbiAgaWYgKHBlcnNvbmFsQWNjZXNzVG9rZW5Jc1VuZGVmaW5lZChhdXRoVG9rZW4pKSB7XG4gICAgdGhyb3cgXCJEaWdpdGFsIE9jZWFuIFBlcnNvbmFsIEFjY2VzcyBUb2tlbiBoYXMgbm90IGJlZW4gc2V0IGluIGAuZW52YC4gQ2Fubm90IGFjY2VzcyBkaWdpdGFsIG9jZWFuIEFQSVwiO1xuICB9XG4gIHJldHVybiBhdXRoVG9rZW47XG59XG4iXSwic291cmNlUm9vdCI6IiJ9