(()=>{"use strict";var e={n:n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},d:(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},o:(e,n)=>Object.prototype.hasOwnProperty.call(e,n)};const n=require("cac");var t=e.n(n);const r=require("prompts");var o=e.n(r);const a=require("dotenv");var i=e.n(a);const c=require("do-wrapper");var s=e.n(c);var u,l=function(){function e(){this._name=""}return Object.defineProperty(e.prototype,"name",{get:function(){return this._name},set:function(e){this._name=e},enumerable:!1,configurable:!0}),e.prototype.setName=function(e){return this.name=e,this},e.prototype.provisionOn=function(e){switch(+e){case u.digitalOcean:return function(e){var n={name:"another",region:"nyc3",size:"s-1vcpu-1gb",image:"rancheros",ssh_keys:[27608986,28496457],backups:!1,ipv6:!0,private_networking:null,user_data:null,volumes:null,tags:[]};n=Object.assign(n,e);var t=function(){var e=process.env.DIGITAL_OCEAN_PERSONAL_ACCESS_TOKEN;if(null==e.length)throw"Digital Ocean Personal Access Token has not been set in `.env`. Cannot access digital ocean API";return e}();return new(s())(t).droplets.create(n).then((function(e){return e}))}({name:this.name});case u.aws:throw new Error("Sorry, I haven't written any code to provision rancher on AWS. If you want to add the code in, check out this project and go to src/provisionRancherOnDigitalOcean/RancherOSConfig.ts and modify the code.");default:throw new Error('${cloud} isn\'t a supported cloud provider. You must specify either "aws" or "digitalOcean".')}},e}();!function(e){e[e.digitalOcean=0]="digitalOcean",e[e.aws=1]="aws"}(u||(u={}));i().config(),t()().parse();var p,f,h,d,v=[{type:"text",name:"dropletName",message:"What do you want to name your droplet?",initial:"rancher"}],y=new l;p=void 0,f=void 0,d=function(){var e,n;return function(e,n){var t,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(a){return function(c){return function(a){if(t)throw new TypeError("Generator is already executing.");for(;i;)try{if(t=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=n.call(e,i)}catch(e){a=[6,e],r=0}finally{t=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}(this,(function(t){switch(t.label){case 0:return[4,o()(v)];case 1:return e=t.sent(),[4,y.setName(e.dropletName).provisionOn(u.digitalOcean)];case 2:return n=t.sent(),console.log(n),[2]}}))},new((h=void 0)||(h=Promise))((function(e,n){function t(e){try{o(d.next(e))}catch(e){n(e)}}function r(e){try{o(d.throw(e))}catch(e){n(e)}}function o(n){var o;n.done?e(n.value):(o=n.value,o instanceof h?o:new h((function(e){e(o)}))).then(t,r)}o((d=d.apply(p,f||[])).next())}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,