(()=>{var t={1391:t=>{"use strict";const{FORCE_COLOR:e,NODE_DISABLE_COLORS:s,TERM:i}=process.env,r={enabled:!s&&"dumb"!==i&&"0"!==e,reset:o(0,0),bold:o(1,22),dim:o(2,22),italic:o(3,23),underline:o(4,24),inverse:o(7,27),hidden:o(8,28),strikethrough:o(9,29),black:o(30,39),red:o(31,39),green:o(32,39),yellow:o(33,39),blue:o(34,39),magenta:o(35,39),cyan:o(36,39),white:o(37,39),gray:o(90,39),grey:o(90,39),bgBlack:o(40,49),bgRed:o(41,49),bgGreen:o(42,49),bgYellow:o(43,49),bgBlue:o(44,49),bgMagenta:o(45,49),bgCyan:o(46,49),bgWhite:o(47,49)};function n(t,e){let s,i=0,r="",n="";for(;i<t.length;i++)s=t[i],r+=s.open,n+=s.close,e.includes(s.close)&&(e=e.replace(s.rgx,s.close+s.open));return r+e+n}function o(t,e){let s={open:`[${t}m`,close:`[${e}m`,rgx:new RegExp(`\\x1b\\[${e}m`,"g")};return function(e){return void 0!==this&&void 0!==this.has?(this.has.includes(t)||(this.has.push(t),this.keys.push(s)),void 0===e?this:r.enabled?n(this.keys,e+""):e+""):void 0===e?function(t,e){let s={has:t,keys:e};return s.reset=r.reset.bind(s),s.bold=r.bold.bind(s),s.dim=r.dim.bind(s),s.italic=r.italic.bind(s),s.underline=r.underline.bind(s),s.inverse=r.inverse.bind(s),s.hidden=r.hidden.bind(s),s.strikethrough=r.strikethrough.bind(s),s.black=r.black.bind(s),s.red=r.red.bind(s),s.green=r.green.bind(s),s.yellow=r.yellow.bind(s),s.blue=r.blue.bind(s),s.magenta=r.magenta.bind(s),s.cyan=r.cyan.bind(s),s.white=r.white.bind(s),s.gray=r.gray.bind(s),s.grey=r.grey.bind(s),s.bgBlack=r.bgBlack.bind(s),s.bgRed=r.bgRed.bind(s),s.bgGreen=r.bgGreen.bind(s),s.bgYellow=r.bgYellow.bind(s),s.bgBlue=r.bgBlue.bind(s),s.bgMagenta=r.bgMagenta.bind(s),s.bgCyan=r.bgCyan.bind(s),s.bgWhite=r.bgWhite.bind(s),s}([t],[s]):r.enabled?n([s],e+""):e+""}}t.exports=r},7076:t=>{"use strict";class e{constructor({token:t,date:e,parts:s,locales:i}){this.token=t,this.date=e||new Date,this.parts=s||[this],this.locales=i||{}}up(){}down(){}next(){const t=this.parts.indexOf(this);return this.parts.find(((s,i)=>i>t&&s instanceof e))}setTo(t){}prev(){let t=[].concat(this.parts).reverse();const s=t.indexOf(this);return t.find(((t,i)=>i>s&&t instanceof e))}toString(){return String(this.date)}}t.exports=e},2102:(t,e,s)=>{"use strict";const i=s(7076);t.exports=class extends i{constructor(t={}){super(t)}up(){this.date.setDate(this.date.getDate()+1)}down(){this.date.setDate(this.date.getDate()-1)}setTo(t){this.date.setDate(parseInt(t.substr(-2)))}toString(){let t=this.date.getDate(),e=this.date.getDay();return"DD"===this.token?String(t).padStart(2,"0"):"Do"===this.token?t+(s=t,1==(s%=10)?"st":2===s?"nd":3===s?"rd":"th"):"d"===this.token?e+1:"ddd"===this.token?this.locales.weekdaysShort[e]:"dddd"===this.token?this.locales.weekdays[e]:t;var s}}},4990:(t,e,s)=>{"use strict";const i=s(7076);t.exports=class extends i{constructor(t={}){super(t)}up(){this.date.setHours(this.date.getHours()+1)}down(){this.date.setHours(this.date.getHours()-1)}setTo(t){this.date.setHours(parseInt(t.substr(-2)))}toString(){let t=this.date.getHours();return/h/.test(this.token)&&(t=t%12||12),this.token.length>1?String(t).padStart(2,"0"):t}}},281:(t,e,s)=>{"use strict";t.exports={DatePart:s(7076),Meridiem:s(3692),Day:s(2102),Hours:s(4990),Milliseconds:s(2491),Minutes:s(1331),Month:s(9219),Seconds:s(1362),Year:s(6600)}},3692:(t,e,s)=>{"use strict";const i=s(7076);t.exports=class extends i{constructor(t={}){super(t)}up(){this.date.setHours((this.date.getHours()+12)%24)}down(){this.up()}toString(){let t=this.date.getHours()>12?"pm":"am";return/\A/.test(this.token)?t.toUpperCase():t}}},2491:(t,e,s)=>{"use strict";const i=s(7076);t.exports=class extends i{constructor(t={}){super(t)}up(){this.date.setMilliseconds(this.date.getMilliseconds()+1)}down(){this.date.setMilliseconds(this.date.getMilliseconds()-1)}setTo(t){this.date.setMilliseconds(parseInt(t.substr(-this.token.length)))}toString(){return String(this.date.getMilliseconds()).padStart(4,"0").substr(0,this.token.length)}}},1331:(t,e,s)=>{"use strict";const i=s(7076);t.exports=class extends i{constructor(t={}){super(t)}up(){this.date.setMinutes(this.date.getMinutes()+1)}down(){this.date.setMinutes(this.date.getMinutes()-1)}setTo(t){this.date.setMinutes(parseInt(t.substr(-2)))}toString(){let t=this.date.getMinutes();return this.token.length>1?String(t).padStart(2,"0"):t}}},9219:(t,e,s)=>{"use strict";const i=s(7076);t.exports=class extends i{constructor(t={}){super(t)}up(){this.date.setMonth(this.date.getMonth()+1)}down(){this.date.setMonth(this.date.getMonth()-1)}setTo(t){t=parseInt(t.substr(-2))-1,this.date.setMonth(t<0?0:t)}toString(){let t=this.date.getMonth(),e=this.token.length;return 2===e?String(t+1).padStart(2,"0"):3===e?this.locales.monthsShort[t]:4===e?this.locales.months[t]:String(t+1)}}},1362:(t,e,s)=>{"use strict";const i=s(7076);t.exports=class extends i{constructor(t={}){super(t)}up(){this.date.setSeconds(this.date.getSeconds()+1)}down(){this.date.setSeconds(this.date.getSeconds()-1)}setTo(t){this.date.setSeconds(parseInt(t.substr(-2)))}toString(){let t=this.date.getSeconds();return this.token.length>1?String(t).padStart(2,"0"):t}}},6600:(t,e,s)=>{"use strict";const i=s(7076);t.exports=class extends i{constructor(t={}){super(t)}up(){this.date.setFullYear(this.date.getFullYear()+1)}down(){this.date.setFullYear(this.date.getFullYear()-1)}setTo(t){this.date.setFullYear(t.substr(-4))}toString(){let t=String(this.date.getFullYear()).padStart(4,"0");return 2===this.token.length?t.substr(-2):t}}},4439:(t,e,s)=>{"use strict";function i(t,e,s,i,r,n,o){try{var h=t[n](o),l=h.value}catch(t){return void s(t)}h.done?e(l):Promise.resolve(l).then(i,r)}const r=s(1391),n=s(1537),o=s(2698),h=o.erase,l=o.cursor,a=s(6513),u=a.style,c=a.clear,d=a.figures,p=a.wrap,m=a.entriesToDisplay,g=(t,e)=>t[e]&&(t[e].value||t[e].title||t[e]),f=(t,e)=>t[e]&&(t[e].title||t[e].value||t[e]);t.exports=class extends n{constructor(t={}){super(t),this.msg=t.message,this.suggest=t.suggest,this.choices=t.choices,this.initial="number"==typeof t.initial?t.initial:((t,e)=>{const s=t.findIndex((t=>t.value===e||t.title===e));return s>-1?s:void 0})(t.choices,t.initial),this.select=this.initial||t.cursor||0,this.i18n={noMatches:t.noMatches||"no matches found"},this.fallback=t.fallback||this.initial,this.clearFirst=t.clearFirst||!1,this.suggestions=[],this.input="",this.limit=t.limit||10,this.cursor=0,this.transform=u.render(t.style),this.scale=this.transform.scale,this.render=this.render.bind(this),this.complete=this.complete.bind(this),this.clear=c("",this.out.columns),this.complete(this.render),this.render()}set fallback(t){this._fb=Number.isSafeInteger(parseInt(t))?parseInt(t):t}get fallback(){let t;return"number"==typeof this._fb?t=this.choices[this._fb]:"string"==typeof this._fb&&(t={title:this._fb}),t||this._fb||{title:this.i18n.noMatches}}moveSelect(t){this.select=t,this.suggestions.length>0?this.value=g(this.suggestions,t):this.value=this.fallback.value,this.fire()}complete(t){var e,s=this;return(e=function*(){const e=s.completing=s.suggest(s.input,s.choices),i=yield e;if(s.completing!==e)return;s.suggestions=i.map(((t,e,s)=>({title:f(s,e),value:g(s,e),description:t.description}))),s.completing=!1;const r=Math.max(i.length-1,0);s.moveSelect(Math.min(r,s.select)),t&&t()},function(){var t=this,s=arguments;return new Promise((function(r,n){var o=e.apply(t,s);function h(t){i(o,r,n,h,l,"next",t)}function l(t){i(o,r,n,h,l,"throw",t)}h(void 0)}))})()}reset(){this.input="",this.complete((()=>{this.moveSelect(void 0!==this.initial?this.initial:0),this.render()})),this.render()}exit(){this.clearFirst&&this.input.length>0?this.reset():(this.done=this.exited=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close())}abort(){this.done=this.aborted=!0,this.exited=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){this.done=!0,this.aborted=this.exited=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}_(t,e){let s=this.input.slice(0,this.cursor),i=this.input.slice(this.cursor);this.input=`${s}${t}${i}`,this.cursor=s.length+1,this.complete(this.render),this.render()}delete(){if(0===this.cursor)return this.bell();let t=this.input.slice(0,this.cursor-1),e=this.input.slice(this.cursor);this.input=`${t}${e}`,this.complete(this.render),this.cursor=this.cursor-1,this.render()}deleteForward(){if(this.cursor*this.scale>=this.rendered.length)return this.bell();let t=this.input.slice(0,this.cursor),e=this.input.slice(this.cursor+1);this.input=`${t}${e}`,this.complete(this.render),this.render()}first(){this.moveSelect(0),this.render()}last(){this.moveSelect(this.suggestions.length-1),this.render()}up(){0===this.select?this.moveSelect(this.suggestions.length-1):this.moveSelect(this.select-1),this.render()}down(){this.select===this.suggestions.length-1?this.moveSelect(0):this.moveSelect(this.select+1),this.render()}next(){this.select===this.suggestions.length-1?this.moveSelect(0):this.moveSelect(this.select+1),this.render()}nextPage(){this.moveSelect(Math.min(this.select+this.limit,this.suggestions.length-1)),this.render()}prevPage(){this.moveSelect(Math.max(this.select-this.limit,0)),this.render()}left(){if(this.cursor<=0)return this.bell();this.cursor=this.cursor-1,this.render()}right(){if(this.cursor*this.scale>=this.rendered.length)return this.bell();this.cursor=this.cursor+1,this.render()}renderOption(t,e,s,i){let n,o=s?d.arrowUp:i?d.arrowDown:" ",h=e?r.cyan().underline(t.title):t.title;return o=(e?r.cyan(d.pointer)+" ":"  ")+o,t.description&&(n=` - ${t.description}`,(o.length+h.length+n.length>=this.out.columns||t.description.split(/\r?\n/).length>1)&&(n="\n"+p(t.description,{margin:3,width:this.out.columns}))),o+" "+h+r.gray(n||"")}render(){if(this.closed)return;this.firstRender?this.out.write(l.hide):this.out.write(c(this.outputText,this.out.columns)),super.render();let t=m(this.select,this.choices.length,this.limit),e=t.startIndex,s=t.endIndex;if(this.outputText=[u.symbol(this.done,this.aborted,this.exited),r.bold(this.msg),u.delimiter(this.completing),this.done&&this.suggestions[this.select]?this.suggestions[this.select].title:this.rendered=this.transform.render(this.input)].join(" "),!this.done){const t=this.suggestions.slice(e,s).map(((t,i)=>this.renderOption(t,this.select===i+e,0===i&&e>0,i+e===s-1&&s<this.choices.length))).join("\n");this.outputText+="\n"+(t||r.gray(this.fallback.title))}this.out.write(h.line+l.to(0)+this.outputText)}}},5174:(t,e,s)=>{"use strict";const i=s(1391),r=s(2698).cursor,n=s(4491),o=s(6513),h=o.clear,l=o.style,a=o.figures;t.exports=class extends n{constructor(t={}){t.overrideRender=!0,super(t),this.inputValue="",this.clear=h("",this.out.columns),this.filteredOptions=this.value,this.render()}last(){this.cursor=this.filteredOptions.length-1,this.render()}next(){this.cursor=(this.cursor+1)%this.filteredOptions.length,this.render()}up(){0===this.cursor?this.cursor=this.filteredOptions.length-1:this.cursor--,this.render()}down(){this.cursor===this.filteredOptions.length-1?this.cursor=0:this.cursor++,this.render()}left(){this.filteredOptions[this.cursor].selected=!1,this.render()}right(){if(this.value.filter((t=>t.selected)).length>=this.maxChoices)return this.bell();this.filteredOptions[this.cursor].selected=!0,this.render()}delete(){this.inputValue.length&&(this.inputValue=this.inputValue.substr(0,this.inputValue.length-1),this.updateFilteredOptions())}updateFilteredOptions(){const t=this.filteredOptions[this.cursor];this.filteredOptions=this.value.filter((t=>!this.inputValue||!("string"!=typeof t.title||!t.title.toLowerCase().includes(this.inputValue.toLowerCase()))||!("string"!=typeof t.value||!t.value.toLowerCase().includes(this.inputValue.toLowerCase()))));const e=this.filteredOptions.findIndex((e=>e===t));this.cursor=e<0?0:e,this.render()}handleSpaceToggle(){const t=this.filteredOptions[this.cursor];if(t.selected)t.selected=!1,this.render();else{if(t.disabled||this.value.filter((t=>t.selected)).length>=this.maxChoices)return this.bell();t.selected=!0,this.render()}}handleInputChange(t){this.inputValue=this.inputValue+t,this.updateFilteredOptions()}_(t,e){" "===t?this.handleSpaceToggle():this.handleInputChange(t)}renderInstructions(){return void 0===this.instructions||this.instructions?"string"==typeof this.instructions?this.instructions:`\nInstructions:\n    ${a.arrowUp}/${a.arrowDown}: Highlight option\n    ${a.arrowLeft}/${a.arrowRight}/[space]: Toggle selection\n    [a,b,c]/delete: Filter choices\n    enter/return: Complete answer\n`:""}renderCurrentInput(){return`\nFiltered results for: ${this.inputValue?this.inputValue:i.gray("Enter something to filter")}\n`}renderOption(t,e,s){let r;return r=e.disabled?t===s?i.gray().underline(e.title):i.strikethrough().gray(e.title):t===s?i.cyan().underline(e.title):e.title,(e.selected?i.green(a.radioOn):a.radioOff)+"  "+r}renderDoneOrInstructions(){if(this.done)return this.value.filter((t=>t.selected)).map((t=>t.title)).join(", ");const t=[i.gray(this.hint),this.renderInstructions(),this.renderCurrentInput()];return this.filteredOptions.length&&this.filteredOptions[this.cursor].disabled&&t.push(i.yellow(this.warn)),t.join(" ")}render(){if(this.closed)return;this.firstRender&&this.out.write(r.hide),super.render();let t=[l.symbol(this.done,this.aborted),i.bold(this.msg),l.delimiter(!1),this.renderDoneOrInstructions()].join(" ");this.showMinError&&(t+=i.red(`You must select a minimum of ${this.minSelected} choices.`),this.showMinError=!1),t+=this.renderOptions(this.filteredOptions),this.out.write(this.clear+t),this.clear=h(t,this.out.columns)}}},2290:(t,e,s)=>{"use strict";const i=s(1391),r=s(1537),n=s(6513),o=n.style,h=n.clear,l=s(2698),a=l.erase,u=l.cursor;t.exports=class extends r{constructor(t={}){super(t),this.msg=t.message,this.value=t.initial,this.initialValue=!!t.initial,this.yesMsg=t.yes||"yes",this.yesOption=t.yesOption||"(Y/n)",this.noMsg=t.no||"no",this.noOption=t.noOption||"(y/N)",this.render()}reset(){this.value=this.initialValue,this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){this.value=this.value||!1,this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}_(t,e){return"y"===t.toLowerCase()?(this.value=!0,this.submit()):"n"===t.toLowerCase()?(this.value=!1,this.submit()):this.bell()}render(){this.closed||(this.firstRender?this.out.write(u.hide):this.out.write(h(this.outputText,this.out.columns)),super.render(),this.outputText=[o.symbol(this.done,this.aborted),i.bold(this.msg),o.delimiter(this.done),this.done?this.value?this.yesMsg:this.noMsg:i.gray(this.initialValue?this.yesOption:this.noOption)].join(" "),this.out.write(a.line+u.to(0)+this.outputText))}}},1492:(t,e,s)=>{"use strict";function i(t,e,s,i,r,n,o){try{var h=t[n](o),l=h.value}catch(t){return void s(t)}h.done?e(l):Promise.resolve(l).then(i,r)}function r(t){return function(){var e=this,s=arguments;return new Promise((function(r,n){var o=t.apply(e,s);function h(t){i(o,r,n,h,l,"next",t)}function l(t){i(o,r,n,h,l,"throw",t)}h(void 0)}))}}const n=s(1391),o=s(1537),h=s(6513),l=h.style,a=h.clear,u=h.figures,c=s(2698),d=c.erase,p=c.cursor,m=s(281),g=m.DatePart,f=m.Meridiem,v=m.Day,b=m.Hours,w=m.Milliseconds,y=m.Minutes,x=m.Month,S=m.Seconds,O=m.Year,M=/\\(.)|"((?:\\["\\]|[^"])+)"|(D[Do]?|d{3,4}|d)|(M{1,4})|(YY(?:YY)?)|([aA])|([Hh]{1,2})|(m{1,2})|(s{1,2})|(S{1,4})|./g,C={1:({token:t})=>t.replace(/\\(.)/g,"$1"),2:t=>new v(t),3:t=>new x(t),4:t=>new O(t),5:t=>new f(t),6:t=>new b(t),7:t=>new y(t),8:t=>new S(t),9:t=>new w(t)},$={months:"January,February,March,April,May,June,July,August,September,October,November,December".split(","),monthsShort:"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),weekdays:"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),weekdaysShort:"Sun,Mon,Tue,Wed,Thu,Fri,Sat".split(",")};t.exports=class extends o{constructor(t={}){super(t),this.msg=t.message,this.cursor=0,this.typed="",this.locales=Object.assign($,t.locales),this._date=t.initial||new Date,this.errorMsg=t.error||"Please Enter A Valid Value",this.validator=t.validate||(()=>!0),this.mask=t.mask||"YYYY-MM-DD HH:mm:ss",this.clear=a("",this.out.columns),this.render()}get value(){return this.date}get date(){return this._date}set date(t){t&&this._date.setTime(t.getTime())}set mask(t){let e;for(this.parts=[];e=M.exec(t);){let t=e.shift(),s=e.findIndex((t=>null!=t));this.parts.push(s in C?C[s]({token:e[s]||t,date:this.date,parts:this.parts,locales:this.locales}):e[s]||t)}let s=this.parts.reduce(((t,e)=>("string"==typeof e&&"string"==typeof t[t.length-1]?t[t.length-1]+=e:t.push(e),t)),[]);this.parts.splice(0),this.parts.push(...s),this.reset()}moveCursor(t){this.typed="",this.cursor=t,this.fire()}reset(){this.moveCursor(this.parts.findIndex((t=>t instanceof g))),this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.error=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}validate(){var t=this;return r((function*(){let e=yield t.validator(t.value);"string"==typeof e&&(t.errorMsg=e,e=!1),t.error=!e}))()}submit(){var t=this;return r((function*(){if(yield t.validate(),t.error)return t.color="red",t.fire(),void t.render();t.done=!0,t.aborted=!1,t.fire(),t.render(),t.out.write("\n"),t.close()}))()}up(){this.typed="",this.parts[this.cursor].up(),this.render()}down(){this.typed="",this.parts[this.cursor].down(),this.render()}left(){let t=this.parts[this.cursor].prev();if(null==t)return this.bell();this.moveCursor(this.parts.indexOf(t)),this.render()}right(){let t=this.parts[this.cursor].next();if(null==t)return this.bell();this.moveCursor(this.parts.indexOf(t)),this.render()}next(){let t=this.parts[this.cursor].next();this.moveCursor(t?this.parts.indexOf(t):this.parts.findIndex((t=>t instanceof g))),this.render()}_(t){/\d/.test(t)&&(this.typed+=t,this.parts[this.cursor].setTo(this.typed),this.render())}render(){this.closed||(this.firstRender?this.out.write(p.hide):this.out.write(a(this.outputText,this.out.columns)),super.render(),this.outputText=[l.symbol(this.done,this.aborted),n.bold(this.msg),l.delimiter(!1),this.parts.reduce(((t,e,s)=>t.concat(s!==this.cursor||this.done?e:n.cyan().underline(e.toString()))),[]).join("")].join(" "),this.error&&(this.outputText+=this.errorMsg.split("\n").reduce(((t,e,s)=>t+`\n${s?" ":u.pointerSmall} ${n.red().italic(e)}`),"")),this.out.write(d.line+p.to(0)+this.outputText))}}},4910:(t,e,s)=>{"use strict";t.exports={TextPrompt:s(1741),SelectPrompt:s(2289),TogglePrompt:s(8660),DatePrompt:s(1492),NumberPrompt:s(8147),MultiselectPrompt:s(4491),AutocompletePrompt:s(4439),AutocompleteMultiselectPrompt:s(5174),ConfirmPrompt:s(2290)}},4491:(t,e,s)=>{"use strict";const i=s(1391),r=s(2698).cursor,n=s(1537),o=s(6513),h=o.clear,l=o.figures,a=o.style,u=o.wrap,c=o.entriesToDisplay;t.exports=class extends n{constructor(t={}){super(t),this.msg=t.message,this.cursor=t.cursor||0,this.scrollIndex=t.cursor||0,this.hint=t.hint||"",this.warn=t.warn||"- This option is disabled -",this.minSelected=t.min,this.showMinError=!1,this.maxChoices=t.max,this.instructions=t.instructions,this.optionsPerPage=t.optionsPerPage||10,this.value=t.choices.map(((t,e)=>("string"==typeof t&&(t={title:t,value:e}),{title:t&&(t.title||t.value||t),description:t&&t.description,value:t&&(void 0===t.value?e:t.value),selected:t&&t.selected,disabled:t&&t.disabled}))),this.clear=h("",this.out.columns),t.overrideRender||this.render()}reset(){this.value.map((t=>!t.selected)),this.cursor=0,this.fire(),this.render()}selected(){return this.value.filter((t=>t.selected))}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){const t=this.value.filter((t=>t.selected));this.minSelected&&t.length<this.minSelected?(this.showMinError=!0,this.render()):(this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close())}first(){this.cursor=0,this.render()}last(){this.cursor=this.value.length-1,this.render()}next(){this.cursor=(this.cursor+1)%this.value.length,this.render()}up(){0===this.cursor?this.cursor=this.value.length-1:this.cursor--,this.render()}down(){this.cursor===this.value.length-1?this.cursor=0:this.cursor++,this.render()}left(){this.value[this.cursor].selected=!1,this.render()}right(){if(this.value.filter((t=>t.selected)).length>=this.maxChoices)return this.bell();this.value[this.cursor].selected=!0,this.render()}handleSpaceToggle(){const t=this.value[this.cursor];if(t.selected)t.selected=!1,this.render();else{if(t.disabled||this.value.filter((t=>t.selected)).length>=this.maxChoices)return this.bell();t.selected=!0,this.render()}}toggleAll(){if(void 0!==this.maxChoices||this.value[this.cursor].disabled)return this.bell();const t=!this.value[this.cursor].selected;this.value.filter((t=>!t.disabled)).forEach((e=>e.selected=t)),this.render()}_(t,e){if(" "===t)this.handleSpaceToggle();else{if("a"!==t)return this.bell();this.toggleAll()}}renderInstructions(){return void 0===this.instructions||this.instructions?"string"==typeof this.instructions?this.instructions:`\nInstructions:\n    ${l.arrowUp}/${l.arrowDown}: Highlight option\n    ${l.arrowLeft}/${l.arrowRight}/[space]: Toggle selection\n`+(void 0===this.maxChoices?"    a: Toggle all\n":"")+"    enter/return: Complete answer":""}renderOption(t,e,s,r){const n=(e.selected?i.green(l.radioOn):l.radioOff)+" "+r+" ";let o,h;return e.disabled?o=t===s?i.gray().underline(e.title):i.strikethrough().gray(e.title):(o=t===s?i.cyan().underline(e.title):e.title,t===s&&e.description&&(h=` - ${e.description}`,(n.length+o.length+h.length>=this.out.columns||e.description.split(/\r?\n/).length>1)&&(h="\n"+u(e.description,{margin:n.length,width:this.out.columns})))),n+o+i.gray(h||"")}paginateOptions(t){if(0===t.length)return i.red("No matches for this query.");let e,s=c(this.cursor,t.length,this.optionsPerPage),r=s.startIndex,n=s.endIndex,o=[];for(let s=r;s<n;s++)e=s===r&&r>0?l.arrowUp:s===n-1&&n<t.length?l.arrowDown:" ",o.push(this.renderOption(this.cursor,t[s],s,e));return"\n"+o.join("\n")}renderOptions(t){return this.done?"":this.paginateOptions(t)}renderDoneOrInstructions(){if(this.done)return this.value.filter((t=>t.selected)).map((t=>t.title)).join(", ");const t=[i.gray(this.hint),this.renderInstructions()];return this.value[this.cursor].disabled&&t.push(i.yellow(this.warn)),t.join(" ")}render(){if(this.closed)return;this.firstRender&&this.out.write(r.hide),super.render();let t=[a.symbol(this.done,this.aborted),i.bold(this.msg),a.delimiter(!1),this.renderDoneOrInstructions()].join(" ");this.showMinError&&(t+=i.red(`You must select a minimum of ${this.minSelected} choices.`),this.showMinError=!1),t+=this.renderOptions(this.value),this.out.write(this.clear+t),this.clear=h(t,this.out.columns)}}},8147:(t,e,s)=>{"use strict";function i(t,e,s,i,r,n,o){try{var h=t[n](o),l=h.value}catch(t){return void s(t)}h.done?e(l):Promise.resolve(l).then(i,r)}function r(t){return function(){var e=this,s=arguments;return new Promise((function(r,n){var o=t.apply(e,s);function h(t){i(o,r,n,h,l,"next",t)}function l(t){i(o,r,n,h,l,"throw",t)}h(void 0)}))}}const n=s(1391),o=s(1537),h=s(2698),l=h.cursor,a=h.erase,u=s(6513),c=u.style,d=u.figures,p=u.clear,m=u.lines,g=/[0-9]/,f=t=>void 0!==t,v=(t,e)=>{let s=Math.pow(10,e);return Math.round(t*s)/s};t.exports=class extends o{constructor(t={}){super(t),this.transform=c.render(t.style),this.msg=t.message,this.initial=f(t.initial)?t.initial:"",this.float=!!t.float,this.round=t.round||2,this.inc=t.increment||1,this.min=f(t.min)?t.min:-1/0,this.max=f(t.max)?t.max:1/0,this.errorMsg=t.error||"Please Enter A Valid Value",this.validator=t.validate||(()=>!0),this.color="cyan",this.value="",this.typed="",this.lastHit=0,this.render()}set value(t){t||0===t?(this.placeholder=!1,this.rendered=this.transform.render(`${v(t,this.round)}`),this._value=v(t,this.round)):(this.placeholder=!0,this.rendered=n.gray(this.transform.render(`${this.initial}`)),this._value=""),this.fire()}get value(){return this._value}parse(t){return this.float?parseFloat(t):parseInt(t)}valid(t){return"-"===t||"."===t&&this.float||g.test(t)}reset(){this.typed="",this.value="",this.fire(),this.render()}exit(){this.abort()}abort(){let t=this.value;this.value=""!==t?t:this.initial,this.done=this.aborted=!0,this.error=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}validate(){var t=this;return r((function*(){let e=yield t.validator(t.value);"string"==typeof e&&(t.errorMsg=e,e=!1),t.error=!e}))()}submit(){var t=this;return r((function*(){if(yield t.validate(),t.error)return t.color="red",t.fire(),void t.render();let e=t.value;t.value=""!==e?e:t.initial,t.done=!0,t.aborted=!1,t.error=!1,t.fire(),t.render(),t.out.write("\n"),t.close()}))()}up(){if(this.typed="",""===this.value&&(this.value=this.min-this.inc),this.value>=this.max)return this.bell();this.value+=this.inc,this.color="cyan",this.fire(),this.render()}down(){if(this.typed="",""===this.value&&(this.value=this.min+this.inc),this.value<=this.min)return this.bell();this.value-=this.inc,this.color="cyan",this.fire(),this.render()}delete(){let t=this.value.toString();if(0===t.length)return this.bell();this.value=this.parse(t=t.slice(0,-1))||"",""!==this.value&&this.value<this.min&&(this.value=this.min),this.color="cyan",this.fire(),this.render()}next(){this.value=this.initial,this.fire(),this.render()}_(t,e){if(!this.valid(t))return this.bell();const s=Date.now();if(s-this.lastHit>1e3&&(this.typed=""),this.typed+=t,this.lastHit=s,this.color="cyan","."===t)return this.fire();this.value=Math.min(this.parse(this.typed),this.max),this.value>this.max&&(this.value=this.max),this.value<this.min&&(this.value=this.min),this.fire(),this.render()}render(){this.closed||(this.firstRender||(this.outputError&&this.out.write(l.down(m(this.outputError,this.out.columns)-1)+p(this.outputError,this.out.columns)),this.out.write(p(this.outputText,this.out.columns))),super.render(),this.outputError="",this.outputText=[c.symbol(this.done,this.aborted),n.bold(this.msg),c.delimiter(this.done),this.done&&(this.done||this.placeholder)?this.rendered:n[this.color]().underline(this.rendered)].join(" "),this.error&&(this.outputError+=this.errorMsg.split("\n").reduce(((t,e,s)=>t+`\n${s?" ":d.pointerSmall} ${n.red().italic(e)}`),"")),this.out.write(a.line+l.to(0)+this.outputText+l.save+this.outputError+l.restore))}}},1537:(t,e,s)=>{"use strict";const i=s(1058),r=s(6513).action,n=s(8614),o=s(2698),h=o.beep,l=o.cursor,a=s(1391);t.exports=class extends n{constructor(t={}){super(),this.firstRender=!0,this.in=t.stdin||process.stdin,this.out=t.stdout||process.stdout,this.onRender=(t.onRender||(()=>{})).bind(this);const e=i.createInterface({input:this.in,escapeCodeTimeout:50});i.emitKeypressEvents(this.in,e),this.in.isTTY&&this.in.setRawMode(!0);const s=["SelectPrompt","MultiselectPrompt"].indexOf(this.constructor.name)>-1,n=(t,e)=>{let i=r(e,s);!1===i?this._&&this._(t,e):"function"==typeof this[i]?this[i](e):this.bell()};this.close=()=>{this.out.write(l.show),this.in.removeListener("keypress",n),this.in.isTTY&&this.in.setRawMode(!1),e.close(),this.emit(this.aborted?"abort":this.exited?"exit":"submit",this.value),this.closed=!0},this.in.on("keypress",n)}fire(){this.emit("state",{value:this.value,aborted:!!this.aborted,exited:!!this.exited})}bell(){this.out.write(h)}render(){this.onRender(a),this.firstRender&&(this.firstRender=!1)}}},2289:(t,e,s)=>{"use strict";const i=s(1391),r=s(1537),n=s(6513),o=n.style,h=n.clear,l=n.figures,a=n.wrap,u=n.entriesToDisplay,c=s(2698).cursor;t.exports=class extends r{constructor(t={}){super(t),this.msg=t.message,this.hint=t.hint||"- Use arrow-keys. Return to submit.",this.warn=t.warn||"- This option is disabled",this.cursor=t.initial||0,this.choices=t.choices.map(((t,e)=>("string"==typeof t&&(t={title:t,value:e}),{title:t&&(t.title||t.value||t),value:t&&(void 0===t.value?e:t.value),description:t&&t.description,selected:t&&t.selected,disabled:t&&t.disabled}))),this.optionsPerPage=t.optionsPerPage||10,this.value=(this.choices[this.cursor]||{}).value,this.clear=h("",this.out.columns),this.render()}moveCursor(t){this.cursor=t,this.value=this.choices[t].value,this.fire()}reset(){this.moveCursor(0),this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){this.selection.disabled?this.bell():(this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close())}first(){this.moveCursor(0),this.render()}last(){this.moveCursor(this.choices.length-1),this.render()}up(){0===this.cursor?this.moveCursor(this.choices.length-1):this.moveCursor(this.cursor-1),this.render()}down(){this.cursor===this.choices.length-1?this.moveCursor(0):this.moveCursor(this.cursor+1),this.render()}next(){this.moveCursor((this.cursor+1)%this.choices.length),this.render()}_(t,e){if(" "===t)return this.submit()}get selection(){return this.choices[this.cursor]}render(){if(this.closed)return;this.firstRender?this.out.write(c.hide):this.out.write(h(this.outputText,this.out.columns)),super.render();let t=u(this.cursor,this.choices.length,this.optionsPerPage),e=t.startIndex,s=t.endIndex;if(this.outputText=[o.symbol(this.done,this.aborted),i.bold(this.msg),o.delimiter(!1),this.done?this.selection.title:this.selection.disabled?i.yellow(this.warn):i.gray(this.hint)].join(" "),!this.done){this.outputText+="\n";for(let t=e;t<s;t++){let r,n,o="",h=this.choices[t];n=t===e&&e>0?l.arrowUp:t===s-1&&s<this.choices.length?l.arrowDown:" ",h.disabled?(r=this.cursor===t?i.gray().underline(h.title):i.strikethrough().gray(h.title),n=(this.cursor===t?i.bold().gray(l.pointer)+" ":"  ")+n):(r=this.cursor===t?i.cyan().underline(h.title):h.title,n=(this.cursor===t?i.cyan(l.pointer)+" ":"  ")+n,h.description&&this.cursor===t&&(o=` - ${h.description}`,(n.length+r.length+o.length>=this.out.columns||h.description.split(/\r?\n/).length>1)&&(o="\n"+a(h.description,{margin:3,width:this.out.columns})))),this.outputText+=`${n} ${r}${i.gray(o)}\n`}}this.out.write(this.outputText)}}},1741:(t,e,s)=>{"use strict";function i(t,e,s,i,r,n,o){try{var h=t[n](o),l=h.value}catch(t){return void s(t)}h.done?e(l):Promise.resolve(l).then(i,r)}function r(t){return function(){var e=this,s=arguments;return new Promise((function(r,n){var o=t.apply(e,s);function h(t){i(o,r,n,h,l,"next",t)}function l(t){i(o,r,n,h,l,"throw",t)}h(void 0)}))}}const n=s(1391),o=s(1537),h=s(2698),l=h.erase,a=h.cursor,u=s(6513),c=u.style,d=u.clear,p=u.lines,m=u.figures;t.exports=class extends o{constructor(t={}){super(t),this.transform=c.render(t.style),this.scale=this.transform.scale,this.msg=t.message,this.initial=t.initial||"",this.validator=t.validate||(()=>!0),this.value="",this.errorMsg=t.error||"Please Enter A Valid Value",this.cursor=Number(!!this.initial),this.clear=d("",this.out.columns),this.render()}set value(t){!t&&this.initial?(this.placeholder=!0,this.rendered=n.gray(this.transform.render(this.initial))):(this.placeholder=!1,this.rendered=this.transform.render(t)),this._value=t,this.fire()}get value(){return this._value}reset(){this.value="",this.cursor=Number(!!this.initial),this.fire(),this.render()}exit(){this.abort()}abort(){this.value=this.value||this.initial,this.done=this.aborted=!0,this.error=!1,this.red=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}validate(){var t=this;return r((function*(){let e=yield t.validator(t.value);"string"==typeof e&&(t.errorMsg=e,e=!1),t.error=!e}))()}submit(){var t=this;return r((function*(){if(t.value=t.value||t.initial,yield t.validate(),t.error)return t.red=!0,t.fire(),void t.render();t.done=!0,t.aborted=!1,t.fire(),t.render(),t.out.write("\n"),t.close()}))()}next(){if(!this.placeholder)return this.bell();this.value=this.initial,this.cursor=this.rendered.length,this.fire(),this.render()}moveCursor(t){this.placeholder||(this.cursor=this.cursor+t)}_(t,e){let s=this.value.slice(0,this.cursor),i=this.value.slice(this.cursor);this.value=`${s}${t}${i}`,this.red=!1,this.cursor=this.placeholder?0:s.length+1,this.render()}delete(){if(0===this.cursor)return this.bell();let t=this.value.slice(0,this.cursor-1),e=this.value.slice(this.cursor);this.value=`${t}${e}`,this.red=!1,this.moveCursor(-1),this.render()}deleteForward(){if(this.cursor*this.scale>=this.rendered.length||this.placeholder)return this.bell();let t=this.value.slice(0,this.cursor),e=this.value.slice(this.cursor+1);this.value=`${t}${e}`,this.red=!1,this.render()}first(){this.cursor=0,this.render()}last(){this.cursor=this.value.length,this.render()}left(){if(this.cursor<=0||this.placeholder)return this.bell();this.moveCursor(-1),this.render()}right(){if(this.cursor*this.scale>=this.rendered.length||this.placeholder)return this.bell();this.moveCursor(1),this.render()}render(){this.closed||(this.firstRender||(this.outputError&&this.out.write(a.down(p(this.outputError,this.out.columns)-1)+d(this.outputError,this.out.columns)),this.out.write(d(this.outputText,this.out.columns))),super.render(),this.outputError="",this.outputText=[c.symbol(this.done,this.aborted),n.bold(this.msg),c.delimiter(this.done),this.red?n.red(this.rendered):this.rendered].join(" "),this.error&&(this.outputError+=this.errorMsg.split("\n").reduce(((t,e,s)=>t+`\n${s?" ":m.pointerSmall} ${n.red().italic(e)}`),"")),this.out.write(l.line+a.to(0)+this.outputText+a.save+this.outputError+a.restore))}}},8660:(t,e,s)=>{"use strict";const i=s(1391),r=s(1537),n=s(6513),o=n.style,h=n.clear,l=s(2698),a=l.cursor,u=l.erase;t.exports=class extends r{constructor(t={}){super(t),this.msg=t.message,this.value=!!t.initial,this.active=t.active||"on",this.inactive=t.inactive||"off",this.initialValue=this.value,this.render()}reset(){this.value=this.initialValue,this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}deactivate(){if(!1===this.value)return this.bell();this.value=!1,this.render()}activate(){if(!0===this.value)return this.bell();this.value=!0,this.render()}delete(){this.deactivate()}left(){this.deactivate()}right(){this.activate()}down(){this.deactivate()}up(){this.activate()}next(){this.value=!this.value,this.fire(),this.render()}_(t,e){if(" "===t)this.value=!this.value;else if("1"===t)this.value=!0;else{if("0"!==t)return this.bell();this.value=!1}this.render()}render(){this.closed||(this.firstRender?this.out.write(a.hide):this.out.write(h(this.outputText,this.out.columns)),super.render(),this.outputText=[o.symbol(this.done,this.aborted),i.bold(this.msg),o.delimiter(this.done),this.value?this.inactive:i.cyan().underline(this.inactive),i.gray("/"),this.value?i.cyan().underline(this.active):this.active].join(" "),this.out.write(u.line+a.to(0)+this.outputText))}}},482:(t,e,s)=>{"use strict";function i(t,e){var s=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),s.push.apply(s,i)}return s}function r(t){for(var e=1;e<arguments.length;e++){var s=null!=arguments[e]?arguments[e]:{};e%2?i(Object(s),!0).forEach((function(e){n(t,e,s[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(s)):i(Object(s)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(s,e))}))}return t}function n(t,e,s){return e in t?Object.defineProperty(t,e,{value:s,enumerable:!0,configurable:!0,writable:!0}):t[e]=s,t}function o(t,e){var s;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(s=function(t,e){if(t){if("string"==typeof t)return h(t,e);var s=Object.prototype.toString.call(t).slice(8,-1);return"Object"===s&&t.constructor&&(s=t.constructor.name),"Map"===s||"Set"===s?Array.from(t):"Arguments"===s||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s)?h(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){s&&(t=s);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n,o=!0,l=!1;return{s:function(){s=t[Symbol.iterator]()},n:function(){var t=s.next();return o=t.done,t},e:function(t){l=!0,n=t},f:function(){try{o||null==s.return||s.return()}finally{if(l)throw n}}}}function h(t,e){(null==e||e>t.length)&&(e=t.length);for(var s=0,i=new Array(e);s<e;s++)i[s]=t[s];return i}function l(t,e,s,i,r,n,o){try{var h=t[n](o),l=h.value}catch(t){return void s(t)}h.done?e(l):Promise.resolve(l).then(i,r)}function a(t){return function(){var e=this,s=arguments;return new Promise((function(i,r){var n=t.apply(e,s);function o(t){l(n,i,r,o,h,"next",t)}function h(t){l(n,i,r,o,h,"throw",t)}o(void 0)}))}}const u=s(2897),c=["suggest","format","onState","validate","onRender","type"],d=()=>{};function p(){return m.apply(this,arguments)}function m(){return(m=a((function*(t=[],{onSubmit:e=d,onCancel:s=d}={}){const i={},n=p._override||{};let h,l,m,f,v,b;t=[].concat(t);const w=function(){var t=a((function*(t,e,s=!1){if(s||!t.validate||!0===t.validate(e))return t.format?yield t.format(e,i):e}));return function(e,s){return t.apply(this,arguments)}}();var y,x=o(t);try{for(x.s();!(y=x.n()).done;){l=y.value;var S=l;if(f=S.name,v=S.type,"function"==typeof v&&(v=yield v(h,r({},i),l),l.type=v),v){for(let t in l){if(c.includes(t))continue;let e=l[t];l[t]="function"==typeof e?yield e(h,r({},i),b):e}if(b=l,"string"!=typeof l.message)throw new Error("prompt message is required");var O=l;if(f=O.name,v=O.type,void 0===u[v])throw new Error(`prompt type (${v}) is not defined`);if(void 0===n[l.name]||(h=yield w(l,n[l.name]),void 0===h)){try{h=p._injected?g(p._injected,l.initial):yield u[v](l),i[f]=h=yield w(l,h,!0),m=yield e(l,h,i)}catch(t){m=!(yield s(l,i))}if(m)return i}else i[f]=h}}}catch(t){x.e(t)}finally{x.f()}return i}))).apply(this,arguments)}function g(t,e){const s=t.shift();if(s instanceof Error)throw s;return void 0===s?e:s}t.exports=Object.assign(p,{prompt:p,prompts:u,inject:function(t){p._injected=(p._injected||[]).concat(t)},override:function(t){p._override=Object.assign({},t)}})},2897:(t,e,s)=>{"use strict";const i=e,r=s(4910),n=t=>t;function o(t,e,s={}){return new Promise(((i,o)=>{const h=new r[t](e),l=s.onAbort||n,a=s.onSubmit||n,u=s.onExit||n;h.on("state",e.onState||n),h.on("submit",(t=>i(a(t)))),h.on("exit",(t=>i(u(t)))),h.on("abort",(t=>o(l(t))))}))}i.text=t=>o("TextPrompt",t),i.password=t=>(t.style="password",i.text(t)),i.invisible=t=>(t.style="invisible",i.text(t)),i.number=t=>o("NumberPrompt",t),i.date=t=>o("DatePrompt",t),i.confirm=t=>o("ConfirmPrompt",t),i.list=t=>{const e=t.separator||",";return o("TextPrompt",t,{onSubmit:t=>t.split(e).map((t=>t.trim()))})},i.toggle=t=>o("TogglePrompt",t),i.select=t=>o("SelectPrompt",t),i.multiselect=t=>{t.choices=[].concat(t.choices||[]);const e=t=>t.filter((t=>t.selected)).map((t=>t.value));return o("MultiselectPrompt",t,{onAbort:e,onSubmit:e})},i.autocompleteMultiselect=t=>{t.choices=[].concat(t.choices||[]);const e=t=>t.filter((t=>t.selected)).map((t=>t.value));return o("AutocompleteMultiselectPrompt",t,{onAbort:e,onSubmit:e})};const h=(t,e)=>Promise.resolve(e.filter((e=>e.title.slice(0,t.length).toLowerCase()===t.toLowerCase())));i.autocomplete=t=>(t.suggest=t.suggest||h,t.choices=[].concat(t.choices||[]),o("AutocompletePrompt",t))},3556:t=>{"use strict";t.exports=(t,e)=>{if(!t.meta||"escape"===t.name){if(t.ctrl){if("a"===t.name)return"first";if("c"===t.name)return"abort";if("d"===t.name)return"abort";if("e"===t.name)return"last";if("g"===t.name)return"reset"}if(e){if("j"===t.name)return"down";if("k"===t.name)return"up"}return"return"===t.name||"enter"===t.name?"submit":"backspace"===t.name?"delete":"delete"===t.name?"deleteForward":"abort"===t.name?"abort":"escape"===t.name?"exit":"tab"===t.name?"next":"pagedown"===t.name?"nextPage":"pageup"===t.name?"prevPage":"home"===t.name?"home":"end"===t.name?"end":"up"===t.name?"up":"down"===t.name?"down":"right"===t.name?"right":"left"===t.name&&"left"}}},8296:(t,e,s)=>{"use strict";function i(t,e){(null==e||e>t.length)&&(e=t.length);for(var s=0,i=new Array(e);s<e;s++)i[s]=t[s];return i}const r=s(7734),n=s(2698),o=n.erase,h=n.cursor;t.exports=function(t,e){if(!e)return o.line+h.to(0);let s=0;var n,l=function(t,e){var s;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(s=function(t,e){if(t){if("string"==typeof t)return i(t,e);var s=Object.prototype.toString.call(t).slice(8,-1);return"Object"===s&&t.constructor&&(s=t.constructor.name),"Map"===s||"Set"===s?Array.from(t):"Arguments"===s||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s)?i(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){s&&(t=s);var r=0,n=function(){};return{s:n,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,h=!0,l=!1;return{s:function(){s=t[Symbol.iterator]()},n:function(){var t=s.next();return h=t.done,t},e:function(t){l=!0,o=t},f:function(){try{h||null==s.return||s.return()}finally{if(l)throw o}}}}(t.split(/\r?\n/));try{for(l.s();!(n=l.n()).done;){let t=n.value;s+=1+Math.floor(Math.max([...r(t)].length-1,0)/e)}}catch(t){l.e(t)}finally{l.f()}return o.lines(s)}},2496:t=>{"use strict";t.exports=(t,e,s)=>{s=s||e;let i=Math.min(e-s,t-Math.floor(s/2));return i<0&&(i=0),{startIndex:i,endIndex:Math.min(i+s,e)}}},9188:t=>{"use strict";const e={arrowUp:"↑",arrowDown:"↓",arrowLeft:"←",arrowRight:"→",radioOn:"◉",radioOff:"◯",tick:"✔",cross:"✖",ellipsis:"…",pointerSmall:"›",line:"─",pointer:"❯"},s={arrowUp:e.arrowUp,arrowDown:e.arrowDown,arrowLeft:e.arrowLeft,arrowRight:e.arrowRight,radioOn:"(*)",radioOff:"( )",tick:"√",cross:"×",ellipsis:"...",pointerSmall:"»",line:"─",pointer:">"},i="win32"===process.platform?s:e;t.exports=i},6513:(t,e,s)=>{"use strict";t.exports={action:s(3556),clear:s(8296),style:s(2052),strip:s(7734),figures:s(9188),lines:s(7731),wrap:s(8611),entriesToDisplay:s(2496)}},7731:(t,e,s)=>{"use strict";const i=s(7734);t.exports=function(t,e){let s=String(i(t)||"").split(/\r?\n/);return e?s.map((t=>Math.ceil(t.length/e))).reduce(((t,e)=>t+e)):s.length}},7734:t=>{"use strict";t.exports=t=>{const e=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[a-zA-Z\\d]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))"].join("|"),s=new RegExp(e,"g");return"string"==typeof t?t.replace(s,""):t}},2052:(t,e,s)=>{"use strict";const i=s(1391),r=s(9188),n=Object.freeze({password:{scale:1,render:t=>"*".repeat(t.length)},emoji:{scale:2,render:t=>"😃".repeat(t.length)},invisible:{scale:0,render:t=>""},default:{scale:1,render:t=>`${t}`}}),o=Object.freeze({aborted:i.red(r.cross),done:i.green(r.tick),exited:i.yellow(r.cross),default:i.cyan("?")});t.exports={styles:n,render:t=>n[t]||n.default,symbols:o,symbol:(t,e,s)=>e?o.aborted:s?o.exited:t?o.done:o.default,delimiter:t=>i.gray(t?r.ellipsis:r.pointerSmall),item:(t,e)=>i.gray(t?e?r.pointerSmall:"+":r.line)}},8611:t=>{"use strict";t.exports=(t,e={})=>{const s=Number.isSafeInteger(parseInt(e.margin))?new Array(parseInt(e.margin)).fill(" ").join(""):e.margin||"",i=e.width;return(t||"").split(/\r?\n/g).map((t=>t.split(/\s+/g).reduce(((t,e)=>(e.length+s.length>=i||t[t.length-1].length+e.length+1<i?t[t.length-1]+=` ${e}`:t.push(`${s}${e}`),t)),[s]).join("\n"))).join("\n")}},8809:(t,e,s)=>{t.exports=function(t){t=(Array.isArray(t)?t:t.split(".")).map(Number);let e=0,s=process.versions.node.split(".").map(Number);for(;e<t.length;e++){if(s[e]>t[e])return!1;if(t[e]>s[e])return!0}return!1}("8.6.0")?s(482):s(9439)},5468:t=>{"use strict";class e{constructor({token:t,date:e,parts:s,locales:i}){this.token=t,this.date=e||new Date,this.parts=s||[this],this.locales=i||{}}up(){}down(){}next(){const t=this.parts.indexOf(this);return this.parts.find(((s,i)=>i>t&&s instanceof e))}setTo(t){}prev(){let t=[].concat(this.parts).reverse();const s=t.indexOf(this);return t.find(((t,i)=>i>s&&t instanceof e))}toString(){return String(this.date)}}t.exports=e},608:(t,e,s)=>{"use strict";const i=s(5468);t.exports=class extends i{constructor(t={}){super(t)}up(){this.date.setDate(this.date.getDate()+1)}down(){this.date.setDate(this.date.getDate()-1)}setTo(t){this.date.setDate(parseInt(t.substr(-2)))}toString(){let t=this.date.getDate(),e=this.date.getDay();return"DD"===this.token?String(t).padStart(2,"0"):"Do"===this.token?t+(s=t,1==(s%=10)?"st":2===s?"nd":3===s?"rd":"th"):"d"===this.token?e+1:"ddd"===this.token?this.locales.weekdaysShort[e]:"dddd"===this.token?this.locales.weekdays[e]:t;var s}}},4134:(t,e,s)=>{"use strict";const i=s(5468);t.exports=class extends i{constructor(t={}){super(t)}up(){this.date.setHours(this.date.getHours()+1)}down(){this.date.setHours(this.date.getHours()-1)}setTo(t){this.date.setHours(parseInt(t.substr(-2)))}toString(){let t=this.date.getHours();return/h/.test(this.token)&&(t=t%12||12),this.token.length>1?String(t).padStart(2,"0"):t}}},1106:(t,e,s)=>{"use strict";t.exports={DatePart:s(5468),Meridiem:s(689),Day:s(608),Hours:s(4134),Milliseconds:s(5479),Minutes:s(5512),Month:s(8318),Seconds:s(8908),Year:s(9958)}},689:(t,e,s)=>{"use strict";const i=s(5468);t.exports=class extends i{constructor(t={}){super(t)}up(){this.date.setHours((this.date.getHours()+12)%24)}down(){this.up()}toString(){let t=this.date.getHours()>12?"pm":"am";return/\A/.test(this.token)?t.toUpperCase():t}}},5479:(t,e,s)=>{"use strict";const i=s(5468);t.exports=class extends i{constructor(t={}){super(t)}up(){this.date.setMilliseconds(this.date.getMilliseconds()+1)}down(){this.date.setMilliseconds(this.date.getMilliseconds()-1)}setTo(t){this.date.setMilliseconds(parseInt(t.substr(-this.token.length)))}toString(){return String(this.date.getMilliseconds()).padStart(4,"0").substr(0,this.token.length)}}},5512:(t,e,s)=>{"use strict";const i=s(5468);t.exports=class extends i{constructor(t={}){super(t)}up(){this.date.setMinutes(this.date.getMinutes()+1)}down(){this.date.setMinutes(this.date.getMinutes()-1)}setTo(t){this.date.setMinutes(parseInt(t.substr(-2)))}toString(){let t=this.date.getMinutes();return this.token.length>1?String(t).padStart(2,"0"):t}}},8318:(t,e,s)=>{"use strict";const i=s(5468);t.exports=class extends i{constructor(t={}){super(t)}up(){this.date.setMonth(this.date.getMonth()+1)}down(){this.date.setMonth(this.date.getMonth()-1)}setTo(t){t=parseInt(t.substr(-2))-1,this.date.setMonth(t<0?0:t)}toString(){let t=this.date.getMonth(),e=this.token.length;return 2===e?String(t+1).padStart(2,"0"):3===e?this.locales.monthsShort[t]:4===e?this.locales.months[t]:String(t+1)}}},8908:(t,e,s)=>{"use strict";const i=s(5468);t.exports=class extends i{constructor(t={}){super(t)}up(){this.date.setSeconds(this.date.getSeconds()+1)}down(){this.date.setSeconds(this.date.getSeconds()-1)}setTo(t){this.date.setSeconds(parseInt(t.substr(-2)))}toString(){let t=this.date.getSeconds();return this.token.length>1?String(t).padStart(2,"0"):t}}},9958:(t,e,s)=>{"use strict";const i=s(5468);t.exports=class extends i{constructor(t={}){super(t)}up(){this.date.setFullYear(this.date.getFullYear()+1)}down(){this.date.setFullYear(this.date.getFullYear()-1)}setTo(t){this.date.setFullYear(t.substr(-4))}toString(){let t=String(this.date.getFullYear()).padStart(4,"0");return 2===this.token.length?t.substr(-2):t}}},656:(t,e,s)=>{"use strict";const i=s(1391),r=s(1739),{erase:n,cursor:o}=s(2698),{style:h,clear:l,figures:a,wrap:u,entriesToDisplay:c}=s(9016),d=(t,e)=>t[e]&&(t[e].value||t[e].title||t[e]),p=(t,e)=>t[e]&&(t[e].title||t[e].value||t[e]);t.exports=class extends r{constructor(t={}){super(t),this.msg=t.message,this.suggest=t.suggest,this.choices=t.choices,this.initial="number"==typeof t.initial?t.initial:((t,e)=>{const s=t.findIndex((t=>t.value===e||t.title===e));return s>-1?s:void 0})(t.choices,t.initial),this.select=this.initial||t.cursor||0,this.i18n={noMatches:t.noMatches||"no matches found"},this.fallback=t.fallback||this.initial,this.clearFirst=t.clearFirst||!1,this.suggestions=[],this.input="",this.limit=t.limit||10,this.cursor=0,this.transform=h.render(t.style),this.scale=this.transform.scale,this.render=this.render.bind(this),this.complete=this.complete.bind(this),this.clear=l("",this.out.columns),this.complete(this.render),this.render()}set fallback(t){this._fb=Number.isSafeInteger(parseInt(t))?parseInt(t):t}get fallback(){let t;return"number"==typeof this._fb?t=this.choices[this._fb]:"string"==typeof this._fb&&(t={title:this._fb}),t||this._fb||{title:this.i18n.noMatches}}moveSelect(t){this.select=t,this.suggestions.length>0?this.value=d(this.suggestions,t):this.value=this.fallback.value,this.fire()}async complete(t){const e=this.completing=this.suggest(this.input,this.choices),s=await e;if(this.completing!==e)return;this.suggestions=s.map(((t,e,s)=>({title:p(s,e),value:d(s,e),description:t.description}))),this.completing=!1;const i=Math.max(s.length-1,0);this.moveSelect(Math.min(i,this.select)),t&&t()}reset(){this.input="",this.complete((()=>{this.moveSelect(void 0!==this.initial?this.initial:0),this.render()})),this.render()}exit(){this.clearFirst&&this.input.length>0?this.reset():(this.done=this.exited=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close())}abort(){this.done=this.aborted=!0,this.exited=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){this.done=!0,this.aborted=this.exited=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}_(t,e){let s=this.input.slice(0,this.cursor),i=this.input.slice(this.cursor);this.input=`${s}${t}${i}`,this.cursor=s.length+1,this.complete(this.render),this.render()}delete(){if(0===this.cursor)return this.bell();let t=this.input.slice(0,this.cursor-1),e=this.input.slice(this.cursor);this.input=`${t}${e}`,this.complete(this.render),this.cursor=this.cursor-1,this.render()}deleteForward(){if(this.cursor*this.scale>=this.rendered.length)return this.bell();let t=this.input.slice(0,this.cursor),e=this.input.slice(this.cursor+1);this.input=`${t}${e}`,this.complete(this.render),this.render()}first(){this.moveSelect(0),this.render()}last(){this.moveSelect(this.suggestions.length-1),this.render()}up(){0===this.select?this.moveSelect(this.suggestions.length-1):this.moveSelect(this.select-1),this.render()}down(){this.select===this.suggestions.length-1?this.moveSelect(0):this.moveSelect(this.select+1),this.render()}next(){this.select===this.suggestions.length-1?this.moveSelect(0):this.moveSelect(this.select+1),this.render()}nextPage(){this.moveSelect(Math.min(this.select+this.limit,this.suggestions.length-1)),this.render()}prevPage(){this.moveSelect(Math.max(this.select-this.limit,0)),this.render()}left(){if(this.cursor<=0)return this.bell();this.cursor=this.cursor-1,this.render()}right(){if(this.cursor*this.scale>=this.rendered.length)return this.bell();this.cursor=this.cursor+1,this.render()}renderOption(t,e,s,r){let n,o=s?a.arrowUp:r?a.arrowDown:" ",h=e?i.cyan().underline(t.title):t.title;return o=(e?i.cyan(a.pointer)+" ":"  ")+o,t.description&&(n=` - ${t.description}`,(o.length+h.length+n.length>=this.out.columns||t.description.split(/\r?\n/).length>1)&&(n="\n"+u(t.description,{margin:3,width:this.out.columns}))),o+" "+h+i.gray(n||"")}render(){if(this.closed)return;this.firstRender?this.out.write(o.hide):this.out.write(l(this.outputText,this.out.columns)),super.render();let{startIndex:t,endIndex:e}=c(this.select,this.choices.length,this.limit);if(this.outputText=[h.symbol(this.done,this.aborted,this.exited),i.bold(this.msg),h.delimiter(this.completing),this.done&&this.suggestions[this.select]?this.suggestions[this.select].title:this.rendered=this.transform.render(this.input)].join(" "),!this.done){const s=this.suggestions.slice(t,e).map(((s,i)=>this.renderOption(s,this.select===i+t,0===i&&t>0,i+t===e-1&&e<this.choices.length))).join("\n");this.outputText+="\n"+(s||i.gray(this.fallback.title))}this.out.write(n.line+o.to(0)+this.outputText)}}},6900:(t,e,s)=>{"use strict";const i=s(1391),{cursor:r}=s(2698),n=s(3702),{clear:o,style:h,figures:l}=s(9016);t.exports=class extends n{constructor(t={}){t.overrideRender=!0,super(t),this.inputValue="",this.clear=o("",this.out.columns),this.filteredOptions=this.value,this.render()}last(){this.cursor=this.filteredOptions.length-1,this.render()}next(){this.cursor=(this.cursor+1)%this.filteredOptions.length,this.render()}up(){0===this.cursor?this.cursor=this.filteredOptions.length-1:this.cursor--,this.render()}down(){this.cursor===this.filteredOptions.length-1?this.cursor=0:this.cursor++,this.render()}left(){this.filteredOptions[this.cursor].selected=!1,this.render()}right(){if(this.value.filter((t=>t.selected)).length>=this.maxChoices)return this.bell();this.filteredOptions[this.cursor].selected=!0,this.render()}delete(){this.inputValue.length&&(this.inputValue=this.inputValue.substr(0,this.inputValue.length-1),this.updateFilteredOptions())}updateFilteredOptions(){const t=this.filteredOptions[this.cursor];this.filteredOptions=this.value.filter((t=>!this.inputValue||!("string"!=typeof t.title||!t.title.toLowerCase().includes(this.inputValue.toLowerCase()))||!("string"!=typeof t.value||!t.value.toLowerCase().includes(this.inputValue.toLowerCase()))));const e=this.filteredOptions.findIndex((e=>e===t));this.cursor=e<0?0:e,this.render()}handleSpaceToggle(){const t=this.filteredOptions[this.cursor];if(t.selected)t.selected=!1,this.render();else{if(t.disabled||this.value.filter((t=>t.selected)).length>=this.maxChoices)return this.bell();t.selected=!0,this.render()}}handleInputChange(t){this.inputValue=this.inputValue+t,this.updateFilteredOptions()}_(t,e){" "===t?this.handleSpaceToggle():this.handleInputChange(t)}renderInstructions(){return void 0===this.instructions||this.instructions?"string"==typeof this.instructions?this.instructions:`\nInstructions:\n    ${l.arrowUp}/${l.arrowDown}: Highlight option\n    ${l.arrowLeft}/${l.arrowRight}/[space]: Toggle selection\n    [a,b,c]/delete: Filter choices\n    enter/return: Complete answer\n`:""}renderCurrentInput(){return`\nFiltered results for: ${this.inputValue?this.inputValue:i.gray("Enter something to filter")}\n`}renderOption(t,e,s){let r;return r=e.disabled?t===s?i.gray().underline(e.title):i.strikethrough().gray(e.title):t===s?i.cyan().underline(e.title):e.title,(e.selected?i.green(l.radioOn):l.radioOff)+"  "+r}renderDoneOrInstructions(){if(this.done)return this.value.filter((t=>t.selected)).map((t=>t.title)).join(", ");const t=[i.gray(this.hint),this.renderInstructions(),this.renderCurrentInput()];return this.filteredOptions.length&&this.filteredOptions[this.cursor].disabled&&t.push(i.yellow(this.warn)),t.join(" ")}render(){if(this.closed)return;this.firstRender&&this.out.write(r.hide),super.render();let t=[h.symbol(this.done,this.aborted),i.bold(this.msg),h.delimiter(!1),this.renderDoneOrInstructions()].join(" ");this.showMinError&&(t+=i.red(`You must select a minimum of ${this.minSelected} choices.`),this.showMinError=!1),t+=this.renderOptions(this.filteredOptions),this.out.write(this.clear+t),this.clear=o(t,this.out.columns)}}},5747:(t,e,s)=>{const i=s(1391),r=s(1739),{style:n,clear:o}=s(9016),{erase:h,cursor:l}=s(2698);t.exports=class extends r{constructor(t={}){super(t),this.msg=t.message,this.value=t.initial,this.initialValue=!!t.initial,this.yesMsg=t.yes||"yes",this.yesOption=t.yesOption||"(Y/n)",this.noMsg=t.no||"no",this.noOption=t.noOption||"(y/N)",this.render()}reset(){this.value=this.initialValue,this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){this.value=this.value||!1,this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}_(t,e){return"y"===t.toLowerCase()?(this.value=!0,this.submit()):"n"===t.toLowerCase()?(this.value=!1,this.submit()):this.bell()}render(){this.closed||(this.firstRender?this.out.write(l.hide):this.out.write(o(this.outputText,this.out.columns)),super.render(),this.outputText=[n.symbol(this.done,this.aborted),i.bold(this.msg),n.delimiter(this.done),this.done?this.value?this.yesMsg:this.noMsg:i.gray(this.initialValue?this.yesOption:this.noOption)].join(" "),this.out.write(h.line+l.to(0)+this.outputText))}}},1054:(t,e,s)=>{"use strict";const i=s(1391),r=s(1739),{style:n,clear:o,figures:h}=s(9016),{erase:l,cursor:a}=s(2698),{DatePart:u,Meridiem:c,Day:d,Hours:p,Milliseconds:m,Minutes:g,Month:f,Seconds:v,Year:b}=s(1106),w=/\\(.)|"((?:\\["\\]|[^"])+)"|(D[Do]?|d{3,4}|d)|(M{1,4})|(YY(?:YY)?)|([aA])|([Hh]{1,2})|(m{1,2})|(s{1,2})|(S{1,4})|./g,y={1:({token:t})=>t.replace(/\\(.)/g,"$1"),2:t=>new d(t),3:t=>new f(t),4:t=>new b(t),5:t=>new c(t),6:t=>new p(t),7:t=>new g(t),8:t=>new v(t),9:t=>new m(t)},x={months:"January,February,March,April,May,June,July,August,September,October,November,December".split(","),monthsShort:"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),weekdays:"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),weekdaysShort:"Sun,Mon,Tue,Wed,Thu,Fri,Sat".split(",")};t.exports=class extends r{constructor(t={}){super(t),this.msg=t.message,this.cursor=0,this.typed="",this.locales=Object.assign(x,t.locales),this._date=t.initial||new Date,this.errorMsg=t.error||"Please Enter A Valid Value",this.validator=t.validate||(()=>!0),this.mask=t.mask||"YYYY-MM-DD HH:mm:ss",this.clear=o("",this.out.columns),this.render()}get value(){return this.date}get date(){return this._date}set date(t){t&&this._date.setTime(t.getTime())}set mask(t){let e;for(this.parts=[];e=w.exec(t);){let t=e.shift(),s=e.findIndex((t=>null!=t));this.parts.push(s in y?y[s]({token:e[s]||t,date:this.date,parts:this.parts,locales:this.locales}):e[s]||t)}let s=this.parts.reduce(((t,e)=>("string"==typeof e&&"string"==typeof t[t.length-1]?t[t.length-1]+=e:t.push(e),t)),[]);this.parts.splice(0),this.parts.push(...s),this.reset()}moveCursor(t){this.typed="",this.cursor=t,this.fire()}reset(){this.moveCursor(this.parts.findIndex((t=>t instanceof u))),this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.error=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}async validate(){let t=await this.validator(this.value);"string"==typeof t&&(this.errorMsg=t,t=!1),this.error=!t}async submit(){if(await this.validate(),this.error)return this.color="red",this.fire(),void this.render();this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}up(){this.typed="",this.parts[this.cursor].up(),this.render()}down(){this.typed="",this.parts[this.cursor].down(),this.render()}left(){let t=this.parts[this.cursor].prev();if(null==t)return this.bell();this.moveCursor(this.parts.indexOf(t)),this.render()}right(){let t=this.parts[this.cursor].next();if(null==t)return this.bell();this.moveCursor(this.parts.indexOf(t)),this.render()}next(){let t=this.parts[this.cursor].next();this.moveCursor(t?this.parts.indexOf(t):this.parts.findIndex((t=>t instanceof u))),this.render()}_(t){/\d/.test(t)&&(this.typed+=t,this.parts[this.cursor].setTo(this.typed),this.render())}render(){this.closed||(this.firstRender?this.out.write(a.hide):this.out.write(o(this.outputText,this.out.columns)),super.render(),this.outputText=[n.symbol(this.done,this.aborted),i.bold(this.msg),n.delimiter(!1),this.parts.reduce(((t,e,s)=>t.concat(s!==this.cursor||this.done?e:i.cyan().underline(e.toString()))),[]).join("")].join(" "),this.error&&(this.outputText+=this.errorMsg.split("\n").reduce(((t,e,s)=>t+`\n${s?" ":h.pointerSmall} ${i.red().italic(e)}`),"")),this.out.write(l.line+a.to(0)+this.outputText))}}},635:(t,e,s)=>{"use strict";t.exports={TextPrompt:s(4490),SelectPrompt:s(9770),TogglePrompt:s(4639),DatePrompt:s(1054),NumberPrompt:s(8531),MultiselectPrompt:s(3702),AutocompletePrompt:s(656),AutocompleteMultiselectPrompt:s(6900),ConfirmPrompt:s(5747)}},3702:(t,e,s)=>{"use strict";const i=s(1391),{cursor:r}=s(2698),n=s(1739),{clear:o,figures:h,style:l,wrap:a,entriesToDisplay:u}=s(9016);t.exports=class extends n{constructor(t={}){super(t),this.msg=t.message,this.cursor=t.cursor||0,this.scrollIndex=t.cursor||0,this.hint=t.hint||"",this.warn=t.warn||"- This option is disabled -",this.minSelected=t.min,this.showMinError=!1,this.maxChoices=t.max,this.instructions=t.instructions,this.optionsPerPage=t.optionsPerPage||10,this.value=t.choices.map(((t,e)=>("string"==typeof t&&(t={title:t,value:e}),{title:t&&(t.title||t.value||t),description:t&&t.description,value:t&&(void 0===t.value?e:t.value),selected:t&&t.selected,disabled:t&&t.disabled}))),this.clear=o("",this.out.columns),t.overrideRender||this.render()}reset(){this.value.map((t=>!t.selected)),this.cursor=0,this.fire(),this.render()}selected(){return this.value.filter((t=>t.selected))}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){const t=this.value.filter((t=>t.selected));this.minSelected&&t.length<this.minSelected?(this.showMinError=!0,this.render()):(this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close())}first(){this.cursor=0,this.render()}last(){this.cursor=this.value.length-1,this.render()}next(){this.cursor=(this.cursor+1)%this.value.length,this.render()}up(){0===this.cursor?this.cursor=this.value.length-1:this.cursor--,this.render()}down(){this.cursor===this.value.length-1?this.cursor=0:this.cursor++,this.render()}left(){this.value[this.cursor].selected=!1,this.render()}right(){if(this.value.filter((t=>t.selected)).length>=this.maxChoices)return this.bell();this.value[this.cursor].selected=!0,this.render()}handleSpaceToggle(){const t=this.value[this.cursor];if(t.selected)t.selected=!1,this.render();else{if(t.disabled||this.value.filter((t=>t.selected)).length>=this.maxChoices)return this.bell();t.selected=!0,this.render()}}toggleAll(){if(void 0!==this.maxChoices||this.value[this.cursor].disabled)return this.bell();const t=!this.value[this.cursor].selected;this.value.filter((t=>!t.disabled)).forEach((e=>e.selected=t)),this.render()}_(t,e){if(" "===t)this.handleSpaceToggle();else{if("a"!==t)return this.bell();this.toggleAll()}}renderInstructions(){return void 0===this.instructions||this.instructions?"string"==typeof this.instructions?this.instructions:`\nInstructions:\n    ${h.arrowUp}/${h.arrowDown}: Highlight option\n    ${h.arrowLeft}/${h.arrowRight}/[space]: Toggle selection\n`+(void 0===this.maxChoices?"    a: Toggle all\n":"")+"    enter/return: Complete answer":""}renderOption(t,e,s,r){const n=(e.selected?i.green(h.radioOn):h.radioOff)+" "+r+" ";let o,l;return e.disabled?o=t===s?i.gray().underline(e.title):i.strikethrough().gray(e.title):(o=t===s?i.cyan().underline(e.title):e.title,t===s&&e.description&&(l=` - ${e.description}`,(n.length+o.length+l.length>=this.out.columns||e.description.split(/\r?\n/).length>1)&&(l="\n"+a(e.description,{margin:n.length,width:this.out.columns})))),n+o+i.gray(l||"")}paginateOptions(t){if(0===t.length)return i.red("No matches for this query.");let e,{startIndex:s,endIndex:r}=u(this.cursor,t.length,this.optionsPerPage),n=[];for(let i=s;i<r;i++)e=i===s&&s>0?h.arrowUp:i===r-1&&r<t.length?h.arrowDown:" ",n.push(this.renderOption(this.cursor,t[i],i,e));return"\n"+n.join("\n")}renderOptions(t){return this.done?"":this.paginateOptions(t)}renderDoneOrInstructions(){if(this.done)return this.value.filter((t=>t.selected)).map((t=>t.title)).join(", ");const t=[i.gray(this.hint),this.renderInstructions()];return this.value[this.cursor].disabled&&t.push(i.yellow(this.warn)),t.join(" ")}render(){if(this.closed)return;this.firstRender&&this.out.write(r.hide),super.render();let t=[l.symbol(this.done,this.aborted),i.bold(this.msg),l.delimiter(!1),this.renderDoneOrInstructions()].join(" ");this.showMinError&&(t+=i.red(`You must select a minimum of ${this.minSelected} choices.`),this.showMinError=!1),t+=this.renderOptions(this.value),this.out.write(this.clear+t),this.clear=o(t,this.out.columns)}}},8531:(t,e,s)=>{const i=s(1391),r=s(1739),{cursor:n,erase:o}=s(2698),{style:h,figures:l,clear:a,lines:u}=s(9016),c=/[0-9]/,d=t=>void 0!==t,p=(t,e)=>{let s=Math.pow(10,e);return Math.round(t*s)/s};t.exports=class extends r{constructor(t={}){super(t),this.transform=h.render(t.style),this.msg=t.message,this.initial=d(t.initial)?t.initial:"",this.float=!!t.float,this.round=t.round||2,this.inc=t.increment||1,this.min=d(t.min)?t.min:-1/0,this.max=d(t.max)?t.max:1/0,this.errorMsg=t.error||"Please Enter A Valid Value",this.validator=t.validate||(()=>!0),this.color="cyan",this.value="",this.typed="",this.lastHit=0,this.render()}set value(t){t||0===t?(this.placeholder=!1,this.rendered=this.transform.render(`${p(t,this.round)}`),this._value=p(t,this.round)):(this.placeholder=!0,this.rendered=i.gray(this.transform.render(`${this.initial}`)),this._value=""),this.fire()}get value(){return this._value}parse(t){return this.float?parseFloat(t):parseInt(t)}valid(t){return"-"===t||"."===t&&this.float||c.test(t)}reset(){this.typed="",this.value="",this.fire(),this.render()}exit(){this.abort()}abort(){let t=this.value;this.value=""!==t?t:this.initial,this.done=this.aborted=!0,this.error=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}async validate(){let t=await this.validator(this.value);"string"==typeof t&&(this.errorMsg=t,t=!1),this.error=!t}async submit(){if(await this.validate(),this.error)return this.color="red",this.fire(),void this.render();let t=this.value;this.value=""!==t?t:this.initial,this.done=!0,this.aborted=!1,this.error=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}up(){if(this.typed="",""===this.value&&(this.value=this.min-this.inc),this.value>=this.max)return this.bell();this.value+=this.inc,this.color="cyan",this.fire(),this.render()}down(){if(this.typed="",""===this.value&&(this.value=this.min+this.inc),this.value<=this.min)return this.bell();this.value-=this.inc,this.color="cyan",this.fire(),this.render()}delete(){let t=this.value.toString();if(0===t.length)return this.bell();this.value=this.parse(t=t.slice(0,-1))||"",""!==this.value&&this.value<this.min&&(this.value=this.min),this.color="cyan",this.fire(),this.render()}next(){this.value=this.initial,this.fire(),this.render()}_(t,e){if(!this.valid(t))return this.bell();const s=Date.now();if(s-this.lastHit>1e3&&(this.typed=""),this.typed+=t,this.lastHit=s,this.color="cyan","."===t)return this.fire();this.value=Math.min(this.parse(this.typed),this.max),this.value>this.max&&(this.value=this.max),this.value<this.min&&(this.value=this.min),this.fire(),this.render()}render(){this.closed||(this.firstRender||(this.outputError&&this.out.write(n.down(u(this.outputError,this.out.columns)-1)+a(this.outputError,this.out.columns)),this.out.write(a(this.outputText,this.out.columns))),super.render(),this.outputError="",this.outputText=[h.symbol(this.done,this.aborted),i.bold(this.msg),h.delimiter(this.done),this.done&&(this.done||this.placeholder)?this.rendered:i[this.color]().underline(this.rendered)].join(" "),this.error&&(this.outputError+=this.errorMsg.split("\n").reduce(((t,e,s)=>t+`\n${s?" ":l.pointerSmall} ${i.red().italic(e)}`),"")),this.out.write(o.line+n.to(0)+this.outputText+n.save+this.outputError+n.restore))}}},1739:(t,e,s)=>{"use strict";const i=s(1058),{action:r}=s(9016),n=s(8614),{beep:o,cursor:h}=s(2698),l=s(1391);t.exports=class extends n{constructor(t={}){super(),this.firstRender=!0,this.in=t.stdin||process.stdin,this.out=t.stdout||process.stdout,this.onRender=(t.onRender||(()=>{})).bind(this);const e=i.createInterface({input:this.in,escapeCodeTimeout:50});i.emitKeypressEvents(this.in,e),this.in.isTTY&&this.in.setRawMode(!0);const s=["SelectPrompt","MultiselectPrompt"].indexOf(this.constructor.name)>-1,n=(t,e)=>{let i=r(e,s);!1===i?this._&&this._(t,e):"function"==typeof this[i]?this[i](e):this.bell()};this.close=()=>{this.out.write(h.show),this.in.removeListener("keypress",n),this.in.isTTY&&this.in.setRawMode(!1),e.close(),this.emit(this.aborted?"abort":this.exited?"exit":"submit",this.value),this.closed=!0},this.in.on("keypress",n)}fire(){this.emit("state",{value:this.value,aborted:!!this.aborted,exited:!!this.exited})}bell(){this.out.write(o)}render(){this.onRender(l),this.firstRender&&(this.firstRender=!1)}}},9770:(t,e,s)=>{"use strict";const i=s(1391),r=s(1739),{style:n,clear:o,figures:h,wrap:l,entriesToDisplay:a}=s(9016),{cursor:u}=s(2698);t.exports=class extends r{constructor(t={}){super(t),this.msg=t.message,this.hint=t.hint||"- Use arrow-keys. Return to submit.",this.warn=t.warn||"- This option is disabled",this.cursor=t.initial||0,this.choices=t.choices.map(((t,e)=>("string"==typeof t&&(t={title:t,value:e}),{title:t&&(t.title||t.value||t),value:t&&(void 0===t.value?e:t.value),description:t&&t.description,selected:t&&t.selected,disabled:t&&t.disabled}))),this.optionsPerPage=t.optionsPerPage||10,this.value=(this.choices[this.cursor]||{}).value,this.clear=o("",this.out.columns),this.render()}moveCursor(t){this.cursor=t,this.value=this.choices[t].value,this.fire()}reset(){this.moveCursor(0),this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){this.selection.disabled?this.bell():(this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close())}first(){this.moveCursor(0),this.render()}last(){this.moveCursor(this.choices.length-1),this.render()}up(){0===this.cursor?this.moveCursor(this.choices.length-1):this.moveCursor(this.cursor-1),this.render()}down(){this.cursor===this.choices.length-1?this.moveCursor(0):this.moveCursor(this.cursor+1),this.render()}next(){this.moveCursor((this.cursor+1)%this.choices.length),this.render()}_(t,e){if(" "===t)return this.submit()}get selection(){return this.choices[this.cursor]}render(){if(this.closed)return;this.firstRender?this.out.write(u.hide):this.out.write(o(this.outputText,this.out.columns)),super.render();let{startIndex:t,endIndex:e}=a(this.cursor,this.choices.length,this.optionsPerPage);if(this.outputText=[n.symbol(this.done,this.aborted),i.bold(this.msg),n.delimiter(!1),this.done?this.selection.title:this.selection.disabled?i.yellow(this.warn):i.gray(this.hint)].join(" "),!this.done){this.outputText+="\n";for(let s=t;s<e;s++){let r,n,o="",a=this.choices[s];n=s===t&&t>0?h.arrowUp:s===e-1&&e<this.choices.length?h.arrowDown:" ",a.disabled?(r=this.cursor===s?i.gray().underline(a.title):i.strikethrough().gray(a.title),n=(this.cursor===s?i.bold().gray(h.pointer)+" ":"  ")+n):(r=this.cursor===s?i.cyan().underline(a.title):a.title,n=(this.cursor===s?i.cyan(h.pointer)+" ":"  ")+n,a.description&&this.cursor===s&&(o=` - ${a.description}`,(n.length+r.length+o.length>=this.out.columns||a.description.split(/\r?\n/).length>1)&&(o="\n"+l(a.description,{margin:3,width:this.out.columns})))),this.outputText+=`${n} ${r}${i.gray(o)}\n`}}this.out.write(this.outputText)}}},4490:(t,e,s)=>{const i=s(1391),r=s(1739),{erase:n,cursor:o}=s(2698),{style:h,clear:l,lines:a,figures:u}=s(9016);t.exports=class extends r{constructor(t={}){super(t),this.transform=h.render(t.style),this.scale=this.transform.scale,this.msg=t.message,this.initial=t.initial||"",this.validator=t.validate||(()=>!0),this.value="",this.errorMsg=t.error||"Please Enter A Valid Value",this.cursor=Number(!!this.initial),this.clear=l("",this.out.columns),this.render()}set value(t){!t&&this.initial?(this.placeholder=!0,this.rendered=i.gray(this.transform.render(this.initial))):(this.placeholder=!1,this.rendered=this.transform.render(t)),this._value=t,this.fire()}get value(){return this._value}reset(){this.value="",this.cursor=Number(!!this.initial),this.fire(),this.render()}exit(){this.abort()}abort(){this.value=this.value||this.initial,this.done=this.aborted=!0,this.error=!1,this.red=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}async validate(){let t=await this.validator(this.value);"string"==typeof t&&(this.errorMsg=t,t=!1),this.error=!t}async submit(){if(this.value=this.value||this.initial,await this.validate(),this.error)return this.red=!0,this.fire(),void this.render();this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}next(){if(!this.placeholder)return this.bell();this.value=this.initial,this.cursor=this.rendered.length,this.fire(),this.render()}moveCursor(t){this.placeholder||(this.cursor=this.cursor+t)}_(t,e){let s=this.value.slice(0,this.cursor),i=this.value.slice(this.cursor);this.value=`${s}${t}${i}`,this.red=!1,this.cursor=this.placeholder?0:s.length+1,this.render()}delete(){if(0===this.cursor)return this.bell();let t=this.value.slice(0,this.cursor-1),e=this.value.slice(this.cursor);this.value=`${t}${e}`,this.red=!1,this.moveCursor(-1),this.render()}deleteForward(){if(this.cursor*this.scale>=this.rendered.length||this.placeholder)return this.bell();let t=this.value.slice(0,this.cursor),e=this.value.slice(this.cursor+1);this.value=`${t}${e}`,this.red=!1,this.render()}first(){this.cursor=0,this.render()}last(){this.cursor=this.value.length,this.render()}left(){if(this.cursor<=0||this.placeholder)return this.bell();this.moveCursor(-1),this.render()}right(){if(this.cursor*this.scale>=this.rendered.length||this.placeholder)return this.bell();this.moveCursor(1),this.render()}render(){this.closed||(this.firstRender||(this.outputError&&this.out.write(o.down(a(this.outputError,this.out.columns)-1)+l(this.outputError,this.out.columns)),this.out.write(l(this.outputText,this.out.columns))),super.render(),this.outputError="",this.outputText=[h.symbol(this.done,this.aborted),i.bold(this.msg),h.delimiter(this.done),this.red?i.red(this.rendered):this.rendered].join(" "),this.error&&(this.outputError+=this.errorMsg.split("\n").reduce(((t,e,s)=>t+`\n${s?" ":u.pointerSmall} ${i.red().italic(e)}`),"")),this.out.write(n.line+o.to(0)+this.outputText+o.save+this.outputError+o.restore))}}},4639:(t,e,s)=>{const i=s(1391),r=s(1739),{style:n,clear:o}=s(9016),{cursor:h,erase:l}=s(2698);t.exports=class extends r{constructor(t={}){super(t),this.msg=t.message,this.value=!!t.initial,this.active=t.active||"on",this.inactive=t.inactive||"off",this.initialValue=this.value,this.render()}reset(){this.value=this.initialValue,this.fire(),this.render()}exit(){this.abort()}abort(){this.done=this.aborted=!0,this.fire(),this.render(),this.out.write("\n"),this.close()}submit(){this.done=!0,this.aborted=!1,this.fire(),this.render(),this.out.write("\n"),this.close()}deactivate(){if(!1===this.value)return this.bell();this.value=!1,this.render()}activate(){if(!0===this.value)return this.bell();this.value=!0,this.render()}delete(){this.deactivate()}left(){this.deactivate()}right(){this.activate()}down(){this.deactivate()}up(){this.activate()}next(){this.value=!this.value,this.fire(),this.render()}_(t,e){if(" "===t)this.value=!this.value;else if("1"===t)this.value=!0;else{if("0"!==t)return this.bell();this.value=!1}this.render()}render(){this.closed||(this.firstRender?this.out.write(h.hide):this.out.write(o(this.outputText,this.out.columns)),super.render(),this.outputText=[n.symbol(this.done,this.aborted),i.bold(this.msg),n.delimiter(this.done),this.value?this.inactive:i.cyan().underline(this.inactive),i.gray("/"),this.value?i.cyan().underline(this.active):this.active].join(" "),this.out.write(l.line+h.to(0)+this.outputText))}}},9439:(t,e,s)=>{"use strict";const i=s(8378),r=["suggest","format","onState","validate","onRender","type"],n=()=>{};async function o(t=[],{onSubmit:e=n,onCancel:s=n}={}){const l={},a=o._override||{};let u,c,d,p,m,g;t=[].concat(t);const f=async(t,e,s=!1)=>{if(s||!t.validate||!0===t.validate(e))return t.format?await t.format(e,l):e};for(c of t)if(({name:p,type:m}=c),"function"==typeof m&&(m=await m(u,{...l},c),c.type=m),m){for(let t in c){if(r.includes(t))continue;let e=c[t];c[t]="function"==typeof e?await e(u,{...l},g):e}if(g=c,"string"!=typeof c.message)throw new Error("prompt message is required");if(({name:p,type:m}=c),void 0===i[m])throw new Error(`prompt type (${m}) is not defined`);if(void 0===a[c.name]||(u=await f(c,a[c.name]),void 0===u)){try{u=o._injected?h(o._injected,c.initial):await i[m](c),l[p]=u=await f(c,u,!0),d=await e(c,u,l)}catch(t){d=!await s(c,l)}if(d)return l}else l[p]=u}return l}function h(t,e){const s=t.shift();if(s instanceof Error)throw s;return void 0===s?e:s}t.exports=Object.assign(o,{prompt:o,prompts:i,inject:function(t){o._injected=(o._injected||[]).concat(t)},override:function(t){o._override=Object.assign({},t)}})},8378:(t,e,s)=>{"use strict";const i=e,r=s(635),n=t=>t;function o(t,e,s={}){return new Promise(((i,o)=>{const h=new r[t](e),l=s.onAbort||n,a=s.onSubmit||n,u=s.onExit||n;h.on("state",e.onState||n),h.on("submit",(t=>i(a(t)))),h.on("exit",(t=>i(u(t)))),h.on("abort",(t=>o(l(t))))}))}i.text=t=>o("TextPrompt",t),i.password=t=>(t.style="password",i.text(t)),i.invisible=t=>(t.style="invisible",i.text(t)),i.number=t=>o("NumberPrompt",t),i.date=t=>o("DatePrompt",t),i.confirm=t=>o("ConfirmPrompt",t),i.list=t=>{const e=t.separator||",";return o("TextPrompt",t,{onSubmit:t=>t.split(e).map((t=>t.trim()))})},i.toggle=t=>o("TogglePrompt",t),i.select=t=>o("SelectPrompt",t),i.multiselect=t=>{t.choices=[].concat(t.choices||[]);const e=t=>t.filter((t=>t.selected)).map((t=>t.value));return o("MultiselectPrompt",t,{onAbort:e,onSubmit:e})},i.autocompleteMultiselect=t=>{t.choices=[].concat(t.choices||[]);const e=t=>t.filter((t=>t.selected)).map((t=>t.value));return o("AutocompleteMultiselectPrompt",t,{onAbort:e,onSubmit:e})};const h=(t,e)=>Promise.resolve(e.filter((e=>e.title.slice(0,t.length).toLowerCase()===t.toLowerCase())));i.autocomplete=t=>(t.suggest=t.suggest||h,t.choices=[].concat(t.choices||[]),o("AutocompletePrompt",t))},2866:t=>{"use strict";t.exports=(t,e)=>{if(!t.meta||"escape"===t.name){if(t.ctrl){if("a"===t.name)return"first";if("c"===t.name)return"abort";if("d"===t.name)return"abort";if("e"===t.name)return"last";if("g"===t.name)return"reset"}if(e){if("j"===t.name)return"down";if("k"===t.name)return"up"}return"return"===t.name||"enter"===t.name?"submit":"backspace"===t.name?"delete":"delete"===t.name?"deleteForward":"abort"===t.name?"abort":"escape"===t.name?"exit":"tab"===t.name?"next":"pagedown"===t.name?"nextPage":"pageup"===t.name?"prevPage":"home"===t.name?"home":"end"===t.name?"end":"up"===t.name?"up":"down"===t.name?"down":"right"===t.name?"right":"left"===t.name&&"left"}}},8694:(t,e,s)=>{"use strict";const i=s(9420),{erase:r,cursor:n}=s(2698);t.exports=function(t,e){if(!e)return r.line+n.to(0);let s=0;const o=t.split(/\r?\n/);for(let t of o)s+=1+Math.floor(Math.max([...i(t)].length-1,0)/e);return r.lines(s)}},2163:t=>{"use strict";t.exports=(t,e,s)=>{s=s||e;let i=Math.min(e-s,t-Math.floor(s/2));return i<0&&(i=0),{startIndex:i,endIndex:Math.min(i+s,e)}}},4815:t=>{"use strict";const e={arrowUp:"↑",arrowDown:"↓",arrowLeft:"←",arrowRight:"→",radioOn:"◉",radioOff:"◯",tick:"✔",cross:"✖",ellipsis:"…",pointerSmall:"›",line:"─",pointer:"❯"},s={arrowUp:e.arrowUp,arrowDown:e.arrowDown,arrowLeft:e.arrowLeft,arrowRight:e.arrowRight,radioOn:"(*)",radioOff:"( )",tick:"√",cross:"×",ellipsis:"...",pointerSmall:"»",line:"─",pointer:">"},i="win32"===process.platform?s:e;t.exports=i},9016:(t,e,s)=>{"use strict";t.exports={action:s(2866),clear:s(8694),style:s(424),strip:s(9420),figures:s(4815),lines:s(4985),wrap:s(8524),entriesToDisplay:s(2163)}},4985:(t,e,s)=>{"use strict";const i=s(9420);t.exports=function(t,e){let s=String(i(t)||"").split(/\r?\n/);return e?s.map((t=>Math.ceil(t.length/e))).reduce(((t,e)=>t+e)):s.length}},9420:t=>{"use strict";t.exports=t=>{const e=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[a-zA-Z\\d]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))"].join("|"),s=new RegExp(e,"g");return"string"==typeof t?t.replace(s,""):t}},424:(t,e,s)=>{"use strict";const i=s(1391),r=s(4815),n=Object.freeze({password:{scale:1,render:t=>"*".repeat(t.length)},emoji:{scale:2,render:t=>"😃".repeat(t.length)},invisible:{scale:0,render:t=>""},default:{scale:1,render:t=>`${t}`}}),o=Object.freeze({aborted:i.red(r.cross),done:i.green(r.tick),exited:i.yellow(r.cross),default:i.cyan("?")});t.exports={styles:n,render:t=>n[t]||n.default,symbols:o,symbol:(t,e,s)=>e?o.aborted:s?o.exited:t?o.done:o.default,delimiter:t=>i.gray(t?r.ellipsis:r.pointerSmall),item:(t,e)=>i.gray(t?e?r.pointerSmall:"+":r.line)}},8524:t=>{"use strict";t.exports=(t,e={})=>{const s=Number.isSafeInteger(parseInt(e.margin))?new Array(parseInt(e.margin)).fill(" ").join(""):e.margin||"",i=e.width;return(t||"").split(/\r?\n/g).map((t=>t.split(/\s+/g).reduce(((t,e)=>(e.length+s.length>=i||t[t.length-1].length+e.length+1<i?t[t.length-1]+=` ${e}`:t.push(`${s}${e}`),t)),[s]).join("\n"))).join("\n")}},2698:t=>{"use strict";const e={to:(t,e)=>e?`[${e+1};${t+1}H`:`[${t+1}G`,move(t,e){let s="";return t<0?s+=`[${-t}D`:t>0&&(s+=`[${t}C`),e<0?s+=`[${-e}A`:e>0&&(s+=`[${e}B`),s},up:(t=1)=>`[${t}A`,down:(t=1)=>`[${t}B`,forward:(t=1)=>`[${t}C`,backward:(t=1)=>`[${t}D`,nextLine:(t=1)=>"[E".repeat(t),prevLine:(t=1)=>"[F".repeat(t),left:"[G",hide:"[?25l",show:"[?25h",save:"7",restore:"8"},s={screen:"[2J",up:(t=1)=>"[1J".repeat(t),down:(t=1)=>"[J".repeat(t),line:"[2K",lineEnd:"[K",lineStart:"[1K",lines(t){let s="";for(let i=0;i<t;i++)s+=this.line+(i<t-1?e.up():"");return t&&(s+=e.left),s}};t.exports={cursor:e,scroll:{up:(t=1)=>"[S".repeat(t),down:(t=1)=>"[T".repeat(t)},erase:s,beep:""}},8614:t=>{"use strict";t.exports=require("events")},1058:t=>{"use strict";t.exports=require("readline")}},e={};function s(i){if(e[i])return e[i].exports;var r=e[i]={exports:{}};return t[i](r,r.exports,s),r.exports}(()=>{"use strict";var t=s(8614);function e(t){return null==t?[]:Array.isArray(t)?t:[t]}function i(t,e,s,i){var r,n=t[e],o=~i.string.indexOf(e)?null==s||!0===s?"":String(s):"boolean"==typeof s?s:~i.boolean.indexOf(e)?"false"!==s&&("true"===s||(t._.push(0*(r=+s)==0?r:s),!!s)):0*(r=+s)==0?r:s;t[e]=null==n?o:Array.isArray(n)?n.concat(o):[n,o]}const r=t=>t.replace(/[<[].+/,"").trim(),n=t=>t.sort(((t,e)=>t.length>e.length?-1:1))[0],o=(t,e)=>t.length>=e?t:`${t}${" ".repeat(e-t.length)}`,h=(t,e,s)=>{let i,r=0,n=e.length,o=t;for(;r<n;++r)i=o[e[r]],o=o[e[r]]=r===n-1?s:null!=i?i:!~e[r+1].indexOf(".")&&+e[r+1]>-1?[]:{}},l=(t,e)=>{for(const s of Object.keys(e)){const i=e[s];i.shouldTransform&&(t[s]=Array.prototype.concat.call([],t[s]),"function"==typeof i.transformFunction&&(t[s]=t[s].map(i.transformFunction)))}},a=t=>t.split(".").map(((t,e)=>0===e?t.replace(/([a-z])-([a-z])/g,((t,e,s)=>e+s.toUpperCase())):t)).join(".");class u extends Error{constructor(t){super(t),this.name=this.constructor.name,"function"==typeof Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error(t).stack}}class c{constructor(t,e,s){this.rawName=t,this.description=e,this.config=Object.assign({},s),t=t.replace(/\.\*/g,""),this.negated=!1,this.names=r(t).split(",").map((t=>{let e=t.trim().replace(/^-{1,2}/,"");return e.startsWith("no-")&&(this.negated=!0,e=e.replace(/^no-/,"")),a(e)})).sort(((t,e)=>t.length>e.length?1:-1)),this.name=this.names[this.names.length-1],this.negated&&(this.config.default=!0),t.includes("<")?this.required=!0:t.includes("[")?this.required=!1:this.isBoolean=!0}}const d=process.argv,p=`${process.platform}-${process.arch} node-${process.version}`;class m{constructor(t,e,s={},i){this.rawName=t,this.description=e,this.config=s,this.cli=i,this.options=[],this.aliasNames=[],this.name=r(t),this.args=(t=>{const e=/<([^>]+)>/g,s=/\[([^\]]+)\]/g,i=[],r=t=>{let e=!1,s=t[1];return s.startsWith("...")&&(s=s.slice(3),e=!0),{required:t[0].startsWith("<"),value:s,variadic:e}};let n,o;for(;n=e.exec(t);)i.push(r(n));for(;o=s.exec(t);)i.push(r(o));return i})(t),this.examples=[]}usage(t){return this.usageText=t,this}allowUnknownOptions(){return this.config.allowUnknownOptions=!0,this}ignoreOptionDefaultValue(){return this.config.ignoreOptionDefaultValue=!0,this}version(t,e="-v, --version"){return this.versionNumber=t,this.option(e,"Display version number"),this}example(t){return this.examples.push(t),this}option(t,e,s){const i=new c(t,e,s);return this.options.push(i),this}alias(t){return this.aliasNames.push(t),this}action(t){return this.commandAction=t,this}isMatched(t){return this.name===t||this.aliasNames.includes(t)}get isDefaultCommand(){return""===this.name||this.aliasNames.includes("!")}get isGlobalCommand(){return this instanceof g}hasOption(t){return t=t.split(".")[0],this.options.find((e=>e.names.includes(t)))}outputHelp(){const{name:t,commands:e}=this.cli,{versionNumber:s,options:i,helpCallback:r}=this.cli.globalCommand;let h=[{body:`${t}${s?`/${s}`:""}`}];if(h.push({title:"Usage",body:`  $ ${t} ${this.usageText||this.rawName}`}),(this.isGlobalCommand||this.isDefaultCommand)&&e.length>0){const s=n(e.map((t=>t.rawName)));h.push({title:"Commands",body:e.map((t=>`  ${o(t.rawName,s.length)}  ${t.description}`)).join("\n")}),h.push({title:"For more info, run any command with the `--help` flag",body:e.map((e=>`  $ ${t}${""===e.name?"":` ${e.name}`} --help`)).join("\n")})}const l=this.isGlobalCommand?i:[...this.options,...i||[]];if(l.length>0){const t=n(l.map((t=>t.rawName)));h.push({title:"Options",body:l.map((e=>`  ${o(e.rawName,t.length)}  ${e.description} ${void 0===e.config.default?"":`(default: ${e.config.default})`}`)).join("\n")})}this.examples.length>0&&h.push({title:"Examples",body:this.examples.map((e=>"function"==typeof e?e(t):e)).join("\n")}),r&&(h=r(h)||h),console.log(h.map((t=>t.title?`${t.title}:\n${t.body}`:t.body)).join("\n\n"))}outputVersion(){const{name:t}=this.cli,{versionNumber:e}=this.cli.globalCommand;e&&console.log(`${t}/${e} ${p}`)}checkRequiredArgs(){const t=this.args.filter((t=>t.required)).length;if(this.cli.args.length<t)throw new u(`missing required args for command \`${this.rawName}\``)}checkUnknownOptions(){const{options:t,globalCommand:e}=this.cli;if(!this.config.allowUnknownOptions)for(const s of Object.keys(t))if("--"!==s&&!this.hasOption(s)&&!e.hasOption(s))throw new u(`Unknown option \`${s.length>1?`--${s}`:`-${s}`}\``)}checkOptionValue(){const{options:t,globalCommand:e}=this.cli,s=[...e.options,...this.options];for(const e of s){const i=t[e.name.split(".")[0]];if(e.required){const t=s.some((t=>t.negated&&t.names.includes(e.name)));if(!0===i||!1===i&&!t)throw new u(`option \`${e.rawName}\` value is missing`)}}}}class g extends m{constructor(t){super("@@global@@","",{},t)}}var f=Object.assign;class v extends t.EventEmitter{constructor(t=""){super(),this.name=t,this.commands=[],this.rawArgs=[],this.args=[],this.options={},this.globalCommand=new g(this),this.globalCommand.usage("<command> [options]")}usage(t){return this.globalCommand.usage(t),this}command(t,e,s){const i=new m(t,e||"",s,this);return i.globalCommand=this.globalCommand,this.commands.push(i),i}option(t,e,s){return this.globalCommand.option(t,e,s),this}help(t){return this.globalCommand.option("-h, --help","Display this message"),this.globalCommand.helpCallback=t,this.showHelpOnExit=!0,this}version(t,e="-v, --version"){return this.globalCommand.version(t,e),this.showVersionOnExit=!0,this}example(t){return this.globalCommand.example(t),this}outputHelp(){this.matchedCommand?this.matchedCommand.outputHelp():this.globalCommand.outputHelp()}outputVersion(){this.globalCommand.outputVersion()}setParsedInfo({args:t,options:e},s,i){return this.args=t,this.options=e,s&&(this.matchedCommand=s),i&&(this.matchedCommandName=i),this}unsetMatchedCommand(){this.matchedCommand=void 0,this.matchedCommandName=void 0}parse(t=d,{run:e=!0}={}){this.rawArgs=t,this.name||(this.name=t[1]?(t=>{const e=/([^\\\/]+)$/.exec(t);return e?e[1]:""})(t[1]):"cli");let s=!0;for(const e of this.commands){const i=this.mri(t.slice(2),e),r=i.args[0];if(e.isMatched(r)){s=!1;const t=f(f({},i),{args:i.args.slice(1)});this.setParsedInfo(t,e,r),this.emit(`command:${r}`,e)}}if(s)for(const e of this.commands)if(""===e.name){s=!1;const i=this.mri(t.slice(2),e);this.setParsedInfo(i,e),this.emit("command:!",e)}if(s){const e=this.mri(t.slice(2));this.setParsedInfo(e)}this.options.help&&this.showHelpOnExit&&(this.outputHelp(),e=!1,this.unsetMatchedCommand()),this.options.version&&this.showVersionOnExit&&(this.outputVersion(),e=!1,this.unsetMatchedCommand());const i={args:this.args,options:this.options};return e&&this.runMatchedCommand(),!this.matchedCommand&&this.args[0]&&this.emit("command:*"),i}mri(t,s){const r=[...this.globalCommand.options,...s?s.options:[]],n=(t=>{const e={alias:{},boolean:[]};for(const[s,i]of t.entries())i.names.length>1&&(e.alias[i.names[0]]=i.names.slice(1)),i.isBoolean&&(i.negated&&t.some(((t,e)=>e!==s&&t.names.some((t=>i.names.includes(t)))&&"boolean"==typeof t.required))||e.boolean.push(i.names[0]));return e})(r);let o=[];const u=t.indexOf("--");u>-1&&(o=t.slice(u+1),t=t.slice(0,u));let c=function(t,s){s=s||{};var r,n,o,h,l,a={_:[]},u=0,c=0,d=0,p=(t=t||[]).length;const m=void 0!==s.alias,g=void 0!==s.unknown,f=void 0!==s.default;if(s.alias=s.alias||{},s.string=e(s.string),s.boolean=e(s.boolean),m)for(r in s.alias)for(n=s.alias[r]=e(s.alias[r]),u=0;u<n.length;u++)(s.alias[n[u]]=n.concat(r)).splice(u,1);for(u=s.boolean.length;u-- >0;)for(c=(n=s.alias[s.boolean[u]]||[]).length;c-- >0;)s.boolean.push(n[c]);for(u=s.string.length;u-- >0;)for(c=(n=s.alias[s.string[u]]||[]).length;c-- >0;)s.string.push(n[c]);if(f)for(r in s.default)if(h=typeof s.default[r],n=s.alias[r]=s.alias[r]||[],void 0!==s[h])for(s[h].push(r),u=0;u<n.length;u++)s[h].push(n[u]);const v=g?Object.keys(s.alias):[];for(u=0;u<p;u++){if("--"===(o=t[u])){a._=a._.concat(t.slice(++u));break}for(c=0;c<o.length&&45===o.charCodeAt(c);c++);if(0===c)a._.push(o);else if("no-"===o.substring(c,c+3)){if(h=o.substring(c+3),g&&!~v.indexOf(h))return s.unknown(o);a[h]=!1}else{for(d=c+1;d<o.length&&61!==o.charCodeAt(d);d++);for(h=o.substring(c,d),l=o.substring(++d)||u+1===p||45===(""+t[u+1]).charCodeAt(0)||t[++u],n=2===c?[h]:h,d=0;d<n.length;d++){if(h=n[d],g&&!~v.indexOf(h))return s.unknown("-".repeat(c)+h);i(a,h,d+1<n.length||l,s)}}}if(f)for(r in s.default)void 0===a[r]&&(a[r]=s.default[r]);if(m)for(r in a)for(n=s.alias[r]||[];n.length>0;)a[n.shift()]=a[r];return a}(t,n);c=Object.keys(c).reduce(((t,e)=>f(f({},t),{[a(e)]:c[e]})),{_:[]});const d=c._,p={"--":o},m=s&&s.config.ignoreOptionDefaultValue?s.config.ignoreOptionDefaultValue:this.globalCommand.config.ignoreOptionDefaultValue;let g=Object.create(null);for(const t of r){if(!m&&void 0!==t.config.default)for(const e of t.names)p[e]=t.config.default;Array.isArray(t.config.type)&&void 0===g[t.name]&&(g[t.name]=Object.create(null),g[t.name].shouldTransform=!0,g[t.name].transformFunction=t.config.type[0])}for(const t of Object.keys(c))if("_"!==t){const e=t.split(".");h(p,e,c[t]),l(p,g)}return{args:d,options:p}}runMatchedCommand(){const{args:t,options:e,matchedCommand:s}=this;if(!s||!s.commandAction)return;s.checkUnknownOptions(),s.checkOptionValue(),s.checkRequiredArgs();const i=[];return s.args.forEach(((e,s)=>{e.variadic?i.push(t.slice(s)):i.push(t[s])})),i.push(e),s.commandAction.apply(this,i)}}const b=(t="")=>new v(t);"undefined"!=typeof module&&(module.exports=b,module.exports.default=b,module.exports.cac=b);const w=b;var y=s(8809),x=w().parse();console.log(JSON.stringify(x,null,2));var S,O,M,C,$={type:"number",name:"value",message:"how old are you",validate:function(t){return!(t<18)||"Nightclub is 18+ only"}};S=void 0,O=void 0,C=function(){return function(t,e){var s,i,r,n,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return n={next:h(0),throw:h(1),return:h(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function h(n){return function(h){return function(n){if(s)throw new TypeError("Generator is already executing.");for(;o;)try{if(s=1,i&&(r=2&n[0]?i.return:n[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,n[1])).done)return r;switch(i=0,r&&(n=[2&n[0],r.value]),n[0]){case 0:case 1:r=n;break;case 4:return o.label++,{value:n[1],done:!1};case 5:o.label++,i=n[1],n=[0];continue;case 7:n=o.ops.pop(),o.trys.pop();continue;default:if(!((r=(r=o.trys).length>0&&r[r.length-1])||6!==n[0]&&2!==n[0])){o=0;continue}if(3===n[0]&&(!r||n[1]>r[0]&&n[1]<r[3])){o.label=n[1];break}if(6===n[0]&&o.label<r[1]){o.label=r[1],r=n;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(n);break}r[2]&&o.ops.pop(),o.trys.pop();continue}n=e.call(t,o)}catch(t){n=[6,t],i=0}finally{s=r=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,h])}}}(this,(function(t){switch(t.label){case 0:return[4,y.prompts.number($)];case 1:return t.sent(),[2]}}))},new((M=void 0)||(M=Promise))((function(t,e){function s(t){try{r(C.next(t))}catch(t){e(t)}}function i(t){try{r(C.throw(t))}catch(t){e(t)}}function r(e){var r;e.done?t(e.value):(r=e.value,r instanceof M?r:new M((function(t){t(r)}))).then(s,i)}r((C=C.apply(S,O||[])).next())}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,